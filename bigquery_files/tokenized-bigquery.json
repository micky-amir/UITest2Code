{"repo_name": "user_with_email_logs_onto_the_site", "name for description": "user with email logs onto the site", "comments": "When(\"^user with email \\\"([^\\\"]*)\\\" logs onto the site$\")", "url": true, "content": "    public void user_with_email_logs_onto_the_site(String email) throws Throwable {         final User user = new User();         user.setEmail(email);         user.setPasscode(PASS_CODE);          if (runtimeScope.getWebDriver() != null){             runtimeScope.getWebDriver().quit();             runtimeScope.setWebDriver(null);         }         final WebDriver webDriver = webDriverFactory.newInstance(runtimeScope.getScenario());         runtimeScope.setWebDriver(webDriver);         webDriver.get(gymBookerUrl);          logonToGym.logon(user);     }", "path": "src/test/java/uk/co/hmtt/cukes/core/steps/Booking.java"}
{"repo_name": "the_user_logs_onto_the_mobile_site", "name for description": "the user logs onto the mobile site", "comments": "When(\"^the user \\\"(.*?)\\\"  logs onto the mobile site$\")", "url": true, "content": "    public void the_user_logs_onto_the_mobile_site(String email) throws Throwable {         final User user = new User();         user.setEmail(email);         user.setPasscode(PASS_CODE);          if (runtimeScope.getWebDriver() != null){             runtimeScope.getWebDriver().quit();             runtimeScope.setWebDriver(null);         }         final WebDriver webDriver = webDriverFactory.newInstance(runtimeScope.getScenario());          final Dimension dimension = new Dimension(420, 600);         webDriver.manage().window().setSize(dimension);          runtimeScope.setWebDriver(webDriver);         webDriver.get(gymBookerUrl);          logonToGym.logon(user);     }", "path": "src/test/java/uk/co/hmtt/cukes/core/steps/Mobile.java"}
{"repo_name": "the_user_cannot_access_site", "name for description": "the user cannot access site", "comments": "Then(\"^the user cannot access site$\")", "url": true, "content": "    public void the_user_cannot_access_site() throws Throwable {         runtimeScope.getWebDriver().get(gymBookerUrl);         ((CukesWebDriver)runtimeScope.getWebDriver()).takeScreenShot();         assertThat(runtimeScope.getWebDriver().getCurrentUrl(), containsString(\"login\"));     }", "path": "src/test/java/uk/co/hmtt/cukes/core/steps/Logon.java"}
{"repo_name": "testWSO2FormatTestCase", "name for description": "test WSO2 Format Test Case", "comments": "Test(groups = \"\", description = \"\")", "url": true, "content": "    public void testWSO2FormatTestCase() throws Exception {         //METHOD:testLoginTestCase:start         //WINDOW:apimng.login         driver.get(baseUrl + \"/publisher/design\");         driver.findElement(By.id(UIElementMapper.getElement(\"apimng.login.username.id\"))).clear(); //  modified by QAA Tweek          driver.findElement(By.id(UIElementMapper.getElement(\"apimng.login.username.id\"))).sendKeys(\"admin\"); //  modified by QAA Tweek          driver.findElement(By.id(UIElementMapper.getElement(\"apimng.login.pass.id\"))).clear(); //  modified by QAA Tweek          driver.findElement(By.id(UIElementMapper.getElement(\"apimng.login.pass.id\"))).sendKeys(\"admin\"); //  modified by QAA Tweek          driver.findElement(By.id(UIElementMapper.getElement(\"apimng.login.loginbutton.id\"))).click(); //  modified by QAA Tweek          //METHOD:testLoginTestCase:end         //METHOD:testMainWindowTestCase:start         //WINDOW:apimng.main         for (int second = 0; ; second++) {             if (second >= 60) {                 fail(\"timeout\");             }             try {                 if (isElementPresent(By.linkText(UIElementMapper.getElement(\"apimng.main.allstatistics.linktext\")))) { //  modified by QAA Tweek                      break;                 }             } catch (Exception e) {             }             Thread.sleep(1000);         }          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.allstatistics.linktext\"))).click(); //  modified by QAA Tweek          for (int second = 0; ; second++) {             if (second >= 60) {                 fail(\"timeout\");             }             try {                 if (isElementPresent(By.linkText(UIElementMapper.getElement(\"apimng.main.apiresponsetimes.linktext\")))) { //  modified by QAA Tweek                      break;                 }             } catch (Exception e) {             }             Thread.sleep(1000);         }          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apiresponsetimes.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apiusagebyresourcepath.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apiusagebyuser.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.browse.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.subscriptions.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.statistics.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apisubscriptions.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apiusage.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apiresponsetimes.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.apilastaccesstimes.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.browse.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.browse.linktext\"))).click(); //  modified by QAA Tweek          driver.findElement(By.linkText(UIElementMapper.getElement(\"apimng.main.add.linktext\"))).click(); //  modified by QAA Tweek          //METHOD:testMainWindowTestCase:end     }", "path": "src/main/resources/WSO2FormatTestCaseTweakP1.java"}
{"repo_name": "testWSO2FormatTestCase", "name for description": "test WSO2 Format Test Case", "comments": "Test(groups = \"\", description = \"\")", "url": true, "content": "    public void testWSO2FormatTestCase() throws Exception {         //METHOD:testLoginTestCase:start         //WINDOW:apimng.login         driver.get(baseUrl + \"/publisher/design\");         driver.findElement(By.id(\"username\")).clear();         driver.findElement(By.id(\"username\")).sendKeys(\"admin\");         driver.findElement(By.id(\"pass\")).clear();         driver.findElement(By.id(\"pass\")).sendKeys(\"admin\");         driver.findElement(By.id(\"loginButton\")).click();         //METHOD:testLoginTestCase:end         //WINDOW:apimng.main         //METHOD:testMainWindowTestCase:start         for (int second = 0; ; second++) {             if (second >= 60) {                 fail(\"timeout\");             }             try {                 if (isElementPresent(By.linkText(\"All Statistics\"))) {                     break;                 }             } catch (Exception e) {             }             Thread.sleep(1000);         }          driver.findElement(By.linkText(\"All Statistics\")).click();         for (int second = 0; ; second++) {             if (second >= 60) {                 fail(\"timeout\");             }             try {                 if (isElementPresent(By.linkText(\"API Response Times\"))) {                     break;                 }             } catch (Exception e) {             }             Thread.sleep(1000);         }          driver.findElement(By.linkText(\"API Response Times\")).click();         driver.findElement(By.linkText(\"API Usage by Resource Path\")).click();         driver.findElement(By.linkText(\"API Usage by User\")).click();         driver.findElement(By.linkText(\"Browse\")).click();         driver.findElement(By.linkText(\"Subscriptions\")).click();         driver.findElement(By.linkText(\"Statistics\")).click();         driver.findElement(By.linkText(\"API Subscriptions\")).click();         driver.findElement(By.linkText(\"API Usage\")).click();         driver.findElement(By.linkText(\"API Response Times\")).click();         driver.findElement(By.linkText(\"API Last Access Times\")).click();         driver.findElement(By.linkText(\"Browse\")).click();         driver.findElement(By.linkText(\"Browse\")).click();         driver.findElement(By.linkText(\"Add\")).click();         //METHOD:testMainWindowTestCase:end     }", "path": "src/main/resources/aaWSO2FormatTestCase.java"}
{"repo_name": "navigate_to_web_page_headless", "name for description": "navigate to web page headless", "comments": "Page_up_home up_page;Page_jambox speakers_page;Page_Store store_page; Page_Support support_page;Page_headsets_home headsets_page;Pages_Css page_cssurl": true, "content": "    public void navigate_to_web_page_headless(String url, String Suburl) throws InterruptedException{         Thread.sleep(500);         String given_url= url + Suburl;         Print_out(\"==================  going to insert given URL:  \"+given_url);         driver.get(url+Suburl);         String getter_url= driver.getCurrentUrl();         Print_out(\"==================  Verified...   current URL:  \"+getter_url);         Print_out(\"\");         print_page_title_h();     }", "path": "src/test/java/com/jawbone/lib/Env_html.java"}
{"repo_name": "Navigate_to_intern_web_page", "name for description": "Navigate to intern web page", "comments": "******************************************************************************* NAME: PARAMETERS: USED: *******************************************************************************", "url": true, "content": "    public void Navigate_to_intern_web_page(String url, String Suburl) throws InterruptedException{         Thread.sleep(500);         String given_url= url + Suburl;         Print_out(\"==================  going to insert given URL:  \"+given_url);         //isPromoSale_Banner_Off();         driver.get(url+Suburl);         String getter_url= driver.getCurrentUrl();         Print_out(\"==================  Verified...   current URL:  \"+getter_url);         Print_out(\"Success ...\");     }", "path": "src/test/java/com/jawbone/lib/Env.java"}
{"repo_name": "testSignUpFailedOnInvalidPassword", "name for description": "test Sign Up Failed On Invalid Password", "comments": "Test", "url": true, "content": "  public void testSignUpFailedOnInvalidPassword() throws Exception {     driver.get(baseUrl + \"/iBase/signup\");     driver.findElement(By.id(\"firstName\")).clear();     driver.findElement(By.id(\"firstName\")).sendKeys(\"Jake\");     driver.findElement(By.id(\"lastName\")).clear();     driver.findElement(By.id(\"lastName\")).sendKeys(\"Krammer\");     driver.findElement(By.id(\"email\")).clear();     driver.findElement(By.id(\"email\")).sendKeys(\"jake123@asu.edu\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"pass1\");     driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();     assertEquals(\"password must be atleast 6 characters!\", driver.findElement(By.cssSelector(\"p\")).getText());   }", "path": "src/test/java/com/iBase/web/SignUpFailedPasswordTest.java"}
{"repo_name": "testGoToSignUp", "name for description": "test Go To Sign Up", "comments": "Test", "url": true, "content": "  public void testGoToSignUp() throws Exception {     driver.get(baseUrl + \"/iBase/login\");     driver.findElement(By.cssSelector(\"a > font\")).click();     assertEquals(\"iBase - Registration\", driver.findElement(By.cssSelector(\"h2\")).getText());   }", "path": "src/test/java/com/iBase/web/SignUpTest.java"}
{"repo_name": "testSignUpFailedOnInvalidEmail", "name for description": "test Sign Up Failed On Invalid Email", "comments": "Test", "url": true, "content": "  public void testSignUpFailedOnInvalidEmail() throws Exception {     driver.get(baseUrl + \"/iBase/signup\");     driver.findElement(By.id(\"firstName\")).clear();     driver.findElement(By.id(\"firstName\")).sendKeys(\"Jake\");     driver.findElement(By.id(\"lastName\")).clear();     driver.findElement(By.id(\"lastName\")).sendKeys(\"Krammer\");     driver.findElement(By.id(\"email\")).clear();     driver.findElement(By.id(\"email\")).sendKeys(\"jake123\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"password1\");     driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();     assertEquals(\"invalid email address!\", driver.findElement(By.cssSelector(\"p\")).getText());   }", "path": "src/test/java/com/iBase/web/SignUpFailedEmailTest.java"}
{"repo_name": "testUploadFailedOnWrongImageType", "name for description": "test Upload Failed On Wrong Image Type", "comments": "Test", "url": true, "content": "  public void testUploadFailedOnWrongImageType() throws Exception { \t  driver.get(baseUrl + \"/iBase/login\"); \t  driver.findElement(By.name(\"userId\")).clear(); \t  driver.findElement(By.name(\"userId\")).sendKeys(\"jake@asu.edu\"); \t  driver.findElement(By.name(\"password\")).clear(); \t  driver.findElement(By.name(\"password\")).sendKeys(\"password1\");   \t  driver.findElement(By.name(\"submit\")).click();   \t  assertEquals(\"iBase - Image Database\", driver.getTitle());   \t  driver.get(baseUrl + \"/iBase/upload\");   \t  driver.findElement(By.name(\"imageFile\")).sendKeys(\"/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif\");   \t  driver.findElement(By.id(\"name\")).sendKeys(\"gif image\");   \t  driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();   \t  assertEquals(\"Sorry! Invalid File!\", driver.findElement(By.cssSelector(\"p\")).getText());   \t  assertEquals(\"iBase - Image Database\", driver.getTitle());   \t  assertEquals(\"Upload\", driver.findElement(By.linkText(\"Upload\")).getText());   \t  assertEquals(\"Settings\", driver.findElement(By.linkText(\"Settings\")).getText());   \t  assertEquals(\"Logout\", driver.findElement(By.linkText(\"Logout\")).getText());   \t  assertEquals(\"Share your photo with the world!\", driver.findElement(By.cssSelector(\"h3\")).getText());   \t  assertEquals(\"\", driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).getText());   \t  assertEquals(\"Title:\", driver.findElement(By.id(\"imageFile\")).getText());   \t  assertEquals(\"Home\", driver.findElement(By.linkText(\"Home\")).getText());   }", "path": "src/test/java/com/iBase/web/UploadFailedTest.java"}
{"repo_name": "testLoginFailedOnInvalidUsernameAndPassword", "name for description": "test Login Failed On Invalid Username And Password", "comments": "Test", "url": true, "content": "  public void testLoginFailedOnInvalidUsernameAndPassword() throws Exception {     driver.get(baseUrl + \"/iBase/login\");     driver.findElement(By.name(\"userId\")).clear();     driver.findElement(By.name(\"userId\")).sendKeys(\"jake1234@asu.edu\");     driver.findElement(By.name(\"password\")).clear();     driver.findElement(By.name(\"password\")).sendKeys(\"password1\");     driver.findElement(By.name(\"submit\")).click();     assertEquals(\"Invalid username and password!\", driver.findElement(By.cssSelector(\"div.error\")).getText());   }", "path": "src/test/java/com/iBase/web/LoginFailedTest.java"}
{"repo_name": "testSettingsFailedOnWrongImageType", "name for description": "test Settings Failed On Wrong Image Type", "comments": "Test", "url": true, "content": "  public void testSettingsFailedOnWrongImageType() throws Exception { \t  driver.get(baseUrl + \"/iBase/login\"); \t  driver.findElement(By.name(\"userId\")).clear(); \t  driver.findElement(By.name(\"userId\")).sendKeys(\"jake@asu.edu\"); \t  driver.findElement(By.name(\"password\")).clear(); \t  driver.findElement(By.name(\"password\")).sendKeys(\"password1\"); \t  driver.findElement(By.name(\"submit\")).click(); \t  assertEquals(\"iBase - Image Database\", driver.getTitle()); \t  driver.get(baseUrl + \"/iBase/settings\"); \t  driver.findElement(By.name(\"profileImageFile\")).sendKeys(\"/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif\"); \t  driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click(); \t  assertEquals(\"Home\", driver.findElement(By.linkText(\"Home\")).getText()); \t  assertEquals(\"Upload\", driver.findElement(By.linkText(\"Upload\")).getText()); \t  assertEquals(\"Settings\", driver.findElement(By.linkText(\"Settings\")).getText()); \t  assertEquals(\"iBase - Image Database\", driver.getTitle()); \t  assertEquals(\"Logout\", driver.findElement(By.linkText(\"Logout\")).getText()); \t  assertEquals(\"Update your profile picture!\", driver.findElement(By.cssSelector(\"h3\")).getText()); \t  assertEquals(\"\", driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).getText()); \t  assertEquals(\"Sorry! Invalid File!\", driver.findElement(By.cssSelector(\"p\")).getText());   }", "path": "src/test/java/com/iBase/web/SettingsFailedTest.java"}
{"repo_name": "testSignUpFailedOnUsernameTaken", "name for description": "test Sign Up Failed On Username Taken", "comments": "Test", "url": true, "content": "  public void testSignUpFailedOnUsernameTaken() throws Exception {     driver.get(baseUrl + \"/iBase/signup\");     driver.findElement(By.id(\"firstName\")).clear();     driver.findElement(By.id(\"firstName\")).sendKeys(\"Jake\");     driver.findElement(By.id(\"lastName\")).clear();     driver.findElement(By.id(\"lastName\")).sendKeys(\"Krammer\");     driver.findElement(By.id(\"email\")).clear();     driver.findElement(By.id(\"email\")).sendKeys(\"jake@asu.edu\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"password1\");     driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();     assertEquals(\"Username Taken!\", driver.findElement(By.cssSelector(\"p\")).getText());   }", "path": "src/test/java/com/iBase/web/SignUpFailedUsernameTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason = \"not tested\")", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason = \"not tested\")", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testPromoteToInReview", "name for description": "test Promote To In Review", "comments": "Test", "url": true, "content": "\tpublic void testPromoteToInReview() throws Exception { \t\tdriver.get(baseUrl + \"/publisher/assets/gadget/\"); \t\tdriver.findElement(By.xpath(\"//a[contains(text(),\\\"userAddedAsset\\\")]\")).click(); \t\tdriver.findElement(By.linkText(\"Life Cycle\")).click(); \t\tdriver.findElement(By.id(\"In-Review\")).click(); \t\tList<WebElement> rows = driver.findElements(By.xpath(\"//table[@id='lc-history']//tr\")); \t\tWebElement val = rows.get(0).findElement(By.xpath(\"./td[2]\")); \t\tSystem.out.println(val.getText()); \t\tassertEquals(val.getText(), \"supertenantuser changed the asset from Created to In-Review\"); \t}", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToInReview.java"}
{"repo_name": "testCreateSuperTenantUser", "name for description": "test Create Super Tenant User", "comments": "Test", "url": true, "content": "  public void testCreateSuperTenantUser() throws Exception {     driver.get(baseUrl + \"/store/\");     driver.findElement(By.id(\"btn-register\")).click();     driver.findElement(By.id(\"reg-username\")).clear();     driver.findElement(By.id(\"reg-username\")).sendKeys(\"supertenantuser\");     driver.findElement(By.id(\"reg-password\")).clear();     driver.findElement(By.id(\"reg-password\")).sendKeys(\"supertenantuser\");     driver.findElement(By.id(\"reg-password2\")).clear();     driver.findElement(By.id(\"reg-password2\")).sendKeys(\"supertenantuser\");     driver.findElement(By.id(\"registrationSubmit\")).click();     try {       assertEquals(\"supertenantuser\", driver.findElement(By.cssSelector(\"ul.nav li a.dropdown-toggle\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/CreateSuperTenantUser.java"}
{"repo_name": "testPromoteToPublishedTenant", "name for description": "test Promote To Published Tenant", "comments": "Test", "url": true, "content": "  public void testPromoteToPublishedTenant() throws Exception {     driver.get(baseUrl + \"/publisher/assets/gadget/\");     driver.findElement(By.xpath(\"//a[contains(text(),\\\"userAddedAsset\\\")]\")).click();     driver.findElement(By.linkText(\"Life Cycle\")).click();     driver.findElement(By.id(\"Published\")).click(); \tList<WebElement> rows = driver.findElements(By.xpath(\"//table[@id='lc-history']//tr\")); \tWebElement val = rows.get(0).findElement(By.xpath(\"./td[2]\")); \tassertEquals(val.getText(), \"tenantAdmin changed the asset from In-Review to Published\");   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToPublishedTenant.java"}
{"repo_name": "testSortByPopDefaults", "name for description": "test Sort By Pop Defaults", "comments": "Test", "url": true, "content": "\tpublic void testSortByPopDefaults() throws Exception { \t\tdriver.get(baseUrl + \"/store/assets/gadget\"); \t\tdriver.findElement(By.cssSelector(\"i.icon-star\")).click(); \t\tassertEquals(12, driver.findElements(By.cssSelector(\".asset-icon\")).size());  \t\tJavascriptExecutor jsx = (JavascriptExecutor) driver; \t\tjsx.executeScript(\"window.scrollBy(0,5000)\", \"\"); \t\tassertEquals(16, driver.findElements(By.cssSelector(\".asset-icon\")).size()); \t}", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestSortByPopDefaults.java"}
{"repo_name": "testLoginAsSuperTenantUser", "name for description": "test Login As Super Tenant User", "comments": "Test", "url": true, "content": "  public void testLoginAsSuperTenantUser() throws Exception {     driver.get(baseUrl + \"/store/assets/gadget\");     driver.findElement(By.linkText(\"Sign in\")).click();     driver.findElement(By.id(\"username\")).clear();     driver.findElement(By.id(\"username\")).sendKeys(\"supertenantuser\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"supertenantuser\");     driver.findElement(By.xpath(\"//button[@type='submit']\")).click();     try {       assertEquals(\"supertenantuser\", driver.findElement(By.cssSelector(\"ul.nav li a.dropdown-toggle\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsSuperTenantUser.java"}
{"repo_name": "testPromoteToInReviewTenant", "name for description": "test Promote To In Review Tenant", "comments": "Test", "url": true, "content": "  public void testPromoteToInReviewTenant() throws Exception {     driver.get(baseUrl + \"/publisher/assets/gadget/\");     driver.findElement(By.xpath(\"//a[contains(text(),\\\"userAddedAsset\\\")]\")).click();     driver.findElement(By.linkText(\"Life Cycle\")).click();     driver.findElement(By.id(\"In-Review\")).click(); \tList<WebElement> rows = driver.findElements(By.xpath(\"//table[@id='lc-history']//tr\")); \tWebElement val = rows.get(0).findElement(By.xpath(\"./td[2]\")); \tSystem.out.println(val.getText()); \tassertEquals(val.getText(), \"tenantUser changed the asset from Created to In-Review\");   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToInReviewTenant.java"}
{"repo_name": "testSortByPopAfterReview", "name for description": "test Sort By Pop After Review", "comments": "Test", "url": true, "content": "  public void testSortByPopAfterReview() throws Exception {     driver.get(baseUrl + \"/store/assets/gadget\");     driver.findElement(By.xpath(\"((//div[@class='span3 asset'])[8])//a\")).click();     String populerAsset = driver.getCurrentUrl();     driver.findElement(By.linkText(\"User Reviews\")).click();     // ERROR: Caught exception [ERROR: Unsupported command [waitForFrameToLoad | id=socialIfr | ]]     driver.findElement(By.id(\"com-body\")).clear();     driver.findElement(By.id(\"com-body\")).sendKeys(\"my test rating with 5 stars\");     driver.findElement(By.linkText(\"5\")).click();     driver.findElement(By.id(\"btn-post\")).click();     for (int second = 0;; second++) {     \tif (second >= 60) fail(\"timeout\");     \ttry { if (isElementPresent(By.cssSelector(\".com-review\"))) break; } catch (Exception e) {}     \tThread.sleep(1000);     }      driver.get(baseUrl + \"/store/assets/gadget\");     driver.findElement(By.cssSelector(\"i.icon-star\")).click();     driver.findElement(By.xpath(\"((//div[@class='span3 asset'])[1])//a\")).click();     assertEquals(populerAsset, driver.getCurrentUrl());   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestSortByPopAfterReview.java"}
{"repo_name": "testIfAssetAddedToPublisher", "name for description": "test If Asset Added To Publisher", "comments": "Test", "url": true, "content": "  public void testIfAssetAddedToPublisher() throws Exception {     driver.get(baseUrl + \"/publisher/assets/gadget/\");     assertTrue(isElementPresent(By.xpath(\"//a[contains(text(),\\\"userAddedAsset\\\")]\")));   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestIfAssetAddedToPublisher.java"}
{"repo_name": "testIfAssetAddedToStoreTenant", "name for description": "test If Asset Added To Store Tenant", "comments": "Test", "url": true, "content": "  public void testIfAssetAddedToStoreTenant() throws Exception {     driver.get(baseUrl + \"/store/assets/gadget\");     driver.findElement(By.xpath(\"//a[contains(text(),\\\"userAddedAsset\\\")]\")).click();     try {       assertEquals(\"by tenantUser\", driver.findElement(By.xpath(\"//div[@id='container-assets']//small[2]\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestIfAssetAddedToStoreTenant.java"}
{"repo_name": "testLoginAsTenantAdmin", "name for description": "test Login As Tenant Admin", "comments": "Test", "url": true, "content": "  public void testLoginAsTenantAdmin() throws Exception {     driver.get(baseUrl + \"/store/assets/gadget\");     driver.findElement(By.linkText(\"Sign in\")).click();     driver.findElement(By.id(\"username\")).clear();     driver.findElement(By.id(\"username\")).sendKeys(\"tenantAdmin@mytestdomain.com\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"admin1234\");     driver.findElement(By.xpath(\"//button[@type='submit']\")).click();     try {       assertEquals(\"tenantAdmin\", driver.findElement(By.cssSelector(\"ul.nav li a.dropdown-toggle\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsTenantAdmin.java"}
{"repo_name": "testLoginAsTenantUser", "name for description": "test Login As Tenant User", "comments": "Test", "url": true, "content": "  public void testLoginAsTenantUser() throws Exception {     driver.get(baseUrl + \"/store/assets/gadget\");     driver.findElement(By.linkText(\"Sign in\")).click();     driver.findElement(By.id(\"username\")).clear();     driver.findElement(By.id(\"username\")).sendKeys(\"tenantUser@mytestdomain.com\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"tenantUser\");     driver.findElement(By.xpath(\"//button[@type='submit']\")).click();     try {       assertEquals(\"tenantUser\", driver.findElement(By.cssSelector(\"ul.nav li a.dropdown-toggle\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsTenantUser.java"}
{"repo_name": "getDynamicContentFromUrl", "name for description": "get Dynamic Content From Url", "comments": "", "url": true, "content": "    public String getDynamicContentFromUrl(String url){         // Selenium         logger.info(\"Loading Selenium: \");          WebDriver driver = new FirefoxDriver(createFirefoxProfile());         driver.get(url);          try {             Thread.sleep(2000);                 //1000 milliseconds is one second.         } catch(InterruptedException ex) {             logger.error(\"Exception in selenium interupt: \", ex);             Thread.currentThread().interrupt();         }          String html_content = driver.getPageSource();         driver.close();          return html_content;     }", "path": "src/main/java/org/bg/winddata/DynamicContentScraper.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE}, reason = \"Chrome: failed\") SwitchToTopAfterTest", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test Ignore(value = {IE},", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testSelenuimTooSmallNumber", "name for description": "test Selenuim Too Small Number", "comments": "Test", "url": true, "content": "        public void testSelenuimTooSmallNumber() throws Exception { \t\tdriver.get(baseUrl); \t\tdriver.findElement(By.linkText(\"New Game\")).click(); \t\tdriver.findElement(By.id(\"number\")).clear(); \t\tdriver.findElement(By.id(\"number\")).sendKeys(\"0\"); \t\tdriver.findElement(By.cssSelector(\"button[type=\\\"submit\\\"]\")).click(); \t\tassertEquals(\"Invalid move , try again\", driver.findElement(By.xpath(\"//div[@id='results']/pre[2]\")).getText()); \t}", "path": "src/selenium/java/is/kings/TicTacToeWebTest.java"}
{"repo_name": "testSelenuimTooLargeNumber", "name for description": "test Selenuim Too Large Number", "comments": "Test", "url": true, "content": "        public void testSelenuimTooLargeNumber() throws Exception {                 driver.get(baseUrl);                 driver.findElement(By.linkText(\"New Game\")).click();                 driver.findElement(By.id(\"number\")).clear();                 driver.findElement(By.id(\"number\")).sendKeys(\"10\");                 driver.findElement(By.cssSelector(\"button[type=\\\"submit\\\"]\")).click();                 assertEquals(\"Invalid move , try again\", driver.findElement(By.xpath(\"//div[@id='results']/pre[2]\")).getText()); \t}", "path": "src/selenium/java/is/kings/TicTacToeWebTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);     Assert.assertFalse(\"\".equals(homepage.header.getText()));   }", "path": "src/test/java/com/youtube/SampleTestNgTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testEZRxInitialPage", "name for description": "test EZ Rx Initial Page", "comments": "Test", "url": true, "content": "\tpublic void testEZRxInitialPage() throws Exception { \t\tdriver.get(baseUrl + \"/EZRxLookup\"); \t\ttry { \t\t\tassertTrue(isElementPresent(By.id(\"j_idt5:j_idt18:drugName_input\"))); \t\t} catch (Error e) { \t\t\tverificationErrors.append(e.toString());  \t\t}  \t}", "path": "src/test/java/com/bna/ezrxlookup/ui/web/EZRxInitialPage.java"}
{"repo_name": "testEZRxLookupResultPageNoNegativeNoRecalls", "name for description": "test EZ Rx Lookup Result Page No Negative No Recalls", "comments": "Test", "url": true, "content": "\tpublic void testEZRxLookupResultPageNoNegativeNoRecalls() throws Exception { \t\ttry { \t\t\tdriver.get(baseUrl + \"/EZRxLookup/\"); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).clear(); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).sendKeys(\"\"); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).clear(); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).sendKeys( \t\t\t\t\t\"51439-007-02\"); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:search\")).click(); \t\t\tfor (int second = 0;; second++) { \t\t    \tif (second >= 10) fail(\"timeout\"); \t\t    \ttry { if (isElementPresent(By.cssSelector(\"label\"))) break; } catch (Exception e) {} \t\t    \tThread.sleep(1000); \t\t    } \t\t\tThread.sleep(3000); \t\t\tassertEquals(\"ACNE CLEARNING TREATMENT FACE\", driver.findElement(By.id(\"j_idt5:j_idt19:cmdBName\")).getText()); \t\t\t \t\t\tWebElement element = driver.findElement(By.id(\"j_idt5:j_idt19:j_idt28\")); \t\t\tString path = element.getAttribute(\"src\"); \t\t\tassert(path.contains(\"green\")); \t\t\t  \t\t} catch (Error e) { \t\t\tverificationErrors.append(e);  \t\t} \t}", "path": "src/test/java/com/bna/ezrxlookup/ui/web/EZRxBusinessTests.java"}
{"repo_name": "testEZRxLookupResultPageRecallsFound", "name for description": "test EZ Rx Lookup Result Page Recalls Found", "comments": "Test", "url": true, "content": "\tpublic void testEZRxLookupResultPageRecallsFound() throws Exception { \t\ttry { \t\t\tdriver.get(baseUrl + \"/EZRxLookup/\"); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).clear(); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).sendKeys(\"\"); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).clear(); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:drugName_input\")).sendKeys( \t\t\t\t\t\"43598-209-53\"); \t\t\tdriver.findElement(By.id(\"j_idt5:j_idt18:search\")).click(); \t\t\tfor (int second = 0;; second++) { \t\t    \tif (second >= 10) fail(\"timeout\"); \t\t    \ttry { if (isElementPresent(By.cssSelector(\"label\"))) break; } catch (Exception e) {} \t\t    \tThread.sleep(1000); \t\t    } \t\t\tThread.sleep(3000); \t\t\tassertEquals(\"AMOXICILLIN\", driver.findElement(By.id(\"j_idt5:j_idt19:cmdBName\")).getText()); \t\t\tWebElement element = driver.findElement(By.id(\"j_idt5:j_idt19:j_idt28\")); \t\t\tString path = element.getAttribute(\"src\"); \t\t\tassert(path.contains(\"red\")); \t\t} catch (Error e) { \t\t\tverificationErrors.append(e);  \t\t} \t}", "path": "src/test/java/com/bna/ezrxlookup/ui/web/EZRxBusinessTests.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "nonAdminTryAccessAdminPages", "name for description": "non Admin Try Access Admin Pages", "comments": "Test", "url": true, "content": "    public void nonAdminTryAccessAdminPages() throws Exception {          // Non-admin user login informations         String username = \"nonAdmin\";         String passwd = \"nonAdminPassword\";          // We open the web app         driver.get(baseUrl + \"/ArcGames/\");          // Login as non-admin         login(username, passwd);          // Try to access non-allowed admin pages         for (String page : adminUrlList) {             String adminUrl = baseUrl + page;             driver.get(adminUrl);             assertNotEquals(driver.getCurrentUrl(), adminUrl);         }          // Logout         driver.findElement(By.linkText(\"logout\")).click();              }", "path": "ArcGames/test/ch/hearc/arcgames/tests/AdminSecurityTest.java"}
{"repo_name": "loggedUserTryAccessPages", "name for description": "logged User Try Access Pages", "comments": "Test", "url": true, "content": "    public void loggedUserTryAccessPages() throws Exception {          // Non-admin user login informations         String username = \"nonAdmin\";         String passwd = \"nonAdminPassword\";          // We open the web app         driver.get(baseUrl + \"/ArcGames/\");          // SignUp with a test user         String pattern = \"fake\";         signUp(pattern, pattern, pattern, pattern, pattern, pattern);          // Login as non-admin         login(username, passwd);          // Go to users page         driver.findElement(By.linkText(\"Users\")).click();          // Search user that matches \"fake\" pattern         simpleSearch(pattern);          // Check results         String result = driver.findElement(By.xpath(\"//form[@id='j_idt21']/table/tbody[2]/tr/td\")).getText();         assertTrue(result.contains(pattern));          // Search user that matches \"fake\" user         advancedSearch(pattern);          // Check results         result = driver.findElement(By.xpath(\"//form[@id='j_idt21']/table/tbody[2]/tr/td\")).getText();         assertTrue(result.contains(pattern));          // Logout         driver.findElement(By.linkText(\"logout\")).click();      }", "path": "ArcGames/test/ch/hearc/arcgames/tests/searchTest.java"}
{"repo_name": "loggedUserTryAccessPages", "name for description": "logged User Try Access Pages", "comments": "Test", "url": true, "content": "    public void loggedUserTryAccessPages() throws Exception {          // New user informations         String username = \"myUsername\";         String mail = \"myMail@gmail.com\";         String location = \"Neuch\u00e2tel\";         String firstName = \"myFName\";         String lastName = \"myLName\";         String passwd = \"myPasswd\";          // We open the web app         driver.get(baseUrl + \"/ArcGames/\");          // SignUp with a test user         signUp(username, mail, passwd, location, firstName, lastName);          // Login as non-admin         login(username, passwd);          // Edit user         String s = \"edited\";         driver.findElement(By.linkText(username)).click();         driver.findElement(By.id(\"j_idt19:username\")).clear();         driver.findElement(By.id(\"j_idt19:username\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:mail\")).clear();         driver.findElement(By.id(\"j_idt19:mail\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:passwd\")).clear();         driver.findElement(By.id(\"j_idt19:passwd\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:passwdConfirm\")).clear();         driver.findElement(By.id(\"j_idt19:passwdConfirm\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:location\")).clear();         driver.findElement(By.id(\"j_idt19:location\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:firstName\")).clear();         driver.findElement(By.id(\"j_idt19:firstName\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:lastName\")).clear();         driver.findElement(By.id(\"j_idt19:lastName\")).sendKeys(s);         driver.findElement(By.id(\"j_idt19:submit\")).click();          // Logout         driver.findElement(By.linkText(\"logout\")).click();      }", "path": "ArcGames/test/ch/hearc/arcgames/tests/DBInteractionTest.java"}
{"repo_name": "testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain", "name for description": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"simpleTest.html\");     driver.get(url);      Cookie cookie = options.getCookieNamed(\"fish\");     assertNull(String.valueOf(cookie), cookie);   }", "path": "java/client/test/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testGetCookieDoesNotRetriveBeyondCurrentDomain", "name for description": "test Get Cookie Does Not Retrive Beyond Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testGetCookieDoesNotRetriveBeyondCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"\");     driver.get(url);      Set<Cookie> cookies = options.getCookies();     assertFalse(cookies.contains(cookie1));   }", "path": "java/client/test/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testSettingACookieThatExpiredInThePast", "name for description": "test Setting A Cookie That Expired In The Past", "comments": "Ignore(value = {ANDROID, IE, SELENESE}, reason = \"Untested\")", "url": true, "content": "  public void testSettingACookieThatExpiredInThePast() {     String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"animals\");      driver.get(url);     driver.manage().deleteAllCookies();      long expires = System.currentTimeMillis() - 1000;     Cookie cookie = new Cookie(\"expired\", \"yes\", \"/common/animals\", new Date(expires));     WebDriver.Options options = driver.manage();     options.addCookie(cookie);      cookie = options.getCookieNamed(\"fish\");     assertNull(         \"Cookie expired before it was set, so nothing should be returned: \" + cookie, cookie);   }", "path": "java/client/test/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testCanBlockInvalidSslCertificates", "name for description": "test Can Block Invalid Ssl Certificates", "comments": "", "url": true, "content": "  public void testCanBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore({IE, CHROME, SELENESE, IPHONE, OPERA})", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      // This should work     assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Ignore(value = {IE, SELENESE})", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")) .getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testCanNavigateToAGivenUrl", "name for description": "test Can Navigate To A Given Url", "comments": "", "url": true, "content": "\tpublic void testCanNavigateToAGivenUrl() throws Exception {  \t\tfinal String url = \"http://www.example.com\"; \t\t \t\tchecking(new Expectations() {{  \t\t\tone(webdriver).get(url); \t\t}}); \t\t \t\tcontext.goTo(url); \t}", "path": "java/client/test/org/openqa/selenium/lift/TestContextTest.java"}
{"repo_name": "testCanNavigateToAGivenUrl", "name for description": "test Can Navigate To A Given Url", "comments": "", "url": true, "content": "  public void testCanNavigateToAGivenUrl() throws Exception {      final String url = \"http://www.example.com\";          checking(new Expectations() {{        one(webdriver).get(url);     }});          context.goTo(url);   }", "path": "java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"}
{"repo_name": "checkAndPutExampleBluelightEnglish", "name for description": "check And Put Example Bluelight English", "comments": "  Connection to example, Check if already in Bluelight theme and english language, if not call testChangeLanguage to change  Most of the time, this method is not used because Bluelight theme is no more in \"stable\" revision, so default theme is now tomawak   @param baseUrl  @param driver  @throws Exception ", "url": true, "content": "    public static void checkAndPutExampleBluelightEnglish(String baseUrl, WebDriver driver) throws Exception {         WebDriverWait driverWait = new WebDriverWait(driver, 30);         WebElement waitFor;         boolean themeAndLanguageCorrect, firstTime;         firstTime=true;         int i = 2;         do {             themeAndLanguageCorrect = false;             driver.get(baseUrl + \"example/control/logout\");             waitFor = driverWait.until(ExpectedConditions.presenceOfElementLocated(By.name(\"USERNAME\")));             waitFor.clear();             waitFor.sendKeys(\"admin\");             WebElement element = driver.findElement(By.name(\"PASSWORD\"));             element.clear();             element.sendKeys(\"ofbiz\");             driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();             driverWait.until(ExpectedConditions.titleContains(\"OFBiz: Example: Find Example\"));             List<WebElement> currentLanguages = driver.findElements(By.xpath(\"//ul[@id='preferences-menu']/li[3]/a\"));             if (currentLanguages.size() == 0 || ! currentLanguages.get(0).getText().contains(\"Language : English\") ) {                 Utils.testChangeLanguage(baseUrl, null, null, \"BLUELIGHT\", driver);                 themeAndLanguageCorrect = true;                 i -= 1;                 firstTime = i>0;             }         } while (themeAndLanguageCorrect && firstTime);         assertTrue(firstTime);      }", "path": "framework/testtools/selenium/tests/org/ofbiz/testtools/webdriverTests/utils/Utils.java"}
{"repo_name": "errorMessageAfterFailedLoginAttempt", "name for description": "error Message After Failed Login Attempt", "comments": "Test", "url": true, "content": "    public void errorMessageAfterFailedLoginAttempt() {         driver.navigate().to(urlBase + \"/yottr\");          final WebElement usernameField = driver.findElement(By.id(\"username\"));         final WebElement passwordField = driver.findElement(By.id(\"password\"));         final WebElement signInButton = driver.findElement(By.id(\"sign-in-button\"));          usernameField.sendKeys(\"mike\");         passwordField.sendKeys(\"wrongpassword\");          signInButton.click();          final WebElement errorMessage = driver.findElement(By.id(\"error-msg\"));          assertEquals(\"Invalid username and password.\", errorMessage.getText());     }", "path": "src/test/java/uk/co/yottr/acceptance/SignInSignOutIT.java"}
{"repo_name": "testCanBlockInvalidSslCertificates", "name for description": "test Can Block Invalid Ssl Certificates", "comments": "", "url": true, "content": "  public void testCanBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = new FirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Ignore(value = {IE, SELENESE})", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")) .getText();      assertEquals(shalom, text);   }", "path": "common/test/java/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "createYoutubeVideoObjectFromVideoId", "name for description": "create Youtube Video Object From Video Id", "comments": "  attempts to get a string representation of the transcript from a youtube url   @param videoId  @return transcript string formatted so that each 2 lines follows this pattern:  the start time --- end time  captions said during this time  captions do not have any newlines within them ", "url": true, "content": "    private static YoutubeVideo createYoutubeVideoObjectFromVideoId(String videoId) {         if (getNumConcurrentBrowswers() >= Constants.NUM_CONCURRENT_VIDEO_INFO_RETRIEVAL_ACTORS) {             throw new RuntimeException(\"Too Many Active Video Retrieval Browsers. Try again later\");         }         WebDriver browser = createWebDriver();         WebElement moreButton = null;         WebElement transcriptButton = null;         WebElement transcriptContainer = null;         WebElement videoEndTimeElement = null;         WebElement videoTitleElement = null;          String url = StringManip.generateUrlFromVideoId(videoId);         String videoEndTime = null;         String videoTitle = null;          long startTime = System.currentTimeMillis();         browser.manage().timeouts().implicitlyWait(TIMEOUT, TimeUnit.SECONDS);          try {             browser.get(url);             logger.debug(\"retrieved url: {}\", url);             videoEndTimeElement = new WebDriverWait(browser, TIMEOUT).until(ExpectedConditions.visibilityOfElementLocated(By.className(\"ytp-time-duration\")));             videoEndTime = videoEndTimeElement.getText();             logger.debug(\"retrieved video end time: {}\", videoEndTime);              videoTitleElement = new WebDriverWait(browser, TIMEOUT).until(ExpectedConditions.visibilityOfElementLocated(By.id(\"eow-title\")));             videoTitle = videoTitleElement.getText();             logger.debug(\"retrieved video title: {}\", videoTitle);              moreButton = new WebDriverWait(browser, TIMEOUT).until(ExpectedConditions.elementToBeClickable(By.id(\"action-panel-overflow-button\")));             clickElement(browser, moreButton);             logger.debug(\"clicked more button\");         } catch (Exception e) {             e.printStackTrace();             killWebDriver(browser);             return null;         }          int counter = 0;         while (transcriptButton == null && counter < Constants.BROWSER_RETRIES) {             try {                 transcriptButton = new WebDriverWait(browser, 1).until(ExpectedConditions.elementToBeClickable(By.className(\"action-panel-trigger-transcript\")));             } catch (Exception e) {                 System.out.println(\"caught exception\");                 clickElement(browser, moreButton);                 System.out.println(\"clicked more button\");                 counter++;             }         }         if (counter == Constants.BROWSER_RETRIES) {             killWebDriver(browser);             return null;         }          //click and wait for transcript to load         try {             Thread.sleep(1500);             clickElement(browser, transcriptButton);             transcriptContainer = new WebDriverWait(browser, TIMEOUT).until(ExpectedConditions.visibilityOfElementLocated(By.id(\"transcript-scrollbox\")));             logger.debug(\"transcript successfully loaded into webdriver\");              Document doc = Jsoup.parse(transcriptContainer.getAttribute(\"innerHTML\"));              LinkedHashMap<String, String> timeToText = new LinkedHashMap<>();              for (Element timeRegion : doc.body().children()) {                 Elements timeRegionData = timeRegion.children();                  //first element is always time, second is always text                 String currentTime = timeRegionData.get(0).text();                 String currentCaption = timeRegionData.get(1).text();                 //check for possible repeated times, and concatenate captions if that is the case                 if (timeToText.containsKey(currentTime)) {                     timeToText.put(currentTime, timeToText.get(currentTime) + currentCaption.trim());                 } else {                     timeToText.put(currentTime, currentCaption.trim());                 }             }              String rawTranscript = timeToTextMappingToRawTranscript(timeToText, videoEndTime);              logger.debug(\"transcript successfully parsed\");             long finishTime = System.currentTimeMillis();             logger.debug(\"time taken: {}\", (finishTime - startTime) * 1.0 / 1000);             killWebDriver(browser);             return new YoutubeVideo(videoId, rawTranscript, videoTitle);         } catch (Exception e) {             e.printStackTrace();             logger.error(e.toString());             killWebDriver(browser);             return null;         }     }", "path": "VideoSummary/app/utils/Summarizer/TranscriptFactory.java"}
{"repo_name": "getDocumentAndStoreSource", "name for description": "get Document And Store Source", "comments": "", "url": true, "content": "  public Document getDocumentAndStoreSource(final String url, File outputDir, String fileName) {     MonitorThread monitor = new MonitorThread(hardLimitTimeoutSeconds, new Runnable() {       @Override       public void run() {         driver.quit();         throw new TimeoutException(\"Timedout while retrieving DOM for \" + url);       }     });     monitor.setDaemon(true);     driver.manage().deleteAllCookies();     driver.get(url);     // TODO(claudio): handle download errors, truncated pages, weird redirects (e.g. opendns)     String page = driver.getPageSource();     storeHtmlSource(outputDir, fileName, page);     monitor.done();     Preconditions.checkNotNull(url);     return WebdriverHelper.getDom(page);   }", "path": "src/main/java/org/polimi/zarathustra/webdriver/LocalWebdriverWorker.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      waitFor(pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(TestUtilities.isFirefox(driver) && TestUtilities.isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      waitFor(pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      waitFor(pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      waitFor(pageTitleToBe(driver, \"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      waitFor(pageTitleToBe(driver, \"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({ANDROID, IPHONE, OPERA, OPERA_MOBILE, MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore(value = {IE, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE, PHANTOMJS}, Test", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     // TODO(user): Set the SSL capability to true.     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(TestUtilities.isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "getTwitterAuthorizationPINPageSource", "name for description": "get Twitter Authorization PIN Page Source", "comments": "", "url": true, "content": "\tprivate String getTwitterAuthorizationPINPageSource() { \t\tString url = requestToken.getAuthenticationURL(); \t\tdriver.get(url); \t\tjse.executeScript(\"document.getElementById('username_or_email').setAttribute('value','\" \t\t\t\t+ username + \"')\"); // Twitter ID \t\tjse.executeScript(\"document.getElementById('password').setAttribute('value','\" \t\t\t\t+ password + \"')\"); // Twitter Password \t\tjse.executeScript(\"document.getElementById('allow').click()\"); \t\tdriver.getPageSource();  \t\treturn driver.getPageSource(); \t}", "path": "ManalithBot/src/main/java/org/manalith/ircbot/plugin/tweetreader/TweetReader.java"}
{"repo_name": "testWaitUntilPageTitlePresentPos", "name for description": "test Wait Until Page Title Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilPageTitlePresentPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementVisiblePos", "name for description": "test Wait Until Element Visible Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementVisiblePos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsVisible(locator);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilTextPresentPos", "name for description": "test Wait Until Text Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilTextPresentPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilTextPresent(text);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementDisapearPos", "name for description": "test Wait Until Element Disapear Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementDisapearPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);         Button btn = new Button(disappearElement);         btn.click();         WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementPresentPos", "name for description": "test Wait Until Element Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementPresentPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsPresent(locator);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWasitUntilElementPipedLocator", "name for description": "test Wasit Until Element Piped Locator", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWasitUntilElementPipedLocator() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsPresent(pipedLocator);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilWebPageIsValidatedNeg", "name for description": "test Wait Until Web Page Is Validated Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilWebPageIsValidatedNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilPageIsValidated(new BasicPageImpl() {                 @Override                 public BasicPageImpl getPage() {                     return this;                 }             });         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilPageTitlePresentNeg", "name for description": "test Wait Until Page Title Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilPageTitlePresentNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilPageTitleContains(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementVisibleNeg", "name for description": "test Wait Until Element Visible Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementVisibleNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilElementIsVisible(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilTextPresentNeg", "name for description": "test Wait Until Text Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilTextPresentNeg() {         Grid.driver().get(url);         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             WebDriverWaitUtils.waitUntilTextPresent(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementDisapearNeg", "name for description": "test Wait Until Element Disapear Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { RuntimeException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementDisapearNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementPresentNeg", "name for description": "test Wait Until Element Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementPresentNeg() {         Grid.driver().get(url);         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             WebDriverWaitUtils.waitUntilElementIsPresent(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testESPublisherAssetOverrideExistingPageTestCase", "name for description": "test ES Publisher Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding existing page in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverrideExistingPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/gadget/list\"); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();          driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/assets/servicex/details\");         assertTrue(isElementPresent(driver, By.id(\"assetOveriddenDetailsPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESPublisherAssetNewPageTestCase", "name for description": "test ES Publisher Asset New Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test adding a new asset page in extensions\")", "url": true, "content": "    public void testESPublisherAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/gadget/list\"); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();          driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/assets/servicex/new_page\");         assertTrue(isElementPresent(driver, By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"}
{"repo_name": "testESRegisterUserTestCase", "name for description": "test ES Register User Test Case", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing user registration\")", "url": true, "content": "    public void testESRegisterUserTestCase() throws Exception {         //Register new user         driver.get(baseUrl + STORE_URL);         driver.findElement(By.id(\"btn-register\")).click();         driver.findElement(By.id(\"reg-username\")).clear();         driver.findElement(By.id(\"reg-username\")).sendKeys(NEW_USER_NAME);         driver.findElement(By.id(\"reg-password\")).clear();         driver.findElement(By.id(\"reg-password\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.id(\"reg-password2\")).clear();         driver.findElement(By.id(\"reg-password2\")).sendKeys(NEW_USER_PWD);          driver.findElement(By.name(\"reg-email\")).clear();         driver.findElement(By.name(\"reg-email\")).sendKeys(NEW_USER_EMAIL);         driver.findElement(By.name(\"reg-first-name\")).clear();         driver.findElement(By.name(\"reg-first-name\")).sendKeys(NEW_USER_FNAME);         driver.findElement(By.name(\"reg-last-name\")).clear();         driver.findElement(By.name(\"reg-last-name\")).sendKeys(NEW_USER_LNAME);         new Select(driver.findElement(By.name(\"secret-question\"))).selectByVisibleText(SECRET_QUESTION);         driver.findElement(By.name(\"secret-answer\")).clear();         driver.findElement(By.name(\"secret-answer\")).sendKeys(SECRET_ANSWER);         driver.findElement(By.id(\"registrationSubmit\")).click();         //check login for store         assertTrue(isElementPresent(driver,By.linkText(\"My Items\")), \"Login failed for Store\");         assertTrue(isElementPresent(driver,By.linkText(NEW_USER_NAME)), \"Login failed for Store\");         //check login for publisher         driver.get(baseUrl + PUBLISHER_URL);         assertTrue(isElementPresent(driver,By.linkText(NEW_USER_NAME)), \"Login failed for Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"}
{"repo_name": "testESPublisherAssetCaramelPageTestCase", "name for description": "test ES Publisher Asset Caramel Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new caramel page in extensions\")", "url": true, "content": "    public void testESPublisherAssetCaramelPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/gadget/list\"); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();          driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/assets/servicex/new_caramel_page\");         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         assertTrue(isElementPresent(driver, By.id(\"Overview\")));         assertTrue(isElementPresent(driver, By.id(\"Edit\")));         //assertTrue(isElementPresent(driver, By.id(\"Life Cycle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test(enabled = false)  @Ignore(value = { ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI,  SELENESE, OPERA_MOBILE }, reason =  \"Untested on all other browsers, fails on chrome, fails on IE.\", issues = {  3508 })", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"}
{"repo_name": "doSeleniumActionOpenURL", "name for description": "do Selenium Action Open URL", "comments": "Override", "url": true, "content": "    public MessageEvent doSeleniumActionOpenURL(Session session, String host, Identifier identifier, boolean withBase) {         MessageEvent message;         String url = \"\";         try {             url = identifier.getLocator();             if (!StringUtil.isNull(url)) {                 if (withBase) {                     host = StringUtil.cleanHostURL(host);                     url = host + url;                 }                 session.getDriver().get(url);                 message = new MessageEvent(MessageEventEnum.ACTION_SUCCESS_OPENURL);                 message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));              } else {                 message = new MessageEvent(MessageEventEnum.ACTION_FAILED_OPENURL);                 message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));             }         } catch (TimeoutException exception) {             message = new MessageEvent(MessageEventEnum.ACTION_FAILED_OPENURL_TIMEOUT);             message.setDescription(message.getDescription().replaceAll(\"%TIMEOUT%\", String.valueOf(session.getDefaultWait())));             message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));             MyLogger.log(WebDriverService.class.getName(), Level.WARN, exception.toString());         } catch (WebDriverException exception) {             message = new MessageEvent(MessageEventEnum.ACTION_FAILED_SELENIUM_CONNECTIVITY);             MyLogger.log(WebDriverService.class.getName(), Level.FATAL, exception.toString());         }          return message;     }", "path": "source/src/main/java/org/cerberus/service/webdriver/impl/WebDriverService.java"}
{"repo_name": "doSeleniumActionUrlLogin", "name for description": "do Selenium Action Url Login", "comments": "Override", "url": true, "content": "    public MessageEvent doSeleniumActionUrlLogin(Session session, String host, String uri) {         MessageEvent message;          host = StringUtil.cleanHostURL(host);         String url = host + (host.endsWith(\"/\") ? uri.replace(\"/\", \"\") : uri);          try {             session.getDriver().get(url);             message = new MessageEvent(MessageEventEnum.ACTION_SUCCESS_URLLOGIN);             message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));          } catch (TimeoutException exception) {             message = new MessageEvent(MessageEventEnum.ACTION_FAILED_URLLOGIN_TIMEOUT);             message.setDescription(message.getDescription().replaceAll(\"%TIMEOUT%\", String.valueOf(session.getDefaultWait())));             message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));             MyLogger.log(WebDriverService.class.getName(), Level.WARN, exception.toString());         } catch (Exception e) {             message = new MessageEvent(MessageEventEnum.ACTION_FAILED_URLLOGIN);             message.setDescription(message.getDescription().replaceAll(\"%URL%\", url) + \" \" + e.getMessage());         }         return message;     }", "path": "source/src/main/java/org/cerberus/service/webdriver/impl/WebDriverService.java"}
{"repo_name": "doSeleniumActionOpenURL", "name for description": "do Selenium Action Open URL", "comments": "Override", "url": true, "content": "    public MessageEvent doSeleniumActionOpenURL(Session session, String host, String value, String property, boolean withBase) {         MessageEvent message;         String url = \"null\";         try {             if (!StringUtil.isNull(value)) {                 url = value;             } else if (!StringUtil.isNull(property)) {                 url = property;             }             if (!StringUtil.isNull(url)) {                 if (withBase) {                     url = \"http://\" + host + url;                 }                 session.getDriver().get(url);                  message = new MessageEvent(MessageEventEnum.ACTION_SUCCESS_OPENURL);                 message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));                 return message;             }         } catch (WebDriverException exception) {             message = new MessageEvent(MessageEventEnum.ACTION_FAILED_SELENIUM_CONNECTIVITY);             MyLogger.log(WebDriverService.class.getName(), Level.FATAL, exception.toString());             return message;         }         message = new MessageEvent(MessageEventEnum.ACTION_FAILED_OPENURL);         message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));         return message;     }", "path": "source/src/main/java/org/cerberus/serviceEngine/impl/WebDriverService.java"}
{"repo_name": "doSeleniumActionUrlLogin", "name for description": "do Selenium Action Url Login", "comments": "Override", "url": true, "content": "    public MessageEvent doSeleniumActionUrlLogin(Session session, String host, String uri) {         MessageEvent message;          String url = \"http://\" + host + (host.endsWith(\"/\") ? uri.replace(\"/\", \"\") : uri);         try {             session.getDriver().get(url);             message = new MessageEvent(MessageEventEnum.ACTION_SUCCESS_URLLOGIN);             message.setDescription(message.getDescription().replaceAll(\"%URL%\", url));             return message;         } catch (Exception e) {             message = new MessageEvent(MessageEventEnum.ACTION_FAILED_URLLOGIN);             message.setDescription(message.getDescription().replaceAll(\"%URL%\", url) + \" \" + e.getMessage());             return message;         }     }", "path": "source/src/main/java/org/cerberus/serviceEngine/impl/WebDriverService.java"}
{"repo_name": "goToWebadminStartPage", "name for description": "go To Webadmin Start Page", "comments": "", "url": true, "content": "    public void goToWebadminStartPage() {         if(isUsingDevDotHTML()) {             d.get( serverUrl + \"webadmin/dev.html\" );         } else if(avoidRedirectAndGoStraightToWebAdminHomepage()) {             d.get( serverUrl + \"webadmin/\" );         } else {             goToServerRoot();         }         waitForTitleToBe( \"Neo4j Monitoring and Management Tool\" );     }", "path": "server/src/webtest/java/org/neo4j/server/webdriver/WebadminWebdriverLibrary.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testWaitUntilPageTitlePresentPos", "name for description": "test Wait Until Page Title Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilPageTitlePresentPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementVisiblePos", "name for description": "test Wait Until Element Visible Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementVisiblePos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsVisible(locator);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilTextPresentPos", "name for description": "test Wait Until Text Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilTextPresentPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilTextPresent(text);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementDisapearPos", "name for description": "test Wait Until Element Disapear Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementDisapearPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);         Button btn = new Button(disappearElement);         btn.click();         WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementPresentPos", "name for description": "test Wait Until Element Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementPresentPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsPresent(locator);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWasitUntilElementPipedLocator", "name for description": "test Wasit Until Element Piped Locator", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWasitUntilElementPipedLocator() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsPresent(pipedLocator);     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilWebPageIsValidatedNeg", "name for description": "test Wait Until Web Page Is Validated Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilWebPageIsValidatedNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilWebPageIsValidated(new BasicPageImpl() {                 @Override                 public BasicPageImpl getPage() {                     return this;                 }             });         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilPageTitlePresentNeg", "name for description": "test Wait Until Page Title Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilPageTitlePresentNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilPageTitleContains(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementVisibleNeg", "name for description": "test Wait Until Element Visible Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementVisibleNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilElementIsVisible(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilTextPresentNeg", "name for description": "test Wait Until Text Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilTextPresentNeg() {         Grid.driver().get(url);         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             WebDriverWaitUtils.waitUntilTextPresent(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementDisapearNeg", "name for description": "test Wait Until Element Disapear Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { RuntimeException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementDisapearNeg() {         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             Grid.driver().get(url);             WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementPresentNeg", "name for description": "test Wait Until Element Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementPresentNeg() {         Grid.driver().get(url);         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             WebDriverWaitUtils.waitUntilElementIsPresent(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testStoreSortOnPopularity", "name for description": "test Store Sort On Popularity", "comments": "TODO-disabled bug Test(groups = \"wso2.es.store\", description = \"Testing sorting on popularity\", enabled = false)", "url": true, "content": "    public void testStoreSortOnPopularity() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         //sort by popularity         driver.findElement(By.cssSelector(\"i.icon-star\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(\"h4\"),                 popularAsset1));         assertEquals(driver.findElement(By.cssSelector(\"h4\")).getText(), popularAsset1,                 \"Popularity Sort failed\");         assertEquals(driver.findElement(By.xpath                 (\"//div[@id='assets-container']/div/div[2]/div/div/a/h4\")).getText(),                 popularAsset2, \"Popularity Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testStoreSortOnAlphabeticalOrder", "name for description": "test Store Sort On Alphabetical Order", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on alphabetical order\")", "url": true, "content": "    public void testStoreSortOnAlphabeticalOrder() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         //sort by alphabetical order         driver.findElement(By.cssSelector(\"i.icon-sort-alphabetical\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.xpath                 (\"//div[@id='assets-container']/div/div[3]/div/div/a/h4\"), BUBBLE_CHART));         assertEquals(assetName, driver.findElement(By.cssSelector(\"h4\")).getText(),                 \"Alphabetical Sort failed\");         assertEquals(BAR_CHART, driver.findElement(By.xpath                 (\"//div[@id='assets-container']/div/div[2]/div/div/a/h4\")).getText(),                 \"Alphabetical Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testStoreSortOnCreatedTime", "name for description": "test Store Sort On Created Time", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on created time\")", "url": true, "content": "    public void testStoreSortOnCreatedTime() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         //sort by created time         driver.findElement(By.cssSelector(\"i.icon-calendar\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(\"h4\"),                 assetName));         assertEquals(assetName, driver.findElement(By.cssSelector(\"h4\")).getText()                 , \"Recent Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testESPublisherOverridenGlobalPageTestCase", "name for description": "test ES Publisher Overriden Global Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESPublisherOverridenGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/pages/splash\");         assertTrue(isElementPresent(By.id(\"assetOverridenGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideExistingPageTestCase", "name for description": "test ES Publisher Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESPublisherAssetOverrideExistingPageTestCase() throws Exception {         // driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/asts/servicex/details\"); //      driver.findElementPoll(By.id(\"assetOveriddenDetailsPageH1\"),30);         assertTrue(isElementPresent(By.id(\"assetOveriddenDetailsPageH1\"))); //      assertTrue(isElementPresent(By.cssSelector(\"h1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESPublisherNewGlobalPageTestCase", "name for description": "test ES Publisher New Global Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESPublisherNewGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/pages/servicex_global\");         assertTrue(isElementPresent(By.id(\"assetNewGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"}
{"repo_name": "testESRegisterUserTestCase", "name for description": "test ES Register User Test Case", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing user registration\")", "url": true, "content": "    public void testESRegisterUserTestCase() throws Exception {         //Register new user         driver.get(baseUrl + \"/store\");         driver.findElement(By.id(\"btn-register\")).click();         driver.findElement(By.id(\"reg-username\")).clear();         driver.findElement(By.id(\"reg-username\")).sendKeys(newUserName);         driver.findElement(By.id(\"reg-password\")).clear();         driver.findElement(By.id(\"reg-password\")).sendKeys(newUserPwd);         driver.findElement(By.id(\"reg-password2\")).clear();         driver.findElement(By.id(\"reg-password2\")).sendKeys(newUserPwd);         driver.findElement(By.id(\"registrationSubmit\")).click();         //check login for store         assertTrue(isElementPresent(By.linkText(\"My Items\")), \"Login failed for Store\");         assertTrue(isElementPresent(By.linkText(newUserName)), \"Login failed for Store\");         //check login for publisher         driver.get(baseUrl + \"/publisher\");         assertTrue(isElementPresent(By.linkText(newUserName)), \"Login failed for Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"}
{"repo_name": "testESStoreNewGlobalPageTestCase", "name for description": "test ES Store New Global Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESStoreNewGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/store/pages/servicex_global\");         assertTrue(isElementPresent(By.id(\"assetNewGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"}
{"repo_name": "testStoreBeforeAddRatings", "name for description": "test Store Before Add Ratings", "comments": "Test(groups = \"wso2.es.store.ratings\", description = \"Test Start Add Rating\")", "url": true, "content": "    public void testStoreBeforeAddRatings() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         driver.findElement(By.cssSelector(\"i.icon-cog\")).click();         driver.findElement(By.cssSelector(\"h4\")).click();         driver.findElement(By.linkText(\"User Reviews\")).click();         driver.switchTo().frame(driver.findElement(By.id(\"socialIfr\")));         assertEquals(\"Please Sign in to add a Review\",                 driver.findElement(By.cssSelector(\"div.com-guest\")).getText());         assertEquals(\"Be the first one to review!\",                 driver.findElement(By.cssSelector(\"p.com-first-review\")).getText());         driver.switchTo().defaultContent();     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"}
{"repo_name": "testESPublisherAssetNewPageTestCase", "name for description": "test ES Publisher Asset New Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESPublisherAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/asts/servicex/new_page\");         assertTrue(isElementPresent(By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"}
{"repo_name": "testESPublisherAssetCaramelPageTestCase", "name for description": "test ES Publisher Asset Caramel Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESPublisherAssetCaramelPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/asts/servicex/new_caramel_page\");         //WebDriverWait wait = new WebDriverWait(driver, 10);         //wait.until(ExpectedConditions.presenceOfElementLocated(By.linkText(\"Overview\")));         //wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.linkText(\"Overview\")));         //assertTrue(isElementPresent(By.cssSelector(\"span.publisherTitle\"))); //        driver.findElementPoll(By.linkText(\"Overview\"),5);         assertTrue(isElementPresent(By.linkText(\"Overview\")));         assertTrue(isElementPresent(By.linkText(\"Edit\")));         assertTrue(isElementPresent(By.linkText(\"Life Cycle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"}
{"repo_name": "testESPublishToStore", "name for description": "test ES Publish To Store", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")", "url": true, "content": "    public void testESPublishToStore() throws Exception {         //Add a new gadget with info         driver.findElement(By.linkText(\"Add\")).click();         driver.findElement(By.name(\"overview_provider\")).clear();         driver.findElement(By.name(\"overview_provider\")).sendKeys(userInfo.getUserName());         driver.findElement(By.name(\"overview_name\")).clear();         driver.findElement(By.name(\"overview_name\")).sendKeys(assetName);         driver.findElement(By.name(\"overview_version\")).clear();         driver.findElement(By.name(\"overview_version\")).sendKeys(assetVersion);         driver.findElement(By.name(\"overview_createdtime\")).clear();         driver.findElement(By.name(\"overview_createdtime\")).sendKeys(assetCreatedTime);         driver.findElement(By.name(\"overview_url\")).clear();         driver.findElement(By.name(\"overview_url\")).sendKeys(assetUrl);         driver.findElement(By.name(\"overview_description\")).clear();         driver.findElement(By.name(\"overview_description\")).sendKeys(assetDescription);         driver.findElement(By.id(\"btn-create-asset\")).click();         if (isAlertPresent()) {             closeAlertAndGetItsText();         }         //publish the gadget to store         driver.findElement(By.cssSelector(\"a.btn\")).click();         driver.findElementPoll(By.linkText(assetName), 30);         driver.findElement(By.linkText(\"Publishing Asset\")).click();         driver.findElement(By.linkText(\"Life Cycle\")).click();          driver.findElement(By.id(\"In-Review\")).click();         driver.findElement(By.id(\"commentModalText\")).clear();         driver.findElement(By.id(\"commentModalText\")).sendKeys(lcComment);         driver.findElement(By.id(\"commentModalSave\")).click();          driver.get(driver.getCurrentUrl());         driver.findElement(By.id(\"Published\")).click();         driver.findElement(By.id(\"commentModalText\")).clear();         driver.findElement(By.id(\"commentModalText\")).sendKeys(lcComment);         driver.findElement(By.id(\"commentModalSave\")).click();         //navigate to store to check the published gadget         driver.get(baseUrl + \"/store\");         driver.findElementPoll(By.xpath(\"//a[contains(.,'\" + assetName + \"')]\"), 5);         assertEquals(assetName, driver.findElement(By.cssSelector(\"h4\")).getText());         driver.findElement(By.cssSelector(\"div.asset-author-category > ul > li\")).click();         assertEquals(assetName, driver.findElement(By.cssSelector(\"h3\")).getText());         assertEquals(assetDescription, driver.findElement(By.cssSelector(\"p\")).getText());     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"}
{"repo_name": "testESStoreAssetNewPageTestCase", "name for description": "test ES Store Asset New Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESStoreAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/store/asts/servicex/new_page\");         assertTrue(isElementPresent(By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"}
{"repo_name": "testESStoreAssetOverrideExistingPageTestCase", "name for description": "test ES Store Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESStoreAssetOverrideExistingPageTestCase() throws Exception {          driver.get(baseUrl + \"/store/asts/servicex/list\");         assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESStoreAddedAssetTestCase", "name for description": "test ES Store Added Asset Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESStoreAddedAssetTestCase() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         driver.findElement(By.xpath(\"//div[@id='container-search']/div/div/div/div/a[3]/li\")).click();         //driver.wait(3000);         driver.findElementPoll(By.id(\"assetListingPageH1\"),30);         assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"}
{"repo_name": "testESPublisherAddedAssetTestCase", "name for description": "test ES Publisher Added Asset Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "    public void testESPublisherAddedAssetTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/\");         assertTrue(isElementPresent(By.cssSelector(\"button.btn.dropdown-toggle\")));         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         assertTrue(isElementPresent(By.cssSelector(\"span.publisherTitle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"}
{"repo_name": "testListPageSortByName", "name for description": "test List Page Sort By Name", "comments": "Test(groups = \"wso2.es.publisher\", description = \"Test sort by name\")", "url": true, "content": "    public void testListPageSortByName() throws Exception {         driver.get(baseUrl + \"/publisher\");         driver.findElementPoll(By.linkText(assetName), 30);         driver.findElement(By.partialLinkText(\"NAME\")).click();         assertEquals(nameSortAsset1, driver.findElement(By.xpath                 (\"//tbody[@id='list-asset-table-body']/tr[1]/td[2]\")).getText(),                 \"Sort on name failed\");         assertEquals(nameSortAsset2, driver.findElement(By.xpath                 (\"//tbody[@id='list-asset-table-body']/tr[14]/td[2]\")).getText(),                 \"Sort on name failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"}
{"repo_name": "testAddAndDeleteItem", "name for description": "test Add And Delete Item", "comments": "Test", "url": true, "content": "\tpublic void testAddAndDeleteItem() throws Exception { \t\tdriver.get(baseUrl + \"/\"); \t\t// Idea 2 \t\tdriver.findElement(By.linkText(\"add an idea\")).click(); \t\tdriver.findElement(By.id(\"title\")).clear(); \t\tdriver.findElement(By.id(\"title\")).sendKeys(\"Test Idea 2\"); \t\tdriver.findElement(By.id(\"artist\")).clear(); \t\tdriver.findElement(By.id(\"artist\")).sendKeys(\"Patrick Graziosi\"); \t\tdriver.findElement(By.id(\"description\")).clear(); \t\tdriver.findElement(By.id(\"description\")).sendKeys(\"Test Idea 2\"); \t\tdriver.findElement(By.id(\"releaseYear\")).clear(); \t\tdriver.findElement(By.id(\"releaseYear\")).sendKeys(\"4/30/2016\"); \t\tdriver.findElement(By.id(\"genre\")).clear(); \t\tdriver.findElement(By.id(\"genre\")).sendKeys(\"Cloud Ready\"); \t\tdriver.findElement(By.xpath(\"//div[3]/button\")).click(); \t\t// Idea 3 \t\t//Thread.sleep(1000); \t\tdriver.findElement(By.linkText(\"add an idea\")).click(); \t\tdriver.findElement(By.id(\"title\")).clear(); \t\tdriver.findElement(By.id(\"title\")).sendKeys(\"Test Idea 3\"); \t\tdriver.findElement(By.id(\"artist\")).clear(); \t\tdriver.findElement(By.id(\"artist\")).sendKeys(\"Patrick Graziosi\"); \t\tdriver.findElement(By.id(\"description\")).clear(); \t\tdriver.findElement(By.id(\"description\")).sendKeys(\"Test Idea 3\"); \t\tdriver.findElement(By.id(\"releaseYear\")).clear(); \t\tdriver.findElement(By.id(\"releaseYear\")).sendKeys(\"4/30/2016\"); \t\tdriver.findElement(By.id(\"genre\")).clear(); \t\tdriver.findElement(By.id(\"genre\")).sendKeys(\"Connected Workforce\"); \t\tdriver.findElement(By.xpath(\"//div[3]/button\")).click(); \t\t//Thread.sleep(2500); \t    driver.findElement(By.xpath(\"//div[@id='albums']/div[3]/div/div[5]/div/div/div/a/span\")).click(); \t    driver.findElement(By.xpath(\"(//a[contains(text(),'delete')])[5]\")).click(); \t    //Thread.sleep(2500); \t    driver.findElement(By.xpath(\"//div[@id='albums']/div[3]/div/div[5]/div/div/div/a/span\")).click(); \t    driver.findElement(By.xpath(\"(//a[contains(text(),'delete')])[5]\")).click(); \t}", "path": "src/test/java/UITestBase.java"}
{"repo_name": "testSisseLogimineFBga", "name for description": "test Sisse Logimine F Bga", "comments": "Test", "url": true, "content": "  public void testSisseLogimineFBga() throws Exception {     driver.get(baseUrl + \"/login\");     driver.findElement(By.id(\"engout\")).click();     try {       assertEquals(\"P\u00f6idlap\u00fc\u00fcdja - Home\", driver.getTitle());     } catch (Error e) {       verificationErrors.append(e.toString());     }     driver.findElement(By.id(\"loginButton\")).click();     for (int second = 0;; second++) {     \tif (second >= 60) fail(\"timeout\");     \ttry { if (\"LOG OUT\".equals(driver.findElement(By.id(\"logout\")).getText())) break; } catch (Exception e) {}     \tThread.sleep(1000);     }    }", "path": "Automaattestid/Sisse logimine FBga.java"}
{"repo_name": "testSoidugaLiitumineJubaLiitunud", "name for description": "test Soiduga Liitumine Juba Liitunud", "comments": "Test", "url": true, "content": "  public void testSoidugaLiitumineJubaLiitunud() throws Exception {     driver.get(baseUrl + \"/soidud\");     driver.findElement(By.linkText(\"S\u00d5IDUD\")).click();     driver.findElement(By.id(\"est\")).click();     try {       assertEquals(\"P\u00f6idlap\u00fc\u00fcdja - S\u00f5idud\", driver.getTitle());     } catch (Error e) {       verificationErrors.append(e.toString());     }     driver.findElement(By.xpath(\"//tbody[@id='innertable']/tr/td[2]\")).click();     try {       assertEquals(\"Oled juba selle s\u00f5iduga liitunud\", driver.findElement(By.xpath(\"//div/div/div/div\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "Automaattestid/Soiduga liitumine juba liitunud.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testUsersHaveDiffLists", "name for description": "test Users Have Diff Lists", "comments": "Test", "url": true, "content": "    public void testUsersHaveDiffLists() {         try {             driver.get(studentListUrl + usernameParamPrefix + userA);             Select userASchoolSelect = new Select(driver.findElement(By.id(\"schoolSelect\")));             String userASchoolItem = userASchoolSelect.getOptions().get(1).getText();                          driver.get(studentListUrl + usernameParamPrefix + userB);             Select userBSchoolSelect = new Select(driver.findElement(By.id(\"schoolSelect\")));             String userBSchoolItem = userBSchoolSelect.getOptions().get(1).getText();                          assertFalse(userBSchoolItem.equals(userASchoolItem));             } catch (Exception e) {                 System.err.println(e.getMessage());             } finally {                 driver.close();             }     }", "path": "src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"}
{"repo_name": "startGraphHostAppInNewWinndow", "name for description": "start Graph Host App In New Winndow", "comments": "  Starts the collection process of the newly added GraphHostApp in a new window. ", "url": true, "content": "\tprivate static void startGraphHostAppInNewWinndow(String graphUrl) { \t\tWebDriver driver = new FirefoxDriver(); \t\tdriver.get(graphUrl); \t\tdriver.findElement(By.id(\"continue\")).click(); \t}", "path": "selenium2/src/at/mannaz/socialsnapshot/SocialSnapshot.java"}
{"repo_name": "testWaitUntilPageTitlePresentPos", "name for description": "test Wait Until Page Title Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilPageTitlePresentPos() {         Grid.driver().get(url);         try {             WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);             assertTrue(true);         } catch (WaitTimedOutException e) {             fail(e.getMessage());         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementVisiblePos", "name for description": "test Wait Until Element Visible Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementVisiblePos() {         Grid.driver().get(url);         try {             WebDriverWaitUtils.waitUntilElementIsVisible(locator);             assertTrue(true);         } catch (WaitTimedOutException e) {             fail(e.getMessage());         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilTextPresentPos", "name for description": "test Wait Until Text Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilTextPresentPos() {         Grid.driver().get(url);         try {             WebDriverWaitUtils.waitUntilTextPresent(text);             assertTrue(true);         } catch (WaitTimedOutException e) {             fail(e.getMessage());         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementDisapearPos", "name for description": "test Wait Until Element Disapear Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementDisapearPos() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilPageTitleContains(pageTitle);         Button btn = new Button(disappearElement);         btn.click();         try {             WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);             assertTrue(true);         } catch (WaitTimedOutException e) {             fail(e.getMessage());         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementPresentPos", "name for description": "test Wait Until Element Present Pos", "comments": "Test(groups = { \"browser-tests\" }) WebTest", "url": true, "content": "    public void testWaitUntilElementPresentPos() {         Grid.driver().get(url);         try {             WebDriverWaitUtils.waitUntilElementIsPresent(locator);             assertTrue(true);         } catch (WaitTimedOutException e) {             fail(e.getMessage());         }     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilPageTitlePresentNeg", "name for description": "test Wait Until Page Title Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { WaitTimedOutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilPageTitlePresentNeg() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilPageTitleContains(badLocator);         fail(\"Wait Timeout Exception was not thrown.\");     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementVisibleNeg", "name for description": "test Wait Until Element Visible Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { WaitTimedOutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementVisibleNeg() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsVisible(badLocator);         fail(\"Wait Timeout Exception was not thrown.\");     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilTextPresentNeg", "name for description": "test Wait Until Text Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilTextPresentNeg() {         Grid.driver().get(url);         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             WebDriverWaitUtils.waitUntilTextPresent(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }         fail(\"Timeout Exception was not thrown.\");     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementDisapearNeg", "name for description": "test Wait Until Element Disapear Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { RuntimeException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementDisapearNeg() {         Grid.driver().get(url);         WebDriverWaitUtils.waitUntilElementIsInvisible(disappearElement);         fail(\"Runtime Exception was not thrown.\");     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testWaitUntilElementPresentNeg", "name for description": "test Wait Until Element Present Neg", "comments": "Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class }) WebTest", "url": true, "content": "    public void testWaitUntilElementPresentNeg() {         Grid.driver().get(url);         String origTimeout = Config.getConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT);         try {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, \"20000\");             WebDriverWaitUtils.waitUntilElementIsPresent(badLocator);         } finally {             Config.setConfigProperty(Config.ConfigProperty.EXECUTION_TIMEOUT, origTimeout);         }         fail(\"Timeout Exception was not thrown.\");     }", "path": "client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "  @Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI,  OPERA_MOBILE}, reason = \"Safari: does not support insecure SSL\")  Test(enabled = false)", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     // TODO(user): Set the SSL capability to true.     //String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     //driver.get(url);      //Assert.assertEquals(driver.getTitle(), (\"Hello WebDriver\"));   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "  @Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE,  SAFARI, SELENESE})  Test(enabled = false)", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     /*      * assumeTrue(TestUtilities.isLocal());      *       * DesiredCapabilities requiredCaps = new DesiredCapabilities();      * requiredCaps.setCapability(ACCEPT_SSL_CERTS, false); WebDriverBuilder      * builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);      * localDriver = builder.get();      *       * String url =      * GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\"      * ); localDriver.get(url);      *       * assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));      */   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test(enabled = false)  @Ignore(value = { ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI,  SELENESE, OPERA_MOBILE }, reason =  \"Untested on all other browsers, fails on chrome, fails on IE.\", issues = {  3508 })", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"}
{"repo_name": "testGoogleSeleniumWebdriverTestCase", "name for description": "test Google Selenium Webdriver Test Case", "comments": "Test", "url": true, "content": "\tpublic void testGoogleSeleniumWebdriverTestCase() throws Exception { \t\tdriver.get(baseUrl + \"/\"); \t\tdriver.findElement(By.id(\"gbqfq\")).clear(); \t\tdriver.findElement(By.id(\"gbqfq\")).sendKeys(\"selenium hq\"); \t\t// ERROR: Caught exception [ERROR: Unsupported command [isTextPresent]] \t}", "path": "src/com/example/tests/GoogleSeleniumWebdriverTestCase.java"}
{"repo_name": "checkAddFilmFromCatalog", "name for description": "check Add Film From Catalog", "comments": "Test", "url": true, "content": "\tpublic void checkAddFilmFromCatalog() throws Exception { \t\t \t\tdriver.get(baseUrl + \"/php4dvd/\"); \t\tWebDriverWait wait = new WebDriverWait(driver,30); \t\tWebElement userName = driver.findElement(By.cssSelector(\"input#username\")); \t\tWebElement password = driver.findElement(By.name(\"password\")); \t\tWebElement login = driver.findElement(By.name(\"submit\")); \t\tuserName.sendKeys(\"admin\"); \t\tpassword.sendKeys(\"admin\"); \t\tlogin.click(); \t\t \t\tString movieTitle = \"\u00d3\u00ed\u00e5\u00f1\u00b8\u00ed\u00ed\u00fb\u00e5 \u00e2\u00e5\u00f2\u00f0\u00ee\u00ec\"; \t\tWebElement addMovie = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"a[href='./?go=add']\"))); \t\taddMovie.click(); \t\t \t\tWebElement imdbsearchField = wait.until(ExpectedConditions.presenceOfElementLocated(By.name(\"imdbsearch\"))); \t\timdbsearchField.sendKeys(movieTitle); \t\tdriver.findElement(By.cssSelector(\"input[value='Search']\")).click(); \t\t \t\tWebElement movie = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"table.imdbmovies tr:nth-child(1)\"))); \t\tString year = driver.findElement(By.cssSelector(\"table.imdbmovies tr:nth-child(1) td.year\")).getText(); \t\tmovie.click(); \t\t \t\twait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"form#updateform\"))); \t\tWebElement save =driver.findElement(By.id(\"submit\")); \t\tsave.click(); \t\t \t\tWebElement h2Title = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\".maininfo_full h2\")));  \t\tSystem.out.println(movieTitle + \" (\" + year + \")\"); \t\tassertEquals(h2Title.getText(), movieTitle + \" (\" + year + \")\"); \t}", "path": "src/test/java/ru/st/selenium/SearchFilmFromCatalog.java"}
{"repo_name": "testSearchFilmWithoutResult", "name for description": "test Search Film Without Result", "comments": "SuppressWarnings(\"deprecation\") Test", "url": true, "content": "\tpublic void testSearchFilmWithoutResult() throws Exception { \t\tdriver.get(baseUrl + \"/php4dvd/\"); \t\tWebDriverWait wait = new WebDriverWait(driver,30); \t\tWebElement userName = driver.findElement(By.cssSelector(\"input#username\")); \t\tWebElement password = driver.findElement(By.name(\"password\")); \t\tWebElement login = driver.findElement(By.name(\"submit\")); \t\tuserName.sendKeys(\"admin\"); \t\tpassword.sendKeys(\"admin\"); \t\tlogin.click(); \t\t \t\tString movieTitle = \"\u00cf\u00ee \u00fd\u00f2\u00ee\u00ec\u00f3 \u00e7\u00e0\u00ef\u00f0\u00ee\u00f1\u00f3 \u00ff \u00ed\u00e8\u00f7\u00e5\u00e3\u00ee \u00ed\u00e5 \u00ed\u00e0\u00e9\u00e4\u00f3\"; \t\tWebElement addMovie = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"a[href='./?go=add']\"))); \t\taddMovie.click(); \t\t \t\tWebElement imdbsearchField = wait.until(ExpectedConditions.presenceOfElementLocated(By.name(\"imdbsearch\"))); \t\timdbsearchField.sendKeys(movieTitle); \t\tdriver.findElement(By.cssSelector(\"input[value='Search']\")).click(); \t\t \t\tWebElement resultNotFound = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"#content .content div\"))); \t\twait.until(ExpectedConditions.textToBePresentInElement(resultNotFound, \"No movies where found.\")); \t\t \t\tassertEquals(resultNotFound.getText(), \"No movies where found.\"); \t}", "path": "src/test/java/ru/st/selenium/SearchFilmWithoutResult.java"}
{"repo_name": "testESRegisterUserTestCase", "name for description": "test ES Register User Test Case", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing user registration\")", "url": true, "content": "    public void testESRegisterUserTestCase() throws Exception {         //Register new user         driver.get(baseUrl + STORE_URL);         driver.findElement(By.id(\"btn-register\")).click();         driver.findElement(By.id(\"reg-username\")).clear();         driver.findElement(By.id(\"reg-username\")).sendKeys(NEW_USER_NAME);         driver.findElement(By.id(\"reg-password\")).clear();         driver.findElement(By.id(\"reg-password\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.id(\"reg-password2\")).clear();         driver.findElement(By.id(\"reg-password2\")).sendKeys(NEW_USER_PWD);          driver.findElement(By.name(\"reg-email\")).clear();         driver.findElement(By.name(\"reg-email\")).sendKeys(NEW_USER_EMAIL);         driver.findElement(By.name(\"reg-first-name\")).clear();         driver.findElement(By.name(\"reg-first-name\")).sendKeys(NEW_USER_FNAME);         driver.findElement(By.name(\"reg-last-name\")).clear();         driver.findElement(By.name(\"reg-last-name\")).sendKeys(NEW_USER_LNAME);         driver.findElement(By.id(\"registrationSubmit\")).click();         // check the success message         assertTrue(isElementPresent(driver,By.id(\"regFormSuc\")),\"User creation failed.\");         driver.findElement(By.id(\"signInLink\")).click();          driver.findElementPoll(By.id(\"username\"), MAX_POLL_COUNT);         driver.findElement(By.id(\"username\")).clear();         driver.findElement(By.id(\"username\")).sendKeys(NEW_USER_NAME);         driver.findElement(By.id(\"password\")).clear();         driver.findElement(By.id(\"password\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.id(\"registrationSubmit\")).click();         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(\"#logedInUser\")));            //check login for store         assertTrue(isElementPresent(driver, By.linkText(\"My Items\")), \"Login failed for Store\");         assertTrue(isElementPresent(driver,By.linkText(NEW_USER_NAME)), \"Login failed for Store\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"}
{"repo_name": "testLogOutputInHtmlResponse", "name for description": "test Log Output In Html Response", "comments": "Test", "url": true, "content": "    public void testLogOutputInHtmlResponse() throws Exception {         String url = getBaseUrl();         logger.info(\"making request to '{}'\", url);         webDriver.get(url);          String title = webDriver.getTitle();         assertThat(title, is(\"Bootstrap 101 Template\"));          String source = webDriver.getPageSource();         assertThat(source, is(notNullValue()));          JavascriptExecutor executor = (JavascriptExecutor) webDriver;         Double length = (Double) executor.executeScript(\"return logged.length;\");         assertThat(length.intValue(), is(greaterThan(0)));     }", "path": "src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"}
{"repo_name": "testLogOutputInServletResponse", "name for description": "test Log Output In Servlet Response", "comments": "Test", "url": true, "content": "    public void testLogOutputInServletResponse() throws Exception {         String url = getBaseUrl() + \"/testservlet\";         logger.info(\"making request to '{}'\", url);         webDriver.get(url);          String title = webDriver.getTitle();         assertThat(title, is(\"TestServlet\"));          String source = webDriver.getPageSource();         assertThat(source, is(notNullValue()));          JavascriptExecutor executor = (JavascriptExecutor) webDriver;         Double length = (Double) executor.executeScript(\"return logged.length;\");         assertThat(length.intValue(), is(greaterThan(0)));     }", "path": "src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"}
{"repo_name": "testLogOutputInForwardedRequest", "name for description": "test Log Output In Forwarded Request", "comments": "Test", "url": true, "content": "    public void testLogOutputInForwardedRequest() throws Exception {         String url = getBaseUrl() + \"/forwardservlet\";         webDriver.get(url);          String title = webDriver.getTitle();         assertThat(title, is(\"WEB-INF/jsp/forward.jsp\"));          String source = webDriver.getPageSource();         assertThat(source, is(notNullValue()));         System.out.println(source);          JavascriptExecutor executor = (JavascriptExecutor) webDriver;         Double length = (Double) executor.executeScript(\"return logged.length;\");         assertThat(length.intValue(), is(greaterThan(0)));     }", "path": "src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE, HTMLUNIT},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testAddFilmFromImdb", "name for description": "test Add Film From Imdb", "comments": "Test", "url": true, "content": "  public void testAddFilmFromImdb() throws Exception { \tdriver.get(baseUrl + \"/php4dvd/\"); \tWebElement addMovieButton = driver.findElement(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")); \taddMovieButton.click(); \tWebDriverWait wait = new WebDriverWait(driver,100); \t \tWebElement imdbSearchField =  wait.until(ExpectedConditions.presenceOfElementLocated(By.id(\"imdbsearch\"))); \timdbSearchField.clear();     imdbSearchField.sendKeys(\"123456\");          WebElement imdbSearchButton = driver.findElement(By.xpath(\"/html/body/div/div/div/section/div/form/table/tbody/tr[2]/td/input\")); \timdbSearchButton.click();      \t \tWebElement searchedMovie = wait.until(ExpectedConditions.presenceOfElementLocated(By.linkText(\"Home and Away\")));      \tsearchedMovie.click();          WebElement saveFilmButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(\"submit\"))); \tsaveFilmButton.click();      \tWebElement movie = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(\"movie\"))); \tWebElement titleAndYear = movie.findElement(By.tagName(\"h2\")); \tassertTrue(titleAndYear.getText().equals(\"Home and Away (1988)\"));  \t \tWebElement goHomeButton = driver.findElement(By.linkText(\"Home\")); \tgoHomeButton.click();   }", "path": "src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"}
{"repo_name": "testAddFilmNoYear", "name for description": "test Add Film No Year", "comments": "Test", "url": true, "content": "  public void testAddFilmNoYear() throws Exception { \tdriver.get(baseUrl + \"/php4dvd/\"); \tWebElement addMovieButton = driver.findElement(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")); \taddMovieButton.click(); \t \tWebElement filmTitleField = driver.findElement(By.name(\"name\")); \tfilmTitleField.clear();     filmTitleField.sendKeys(\"My Test Film\");          WebElement saveFilmButton = driver.findElement(By.id(\"submit\")); \tsaveFilmButton.click();          WebElement errorLabel = driver.findElement(By.xpath(\"/html/body/div/div/div/section/div/div/form/table/tbody/tr[4]/td[2]/label\"));     assertTrue(errorLabel.isDisplayed());   }", "path": "src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"}
{"repo_name": "testAppraisalWithNoProjects", "name for description": "test Appraisal With No Projects", "comments": "Test", "url": true, "content": "  public void testAppraisalWithNoProjects() throws Exception {     driver.get(baseUrl + \"FYPFirstChoice/\");     driver.findElement(By.id(\"Login_Username\")).clear();     driver.findElement(By.id(\"Login_Username\")).sendKeys(\"poppy\");     driver.findElement(By.id(\"Login_Password\")).clear();     driver.findElement(By.id(\"Login_Password\")).sendKeys(\"test\");     driver.findElement(By.id(\"Login_0\")).click();     driver.findElement(By.linkText(\"Self Appraise\")).click();     driver.findElement(By.id(\"Appraisal_accomplishments\")).clear();     driver.findElement(By.id(\"Appraisal_accomplishments\")).sendKeys(\"accomplishments\");     driver.findElement(By.id(\"Appraisal_barriers\")).clear();     driver.findElement(By.id(\"Appraisal_barriers\")).sendKeys(\"barriers\");     driver.findElement(By.id(\"Appraisal_improvements\")).clear();     driver.findElement(By.id(\"Appraisal_improvements\")).sendKeys(\"improvement\");     driver.findElement(By.id(\"Appraisal_performance\")).clear();     driver.findElement(By.id(\"Appraisal_performance\")).sendKeys(\"knowledge\");     driver.findElement(By.id(\"Appraisal_attendanceRecordVery Good\")).click();     driver.findElement(By.id(\"Appraisal_respectRecordAverage Respect for others\")).click();     new Select(driver.findElement(By.id(\"Appraisal_firstName\"))).selectByVisibleText(\"Gillian\");     driver.findElement(By.id(\"Appraisal_Appraisal\")).click();     try {       assertEquals(\"Self Appraisal Complete\", driver.findElement(By.cssSelector(\"h6.center\")).getText());     } catch (Error e) {       verificationErrors.append(e.toString());     }   }", "path": "WEB-INF/src/java/junit/AppraisalWithNoProjectsTest.java"}
{"repo_name": "testCreateReviewWithAbapBackend", "name for description": "test Create Review With Abap Backend", "comments": "Test", "url": true, "content": "\tpublic void testCreateReviewWithAbapBackend() { \t\tdriver.get(serverUrl + applicationPath); \t\tCustomerReviewsPage reviewsPage = CustomerReviewsPage.create(driver);  \t\t// ABAP backend system (default as defined in config.js) \t\tSettingsPage abapsettingsview = reviewsPage.navigateToSettings(); \t\tabapsettingsview.switchToAbapBackend(); \t\tabapsettingsview.pressOk(); \t\tabapsettingsview.confirmRefresh();  \t\ttry { \t\t\tThread.sleep(5000); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t}  \t\treviewsPage.waitForPageAfterRefresh();  \t\tassertEquals(\"Default category does not match\", \"All Categories\", \t\t\t\treviewsPage.getCategory()); \t\tassertEquals(\"Default product does not match\", \t\t\t\t\"10\\\" Portable DVD player\", reviewsPage.getProduct()); \t\tassertFalse(\"First reviewer name is empty\", reviewsPage \t\t\t\t.getFirstReviewer().isEmpty()); \t\tassertFalse(\"First review comment is empty\", reviewsPage \t\t\t\t.getFirstReviewComment().isEmpty());  \t\treviewsPage.selectCategory(\"Speakers\"); \t\treviewsPage.selectProduct(\"Sound Booster\");  \t\tCustomerReviewCreationPage reviewCreationPage = reviewsPage \t\t\t\t.writeCustomerReview();  \t\tWebElement myDynamicElement = (new WebDriverWait(driver, 20)) \t\t\t\t.until(ExpectedConditions.presenceOfElementLocated(By \t\t\t\t\t\t.id(\"review-comment-text-area-id\")));  \t\tString reviewId = UUID.randomUUID().toString(); \t\treviewCreationPage.writeReviewComments(\"Good performance (\" + reviewId \t\t\t\t+ \")\"); \t\treviewCreationPage.setReviewRating(3); \t\treviewCreationPage.setFirstName(\"James\"); \t\treviewCreationPage.setLastName(\"Field\");  \t\treviewsPage = reviewCreationPage.submitAndConfirmReview();  \t\tassertEquals(3, reviewsPage.getFirstReviewRating()); \t\tassertTrue(reviewsPage.getFirstReviewComment().contains(reviewId)); \t\tassertEquals(\"James Field\", reviewsPage.getFirstReviewer()); \t}", "path": "espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"}
{"repo_name": "testCreateReviewWithCloudBackend", "name for description": "test Create Review With Cloud Backend", "comments": " TODO: Enable as soon as ESPM OData service bug for reviews case is fixed  @Test", "url": true, "content": "\tpublic void testCreateReviewWithCloudBackend() { \t\tdriver.get(serverUrl + applicationPath); \t\tCustomerReviewsPage reviewsPage = CustomerReviewsPage.create(driver);  \t\t// HANA Cloud remote \t\tSettingsPage cloudsettingsview = reviewsPage.navigateToSettings(); \t\tcloudsettingsview.switchToHanaCloudRemote(); \t\tcloudsettingsview.pressOk(); \t\tcloudsettingsview.confirmRefresh();  \t\ttry { \t\t\tThread.sleep(5000); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t}  \t\treviewsPage.waitForPageAfterRefresh();  \t\tassertEquals(\"Default category does not match\", \"All Categories\", \t\t\t\treviewsPage.getCategory()); \t\tassertEquals(\"Default product does not match\", \t\t\t\t\"10\\\" Portable DVD player\", reviewsPage.getProduct()); \t\tassertFalse(\"First reviewer name is empty\", reviewsPage \t\t\t\t.getFirstReviewer().isEmpty()); \t\tassertFalse(\"First review comment is empty\", reviewsPage \t\t\t\t.getFirstReviewComment().isEmpty());  \t\treviewsPage.selectCategory(\"Speakers\"); \t\treviewsPage.selectProduct(\"Sound Booster\");  \t\tCustomerReviewCreationPage reviewCreationPage = reviewsPage \t\t\t\t.writeCustomerReview();  \t\tWebElement myDynamicElement = (new WebDriverWait(driver, 20)) \t\t\t\t.until(ExpectedConditions.presenceOfElementLocated(By \t\t\t\t\t\t.id(\"review-comment-text-area-id\")));  \t\tString reviewId = UUID.randomUUID().toString(); \t\treviewCreationPage.writeReviewComments(\"Good performance (\" + reviewId \t\t\t\t+ \")\"); \t\treviewCreationPage.setReviewRating(3); \t\treviewCreationPage.setFirstName(\"James\"); \t\treviewCreationPage.setLastName(\"Field\");  \t\treviewsPage = reviewCreationPage.submitAndConfirmReview();  \t\tassertEquals(3, reviewsPage.getFirstReviewRating()); \t\tassertTrue(reviewsPage.getFirstReviewComment().contains(reviewId)); \t\tassertEquals(\"James Field\", reviewsPage.getFirstReviewer()); \t}", "path": "espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"}
{"repo_name": "CreateNewAccountBuySomeBouqs", "name for description": "Create New Account Buy Some Bouqs", "comments": "Test", "url": true, "content": "\tpublic void CreateNewAccountBuySomeBouqs() throws Exception {  \t\t// open test.thebouqs.com web. \t\tdriver.get(baseUrl);  \t\t// click X to close POP-UP \t\tdriver.findElement(By.xpath(\"//button[@onclick = 'welcomePopupMini()']\")).click(); \t\tThread.sleep(1000);  \t\t// click \"Log In\" link \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LoginLink_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// click create account button. \t\tdriver.findElement(By.id(Regist_Login_Page.Id_CreateAccount_Global)) \t\t\t\t.click(); \t\tThread.sleep(1000);  \t\t// input first name \t\tAction.inputFirstNameOnGlobal(Regist_Login_Page.Id_SignUpName, \t\t\t\tRegist_Login_Page.strName);  \t\t// input new email \t\tString eml = new Email().newEmail(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.click(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.clear(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.sendKeys(eml); \t\tThread.sleep(3000);  \t\t// get new email address \t\tEmail.setEmail(eml); \t\tSystem.out.println(eml);  \t\t// input password \t\tAction.inputPasswordOnRegistPage( \t\t\t\tRegist_Login_Page.Id_SignUpPassword_Global, \t\t\t\tRegist_Login_Page.strPassword);  \t\t// click 'sign up' button \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(3000);  \t\t// input months \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileMonths, \t\t\t\tRegist_Login_Page.strMonths_Global);  \t\t// input days \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileDays, \t\t\t\tRegist_Login_Page.strDays_Global);  \t\t// input years \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileYears, \t\t\t\tRegist_Login_Page.strYears_Global);  \t\t// select gender \t\tdriver.findElement(By.id(Regist_Login_Page.Id_ProfileMale)).click(); \t\tdriver.findElement( \t\t\t\tBy.xpath(Regist_Login_Page.Xpath_SelectPersonal_Global)) \t\t\t\t.click();  \t\t// submit \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LastSignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// Buys bouqs \t\tAction.BuyBouqsPayWithCC(FreeBouqPage.Css_SelectBouqName);  \t\t// check pay for success, to generate the order \t\tassertTrue(selenium \t\t\t\t.isTextPresent(OrderConfirmationPage.Text_OrderSucceed));  \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/Join_ExistingUser_PurchasedBefore.java"}
{"repo_name": "cancelOrderCheckOrderHistoryVideo", "name for description": "cancel Order Check Order History Video", "comments": "Test", "url": true, "content": "\tpublic void cancelOrderCheckOrderHistoryVideo() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(10000);  \t\tAction.globalRegist();  \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(Regist_Login_Page.Xpath_Shop)).click();  \t\t// select bouq. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000);  \t\t// input info. \t\tAction.inputRelationshipOnPDP(FreeBouqPage.Text_RelationshipWife, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_ZipCode);  \t\t// verify video message text exist. \t\tassertTrue(selenium \t\t\t\t.isTextPresent(\"Add a video message for your recipient\")); \t\tThread.sleep(8000);  \t\tAction.selectVieoMesaage(true);  \t\tAction.inputOssasionAndHaveMessageOnPDP(\"Birthday\", false, \t\t\t\tFreeBouqPage.Data_Message, false, false);  \t\tAction.inputAddressOnPDP(FreeBouqPage.Data_Address, \t\t\t\tFreeBouqPage.Data_PhoneNum); \t\tAction.clickAddCheckOutOnButtonPDP(); \t\tThread.sleep(5000);  \t\t// verify video message add succeed on cart page. \t\tassertTrue(selenium.isTextPresent(\"(Video Message Added)\"));  \t\t// pay with cc \t\tAction.payWithCCOnCartPage(CheckoutPage.Data_CardNum, \t\t\t\tCheckoutPage.Data_CardNum2, CheckoutPage.Data_CardNum2, \t\t\t\tCheckoutPage.Data_CardNum2, CheckoutPage.Data_CardCode, \t\t\t\tCheckoutPage.Data_BillingZip);  \t\t// enter order history \t\t// Action.checkOrderHistory(); \t\tString orderNum; \t\tdriver.findElement(By.xpath(HomePage.Xpath_AccountIcon)).click();  \t\t// click 'Order history / order tracking' link \t\tdriver.findElement( \t\t\t\tBy.linkText(AccountSetting.Link_OrderHistory.toUpperCase())) \t\t\t\t.click(); \t\tSystem.out.println(AccountSetting.Text_VerifyOrderHistoryLinkShown);  \t\t// get order num value \t\torderNum = driver.findElement(By.xpath(AccountSetting.Xpth_OrderNum)) \t\t\t\t.getText();  \t\tEmail.setEmail(orderNum);  \t\tdriver.findElement(By.linkText(orderNum)).click();  \t\t// verify 'order num', 'edit order button' and 'return to order history \t\t// button' are shown. \t\tassertEquals(AccountSetting.Text_OrderDetail + orderNum, driver \t\t\t\t.findElement(By.cssSelector(AccountSetting.CssSelector_Array)) \t\t\t\t.getText());  \t\tdriver.findElement( \t\t\t\tBy.id(OrderConfirmationPage.Id_EditButtonOnOrderHistory)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\tdriver.findElement( \t\t\t\tBy.id(OrderConfirmationPage.Id_cancelButtonOnOrderHistoy)) \t\t\t\t.click(); \t\tThread.sleep(3000);  \t\t// verify text is show 'Please confirm cancellation of the order.' \t\t// And close js pop-up window(select yes.) \t\tassertEquals(\"Please confirm cancellation of the order.\", \t\t\t\tcloseAlertAndGetItsText());  \t\t/** \t\t * Not finished recording,video message link isn't shown. \t\t */ \t\tassertFalse(selenium.isTextPresent(\"Edit Video Message\"));  \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/CustomerCancelOrderCheckVideo.java"}
{"repo_name": "giftCardBuyWithCC", "name for description": "gift Card Buy With CC", "comments": "Test", "url": true, "content": "\tpublic void giftCardBuyWithCC() throws Exception {  \t\tdriver.get(baseUrl);  \t\tAction.globalRegist(); \t\tThread.sleep(5000);  \t\t// check wording \t\tString setscroll = \"document.documentElement.scrollTop=3000\";  \t\tJavascriptExecutor jse = (JavascriptExecutor) driver; \t\tjse.executeScript(setscroll);  \t\t// click 'Gift Cards' \t\tdriver.findElement(By.linkText(FreeBouqPage.LinkText_GiftCards)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\tdriver.findElement(By.cssSelector(FreeBouqPage.CssSelector_GiftCards)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// verify buy this exist \t\tassertTrue(selenium.isTextPresent(FreeBouqPage.Text_BuyThisButton));  \t\t// facebook \t\tassertTrue(selenium \t\t\t\t.isElementPresent(FreeBouqPage.Xpath_ShareFacebookLink));  \t\t// twitter \t\tassertTrue(selenium \t\t\t\t.isElementPresent(FreeBouqPage.Xpath_ShareTwitterLink));  \t\t// pinterest \t\tassertTrue(selenium \t\t\t\t.isElementPresent(FreeBouqPage.Xpath_SharePinterestLink)); \t\tThread.sleep(2000);  \t\t// click buy this \t\tdriver.findElement(By.id(FreeBouqPage.Id_ChekoutGiftCard)).click(); \t\tThread.sleep(2000);  \t\t// select relationship from dropdown \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpth_selectRelationship)) \t\t\t\t.click(); \t\tdriver.findElement( \t\t\t\tBy.partialLinkText(FreeBouqPage.Text_RelationshipWife)).click();  \t\tdriver.findElement(By.id(FreeBouqPage.Id_FirstName)).clear(); \t\tdriver.findElement(By.id(FreeBouqPage.Id_FirstName)).sendKeys( \t\t\t\t\"Giftcard first\");  \t\tdriver.findElement(By.id(FreeBouqPage.Id_LastName)).clear(); \t\tdriver.findElement(By.id(FreeBouqPage.Id_LastName)).sendKeys( \t\t\t\t\"Giftcard last\");  \t\t// click 'no' \t\tdriver.findElement(By.id(FreeBouqPage.Id_Message)).click(); \t\tThread.sleep(2000);  \t\tdriver.findElement(By.id(FreeBouqPage.Id_AddCheckOut)).click(); \t\tThread.sleep(5000);  \t\tassertTrue(selenium \t\t\t\t.isTextPresent(\"Did you mean to send this email with out a message?\"));  \t\tdriver.findElement(By.id(FreeBouqPage.Id_MessageClickNo)).click();  \t\tdriver.findElement(By.id(FreeBouqPage.Id_AddCheckOut)).click(); \t\tThread.sleep(5000);  \t\t// Cart page,if pop-up error tips, click 'X' \t\tString txt; \t\ttxt = driver.findElement(By.id(\"errors-modal-body\")).getText();  \t\tif (CheckoutPage.Text_ErrorTips.equals(txt)) { \t\t\tassertTrue(selenium.isTextPresent(CheckoutPage.Text_ErrorTips)); \t\t\tThread.sleep(1000);  \t\t\tdriver.findElement( \t\t\t\t\tBy.xpath(\"//div[@id='errors-modal']/div[2]/div/div/button\")) \t\t\t\t\t.click(); \t\t\tThread.sleep(2000); \t\t}  \t\t// edit gift card \t\t// click 'edit' link \t\tdriver.findElement(By.linkText(CheckoutPage.Link_EditOnCart)).click(); \t\tThread.sleep(3000);  \t\t// edit person info \t\tdriver.findElement(By.id(FreeBouqPage.Id_FirstName)).clear(); \t\tdriver.findElement(By.id(FreeBouqPage.Id_FirstName)).sendKeys( \t\t\t\t\"Giftcard firstEdit\");  \t\tdriver.findElement(By.id(FreeBouqPage.Id_LastName)).clear(); \t\tdriver.findElement(By.id(FreeBouqPage.Id_LastName)).sendKeys( \t\t\t\t\"Giftcard lastEdit\");  \t\t// don't supper 'Send Anonymously ' \t\t// driver.findElement(By.id(FreeBouqPage.Id_SendAnonymous)).click();  \t\tdriver.findElement(By.id(FreeBouqPage.Id_AddCheckOut)).click(); \t\tThread.sleep(5000);  \t\tassertTrue(selenium \t\t\t\t.isTextPresent(\"Did you mean to send this email with out a message?\"));  \t\tdriver.findElement(By.id(FreeBouqPage.Id_MessageClickYes)).click(); \t\tThread.sleep(2000);  \t\t// Cart page,if pop-up error tips, click 'X' \t\tif (CheckoutPage.Text_ErrorTips.equals(txt)) { \t\t\tassertTrue(selenium.isTextPresent(CheckoutPage.Text_ErrorTips)); \t\t\tThread.sleep(1000);  \t\t\tdriver.findElement( \t\t\t\t\tBy.xpath(\"//div[@id='errors-modal']/div[2]/div/div/button\")) \t\t\t\t\t.click(); \t\t\tThread.sleep(2000); \t\t}  \t\t// paid with CC \t\tAction.payWithCCOnCartPage(CheckoutPage.Data_CardNum, \t\t\t\tCheckoutPage.Data_CardNum2, CheckoutPage.Data_CardNum2, \t\t\t\tCheckoutPage.Data_CardNum2, CheckoutPage.Data_CardCode, \t\t\t\tCheckoutPage.Data_BillingZip);  \t\t// check pay for success, to generate the order \t\tassertTrue(selenium \t\t\t\t.isTextPresent(OrderConfirmationPage.Text_OrderSucceed)); \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/GiftCard/BuyEditGiftCard.java"}
{"repo_name": "checkBookSubsWithVideo", "name for description": "check Book Subs With Video", "comments": "Test", "url": true, "content": "\tpublic void checkBookSubsWithVideo() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(10000);  \t\tAction.globalRegist();  \t\t/** \t\t * add regular subscription relationship 'Self' \t\t */  \t\t// go to subscription \t\tdriver.findElement(By.xpath(Subscription.Xpth_SubscriptionsOnHeader)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\t// select regular subscription \t\tdriver.findElement(By.xpath(Subscription.Xpath_SelectRegularSubscription)) \t\t\t\t.click();  \t\t// check enter step 1 page \t\tassertTrue(selenium.isTextPresent(PackageSubscriptionPage.Step1)); \t\tassertTrue(selenium \t\t\t\t.isTextPresent(PackageSubscriptionPage.SelectCollectionSize));  \t\t// select 'The Farmer's Market' \t\tdriver.findElement(By.cssSelector(Subscription.Css_TheFarmersMarket)) \t\t\t\t.click();  \t\t// select 'Original $40' \t\tdriver.findElement(By.xpath(Subscription.Xpath_OriginalOnSubs)) \t\t\t\t.click();  \t\t// click 'Next' button \t\tdriver.findElement(By.id(Subscription.Id_NextButtonOnSubs)).click(); \t\tThread.sleep(2000); \t\t \t\tAction.dateOnSubsPage(PackageSubscriptionPage.Xpth_DatePickerMonth, \t\t\t\tPackageSubscriptionPage.Text_DatePickerMonth, \t\t\t\tPackageSubscriptionPage.Text_DatePickerDay);  \t\tdriver.findElement(By.id(Subscription.Id_ThirdOnSubs)).click();  \t\tdriver.findElement(By.xpath(Subscription.Xpath_NextButtonOnSubs)).click();  \t\tAction.inputInfoOnSubsPage(FreeBouqPage.Text_RelationshipSelf, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_Address, FreeBouqPage.Data_ZipCode, \t\t\t\t\"SAN JOSE\", FreeBouqPage.Text_California, \"18212345678\"); \t\t \t\tdriver.findElement(By.xpath(Subscription.Xpath_NextButtonOnSubs)).click();  \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpth_NoUseOriginal)).click();  \t\t// pay with paypal \t\tAction.payWithPPOnSubCartPage(CheckoutPage.Data_TestPayPalEmail, \t\t\t\tCheckoutPage.Data_TestPayPalPassword); \t\t \t\tdriver.findElement(By.xpath(Subscription.Xpath_SelectBookedSubs)).click(); \t\t \t\tdriver.findElement(By.id(Subscription.Id_EditButtonOnSubs)).click(); \t\tThread.sleep(5000); \t\t \t\t/** \t\t *  change regular subscription relationship 'wife' \t\t */ \t\t// select relationship from dropdown \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpth_selectRelationship)) \t\t\t\t.click(); \t\tdriver.findElement(By.partialLinkText(FreeBouqPage.Text_RelationshipWife)).click(); \t\t \t\t// Zip \t\tdriver.findElement(By.id(FreeBouqPage.Id_Zip)).clear(); \t\tdriver.findElement(By.id(FreeBouqPage.Id_Zip)).sendKeys(FreeBouqPage.Data_ZipCode);  \t\t// click next button \t\tdriver.findElement(By.id(FreeBouqPage.Id_RelationshipNextBtton)) \t\t\t\t.click(); \t\t \t\t// verify video message text exist. \t\tassertTrue(selenium.isTextPresent(\"Add a video message for your recipient\")); \t\t  \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/VideoWidget_Pending.java"}
{"repo_name": "checkBookOrderWithVideo", "name for description": "check Book Order With Video", "comments": "Test", "url": true, "content": "\tpublic void checkBookOrderWithVideo() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(10000);  \t\tAction.globalRegist();  \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(Regist_Login_Page.Xpath_Shop)).click();  \t\t// select bouq. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000);  \t\t// input info. \t\tAction.inputRelationshipOnPDP(FreeBouqPage.Text_RelationshipWife, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_ZipCode);  \t\t// verify video message text exist. \t\tassertTrue(selenium.isTextPresent(\"Add a video message for your recipient\")); \t\tThread.sleep(8000);  \t\tAction.selectVieoMesaage(true);  \t\tAction.inputOssasionAndHaveMessageOnPDP(\"Birthday\", false, \t\t\t\tFreeBouqPage.Data_Message, false, false);  \t\tAction.inputAddressOnPDP(FreeBouqPage.Data_Address, \t\t\t\tFreeBouqPage.Data_PhoneNum); \t\tAction.clickAddCheckOutOnButtonPDP(); \t\tThread.sleep(5000);  \t\t// verify video message add succeed on cart page. \t\tassertTrue(selenium.isTextPresent(\"(Video Message Added)\"));  \t\t/** \t\t * edit cancel select video message \t\t */  \t\tdriver.findElement(By.linkText(CheckoutPage.Link_EditOnCart)).click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click();  \t\t// click next button \t\tdriver.findElement(By.id(FreeBouqPage.Id_RelationshipNextBtton)) \t\t\t\t.click(); \t\tThread.sleep(10000);  \t\t// verify video message text exist. \t\tassertTrue(selenium.isTextPresent(\"Add a video message for your recipient\"));  \t\t// verify video message is selected. \t\tboolean vf = driver.findElement(By.name(\"giftpixel-isgift\")).isSelected(); \t\t//assertTrue(vf); \t\tSystem.out.println(\"first edit video message status =  \" + vf);  \t\t// click cancel video message. \t\tdriver.findElement(By.name(\"giftpixel-isgift\")).click(); \t\tThread.sleep(2000);  \t\tdriver.findElement(By.id(FreeBouqPage.Id_SaveChangesButton)).click(); \t\tThread.sleep(2000);  \t\t// click use this address button \t\tdriver.findElement(By.id(FreeBouqPage.Id_UseThisAddressButton)).click(); \t\tThread.sleep(5000);  \t\t// verify video message is not show on cart page. \t\tassertFalse(selenium.isTextPresent(\"(Video Message Added)\"));  \t\t/** \t\t * edit add video message. \t\t */  \t\tdriver.findElement(By.linkText(CheckoutPage.Link_EditOnCart)).click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(8000);  \t\t// verify video message text exist. \t\tassertTrue(selenium \t\t\t\t.isTextPresent(\"Add a video message for your recipient\"));  \t\t// verify video message isn't selected. \t\tboolean vff = driver.findElement(By.name(\"giftpixel-isgift\")).isSelected(); \t\t//assertFalse(vff); \t\tSystem.out.println(\"second edit video message status =  \" + vff);  \t\t// click add video message. \t\tAction.selectVieoMesaage(true);  \t\tdriver.findElement(By.id(FreeBouqPage.Id_SaveChangesButton)).click(); \t\tThread.sleep(2000);  \t\t// click use this address button \t\tdriver.findElement(By.id(FreeBouqPage.Id_UseThisAddressButton)).click(); \t\tThread.sleep(5000);  \t\t// verify video message is not show on cart page. \t\tassertTrue(selenium.isTextPresent(\"(Video Message Added)\"));  \t\t// pay with cc \t\tAction.payWithCCOnCartPage(CheckoutPage.Data_CardNum, \t\t\t\tCheckoutPage.Data_CardNum2, CheckoutPage.Data_CardNum2, \t\t\t\tCheckoutPage.Data_CardNum2, CheckoutPage.Data_CardCode, \t\t\t\tCheckoutPage.Data_BillingZip);  \t\t// enter order history \t\tAction.checkOrderHistory();  \t\t/** \t\t * Not finished recording,video message link isn't shown. \t\t */  \t\tassertFalse(selenium.isTextPresent(\"Edit Video Message\"));  \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/BookOrderWithVideo.java"}
{"repo_name": "aCustmoerCancelUpsellBouq", "name for description": "a Custmoer Cancel Upsell Bouq", "comments": "Test", "url": true, "content": "\tpublic void aCustmoerCancelUpsellBouq() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(10000); \t\t \t\t/** \t\t * Buy main and upsell. \t\t */ \t\tAction.globalRegist();  \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(Regist_Login_Page.Xpath_Shop)).click();  \t\t// select bouq. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpath_OriginalSize)).click(); \t\tThread.sleep(2000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000);  \t\tString vef; \t\ttry { \t\t\tvef = driver.findElement(By.id(FreeBouqPage.Id_butonNoThanks)) \t\t\t\t\t.getText(); \t\t\tSystem.out.println(vef); \t\t\tSystem.out.println(\"this bouq has upsell.\");  \t\t\tif (\"NO THANKS\".equals(vef)) {  \t\t\t\t// select first upell bouq \t\t\t\tdriver.findElement(By.xpath(\"//ul[@class= 'clearfix']/li/a\")) \t\t\t\t\t\t.click(); \t\t\t} else { \t\t\t\tSystem.out.println(\"not has upsell\"); \t\t\t} \t\t} catch (NoSuchElementException e) { \t\t\tSystem.out.println(\"not has upsell\"); \t\t}  \t\t// input info. \t\tAction.inputRelationshipOnPDP(FreeBouqPage.Text_RelationshipWife, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_ZipCode);  \t\t// no select vase \t\tAction.inputOssasionAndHaveMessageOnPDP(\"Birthday\", false, \t\t\t\tFreeBouqPage.Data_Message, false, false);  \t\tAction.inputAddressOnPDP(FreeBouqPage.Data_Address, \t\t\t\tFreeBouqPage.Data_PhoneNum);  \t\tAction.clickAddCheckOutOnButtonPDP(); \t\tThread.sleep(5000);  \t\t// check upsell discount is applied automatically. \t\tassertTrue(selenium.isTextPresent(\"2nd Bouq for $15\"));  \t\t// paid with paypal \t\tAction.payWithPPOnCartPage(CheckoutPage.Data_TestPayPalEmail, \t\t\t\tCheckoutPage.Data_TestPayPalPassword);  \t\t// check pay for success, to generate the order \t\tassertTrue(selenium.isTextPresent(OrderConfirmationPage.Text_OrderSucceed)); \t\t \t\t/** \t\t * Enter orderHistory to cancel main bouq. \t\t */ \t\tString orderNum, orderNumUpsell, vf; \t\tdriver.findElement(By.xpath(HomePage.Xpath_AccountIcon)).click();  \t\t// click 'Order history / order tracking' link \t\tdriver.findElement( \t\t\t\tBy.linkText(AccountSetting.Link_OrderHistory.toUpperCase())) \t\t\t\t.click(); \t\tSystem.out.println(AccountSetting.Text_VerifyOrderHistoryLinkShown); \t\t \t\t// get order num value \t\torderNumUpsell = driver.findElement(By.xpath(AccountSetting.Xpth_OrderNum)) \t\t\t\t.getText(); \t\t \t\tEmail.setEmail(orderNumUpsell); \t\t \t\torderNum = driver.findElement(By.xpath(\"//table/tbody/tr[3]/td/a\")) \t\t\t\t.getText(); \t\t \t\t// get upsell price \t\tvf = driver.findElement(By.xpath(\"//table/tbody/tr[2]/td[4]\")).getText(); \t\tSystem.out.println(vf); \t\t \t\tif(\"$18.00\".equals(vf)){ \t\t\t \t\t\tSystem.out.println(\"orderNumUpsell = \" + orderNumUpsell); \t\t\tSystem.out.println(\"orderNum = \" + orderNum); \t\t\t \t\t\t// enter upsell order history \t\t\tdriver.findElement(By.linkText(orderNumUpsell)).click(); \t\t\t \t\t\tdriver.findElement( \t\t\t\t\tBy.id(OrderConfirmationPage.Id_EditButtonOnOrderHistory)) \t\t\t\t\t.click(); \t\t\tThread.sleep(2000);  \t\t\tdriver.findElement( \t\t\t\t\tBy.id(OrderConfirmationPage.Id_cancelButtonOnOrderHistoy)) \t\t\t\t\t.click(); \t\t\tThread.sleep(3000);  \t\t\tassertEquals(\"Please confirm cancellation of the order.\", \t\t\t\t\tcloseAlertAndGetItsText()); \t\t\tThread.sleep(2000); \t\t\t \t\t\tdriver.findElement( \t\t\t\t\tBy.id(AccountSetting.Id_ReturnToOrderHistoryButton)) \t\t\t\t\t.click();  \t\t\t \t\t\t/** \t\t\t * verify main and upsell bouq order both canceled. \t\t\t */ \t\t\tString status1, status2; \t\t\t \t\t\tstatus1 = driver.findElement(By.xpath(\"//table/tbody/tr[2]/td[7]\")).getText(); \t\t\t \t\t\tstatus2 = driver.findElement(By.xpath(\"//table/tbody/tr[3]/td[7]\")).getText(); \t\t\t \t\t\tassertTrue(selenium.getText( \t\t\t\t\t\"//table/tbody/tr[2]/td[7]\").contains(\"Canceled\")); \t\t\t \t\t\tassertTrue(selenium.getText( \t\t\t\t\t\"//table/tbody/tr[3]/td[7]\").contains(\"Canceled\")); \t\t\t \t\t\tSystem.out.println(\"bouqs status = \" + status1); \t\t\tSystem.out.println(\"upsell status = \" + status2);  \t\t} \t\telse{ \t\t\tSystem.out.println(\"don't select upsell bouq.\"); \t\t\tfail(\"don't select upsell bouq.\"); \t\t \t\t} \t\t \t\t \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/CustmoerCancelMainUpsellBouq.java"}
{"repo_name": "cCustmoerCancelMainBouq", "name for description": "c Custmoer Cancel Main Bouq", "comments": "  cancel main bouqs  @throws Exception  Test", "url": true, "content": "\tpublic void cCustmoerCancelMainBouq() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(10000); \t\t \t\t/** \t\t * Buy main and upsell. \t\t */ \t\tAction.globalRegist();  \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(Regist_Login_Page.Xpath_Shop)).click();  \t\t// select bouq. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpath_OriginalSize)).click(); \t\tThread.sleep(2000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000);  \t\tString vef; \t\ttry { \t\t\tvef = driver.findElement(By.id(FreeBouqPage.Id_butonNoThanks)) \t\t\t\t\t.getText(); \t\t\tSystem.out.println(vef); \t\t\tSystem.out.println(\"this bouq has upsell.\");  \t\t\tif (\"NO THANKS\".equals(vef)) {  \t\t\t\t// select first upell bouq \t\t\t\tdriver.findElement(By.xpath(\"//ul[@class= 'clearfix']/li/a\")) \t\t\t\t\t\t.click(); \t\t\t} else { \t\t\t\tSystem.out.println(\"not has upsell\"); \t\t\t} \t\t} catch (NoSuchElementException e) { \t\t\tSystem.out.println(\"not has upsell\"); \t\t}  \t\t// input info. \t\tAction.inputRelationshipOnPDP(FreeBouqPage.Text_RelationshipWife, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_ZipCode);  \t\t// no select vase \t\tAction.inputOssasionAndHaveMessageOnPDP(\"Birthday\", false, \t\t\t\tFreeBouqPage.Data_Message, false, false);  \t\tAction.inputAddressOnPDP(FreeBouqPage.Data_Address, \t\t\t\tFreeBouqPage.Data_PhoneNum);  \t\tAction.clickAddCheckOutOnButtonPDP(); \t\tThread.sleep(5000);  \t\t// check upsell discount is applied automatically. \t\tassertTrue(selenium.isTextPresent(\"2nd Bouq for $15\"));  \t\t// paid with paypal \t\tAction.payWithPPOnCartPage(CheckoutPage.Data_TestPayPalEmail, \t\t\t\tCheckoutPage.Data_TestPayPalPassword);  \t\t// check pay for success, to generate the order \t\tassertTrue(selenium.isTextPresent(OrderConfirmationPage.Text_OrderSucceed)); \t\t \t\t/** \t\t * Enter orderHistory to cancel main bouq. \t\t */ \t\tString orderNum, orderNumUpsell, vf; \t\tdriver.findElement(By.xpath(HomePage.Xpath_AccountIcon)).click();  \t\t// click 'Order history / order tracking' link \t\tdriver.findElement( \t\t\t\tBy.linkText(AccountSetting.Link_OrderHistory.toUpperCase())) \t\t\t\t.click(); \t\tSystem.out.println(AccountSetting.Text_VerifyOrderHistoryLinkShown); \t\t \t\t// get order num value \t\torderNumUpsell = driver.findElement(By.xpath(AccountSetting.Xpth_OrderNum)) \t\t\t\t.getText(); \t\t \t\torderNum = driver.findElement(By.xpath(\"//table/tbody/tr[3]/td/a\")) \t\t\t\t.getText(); \t\t \t\tEmail.setEmail(orderNum); \t\t \t\t// get upsell price \t\tvf = driver.findElement(By.xpath(\"//table/tbody/tr[2]/td[4]\")).getText(); \t\tSystem.out.println(vf); \t\t \t\tif(\"$18.00\".equals(vf)){ \t\t\t \t\t\tSystem.out.println(\"orderNumUpsell = \" + orderNumUpsell); \t\t\tSystem.out.println(\"orderNum = \" + orderNum); \t\t\t \t\t\t// enter main order history \t\t\tdriver.findElement(By.linkText(orderNum)).click(); \t\t\t \t\t\tdriver.findElement( \t\t\t\t\tBy.id(OrderConfirmationPage.Id_EditButtonOnOrderHistory)) \t\t\t\t\t.click(); \t\t\tThread.sleep(2000);  \t\t\tdriver.findElement( \t\t\t\t\tBy.id(OrderConfirmationPage.Id_cancelButtonOnOrderHistoy)) \t\t\t\t\t.click(); \t\t\tThread.sleep(3000);  \t\t\tassertEquals(\"Please confirm cancellation of the order.\", \t\t\t\t\tcloseAlertAndGetItsText()); \t\t\tThread.sleep(2000); \t\t\t \t\t\tdriver.findElement( \t\t\t\t\tBy.id(AccountSetting.Id_ReturnToOrderHistoryButton)) \t\t\t\t\t.click();  \t\t\t \t\t\t/** \t\t\t * verify main and main bouq order both canceled. \t\t\t */ \t\t\tString status1, status2; \t\t\t \t\t\tstatus1 = driver.findElement(By.xpath(\"//table/tbody/tr[2]/td[7]\")).getText(); \t\t\t \t\t\tstatus2 = driver.findElement(By.xpath(\"//table/tbody/tr[3]/td[7]\")).getText(); \t\t\t \t\t\tassertTrue(selenium.getText( \t\t\t\t\t\"//table/tbody/tr[2]/td[7]\").contains(\"Canceled\")); \t\t\t \t\t\tassertTrue(selenium.getText( \t\t\t\t\t\"//table/tbody/tr[3]/td[7]\").contains(\"Canceled\")); \t\t\t \t\t\tSystem.out.println(\"bouqs status = \" + status1); \t\t\tSystem.out.println(\"upsell status = \" + status2);  \t\t} \t\telse{ \t\t\tSystem.out.println(\"don't select upsell bouq.\"); \t\t\tfail(\"don't select upsell bouq.\"); \t\t \t\t} \t\t \t\t \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/CustmoerCancelMainUpsellBouq.java"}
{"repo_name": "checkVipAccountNotUpsellShown", "name for description": "check Vip Account Not Upsell Shown", "comments": "Test", "url": true, "content": "\tpublic void checkVipAccountNotUpsellShown() throws Exception { \t\t \t\tdriver.get(baseUrl); \t\t \t\t/** \t\t * create new account. \t\t */ \t\t \t\t// click X to close POP-UP \t\tdriver.findElement(By.xpath(\"//button[@onclick = 'welcomePopupMini()']\")).click(); \t\tThread.sleep(1000);  \t\t// click \"Log In\" link \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LoginLink_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// click create account button. \t\tdriver.findElement(By.id(Regist_Login_Page.Id_CreateAccount_Global)) \t\t\t\t.click(); \t\tThread.sleep(1000);  \t\t// input first name \t\tAction.inputFirstNameOnGlobal(Regist_Login_Page.Id_SignUpName, \t\t\t\tRegist_Login_Page.strName);  \t\t// input new email \t\tString eml = new Email().newEmail(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.click(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.clear(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.sendKeys(eml); \t\tThread.sleep(3000);  \t\t// get new email address \t\tEmail.setEmail(eml); \t\tSystem.out.println(eml);  \t\t// input password \t\tAction.inputPasswordOnRegistPage( \t\t\t\tRegist_Login_Page.Id_SignUpPassword_Global, \t\t\t\tRegist_Login_Page.strPassword);  \t\t// click 'sign up' button \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(3000);  \t\t// input months \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileMonths, \t\t\t\tRegist_Login_Page.strMonths_Global);  \t\t// input days \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileDays, \t\t\t\tRegist_Login_Page.strDays_Global);  \t\t// input years \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileYears, \t\t\t\tRegist_Login_Page.strYears_Global);  \t\t// select gender \t\tdriver.findElement(By.id(Regist_Login_Page.Id_ProfileMale)).click(); \t\tdriver.findElement( \t\t\t\tBy.xpath(Regist_Login_Page.Xpath_SelectPersonal_Global)) \t\t\t\t.click();  \t\t// submit \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LastSignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000); \t\t \t\t \t\t/** \t\t * add this account to vip. \t\t */  \t\tdriver.get(SiteInfo.adminUrl()); \t\tThread.sleep(5000); \t\t \t\tString getEmail = Email.getEmail();  \t\tSystem.out.println(\"account = \" + getEmail);  \t\tdriver.findElement(By.id(Regist_Login_Page.Id_Email_Data)).clear(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_Email_Data)).sendKeys( \t\t\t\tEmail.adminEmail);  \t\tdriver.findElement(By.id(Regist_Login_Page.Id_Password_Data)).clear(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_Password_Data)).sendKeys( \t\t\t\tEmail.adminPasswd);  \t\tdriver.findElement(By.name(\"Submit\")).click(); \t    driver.findElement(By.linkText(\"Customers\")).click(); \t     \t    // search this account \t    driver.findElement(By.name(\"customerFilter_email\")).clear(); \t    driver.findElement(By.name(\"customerFilter_email\")).sendKeys(getEmail); \t    driver.findElement(By.id(\"submitFilterButton_customer\")).click(); \t    Thread.sleep(2000); \t     \t    // edit this account \t    driver.findElement(By.xpath(\"//img[@title = 'Edit']\")).click(); \t    Thread.sleep(2000); \t     \t    // select vip. \t    new Select(driver.findElement(By.name(\"id_default_group\"))).selectByVisibleText(\"VIP\"); \t    driver.findElement(By.name(\"submitAddcustomer\")).click(); \t    Thread.sleep(2000); \t\t \t     \t\t/** \t\t * login this vip account, enter PDP \t\t * check upsell window isn't shown. \t\t */ \t     \t    driver.get(baseUrl); \t    Thread.sleep(5000); \t     \t    // verify login account \t\tassertTrue(selenium.isElementPresent(\"xpath=//i[@class='icon-logged-in']\"));  \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(Regist_Login_Page.Xpath_Shop)).click();  \t\t// select bouq. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpath_OriginalSize)).click(); \t\tThread.sleep(2000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000); \t\t \t\t// check upsell window isn't shown. \t\tassertFalse(selenium.isTextPresent(\"ADD A 2ND BOUQ FOR JUST $15\")); \t\tassertFalse(selenium.isElementPresent(FreeBouqPage.Id_butonNoThanks)); \t\tSystem.out.println(\"Upsell window not shown because of VIP account having discount.\"); \t \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/Bookorder_corpAccount.java"}
{"repo_name": "BookSubsUpsellForWifeWithVase", "name for description": "Book Subs Upsell For Wife With Vase", "comments": "Test", "url": true, "content": "\tpublic void BookSubsUpsellForWifeWithVase() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(5000);  \t\t// click X to close POP-UP \t\tdriver.findElement(By.xpath(\"//button[@onclick = 'welcomePopupMini()']\")).click(); \t\tThread.sleep(1000);  \t\t// click \"Log In\" link \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LoginLink_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// click create account button. \t\tdriver.findElement(By.id(Regist_Login_Page.Id_CreateAccount_Global)) \t\t\t\t.click(); \t\tThread.sleep(1000);  \t\t// input first name \t\tAction.inputFirstNameOnGlobal(Regist_Login_Page.Id_SignUpName, \t\t\t\tRegist_Login_Page.strName);  \t\t// input new email \t\tString eml = new Email().newEmail(); \t\tSystem.out.println(eml); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.click(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.clear(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.sendKeys(eml); \t\tThread.sleep(3000);  \t\t// input password \t\tAction.inputPasswordOnRegistPage( \t\t\t\tRegist_Login_Page.Id_SignUpPassword_Global, \t\t\t\tRegist_Login_Page.strPassword);  \t\t// click 'sign up' button \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(3000);  \t\t// input months \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileMonths, \t\t\t\tRegist_Login_Page.strMonths_Global);  \t\t// input days \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileDays, \t\t\t\tRegist_Login_Page.strDays_Global);  \t\t// input years \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileYears, \t\t\t\tRegist_Login_Page.strYears_Global);  \t\t// select gender \t\tdriver.findElement(By.id(Regist_Login_Page.Id_ProfileMale)).click(); \t\tdriver.findElement( \t\t\t\tBy.xpath(Regist_Login_Page.Xpath_SelectPersonal_Global)) \t\t\t\t.click();  \t\t// submit \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LastSignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// logout this account. \t\tdriver.findElement(By.xpath(HomePage.Xpath_AccountIcon)).click(); \t\tThread.sleep(1000);  \t\t// click 'logout' link \t\tdriver.findElement( \t\t\t\tBy.linkText(AccountSetting.Link_Logout.toUpperCase())).click();  \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(HomePage.Xpath_ShopOnHeader)).click();  \t\t// select bouq and size with vase. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpath_OriginalSize)).click(); \t\tThread.sleep(2000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000);  \t\t// without upsell \t\tString vef; \t\ttry { \t\t\tvef = driver.findElement(By.id(FreeBouqPage.Id_butonNoThanks)) \t\t\t\t\t.getText(); \t\t\tSystem.out.println(vef);  \t\t\tif (\"NO THANKS\".equals(vef)) {  \t\t\t\t// click 'No thanks' \t\t\t\tdriver.findElement(By.id(FreeBouqPage.Id_butonNoThanks)) \t\t\t\t\t\t.click();  \t\t\t} else { \t\t\t\tSystem.out.println(\"not has upsell\"); \t\t\t} \t\t} catch (NoSuchElementException e) { \t\t\tSystem.out.println(\"not has upsell\"); \t\t}  \t\t// input info. \t\tAction.inputRelationshipOnPDP(FreeBouqPage.Text_RelationshipWife, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_ZipCode);  \t\t// select vase \t\tAction.inputOssasionAndHaveMessageOnPDP(\"Birthday\", false, \t\t\t\tFreeBouqPage.Data_Message, false, true);  \t\tAction.inputAddressOnPDP(FreeBouqPage.Data_Address, \t\t\t\tFreeBouqPage.Data_PhoneNum);  \t\tAction.clickAddCheckOutOnButtonPDP(); \t\tThread.sleep(5000);  \t\ttry {  \t\t\t// click 'no thanks' \t\t\tboolean vel = driver.findElement(By.id(\"stick-with-original\")) \t\t\t\t\t.isEnabled();  \t\t\tif (vel == true) { \t\t\t\tdriver.findElement(By.id(\"stick-with-original\")).click(); \t\t\t\tThread.sleep(1000); \t\t\t} \t\t} catch (NoSuchElementException e) { \t\t\tSystem.out.println(\"not has this button\"); \t\t}  \t\t// verify Subs upsell not shown. \t\t// check 'Romance Package' exist. \t\tassertFalse(selenium.isTextPresent(Subscription.Text_RomancePackage));  \t\t// check Subscription discount 15% not exist \t\tassertFalse(selenium \t\t\t\t.isTextPresent(Subscription.Text_SubscriptionDiscount15)); \t\tThread.sleep(2000);  \t\t// login existing account \t         driver.findElement(By.id(FreeBouqPage.Id_SignUpEmail)).clear();     \tdriver.findElement(By.id(FreeBouqPage.Id_SignUpEmail)).sendKeys(eml);     \t     \tdriver.findElement(By.id(FreeBouqPage.Id_SignUpPassword)).clear();     \tdriver.findElement(By.id(FreeBouqPage.Id_SignUpPassword)).sendKeys(Regist_Login_Page.strPassword);     \t     \tdriver.findElement(By.id(FreeBouqPage.Id_SignUpButton)).click();     \tThread.sleep(3000);     \t \t\t// verify auto apply 'Welcome!' \t\t//assertTrue(selenium.isTextPresent(\"Welcome!\"));  \t\t// verify Subs upsell not shown. \t\t// check 'Romance Package' exist. \t\tassertFalse(selenium.isTextPresent(Subscription.Text_RomancePackage));  \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/SubscriptionUpsell/SubsUpsell_LoginCart_Vase.java"}
{"repo_name": "BookSubsUpsellForMomWithVase", "name for description": "Book Subs Upsell For Mom With Vase", "comments": "Test", "url": true, "content": "\tpublic void BookSubsUpsellForMomWithVase() throws Exception {  \t\tdriver.get(baseUrl); \t\tThread.sleep(5000); \t\t \t\tdriver.findElement(By.xpath(\"//button[@onclick = 'welcomePopupMini()']\")).click(); \t\t \t\t// click 'shop' button \t\tdriver.findElement(By.xpath(Regist_Login_Page.Xpath_Shop)).click();  \t\t// select bouq and size with vase. \t\tdriver.findElement(By.cssSelector(FreeBouqPage.Css_SelectBouqName)) \t\t\t\t.click(); \t\tThread.sleep(5000);  \t\tdriver.findElement(By.xpath(FreeBouqPage.Xpath_OriginalSize)).click(); \t\tThread.sleep(2000);  \t\t// click send this bouq. \t\tdriver.findElement(By.id(FreeBouqPage.Id_SendThisBouqButton)).click(); \t\tThread.sleep(2000);  \t\t// without upsell \t\tString vef; \t\ttry { \t\t\tvef = driver.findElement(By.id(FreeBouqPage.Id_butonNoThanks)) \t\t\t\t\t.getText(); \t\t\tSystem.out.println(vef);  \t\t\tif (\"NO THANKS\".equals(vef)) {  \t\t\t\t// click 'No thanks' \t\t\t\tdriver.findElement(By.id(FreeBouqPage.Id_butonNoThanks)) \t\t\t\t\t\t.click();  \t\t\t} else { \t\t\t\tSystem.out.println(\"not has upsell\"); \t\t\t} \t\t} catch (NoSuchElementException e) { \t\t\tSystem.out.println(\"not has upsell\"); \t\t}  \t\t// input info. \t\tAction.inputRelationshipOnPDP(FreeBouqPage.Text_RelationshipMom, \t\t\t\tFreeBouqPage.Data_FirstName, FreeBouqPage.Data_LastName, \t\t\t\tFreeBouqPage.Data_ZipCode);  \t\t// select vase \t\tAction.inputOssasionAndHaveMessageOnPDP(\"Birthday\", false, \t\t\t\tFreeBouqPage.Data_Message, false, true);  \t\tAction.inputAddressOnPDP(FreeBouqPage.Data_Address, \t\t\t\tFreeBouqPage.Data_PhoneNum);  \t\tAction.clickAddCheckOutOnButtonPDP(); \t\tThread.sleep(5000);  \t\ttry {  \t\t\t// click 'no thanks' \t\t\tboolean vel = driver.findElement(By.id(\"stick-with-original\")) \t\t\t\t\t.isEnabled();  \t\t\tif (vel == true) { \t\t\t\tdriver.findElement(By.id(\"stick-with-original\")).click(); \t\t\t\tThread.sleep(1000); \t\t\t} \t\t} catch (NoSuchElementException e) { \t\t\tSystem.out.println(\"not has this button\"); \t\t}   \t\t// verify Subs upsell not shown. \t\t// check 'MOTHERLY LOVE PACKAGE' not exist.         assertFalse(selenium.isTextPresent(Subscription.Text_MotherlyLovePackage));   \t\t// check Subscription discount 15% not exist \t\tassertFalse(selenium \t\t\t\t.isTextPresent(Subscription.Text_SubscriptionDiscount15)); \t\tThread.sleep(2000); \t\t \t\tString eml = new Email().newEmail(); \t\tEmail.setReferralByUser(eml); \t\tAction.inputNewEmailRegistFromCart(CheckoutPage.Id_SignUpEmail,eml); \t       \t\t//input password \t\tAction.inputPasswordRegistFromCart(CheckoutPage.Id_SignUpPassword,Regist_Login_Page.strPassword); \t\t     \t\t//click 'sign up' button \t\tdriver.findElement(By.id(CheckoutPage.Id_SignUpButton)).click(); \t\tThread.sleep(5000);  \t\t// verify auto apply 'Welcome!' \t\t//assertTrue(selenium.isTextPresent(\"Welcome\"));  \t\t// verify Subs upsell not shown. \t\t// check 'MOTHERLY LOVE PACKAGE' not exist.         assertFalse(selenium.isTextPresent(Subscription.Text_MotherlyLovePackage));   \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/SubscriptionUpsell/SubsUpsell_RegistCart_Vase.java"}
{"repo_name": "CreateNewAccountAndBuyBouqs", "name for description": "Create New Account And Buy Bouqs", "comments": "Test", "url": true, "content": "\tpublic void CreateNewAccountAndBuyBouqs() throws Exception {  \t\t// open test.thebouqs.com web. \t\tdriver.get(baseUrl);  \t\t// click X to close POP-UP \t\tdriver.findElement(By.xpath(\"//button[@onclick = 'welcomePopupMini()']\")).click(); \t\tThread.sleep(1000);  \t\t// click \"Log In\" link \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LoginLink_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t\t// click create account button. \t\tdriver.findElement(By.id(Regist_Login_Page.Id_CreateAccount_Global)) \t\t\t\t.click(); \t\tThread.sleep(1000);  \t\t// input first name \t\tAction.inputFirstNameOnGlobal(Regist_Login_Page.Id_SignUpName, \t\t\t\tRegist_Login_Page.strName);  \t\t// input new email \t\tString eml = new Email().newEmail(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.click(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.clear(); \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpEmail_Global)) \t\t\t\t.sendKeys(eml); \t\tThread.sleep(3000);  \t\t// get new email address \t\tEmail.setEmail(eml); \t\tSystem.out.println(eml);  \t\t// input password \t\tAction.inputPasswordOnRegistPage( \t\t\t\tRegist_Login_Page.Id_SignUpPassword_Global, \t\t\t\tRegist_Login_Page.strPassword);  \t\t// click 'sign up' button \t\tdriver.findElement(By.id(Regist_Login_Page.Id_SignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(3000);  \t\t// input months \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileMonths, \t\t\t\tRegist_Login_Page.strMonths_Global);  \t\t// input days \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileDays, \t\t\t\tRegist_Login_Page.strDays_Global);  \t\t// input years \t\tAction.inputBirthdayOnGlobal(Regist_Login_Page.Id_ProfileYears, \t\t\t\tRegist_Login_Page.strYears_Global);  \t\t// select gender \t\tdriver.findElement(By.id(Regist_Login_Page.Id_ProfileMale)).click(); \t\tdriver.findElement( \t\t\t\tBy.xpath(Regist_Login_Page.Xpath_SelectPersonal_Global)) \t\t\t\t.click();  \t\t// submit \t\tdriver.findElement(By.id(Regist_Login_Page.Id_LastSignUpButton_Global)) \t\t\t\t.click(); \t\tThread.sleep(2000);  \t}", "path": "Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/GuestUser_LoginWindow_NotSaturday.java"}
{"repo_name": "testAddAndUpdateIndex", "name for description": "test Add And Update Index", "comments": "Test", "url": true, "content": "    public void testAddAndUpdateIndex() throws Exception{         driver.get(baseUrl + \"/admin/clear-index\");          // add a document         StringBuffer sb = new StringBuffer(\"<pmdocument><submissions>\");         sb.append(TestUtils.getTestSubmission(0));         sb.append(\"</submissions></pmdocument>\");         String sourceLocation = BSInterfaceTestApplication.getInstance().getPreferences().getString(\"bs.studies.source-location\");         File file = new File(sourceLocation, \"temp-test-study.xml\");         FileUtils.writeStringToFile(file, sb.toString());         driver.get(baseUrl + \"/admin/reload-xml/temp-test-study.xml\");         file.delete();          driver.get(baseUrl + \"/studies\");         assertEquals(\"1 result\", driver.findElements(By.cssSelector(\".ae-stats\")).get(0).getText());          file = new File(sourceLocation, \"temp-test-study.xml\");         FileUtils.writeStringToFile(file, StringUtils.replaceOnce(sb.toString(), \"<value>Test Document 0</value>\", \"<value>Updated Test Document 0</value>\"));         driver.get(baseUrl + \"/admin/reload-xml/temp-test-study.xml\");         file.delete();         driver.get(baseUrl + \"/studies/TEST-0\");         assertEquals(\"Updated Test Document 0\",driver.findElement(By.cssSelector(\"#ae-detail-title\")).getText());         driver.get(baseUrl + \"/admin/clear-index\");         driver.get(baseUrl + \"/admin/reload-xml/\");     }", "path": "webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/IndexTest.java"}
{"repo_name": "testCreateReviewWithAbapBackend", "name for description": "test Create Review With Abap Backend", "comments": "Test", "url": true, "content": "\tpublic void testCreateReviewWithAbapBackend() { \t\tSystem.out.println(\"Opening page \" + serverUrl + applicationPath); \t\tdriver.get(serverUrl + applicationPath); \t\t \t\ttry { \t\t\tThread.sleep(5000); \t\t} catch (InterruptedException e) { \t\t\te.printStackTrace(); \t\t} \t\t \t\tCustomerReviewsPage reviewsPage = CustomerReviewsPage.create(driver);  \t\t// ABAP backend system (default as defined in config.js) \t\tSettingsPage abapsettingsview = reviewsPage.navigateToSettings(); \t\tabapsettingsview.switchToAbapBackend(); \t\tabapsettingsview.pressOk(); \t\tabapsettingsview.confirmRefresh();  \t\ttry { \t\t\tThread.sleep(5000); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t}  \t\treviewsPage.waitForPageAfterRefresh();  \t\tassertEquals(\"Default category does not match\", \"All Categories\", \t\t\t\treviewsPage.getCategory());  \t\ttry { \t\t\tThread.sleep(400); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t} \t\t \t\tassertEquals(\"Default product does not match\", \t\t\t\t\"10\\\" Portable DVD player\", reviewsPage.getProduct()); \t\tassertFalse(\"First reviewer name is empty\", reviewsPage \t\t\t\t.getFirstReviewer().isEmpty()); \t\tassertFalse(\"First review comment is empty\", reviewsPage \t\t\t\t.getFirstReviewComment().isEmpty());  \t\treviewsPage.selectCategory(\"Speakers\");  \t\ttry { \t\t\tThread.sleep(4000); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t} \t\t \t\treviewsPage.selectProduct(\"Sound Booster\");  \t\ttry { \t\t\tThread.sleep(1000); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t} \t\t \t\tCustomerReviewCreationPage reviewCreationPage = reviewsPage \t\t\t\t.writeCustomerReview();  \t\tWebElement myDynamicElement = (new WebDriverWait(driver, 20)) \t\t\t\t.until(ExpectedConditions.presenceOfElementLocated(By \t\t\t\t\t\t.id(\"review-comment-text-area-id\")));  \t\tString reviewId = UUID.randomUUID().toString(); \t\treviewCreationPage.writeReviewComments(\"Good performance (\" + reviewId \t\t\t\t+ \")\"); \t\treviewCreationPage.setReviewRating(3); \t\treviewCreationPage.setFirstName(\"James\"); \t\treviewCreationPage.setLastName(\"Field\");  \t\treviewsPage = reviewCreationPage.submitAndConfirmReview();  \t\tassertEquals(3, reviewsPage.getFirstReviewRating()); \t\tassertTrue(reviewsPage.getFirstReviewComment().contains(reviewId)); \t\tassertEquals(\"James Field\", reviewsPage.getFirstReviewer()); \t}", "path": "espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"}
{"repo_name": "testCreateReviewWithCloudBackend", "name for description": "test Create Review With Cloud Backend", "comments": " TODO: Enable as soon as ESPM OData service bug for reviews case is fixed  @Test", "url": true, "content": "\tpublic void testCreateReviewWithCloudBackend() { \t\tdriver.get(serverUrl + applicationPath); \t\tCustomerReviewsPage reviewsPage = CustomerReviewsPage.create(driver);  \t\t// HANA Cloud remote \t\tSettingsPage cloudsettingsview = reviewsPage.navigateToSettings(); \t\tcloudsettingsview.switchToHanaCloudRemote(); \t\tcloudsettingsview.pressOk(); \t\tcloudsettingsview.confirmRefresh();  \t\ttry { \t\t\tThread.sleep(5000); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t}  \t\treviewsPage.waitForPageAfterRefresh();  \t\tassertEquals(\"Default category does not match\", \"All Categories\", \t\t\t\treviewsPage.getCategory());  \t\ttry { \t\t\tThread.sleep(400); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t} \t\tassertEquals(\"Default product does not match\", \t\t\t\t\"10\\\" Portable DVD player\", reviewsPage.getProduct()); \t\tassertFalse(\"First reviewer name is empty\", reviewsPage \t\t\t\t.getFirstReviewer().isEmpty()); \t\tassertFalse(\"First review comment is empty\", reviewsPage \t\t\t\t.getFirstReviewComment().isEmpty());  \t\treviewsPage.selectCategory(\"Speakers\");  \t\ttry { \t\t\tThread.sleep(400); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t} \t\treviewsPage.selectProduct(\"Sound Booster\");  \t\ttry { \t\t\tThread.sleep(400); \t\t} catch (InterruptedException e) { \t\t\t// TODO Auto-generated catch block \t\t\te.printStackTrace(); \t\t}  \t\tCustomerReviewCreationPage reviewCreationPage = reviewsPage \t\t\t\t.writeCustomerReview();  \t\tWebElement myDynamicElement = (new WebDriverWait(driver, 20)) \t\t\t\t.until(ExpectedConditions.presenceOfElementLocated(By \t\t\t\t\t\t.id(\"review-comment-text-area-id\")));  \t\tString reviewId = UUID.randomUUID().toString(); \t\treviewCreationPage.writeReviewComments(\"Good performance (\" + reviewId \t\t\t\t+ \")\"); \t\treviewCreationPage.setReviewRating(3); \t\treviewCreationPage.setFirstName(\"James\"); \t\treviewCreationPage.setLastName(\"Field\");  \t\treviewsPage = reviewCreationPage.submitAndConfirmReview();  \t\tassertEquals(3, reviewsPage.getFirstReviewRating()); \t\tassertTrue(reviewsPage.getFirstReviewComment().contains(reviewId)); \t\tassertEquals(\"James Field\", reviewsPage.getFirstReviewer()); \t}", "path": "espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"}
{"repo_name": "testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain", "name for description": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"simpleTest.html\");     driver.get(url);      Cookie cookie = options.getCookieNamed(\"fish\");     assertNull(String.valueOf(cookie), cookie);   }", "path": "common/test/java/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testGetCookieDoesNotRetriveBeyondCurrentDomain", "name for description": "test Get Cookie Does Not Retrive Beyond Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testGetCookieDoesNotRetriveBeyondCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"\");     driver.get(url);      Set<Cookie> cookies = options.getCookies();     assertFalse(cookies.contains(cookie1));   }", "path": "common/test/java/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore({FIREFOX, IE, CHROME, SELENESE})", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      // This should work     assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "common/test/java/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testCadastroCausaNaoDoacao", "name for description": "test Cadastro Causa Nao Doacao", "comments": "Test", "url": true, "content": "  public void testCadastroCausaNaoDoacao() throws Exception {     driver.get(baseUrl + \"/sincap/\");     driver.findElement(By.id(\"password\")).clear();     driver.findElement(By.id(\"password\")).sendKeys(\"abc123\");     driver.findElement(By.id(\"username\")).clear();     driver.findElement(By.id(\"username\")).sendKeys(\"555.555.555-55\");     driver.findElement(By.id(\"botaoLogin\")).click();     driver.findElement(By.cssSelector(\"i.icon-cog\")).click();     driver.findElement(By.cssSelector(\"#dashboard-menu > li > a > span\")).click();     driver.findElement(By.xpath(\"//button[@type='button']\")).click();     driver.findElement(By.id(\"nome\")).clear();     driver.findElement(By.id(\"nome\")).sendKeys(\"causa de nao doacao\");     new Select(driver.findElement(By.id(\"tipoNaoDoacao\"))).selectByVisibleText(\"PROBLEMAS_LOGISTICOS\");     driver.findElement(By.cssSelector(\"button.btn-flat.default\")).click();   }", "path": "src/test/java/br/ifes/leds/sincap/web/test/CadastroCausaNaoDoacao.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);     Assert.assertFalse(\"\".equals(homepage.header.getText()));   }", "path": "prestashop-sample/src/test/java/ru/stqa/selenium/samples/prestashop/SampleTestNgTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "addInSumFilmNot", "name for description": "add In Sum Film Not", "comments": "Test", "url": true, "content": "\tpublic void addInSumFilmNot() throws Exception { \t\t// \u0412\u0445\u043e\u0434 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \t\tdriver.get(baseUrl + \"/php4dvd/\"); \t\tString username = \"username\"; \t\tdriver.findElement(By.id(username)).clear(); \t\tdriver.findElement(By.id(username)).sendKeys(\"admin\"); \t\tString password = \"password\"; \t\tdriver.findElement(By.name(password)).clear(); \t\tdriver.findElement(By.name(password)).sendKeys(\"admin\"); \t\tdriver.findElement(By.name(\"submit\")).click();  \t\t// \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u0433\u043e \u0444\u0438\u043b\u044c\u043c\u0430 \u0431\u0435\u0437 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \t\tdriver.findElements(By.cssSelector(\".button>div>a>img\")).get(0).click(); \t\t(new WebDriverWait(driver, 30, 1)) \t\t\t\t.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(\".required.error\"))); \t\tdriver.findElement(By.cssSelector(\"input[name='name']\")).clear(); \t\tdriver.findElement(By.cssSelector(\"input[name='year']\")).clear(); \t\tdriver.findElements(By.cssSelector(\"input[type='submit']\")).get(1).click(); \t\tAssertJUnit.assertTrue(\"\u041f\u043e\u043b\u0435 \u0433\u043e\u0434 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e\", \t\t\t\tdriver.findElement(By.cssSelector(\"label[for='year']\")).getText().equals(\"This field is required\")); \t\tAssertJUnit.assertTrue(\"\u041f\u043e\u043b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u0430 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e\", \t\t\t\tdriver.findElement(By.cssSelector(\"label[for='name']\")).getText().equals(\"This field is required\"));  \t\tdriver.quit(); \t}", "path": "src/test/java/LessonsSe/AddInSumFilmNot.java"}
{"repo_name": "addInSumFilmNotYear", "name for description": "add In Sum Film Not Year", "comments": "Test", "url": true, "content": "\tpublic void addInSumFilmNotYear() throws Exception { \t\t// \u0412\u0445\u043e\u0434 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \t\tdriver.get(baseUrl + \"/php4dvd/\"); \t\tString username = \"username\"; \t\tdriver.findElement(By.id(username)).clear(); \t\tdriver.findElement(By.id(username)).sendKeys(\"admin\"); \t\tString password = \"password\"; \t\tdriver.findElement(By.name(password)).clear(); \t\tdriver.findElement(By.name(password)).sendKeys(\"admin\"); \t\tdriver.findElement(By.name(\"submit\")).click();  \t\t// \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u043c\u0430 \u0431\u0435\u0437 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0433\u043e\u0434\u0430 \t\tdriver.findElements(By.cssSelector(\".button>div>a>img\")).get(0).click(); \t\t(new WebDriverWait(driver, 30, 1)) \t\t\t\t.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(\".required.error\"))); \t\tdriver.findElement(By.cssSelector(\"input[name='name']\")).sendKeys(\"NewFilm2\"); \t\tdriver.findElement(By.cssSelector(\"input[name='year']\")).clear(); \t\tdriver.findElements(By.cssSelector(\"input[type='submit']\")).get(1).click(); \t\tAssertJUnit.assertTrue(\"\u041f\u043e\u043b\u0435 \u0433\u043e\u0434 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e\", \t\t\t\tdriver.findElement(By.cssSelector(\"label[for='year']\")).getText().equals(\"This field is required\"));  \t\tdriver.quit(); \t}", "path": "src/test/java/LessonsSe/AddInSumFilmNotYear.java"}
{"repo_name": "addInSumFilmNotTitle", "name for description": "add In Sum Film Not Title", "comments": "Test", "url": true, "content": "\tpublic void addInSumFilmNotTitle() throws Exception { \t\t// \u0412\u0445\u043e\u0434 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \t\tdriver.get(baseUrl + \"/php4dvd/\"); \t\tString username = \"username\"; \t\tdriver.findElement(By.id(username)).clear(); \t\tdriver.findElement(By.id(username)).sendKeys(\"admin\"); \t\tString password = \"password\"; \t\tdriver.findElement(By.name(password)).clear(); \t\tdriver.findElement(By.name(password)).sendKeys(\"admin\"); \t\tdriver.findElement(By.name(\"submit\")).click();  \t\t// \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u043c\u0430 \u0431\u0435\u0437 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \t\tdriver.findElements(By.cssSelector(\".button>div>a>img\")).get(0).click(); \t\t(new WebDriverWait(driver, 30, 1)) \t\t\t\t.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(\".required.error\"))); \t\tdriver.findElement(By.cssSelector(\"input[name='year']\")).sendKeys(\"2010\"); \t\tdriver.findElements(By.cssSelector(\"input[type='submit']\")).get(1).click(); \t\tAssertJUnit.assertTrue(\"\u041f\u043e\u043b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u0430 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e\", \t\t\t\tdriver.findElement(By.cssSelector(\"label[for='name']\")).getText().equals(\"This field is required\"));  \t\tdriver.quit(); \t}", "path": "src/test/java/LessonsSe/AddInSumFilmNotTitle.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);     AssertJUnit.assertFalse(\"\".equals(homepage.header.getText()));   }", "path": "src/test/java/LessonsSe/SampleTestNgTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "    public void testShouldBeAbleToClickOnAnElementInTheViewport() {         String url = appServer.whereIs(\"click_out_of_bounds.html\");          driver.get(url);         WebElement button = driver.findElement(By.id(\"button\"));          try {             button.click();         } catch (MoveTargetOutOfBoundsException e) {             fail(\"Should not be out of bounds: \" + e.getMessage());         }     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test", "url": true, "content": "    public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {         String url = appServer.whereIs(\"click_too_big.html\");         driver.get(url);          WebElement element = driver.findElement(By.id(\"click\"));          element.click();          wait.until(titleIs(\"clicks\"));     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test", "url": true, "content": "    public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {         String url = appServer.whereIs(\"click_too_big_in_frame.html\");         driver.get(url);          WebElement frame = driver.findElement(By.id(\"iframe1\"));         driver.switchTo().frame(frame);          WebElement element = driver.findElement(By.id(\"click\"));         element.click();          wait.until(titleIs(\"clicks\"));     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE, QTWEBKIT},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "    public void testShouldBeAbleToClickOnAnElementInTheViewport() {         String url = appServer.whereIs(\"click_out_of_bounds.html\");          driver.get(url);         WebElement button = driver.findElement(By.id(\"button\"));          try {             button.click();         } catch (MoveTargetOutOfBoundsException e) {             fail(\"Should not be out of bounds: \" + e.getMessage());         }     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test", "url": true, "content": "    public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {         String url = appServer.whereIs(\"click_too_big.html\");         driver.get(url);          WebElement element = driver.findElement(By.id(\"click\"));          element.click();          wait.until(titleIs(\"clicks\"));     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test", "url": true, "content": "    public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {         String url = appServer.whereIs(\"click_too_big_in_frame.html\");         driver.get(url);          WebElement frame = driver.findElement(By.id(\"iframe1\"));         driver.switchTo().frame(frame);          WebElement element = driver.findElement(By.id(\"click\"));         element.click();          wait.until(titleIs(\"clicks\"));     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "    public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {         String url = \"qtwidget://TypingTestWidget\";         driver.get(url);          WebElement element = driver.findElement(By.id(\"result\"));         assertTrue(element.isDisplayed());     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/nativetests/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test", "url": true, "content": "    public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {         WebDriver.Window window = driver.manage().window();         Dimension originalSize = window.getSize();          try {             // Short in the Y dimension             window.setSize(new Dimension(1024, 500));              String url = \"qtwidget://TypingTestWidget\";             driver.get(url);              WebElement element = driver.findElement(By.id(\"result\"));             assertTrue(element.isDisplayed());         } finally {             window.setSize(originalSize);         }     }", "path": "java/client/test/org/openqa/selenium/qtwebkit/nativetests/VisibilityTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE, QTWEBKIT}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "allocateUserToProjectAndRoles", "name for description": "allocate User To Project And Roles", "comments": "", "url": true, "content": "    public void allocateUserToProjectAndRoles(User aUser, Project aProject, List<Role> roles) {          String urlForProjectMembership = redmineURL + String.format(\"/users/%d/edit?tab=memberships\", aUser.getId());          aDriver.get(urlForProjectMembership);          // div#tab-content-memberships form input[type='submit']         WebElement addButton = wait.until(                             ExpectedConditions.elementToBeClickable(By.cssSelector(                                     \"div#tab-content-memberships form input[type='submit']\")));          Select projects = new Select(aDriver.findElement(By.id(\"membership_project_id\")));         projects.selectByValue(String.valueOf(aProject.getId()));          for(Role aRole : roles){             WebElement roleCheckBox = aDriver.findElement(                                             By.cssSelector(\"input#membership_role_ids_[value='\" + aRole.getId() + \"']\"));              if(!roleCheckBox.isSelected()){                 roleCheckBox.click();             }         }          addButton.click();          // this might be brittle and might have to wait for AJAX action to complete         // probably OK because the server request will complete, we just may not         // hang around for the response before the page reloads with more test actions         // this is a potential source of tech debt       }", "path": "src/main/java/com/eviltester/redmine/RedMineGUI.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testUsersHaveDiffLists", "name for description": "test Users Have Diff Lists", "comments": "Test", "url": true, "content": "    public void testUsersHaveDiffLists() {         try {             driver.get(studentListUrl + usernameParamPrefix + userA);             Select userASchoolSelect = new Select(driver.findElement(By.id(\"schoolSelect\")));             String userASchoolItem = userASchoolSelect.getOptions().get(1).getText();                          driver.get(studentListUrl + usernameParamPrefix + userB);             Select userBSchoolSelect = new Select(driver.findElement(By.id(\"schoolSelect\")));             String userBSchoolItem = userBSchoolSelect.getOptions().get(1).getText();                          assertFalse(userBSchoolItem.equals(userASchoolItem));             } catch (Exception e) {                 System.err.println(e.getMessage());             } finally {                 driver.close();             }     }", "path": "sli/dashboard/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"}
{"repo_name": "checkIfThereAreFields", "name for description": "check If There Are Fields", "comments": "Test", "url": true, "content": "    public void checkIfThereAreFields(){         FirefoxDriver driver = new FirefoxDriver();         driver.get(baseUrl);          int numberOfInputs = 2;          List<WebElement> inputs = driver.findElementsByCssSelector(\"input\");         WebElement button = driver.findElementByCssSelector(\"button\");          assertTrue(inputs.size() == numberOfInputs && button != null);         driver.quit();     }", "path": "test/LogInTest.java"}
{"repo_name": "testCreationFilmWithoutYear", "name for description": "test Creation Film Without Year", "comments": "Test", "url": true, "content": "  public void testCreationFilmWithoutYear() throws Exception { \tdriver.get(baseUrl + \"/php4dvd/\"); \tdriver.findElement(By.id(\"username\")).clear();     driver.findElement(By.id(\"username\")).sendKeys(\"admin\"); \tdriver.findElement(By.name(\"password\")).clear();     driver.findElement(By.name(\"password\")).sendKeys(\"admin\"); \tdriver.findElement(By.name(\"submit\")).click(); \tWebDriverWait wait=new WebDriverWait(driver, 10); \twait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")));     driver.findElement(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")).click();     driver.findElement(By.name(\"imdbid\")).clear();     driver.findElement(By.name(\"imdbid\")).sendKeys(\"1\");     driver.findElement(By.name(\"name\")).clear();     driver.findElement(By.name(\"name\")).sendKeys(\"film\");     driver.findElement(By.id(\"submit\")).click();     wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"input[class=\\\"required digits error\\\"]\")));     driver.quit();   }", "path": "src/test/java/ru/stqa/selenium/CreationFilmWithoutYear.java"}
{"repo_name": "testSearchFilmNotFound", "name for description": "test Search Film Not Found", "comments": "Test", "url": true, "content": "  public void testSearchFilmNotFound() throws Exception { \tdriver.get(baseUrl + \"/php4dvd/\"); \tdriver.findElement(By.id(\"username\")).clear(); \tdriver.findElement(By.id(\"username\")).sendKeys(\"admin\"); \tdriver.findElement(By.name(\"password\")).clear(); \tdriver.findElement(By.name(\"password\")).sendKeys(\"admin\"); \tdriver.findElement(By.name(\"submit\")).click(); \tWebDriverWait wait=new WebDriverWait(driver, 10); \twait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"div.movie_cover\"))); \tdriver.findElement(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")).click(); \twait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"input#imdbsearch\")));     driver.findElement(By.id(\"imdbsearch\")).clear();     driver.findElement(By.id(\"imdbsearch\")).sendKeys(\"ertretretretersdfdsfdsfds\");     driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();     wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.cssSelector(\"div.content\")));     int count1=driver.findElement(By.cssSelector(\"div.content > div\")).findElements(By.tagName(\"tr\")).size();     assertEquals(count1,0);     System.out.println(\"\u00cd\u00e0\u00e9\u00e4\u00e5\u00ed\u00ee \u00f4\u00e8\u00eb\u00fc\u00ec\u00ee\u00e2 -\"+ count1+\"\u00f8\u00f2\");     driver.findElement(By.id(\"imdbsearch\")).clear();     driver.findElement(By.id(\"imdbsearch\")).sendKeys(\"abfdgfddfgfdgdf\");     driver.findElement(By.cssSelector(\"input[type=\\\"submit\\\"]\")).click();     wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.cssSelector(\"div.content\")));     int count2=driver.findElement(By.cssSelector(\"div.content > div\")).findElements(By.tagName(\"tr\")).size();     assertEquals(count2,0);     System.out.println(\"\u00cd\u00e0\u00e9\u00e4\u00e5\u00ed\u00ee \u00f4\u00e8\u00eb\u00fc\u00ec\u00ee\u00e2 -\"+ count2+\"\u00f8\u00f2\");     driver.quit();   }", "path": "src/test/java/ru/stqa/selenium/SearchFilmNotFound.java"}
{"repo_name": "testCreationFilmWithNotValidNumber", "name for description": "test Creation Film With Not Valid Number", "comments": "Test", "url": true, "content": "  public void testCreationFilmWithNotValidNumber() throws Exception { \tdriver.get(baseUrl + \"/php4dvd/\"); \tdriver.findElement(By.id(\"username\")).clear(); \tdriver.findElement(By.id(\"username\")).sendKeys(\"admin\"); \tdriver.findElement(By.name(\"password\")).clear(); \tdriver.findElement(By.name(\"password\")).sendKeys(\"admin\"); \tdriver.findElement(By.name(\"submit\")).click();     WebDriverWait wait=new WebDriverWait(driver, 10); \twait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")));     driver.findElement(By.cssSelector(\"img[alt=\\\"Add movie\\\"]\")).click();     driver.findElement(By.name(\"name\")).clear();     driver.findElement(By.name(\"name\")).sendKeys(\"dfd\");     driver.findElement(By.name(\"year\")).clear();     driver.findElement(By.name(\"year\")).sendKeys(\"dfdf\");     driver.findElement(By.id(\"submit\")).click();     wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"input[class=\\\"required digits error\\\"]\")));     driver.quit();   }", "path": "src/test/java/ru/stqa/selenium/CreationFilmWithNotValidNumber.java"}
{"repo_name": "whenEuAcessoAPaginaQueExibeInformacoesDoTestResult", "name for description": "when Eu Acesso A Pagina Que Exibe Informacoes Do Test Result", "comments": "When(\"eu acesso a pagina que exibe informacoes do test result\")", "url": true, "content": "\tpublic void whenEuAcessoAPaginaQueExibeInformacoesDoTestResult() { \t\tdriver.get(url); \t}", "path": "src/test/java/stories/ResultaDosTestesSteps.java"}
{"repo_name": "whenDesejoObterInformacoesSobreEsseTestResult", "name for description": "when Desejo Obter Informacoes Sobre Esse Test Result", "comments": "When(\"desejo obter informacoes sobre esse test result\")", "url": true, "content": "\tpublic void whenDesejoObterInformacoesSobreEsseTestResult() {  \t\tdriver.get(url); \t}", "path": "src/test/java/stories/ResultaDosTestesSteps.java"}
{"repo_name": "whenEuEntroNaPaginaQueExibeInformacoesDoTestResult", "name for description": "when Eu Entro Na Pagina Que Exibe Informacoes Do Test Result", "comments": "When(\"eu entro na pagina que exibe informacoes do testResult    \")", "url": true, "content": "\tpublic void whenEuEntroNaPaginaQueExibeInformacoesDoTestResult(){ \t\tdriver.get(url);\t \t}", "path": "src/test/java/stories/consulta_de_resultados.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "@Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);      //Explicit wait examples     WebDriverWait wait = new WebDriverWait(driver, 1);     wait.until(ExpectedConditions.presenceOfElementLocated(By.id(homepage.HEADER_LOCATOR)));     wait.until(ExpectedConditions.visibilityOf(homepage.header));     wait.until(ExpectedConditions.visibilityOfElementLocated(homepage.sameHeaderBy));     wait.until(ExpectedConditions.elementToBeClickable(homepage.sameHeader));     wait.until(ExpectedConditions.elementToBeSelected(homepage.sameHeaderBy));     wait.until(ExpectedConditions.elementToBeSelected(homepage.header));     wait.until(ExpectedConditions.textToBePresentInElement(homepage.header, \"Header\"));     wait.until(ExpectedConditions.stalenessOf(homepage.header));     //wait.until(ExpectedConditions.alertIsPresent(homepage.header));     wait.until(ExpectedConditions.titleContains(\"Header\"));       Assert.assertFalse(\"\".equals(homepage.header.getText()));    }", "path": "src/test/java/ua/oit/selenium2/ZSampleTest.java"}
{"repo_name": "doTestLoadingJQuery", "name for description": "do Test Loading J Query", "comments": "", "url": true, "content": "    public void doTestLoadingJQuery(String jQueryVersion, String browserVersion) throws Exception {         String html                 = \"<!DOCTYPE HTML><html><head><title>foo</title>\" + getJqueryScript(jQueryVersion) + \"<script>\\n\"                 + \"alert(window.jQuery !== undefined);\\n\"                 + \"</script></head><body>\\n\"                 + \"</body></html>\";          String initialUrl = \"http://localhost:8080/myDummyApp/index.html\";         CollectingAlertHandler alertHandler = new CollectingAlertHandler();          HtmlUnitDriver driver = createDriver(alertHandler, browserVersion, new StringWebResponse(html, new URL(initialUrl)));          // load the mock html page         driver.get(initialUrl);         assertThat(\"jQuery did not load succesfully.\",                 alertHandler.getCollectedAlerts().get(0), containsString(\"true\"));     }", "path": "src/test/java/eu/tuxoo/test/JQueryLoadingTest.java"}
{"repo_name": "testMySubscriptionForMCAT", "name for description": "test My Subscription For MCAT", "comments": "Test", "url": true, "content": "\tpublic void testMySubscriptionForMCAT() throws Exception {  \t\tdriver.findElement(By.xpath(\"//button//i[@class='icon-bars']\")).click(); \t\tdriver.findElement(By.xpath(\"//div[@class='nav-item'][contains(text(),'My Subscriptions')]\")).click(); \t\tassertEquals(\"MCAT Biology\", \t\t\t\tdriver.findElement(By.xpath(\"//div[@id='purchase-container']//td[contains(text(),'MCAT Biology')]\")) \t\t\t\t\t\t.getText()); \t\tassertEquals(\"INACTIVE\", driver.findElement(By.xpath(\"//descendant::span[@class = 'status'][2]\")).getText()); \t\tassertTrue(isElementPresent(By.xpath(\"(//a[contains(text(),'SUBSCRIBE')])[2]\"))); \t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'SUBSCRIBE')])[2]\")).click(); \t\t// driver.get(baseUrl + \"/login\"); \t\t// driver.findElement(By.xpath(\"//button//i[@class='icon-bars']\")).click();  \t}", "path": "PicmonicAutomation/src/com/picmonic/selenium/tests/MySubscription.java"}
{"repo_name": "testMySubscriptionForMedicine", "name for description": "test My Subscription For Medicine", "comments": "Test", "url": true, "content": "\tpublic void testMySubscriptionForMedicine() throws Exception {  \t\tdriver.findElement(By.xpath(\"//button//i[@class='icon-bars']\")).click(); \t\tdriver.findElement(By.xpath(\"//div[@class='nav-item'][contains(text(),'My Subscriptions')]\")).click(); \t\ttry { \t\t\tassertEquals( \t\t\t\t\t\"Picmonic for Medicine\", \t\t\t\t\tdriver.findElement( \t\t\t\t\t\t\tBy.xpath(\"//div[@id='purchase-container']//td[contains(text(),'Picmonic for Medicine')]\")) \t\t\t\t\t\t\t.getText()); \t\t} catch (Error e) { \t\t\tverificationErrors.append(e.toString()); \t\t} \t\tdriver.findElement(By.xpath(\"(//a[contains(text(),'SUBSCRIBE')])[2]\")).click(); \t\t// driver.get(baseUrl + \"/login\"); \t\t// driver.findElement(By.xpath(\"//button//i[@class='icon-bars']\")).click();  \t}", "path": "PicmonicAutomation/src/com/picmonic/selenium/tests/MySubscription.java"}
{"repo_name": "itShouldNotAddExistingBusiness", "name for description": "it Should Not Add Existing Business", "comments": "Test", "url": true, "content": "    public void itShouldNotAddExistingBusiness() {         webDriver.get(baseUrl + \"/businesses\");          findElementByLocator(By.className(\"business-name-field\")).sendKeys(\"Exists\");         findElementByLocator(By.className(\"business-add-button\")).click();          WebElement alertElement = findElementByLocator(By.className(\"alert\"));         assertThat(\"Validation problem alert is displayed\",                 alertElement.getText().contains(\"name already exists\"), is(true));      }", "path": "SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"}
{"repo_name": "testAutoDockVinaStampede", "name for description": "test Auto Dock Vina Stampede", "comments": "Test", "url": true, "content": "  public void testAutoDockVinaStampede() throws Exception {     driver.get(baseUrl + subUrl);       authenticate(driver);     driver.findElement(By.linkText(\"Experiment\")).click();     driver.findElement(By.cssSelector(\"li.dropdown.open > ul.dropdown-menu > li > #create\")).click();       waitTime(200);     driver.findElement(By.id(\"experiment-name\")).sendKeys(expName + \"AutoDockVina-Stampede\");       waitTime(200);     driver.findElement(By.id(\"experiment-description\")).sendKeys(\"Test Experiment\");     new Select(driver.findElement(By.id(\"project\"))).selectByVisibleText(ExpFileReadUtils.readProperty(\"project.name\"));       waitTime(200);     new Select(driver.findElement(By.id(\"application\"))).selectByVisibleText(\"AutoDock_Vina\");       waitTime(200);     driver.findElement(By.name(\"continue\")).click();     driver.findElement(By.id(\"Receptor-File\")).sendKeys(ExpFileReadUtils.AUTODOCKVINA_INPUT1);     waitTime(200);     driver.findElement(By.id(\"Ligand-File\")).sendKeys(ExpFileReadUtils.AUTODOCKVINA_INPUT2);       waitTime(200);     driver.findElement(By.id(\"Config-File\")).sendKeys(ExpFileReadUtils.AUTODOCKVINA_INPUT3);     waitTime(200);     new Select(driver.findElement(By.id(\"compute-resource\"))).selectByVisibleText(\"stampede.tacc.xsede.org\");     waitTime(200);     new Select(driver.findElement(By.id(\"select-queue\"))).selectByVisibleText(\"normal\");     waitTime(200);     driver.findElement(By.id(\"node-count\")).clear();     driver.findElement(By.id(\"node-count\")).sendKeys(\"1\");     driver.findElement(By.id(\"cpu-count\")).clear();     driver.findElement(By.id(\"cpu-count\")).sendKeys(\"16\");     driver.findElement(By.id(\"wall-time\")).clear();     driver.findElement(By.id(\"wall-time\")).sendKeys(\"30\");     driver.findElement(By.id(\"memory-count\")).clear();     driver.findElement(By.id(\"memory-count\")).sendKeys(\"0\");     driver.findElement(By.id(\"enableEmail\")).click();     driver.findElement(By.id(\"emailAddresses\")).clear();     driver.findElement(By.id(\"emailAddresses\")).sendKeys(ExpFileReadUtils.readProperty(\"email1\"));     driver.findElement(By.xpath(\"(//button[@type='button'])[3]\")).click();     driver.findElement(By.xpath(\"(//input[@name='emailAddresses[]'])[2]\")).sendKeys(ExpFileReadUtils.readProperty(\"email2\"));       waitTime (200);     driver.findElement(By.id(\"expLaunch\")).click();       waitTime (200);   }", "path": "src/test/java/org/apache/airavata/pga/tests/AutoDockVinaStampede.java"}
{"repo_name": "testCreateModifySearchProject", "name for description": "test Create Modify Search Project", "comments": "Test", "url": true, "content": "  public void testCreateModifySearchProject() throws Exception {     driver.get(baseUrl + subUrl);       authenticate(driver);     driver.findElement(By.linkText(\"Project\")).click();     driver.findElement(By.id(\"create\")).click();     driver.findElement(By.id(\"project-name\")).clear();     driver.findElement(By.id(\"project-name\")).sendKeys(ExpFileReadUtils.readProperty(\"project.name\"));       waitTime (500);     driver.findElement(By.id(\"project-description\")).clear();     driver.findElement(By.id(\"project-description\")).sendKeys(projectDescription);       waitTime (500);     driver.findElement(By.name(\"save\")).click();       waitTime(750);     driver.findElement(By.cssSelector(\"span.glyphicon.glyphicon-pencil\")).click();     driver.findElement(By.id(\"project-description\")).clear();     driver.findElement(By.id(\"project-description\")).sendKeys(projectDescription + \"_MODIFIED_2016\");       waitTime(500);     driver.findElement(By.name(\"save\")).click();       waitTime(500);     driver.findElement(By.linkText(\"Project\")).click();     driver.findElement(By.id(\"browse\")).click();       waitTime(500);     driver.findElement(By.id(\"search-value\")).clear();     driver.findElement(By.id(\"search-value\")).sendKeys(ExpFileReadUtils.readProperty(\"project.name\"));       waitTime(500);     driver.findElement(By.name(\"search\")).click();     driver.findElement(By.linkText(\"View\")).click();       waitTime(500);   }", "path": "src/test/java/org/apache/airavata/pga/tests/CreateModifySearchProject.java"}
{"repo_name": "transactionDetailHasLinksToLitle", "name for description": "transaction Detail Has Links To Litle", "comments": "Test", "url": true, "content": "\tpublic void transactionDetailHasLinksToLitle() throws Exception { \t    iAmDoingLitleAuth(); \t    iAmLoggedInAsWithThePassword(\"abc@gmail.com\", \"password\"); \t    iHaveInMyCart(\"vault\"); \t    iCheckOutWith(\"Visa\", \"4100000000000001\"); \t    iLogOutAsUser();  \t    iAmLoggedInAsAnAdministrator();  \t    iView(\"Sales\", \"Orders\"); \t    iClickOnTheTopRowInOrders(); \t    iPressInvoice(); \t    iSelectNameFromSelect(\"Capture Online\", \"invoice[capture_case]\"); \t    iPressSubmitInvoice(\"The invoice has been created.\", null);  \t    iView(\"Sales\", \"Transactions\"); \t    //There should be 2 rows \t    WebElement table = driver.findElement(By.id(\"order_transactions_table\")); \t    List<WebElement> rows = table.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\")); \t    assertEquals(2, rows.size()); \t    WebElement firstRow = rows.get(0); \t    firstRow.click(); \t    //The first row is the capture \t    String parentUrl = verifyTransactionDetailTable(\"capture\"); \t    driver.get(parentUrl); \t    verifyTransactionDetailTable(\"authorization\");  \t    iLogOutAsAdministrator(); \t}", "path": "test/selenium/com/litle/magento/selenium/TransactionDetailTests.java"}
{"repo_name": "iClickOnTheCustomerWithEmail", "name for description": "i Click On The Customer With Email", "comments": "", "url": true, "content": "    void iClickOnTheCustomerWithEmail(String email) {         if(\"New Order / Orders / Sales / Magento Admin\".equals(driver.getTitle())) {             WebElement e = driver.findElement(By.id(\"sales_order_create_customer_grid_table\"));             e = e.findElement(By.tagName(\"tbody\"));             List<WebElement> rows = e.findElements(By.tagName(\"tr\"));             WebElement rowToClick = null;             for(WebElement row : rows) {                 WebElement emailCol = row.findElements(By.tagName(\"td\")).get(2);                 String colValue = emailCol.getText().trim();                 if(colValue.equals(email)) {                     rowToClick = row;                 }             }             assertNotNull(\"Couldn't find customer with email \" + email, rowToClick);             rowToClick.click();             waitFor(By.id(\"submit_order_top_button\"));         }         else {             WebElement e = driver.findElement(By.id(\"customerGrid_table\"));             e = e.findElement(By.tagName(\"tbody\"));             List<WebElement> rows = e.findElements(By.tagName(\"tr\"));             String url = null;             for(WebElement row : rows) {                 WebElement emailCol = row.findElements(By.tagName(\"td\")).get(3);                 String colName = emailCol.getText().trim();                 if(colName.equals(email)) {                     url = row.getAttribute(\"title\");                 }             }             assertNotNull(\"Couldn't find customer with email \" + email, url);             driver.get(url);             waitFor(By.id(\"customer_info_tabs\"));         }     }", "path": "test/selenium/com/litle/magento/selenium/BaseTestCase.java"}
{"repo_name": "iClickOnTheTopRowInInvoices", "name for description": "i Click On The Top Row In Invoices", "comments": "", "url": true, "content": "    void iClickOnTheTopRowInInvoices() {         String url = driver.findElement(By.xpath(\"/html/body/div[2]/div[3]/div/div/div[2]/div/div[3]/div[2]/div/div/div/table/tbody/tr\")).getAttribute(\"title\");         driver.get(url);         waitFor(By.id(\"comments_block\"));     }", "path": "test/selenium/com/litle/magento/selenium/BaseTestCase.java"}
{"repo_name": "que_el_usuario_ingreso_a", "name for description": "que el usuario ingreso a", "comments": "Dado(\"^que el usuario ingreso a \\\"([^\\\"]*)\\\"$\")", "url": true, "content": "\tpublic void que_el_usuario_ingreso_a(String url) throws Throwable { \t\tdriver = new FirefoxDriver(); \t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); \t\tdriver.get(url); \t}", "path": "src/test/java/ar/com/proautomation/specs/glue/GoogleSearchStepDefinition.java"}
{"repo_name": "assertPageTitleContainsSearchQuery", "name for description": "assert Page Title Contains Search Query", "comments": "", "url": true, "content": "\tpublic void assertPageTitleContainsSearchQuery(String title) { \t\tdriver.get(baseUrl + \"/Location\"); \t\tdriver.findElement(By.linkText(\"Locations\")).click(); \t\tdriver.findElement(By.id(\"dropdownMenu1\")).click(); \t\tdriver.findElement(By.linkText(\"All\")).click(); \t\tdriver.findElement(By.name(\"searchString\")).clear(); \t\tdriver.findElement(By.name(\"searchString\")).sendKeys(title); \t\tdriver.findElement(By.id(\"btn\")).click(); \t\tif (!driver.getTitle().contains(title)) { \t\t\tfail(\"title of page must contain \" + title); \t\t} \t}", "path": "TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/UserStory130.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);     Assert.assertFalse(\"\".equals(homepage.header.getText()));   }", "path": "src/main/resources/archetype-resources/src/test/java/SampleJUnitTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      waitFor(WaitingConditions.pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(TestUtilities.isFirefox(driver) && TestUtilities.isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      waitFor(WaitingConditions.pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      waitFor(WaitingConditions.pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, CHROME, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "changeTemplateToArticleTest", "name for description": "change Template To Article Test", "comments": "Test", "url": true, "content": "    public void changeTemplateToArticleTest() throws InterruptedException {         login();         long time = System.currentTimeMillis();         String articleUrl = \"selenium\" + time;         String articleTitle = \"Selenium Article\" + time;         String articleContent = \"This is a testing article content. \" + time;         createArticle(articleTitle, articleContent, articleUrl);          logger.info(\"Wait for item to be deployed\");         Thread.sleep(1000 * TimeConstants.WAITING_SECONDS_DEPLOY);          String articleFilePath = seleniumProperties.getProperty(\"craftercms.preview.deployer.path\") + \"/site/website/\" + articleUrl + \"/index.xml\";          String contentTypeTag = \"<content-type>\" + seleniumProperties.getProperty(\"craftercms.page.content.type\") + \"</content-type>\";         assertTrue(CStudioSeleniumUtil.readFileContents(articleFilePath, contentTypeTag));         assertTrue(CStudioSeleniumUtil.readFileContents(articleFilePath, articleContent));          String newContentType = seleniumProperties.getProperty(\"craftercms.change.template.content.type\");          logger.info(\"Refresh dashboard\");         driver.navigate().to(dashboardUrl);          logger.info(\"Choose 'Change Template' in pages tree context menu\");         CStudioSeleniumUtil.ensurePagesTreeIsExpanded(driver);         WebElement articleElement = CStudioSeleniumUtil.findItemWithName(driver, articleTitle);         CStudioSeleniumUtil.contextMenuOption(driver, \"Change&nbsp;Template\", articleElement);          logger.info(\"Confirm change template\");         CStudioSeleniumUtil.clickOn(driver, By.id(\"acceptCTChange\"));          logger.info(\"Choose '\" + newContentType + \"' as new content type\");         CStudioSeleniumUtil.clickOn(driver, By.cssSelector(\"option[value=\\\"\" + newContentType + \"\\\"]\"));          logger.info(\"Confirm operation\");         CStudioSeleniumUtil.clickOn(driver, By.id(\"submitWCMPopup\"));          CStudioSeleniumUtil.switchToEditWindow(driver);         logger.info(\"Save and close\");         CStudioSeleniumUtil.clickOn(driver, By.id(\"cstudioSaveAndClose\"));          CStudioSeleniumUtil.switchToMainWindow(driver);          logger.info(\"Wait for item to be deployed\");         Thread.sleep(1000 * TimeConstants.WAITING_SECONDS_DEPLOY);          String newContentTypeTag = \"<content-type>\" + newContentType + \"</content-type>\";          logger.info(\"Check item has been updated\");         assertTrue(CStudioSeleniumUtil.readFileContents(articleFilePath, articleTitle));         assertFalse(CStudioSeleniumUtil.readFileContents(articleFilePath, contentTypeTag));         assertTrue(CStudioSeleniumUtil.readFileContents(articleFilePath, newContentTypeTag));     }", "path": "src/test/java/org/craftercms/web/editing/ChangeTemplateTests.java"}
{"repo_name": "scheduleToBeDeletedTest", "name for description": "schedule To Be Deleted Test", "comments": "Test", "url": true, "content": "    public void scheduleToBeDeletedTest() throws InterruptedException {         login();          logger.info(\"Navigate to dashboard\");         driver.navigate().to(dashboardUrl);          String pageToUpdate = seleniumProperties.getProperty(\"craftercms.page.to.schedule.to.delete\");         String updateString = \"Resources \" + System.currentTimeMillis();          logger.info(\"Edit page\");         CStudioSeleniumUtil.editAndSavePage(driver, pageToUpdate, updateString);          logger.info(\"Refresh dashboard\");         driver.navigate().to(dashboardUrl);          CStudioSeleniumUtil.ensurePagesTreeIsExpanded(driver);         WebElement articleItem = CStudioSeleniumUtil.findItemWithName(driver, updateString);          logger.info(\"Choose delete in pages tree context menu\");         CStudioSeleniumUtil.contextMenuOption(driver, \"Delete\", articleItem);          logger.info(\"Schedule item and dependencies\");         By datepickerBy = By.cssSelector(\"#datepicker.date-picker\");         By timepickerBy = By.cssSelector(\"input.time-picker\");         By scheduleTimeLinksBy = By.cssSelector(\"#acnVersionWrapper a[checkid]\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, scheduleTimeLinksBy);         List<WebElement> scheduleTimeLinks = driver.findElements(scheduleTimeLinksBy);         for (WebElement scheduleTimeLink : scheduleTimeLinks) {             scheduleTimeLink.click();              CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, datepickerBy);              WebElement datepicker = driver.findElement(datepickerBy);             datepicker.clear();             datepicker.sendKeys(\"1/01/3001\");              CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, timepickerBy);              WebElement timepicker = driver.findElement(timepickerBy);             timepicker.sendKeys(\"12:00:01 a.m.\");              CStudioSeleniumUtil.clickOn(driver, By.xpath(\"//div[@id='acnVersionWrapper']//a[text()='Done']\"));         }          logger.info(\"Click 'Delete' button\");         CStudioSeleniumUtil.clickOn(driver, By.cssSelector(\"#acnVersionWrapper input.do-delete[type='submit']\"));          logger.info(\"Wait for item to be scheduled\");         Thread.sleep(2000);          String baseUrl = seleniumProperties.getProperty(\"craftercms.base.url\");         String pageToEditUrl = seleniumProperties.getProperty(\"craftercms.page.to.schedule.to.delete.url\");          logger.info(\"Navigate to '\" + pageToEditUrl + \"'\");         driver.navigate().to(baseUrl + pageToEditUrl);          logger.info(\"Check item was scheduled to be deleted\");         By statusIconBy = By.cssSelector(\"#acn-active-content div.status-icon.deleted\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, statusIconBy);         WebElement statusIcon = driver.findElement(statusIconBy);         assertTrue(statusIcon.getText().contains(\"Deleted\"));     }", "path": "src/test/java/org/craftercms/web/basic/ScheduleToBeDeletedTests.java"}
{"repo_name": "inContextEditTemplateTest", "name for description": "in Context Edit Template Test", "comments": "Test", "url": true, "content": "    public void inContextEditTemplateTest() throws InterruptedException {         login();          logger.info(\"Navigate to dashboard\");         driver.navigate().to(dashboardUrl);          final String baseUrl = seleniumProperties.getProperty(\"craftercms.base.url\");         final String pageToEditUrl = seleniumProperties.getProperty(\"craftercms.page.to.edit.url\");          logger.info(\"Navigate to '\" + pageToEditUrl + \"'\");         driver.navigate().to(baseUrl + pageToEditUrl);          openTemplateEditor();          String pageTitle = driver.getTitle();          By titleBy = By.xpath(\"//div[@id='editor-container']//pre[text()='\" + pageTitle + \"'][1]\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, titleBy);         WebElement title = driver.findElement(titleBy);          String sequence = \"\";         // Get inside <title>...</title>         for (int i = 0; i < 8; i++) {             sequence += Keys.LEFT;         }         for (int i = 0; i < pageTitle.length(); i++) {             sequence += Keys.BACK_SPACE;         }          final String newTitle = \"Global Integrity \" + System.currentTimeMillis();         sequence += newTitle;          logger.info(\"Update page title\");         new Actions(driver).click(title).sendKeys(sequence).perform();          logger.info(\"Click 'Update' button\");         CStudioSeleniumUtil.clickOn(driver, By.id(\"template-editor-update-button\"));          logger.info(\"Wait for title to update\");         new WebDriverWait(driver, TimeConstants.WAITING_SECONDS_DEPLOY).until(new ExpectedCondition<Boolean>() {             @Override             public Boolean apply(WebDriver driver) {                 driver.navigate().to(baseUrl + pageToEditUrl);                 return newTitle.equals(driver.getTitle());             }         });     }", "path": "src/test/java/org/craftercms/web/editing/ContextEditingTests.java"}
{"repo_name": "editPageIcePencilTest", "name for description": "edit Page Ice Pencil Test", "comments": "Test", "url": true, "content": "    public void editPageIcePencilTest() throws InterruptedException {         login();          logger.info(\"Navigate to dashboard\");         driver.navigate().to(dashboardUrl);          final String baseUrl = seleniumProperties.getProperty(\"craftercms.base.url\");         final String pageToEditUrl = seleniumProperties.getProperty(\"craftercms.page.to.edit.url\");          logger.info(\"Navigate to '\" + pageToEditUrl + \"'\");         driver.navigate().to(baseUrl + pageToEditUrl);          openPreviewTools();          logger.info(\"Turn on In-Context Edit\");          By titlePencilBy = By.cssSelector(\"#title img\");         List<WebElement> titlePencilList = driver.findElements(titlePencilBy);         boolean pencilVisible = false;         if (titlePencilList.size() > 0) {             pencilVisible = titlePencilList.get(0).isDisplayed();         }         if (!pencilVisible) {             By toggleIceBy = By.xpath(\"//div[@id='preview-tools-panel-container']//span[contains(.,'In-Context Edit')]/preceding-sibling::*[1]\");             CStudioSeleniumUtil.clickOn(driver, toggleIceBy);         }          logger.info(\"Click on title ice pencil\");         CStudioSeleniumUtil.clickOn(driver, titlePencilBy);          CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, By.tagName(\"iframe\"));         Thread.sleep(1000);         driver.switchTo().frame(\"in-context-edit-editor\");          logger.info(\"Update title\");         String newTitle = \"Big Data for Risk Reduction \" + System.currentTimeMillis();          By titleInputBy = By.cssSelector(\"#title input.datum\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, titleInputBy);         CStudioSeleniumUtil.waitForItemToBeEnabled(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, titleInputBy);          WebElement titleInput = driver.findElement(titleInputBy);         titleInput.clear();         titleInput.sendKeys(newTitle);         Thread.sleep(1000);          logger.info(\"Save And Close\");         CStudioSeleniumUtil.clickOn(driver, By.id(\"cstudioSaveAndClose\"));          logger.info(\"Check title has been updated\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, By.xpath(\"//*[contains(., '\" + newTitle + \"')]\"));     }", "path": "src/test/java/org/craftercms/web/editing/ContextEditingTests.java"}
{"repo_name": "navigateToAndWaitForPageToLoad", "name for description": "navigate To And Wait For Page To Load", "comments": "  Navigates to the given url and calls c  @param webDriver  @param url ", "url": true, "content": "    public static void navigateToAndWaitForPageToLoad(WebDriver webDriver, String url) {         webDriver.navigate().to(url);         waitForCurrentPageToLoad(webDriver);     }", "path": "src/test/java/org/craftercms/web/util/CStudioSeleniumUtil.java"}
{"repo_name": "editContentTypeFieldTitle", "name for description": "edit Content Type Field Title", "comments": "Test", "url": true, "content": "    public void editContentTypeFieldTitle() {         login();         String contentType = \"/page/article\";          openContentType(contentType);          logger.info(\"Update content type title field\");         String newTitle = \"Title \" + System.currentTimeMillis();         By titleVariableBy = By.xpath(\"//div[@id='content-type-canvas']//div[contains(@class,'content-type-visual-field-container')]//span[contains(@class,'content-field-variable') and text()='title']\");         CStudioSeleniumUtil.clickOn(driver, titleVariableBy);          By titleBy = By.xpath(\"//div[@id='properties-container']//div[contains(@class, 'property-wrapper')]/div[@class='property-label' and text()='Title']/following-sibling::input\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, titleBy);         WebElement titleInput = driver.findElement(titleBy);         titleInput.clear();         titleInput.sendKeys(newTitle);          logger.info(\"Click 'Save'\");         CStudioSeleniumUtil.clickOn(driver, By.cssSelector(\"#cstudio-admin-console-command-bar input.cstudio-button[value='Save']\"));          logger.info(\"Wait for content type to be saved\");         new WebDriverWait(driver, TimeConstants.WAITING_SECONDS_SAVE).until(new ExpectedCondition<Boolean>() {             @Override             public Boolean apply(WebDriver webDriver) {                 try {                     Alert alert = driver.switchTo().alert();                     alert.accept();                     return true;                 } catch (Exception ex) {                     return false;                 }             }         });          logger.info(\"Navigate to dashboard\");         driver.navigate().to(dashboardUrl);          CStudioSeleniumUtil.createContentJS(driver, \"/site/website\", siteName);          CStudioSeleniumUtil.clickOn(driver, By.cssSelector(\"option[value=\\\"/page/article\\\"]\"));         CStudioSeleniumUtil.clickOn(driver, By.id(\"submitWCMPopup\"));          CStudioSeleniumUtil.switchToEditWindow(driver);          By titleLabelBy = By.cssSelector(\"#title span.label.cstudio-form-field-title\");         CStudioSeleniumUtil.waitForItemToDisplay(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT, titleLabelBy);         WebElement titleLabelElement = driver.findElement(titleLabelBy);         assertEquals(newTitle, titleLabelElement.getText());     }", "path": "src/test/java/org/craftercms/web/ContentTypeTests.java"}
{"repo_name": "testPageEditSaveAndClose", "name for description": "test Page Edit Save And Close", "comments": "  Test Page Save and Close Functionality   @throws InterruptedException  Test", "url": true, "content": "    public void testPageEditSaveAndClose() throws InterruptedException {         driver.manage().timeouts().implicitlyWait(TimeConstants.WAITING_SECONDS_WEB_ELEMENT, TimeUnit.SECONDS);          logger.info(\"Login as admin\");         login();          logger.info(\"Navigate to Dashboard page\");         driver.navigate().to(dashboardUrl);          logger.info(\"Edit page\");         CStudioSeleniumUtil.editContentJS(driver, seleniumProperties.getProperty(\"craftercms.page.to.edit\"),                 seleniumProperties.getProperty(\"craftercms.page.content.type\"),                 siteName);          CStudioSeleniumUtil.switchToEditWindow(driver);          logger.info(\"Find internal-name field and edit\");         driver.findElement(By.cssSelector(\"#internal-name .datum\")).clear();         driver.findElement(By.cssSelector(\"#internal-name .datum\")).sendKeys(updateString);          logger.info(\"Click Save&Close button and wait for change to complete\");         driver.findElement(By.id(\"cstudioSaveAndClose\")).click();          CStudioSeleniumUtil.switchToMainWindow(driver);          logger.info(\"Navigate back to dashboard\");         driver.navigate().to(dashboardUrl);         assertTrue(driver.getTitle().equals(\"Crafter Studio\"));          logger.info(\"Check my-recent-activity widget\");         new WebDriverWait(driver, TimeConstants.WAITING_SECONDS_WEB_ELEMENT).until(new ExpectedCondition<Boolean>() {             public Boolean apply(WebDriver d) {                 return d.findElement(By.id(\"MyRecentActivity-body\")).getText().contains(updateString);             }         });     }", "path": "src/test/java/org/craftercms/web/basic/PageEditTests.java"}
{"repo_name": "testPageEditSaveAndPreview", "name for description": "test Page Edit Save And Preview", "comments": "  Test Page Save and Preview Functionality   @throws InterruptedException  Test", "url": true, "content": "    public void testPageEditSaveAndPreview() throws InterruptedException {         driver.manage().timeouts().implicitlyWait(TimeConstants.WAITING_SECONDS_WEB_ELEMENT, TimeUnit.SECONDS);          logger.info(\"Login as admin\");         login();          String mainWindowHandle = driver.getWindowHandle();          logger.info(\"Navigate to Dashboard page\");         driver.navigate().to(dashboardUrl);          logger.info(\"Edit page\");         CStudioSeleniumUtil.editContentJS(driver, seleniumProperties.getProperty(\"craftercms.page.to.edit\"),                 seleniumProperties.getProperty(\"craftercms.page.content.type\"),                 siteName);          CStudioSeleniumUtil.switchToEditWindow(driver);          String editWindowHandle = driver.getWindowHandle();          logger.info(\"Edit internal-name field\");         WebElement internalNameElement = driver.findElement(By.cssSelector(\"#internal-name .datum\"));         internalNameElement.clear();         internalNameElement.sendKeys(updateString);         Thread.sleep(1000);          logger.info(\"Click Save&Preview button and wait for change to complete\");         driver.findElement(By.id(\"cstudioSaveAndPreview\")).click();          logger.info(\"Switch back to first window\");         driver.switchTo().window(mainWindowHandle);          logger.info(\"Wait for preview to load\");         new WebDriverWait(driver, 30).until(new ExpectedCondition<Boolean>() {             @Override             public Boolean apply(WebDriver webDriver) {                 try {                     Alert alert = driver.switchTo().alert();                     alert.accept();                     return true;                 } catch (Exception ex) {                     return false;                 }             }         });          String pageUrl = seleniumProperties.getProperty(\"craftercms.base.url\") + seleniumProperties.getProperty(\"craftercms.page.to.edit.url\");          logger.info(\"Check url match edited page url\");         assertTrue(driver.getCurrentUrl().equals(pageUrl));         logger.info(\"Check item content has changed\");         assertTrue(CStudioSeleniumUtil.readFileContents(seleniumProperties.getProperty(\"craftercms.preview.deployer.path\") + seleniumProperties.getProperty(\"craftercms.page.to.edit\"), updateString));          logger.info(\"Go back and close edit window so item is not locked\");         driver.switchTo().window(editWindowHandle);         driver.findElement(By.cssSelector(\"input[value=\\\"Cancel\\\"]\")).click();         List<WebElement> buttonConfirm = driver.findElements(By.xpath(\"//button[text()='Yes']\"));         if (buttonConfirm.size() > 0)             buttonConfirm.get(0).click();     }", "path": "src/test/java/org/craftercms/web/basic/PageEditTests.java"}
{"repo_name": "itShouldNotBePossibleToSigninWithAnInvalidEmail", "name for description": "it Should Not Be Possible To Signin With An Invalid Email", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldNotBePossibleToSigninWithAnInvalidEmail() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       homePage.typeEmailAddress(\"this is not a valid email address\");       homePage.typePassword(\"any password\");       homePage.submitFormExpectingFailure();    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldNotBePossibleToAccessToOtherPagesWithoutSignin", "name for description": "it Should Not Be Possible To Access To Other Pages Without Signin", "comments": " This test have no more reason to exist due to the restructuration of the interface @Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldNotBePossibleToAccessToOtherPagesWithoutSignin() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       try{          homePage.goToAccountPageViaMenu().goToAppPageViaMenu();          Assert.fail();       } catch(IllegalStateException ex){}    }*/", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAnAccountWithoutFillForm", "name for description": "it Should Not Be Possible To Create An Account Without Fill Form", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldNotBePossibleToCreateAnAccountWithoutFillForm() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       NewAccountPage newAccountPage = homePage.accessToNewAccount();       Assert.assertTrue(newAccountPage.submitForm().containError());          }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAnAcocuntWithWeakPassword", "name for description": "it Should Not Be Possible To Create An Acocunt With Weak Password", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldNotBePossibleToCreateAnAcocuntWithWeakPassword() {       driver.get(baseUrl);              Random rand = new Random();              HomePage homePage = new HomePage(driver);       NewAccountPage newAccountPage = homePage.accessToNewAccount();       newAccountPage.typeEmailAddress(\"john\" + rand.nextInt() + \"@test.com\");       newAccountPage.typeFirstName(\"John\");       newAccountPage.typeLastName(\"Doe\");       newAccountPage.typePassword(\"pass\");       newAccountPage.typePasswordConfirmation(\"pass\");       Assert.assertTrue(newAccountPage.submitForm().containError());    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAnAcocuntWithDifferentPassword", "name for description": "it Should Not Be Possible To Create An Acocunt With Different Password", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldNotBePossibleToCreateAnAcocuntWithDifferentPassword() {       driver.get(baseUrl);              Random localrand = new Random();              HomePage homePage = new HomePage(driver);       NewAccountPage newAccountPage = homePage.accessToNewAccount();       newAccountPage.typeEmailAddress(\"john\" + localrand.nextInt() + \"@test.com\");       newAccountPage.typeFirstName(\"John\");       newAccountPage.typeLastName(\"Doe\");       newAccountPage.typePassword(\"P4ssw0rd\");       newAccountPage.typePasswordConfirmation(\"D1ff3r3n7\");       Assert.assertTrue(newAccountPage.submitForm().containError());    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "successfulSigninShouldBringUserToHomePage", "name for description": "successful Signin Should Bring User To Home Page", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void successfulSigninShouldBringUserToHomePage() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       homePage.typeEmailAddress(email);       homePage.typePassword(password);       AppsPage firstPage = (AppsPage) homePage.submitForm(AppsPage.class);    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldBePossibleToRegisterANewApp", "name for description": "it Should Be Possible To Register A New App", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldBePossibleToRegisterANewApp() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       homePage.typeEmailAddress(email);       homePage.typePassword(password);       AppsPage firstPage = (AppsPage) homePage.submitForm(AppsPage.class);              RegisterNewAppPage newAppPage = firstPage.goToNewAppPage();              newAppPage.typeAppName(\"RandomName\");       newAppPage.typeAppDescription(\"app description\");       Assert.assertFalse(newAppPage.submitForm().containError());    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldNotBePossibleToRegisterANewAppWithoutSpecifiedAName", "name for description": "it Should Not Be Possible To Register A New App Without Specified A Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldNotBePossibleToRegisterANewAppWithoutSpecifiedAName() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       homePage.typeEmailAddress(email);       homePage.typePassword(password);       AppsPage firstPage = (AppsPage) homePage.submitForm(AppsPage.class);              RegisterNewAppPage newAppPage = firstPage.goToNewAppPage();              newAppPage.typeAppName(\"\");       newAppPage.typeAppDescription(\"app description\");       Assert.assertTrue(newAppPage.submitForm().containError());    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "itShouldBePossibleToLogout", "name for description": "it Should Be Possible To Logout", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void itShouldBePossibleToLogout() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       homePage.typeEmailAddress(email);       homePage.typePassword(password);       AppsPage firstPage = (AppsPage) homePage.submitForm(AppsPage.class);              firstPage.logout();    }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "editAccountWithoutSpecifyNewPasswordShouldNotChangePassword", "name for description": "edit Account Without Specify New Password Should Not Change Password", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "   public void editAccountWithoutSpecifyNewPasswordShouldNotChangePassword() {       driver.get(baseUrl);       HomePage homePage = new HomePage(driver);       homePage.typeEmailAddress(email);       homePage.typePassword(password);       AppsPage firstPage = (AppsPage) homePage.submitForm(AppsPage.class);              AccountPage accountPage = firstPage.goToAccountPageViaMenu();              accountPage.submitForm();              homePage = accountPage.goToAppPageViaMenu().logout();              homePage.typeEmailAddress(email);       homePage.typePassword(password);       firstPage = (AppsPage) homePage.submitForm(AppsPage.class);               }", "path": "implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"}
{"repo_name": "testDosMasDosGoogle", "name for description": "test Dos Mas Dos Google", "comments": "Test", "url": true, "content": "  public void testDosMasDosGoogle() throws Exception {     driver.get(baseUrl + \"/\");     driver.findElement(By.id(\"gbqfq\")).clear();     driver.findElement(By.id(\"gbqfq\")).sendKeys(\"2+2\");     //  selenium.typeKeys(\"id=gbqfq\", \"\\n\");      //  driver.findElement(By.id(\"gbqfq\")).sendKeys(\"2+2\");     try {       assertEquals(\"2+2\", driver.findElement(By.id(\"gbqfq\")).getAttribute(\"value\"));       driver.findElement(By.id(\"gbqfq\")).submit();     } catch (Error e) {       verificationErrors.append(e.toString());     }     driver.findElement(By.id(\"gbqfq\")).sendKeys(\"\");     for (int second = 0;; second++) {     \tif (second >= 60) fail(\"timeout\");     \ttry { if (\"2 + 2 =\".equals(driver.findElement(By.id(\"cwles\")).getText())) break; } catch (Exception e) {}     \tThread.sleep(1000);     }      for (int second = 0;; second++) {     \tif (second >= 60) fail(\"timeout\");     \ttry { if (\"4\".equals(driver.findElement(By.id(\"cwos\")).getText())) break; } catch (Exception e) {}     \tThread.sleep(1000);     }    }", "path": "src/test/java/ejemplo/SumaEnGoogleWebDriver.java"}
{"repo_name": "canNotLogInWithInvalidEmail", "name for description": "can Not Log In With Invalid Email", "comments": "Test @ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void canNotLogInWithInvalidEmail() {         driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeName(\"this is not a valid email address\");         loginPage.typePwd(\"any password\");         loginPage.submitFormExpectingFailure();     }", "path": "ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"}
{"repo_name": "aUserCanLoginWithValidEmail", "name for description": "a User Can Login With Valid Email", "comments": "Test", "url": true, "content": "    public void  aUserCanLoginWithValidEmail(){         driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeName(\"toto@contoso.com\");         loginPage.typePwd(\"12345\");         HomePage homePage = (HomePage)loginPage.submitForm(HomePage.class);     }", "path": "ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"}
{"repo_name": "aUserShouldBeAbleToVisitAllPagesAfterLogin", "name for description": "a User Should Be Able To Visit All Pages After Login", "comments": "Test", "url": true, "content": "    public void aUserShouldBeAbleToVisitAllPagesAfterLogin() throws InterruptedException{         driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeName(\"toto@contoso.com\");         loginPage.typePwd(\"12345\");         HomePage homePage = (HomePage)loginPage.submitForm(HomePage.class);         homePage.goToAccountViaMenu()                 .goToAppPageViaMenu();                 //.clickOnFirstAppLinkInAppsTable();         Thread.sleep(2000); // voir app_edit page : http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp              }", "path": "ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"}
{"repo_name": "itShouldCorrectlyCreateAccount", "name for description": "it Should Correctly Create Account", "comments": "--------------------------------------------------------------------------  Registration page Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldCorrectlyCreateAccount() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"thibaud.duchoud@heig-vd.ch\");         registrationPage.typeFName(\"Thibaud\");         registrationPage.typeLName(\"Duchoud\");         registrationPage.typeRPassword(\"4321\");         registrationPage.typePassword(\"4321\");         LoginPage loginPage = (LoginPage) registrationPage.submitForm(LoginPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAccountWithoutFName", "name for description": "it Should Not Be Possible To Create Account Without F Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAccountWithoutFName() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"thibaud.duchoud1@heig-vd.ch\");         registrationPage.typeLName(\"Duchoud\");         registrationPage.typeRPassword(\"4321\");         registrationPage.typePassword(\"4321\");         RegistrationPage registrationPageF = (RegistrationPage) registrationPage.submitForm(RegistrationPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAccountWithoutLName", "name for description": "it Should Not Be Possible To Create Account Without L Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAccountWithoutLName() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"thibaud.duchoud2@heig-vd.ch\");         registrationPage.typeFName(\"Thibaud\");         registrationPage.typeRPassword(\"4321\");         registrationPage.typePassword(\"4321\");         RegistrationPage registrationPageF = (RegistrationPage) registrationPage.submitForm(RegistrationPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAccountWithoutEmail", "name for description": "it Should Not Be Possible To Create Account Without Email", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAccountWithoutEmail() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeFName(\"Thibaud\");         registrationPage.typeLName(\"Duchoud\");         registrationPage.typeRPassword(\"4321\");         registrationPage.typePassword(\"4321\");         RegistrationPage registrationPageF = (RegistrationPage) registrationPage.submitForm(RegistrationPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAccount2DifferentPasswords", "name for description": "it Should Not Be Possible To Create Account2 Different Passwords", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAccount2DifferentPasswords() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"thibaud.duchoud3@heig-vd.ch\");         registrationPage.typeFName(\"Thibaud\");         registrationPage.typeLName(\"Duchoud\");         registrationPage.typeRPassword(\"4321\");         registrationPage.typePassword(\"1234\");         RegistrationPage registrationPageF = (RegistrationPage) registrationPage.submitForm(RegistrationPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAccountWithoutPassword", "name for description": "it Should Not Be Possible To Create Account Without Password", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAccountWithoutPassword() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"thibaud.duchoud4@heig-vd.ch\");         registrationPage.typeFName(\"Thibaud\");         registrationPage.typeLName(\"Duchoud\");         RegistrationPage registrationPageF = (RegistrationPage) registrationPage.submitForm(RegistrationPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAccountWithExistantEmail", "name for description": "it Should Not Be Possible To Create Account With Existant Email", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAccountWithExistantEmail() {         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPageTmp = new RegistrationPage(driver);         registrationPageTmp.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPageTmp.typeFName(\"Mario\");         registrationPageTmp.typeLName(\"Ferreira\");         registrationPageTmp.typeRPassword(\"1234\");         registrationPageTmp.typePassword(\"1234\");          driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");         RegistrationPage registrationPageF = (RegistrationPage) registrationPage.submitForm(RegistrationPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToSigninWithAnInvalidEmail", "name for description": "it Should Not Be Possible To Signin With An Invalid Email", "comments": " -------------------------------------------------------------------------  Login Page Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToSigninWithAnInvalidEmail() {         driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"this is not a valid email address\");         loginPage.typePassword(\"any password\");         loginPage.submitFormExpectingFailure();     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "successfulSigninShouldBringUserToHomePage", "name for description": "successful Signin Should Bring User To Home Page", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void successfulSigninShouldBringUserToHomePage() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         HomePage homePage = (HomePage) loginPage.submitForm(HomePage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToModifyAccount2DifferentPasswords", "name for description": "it Should Not Be Possible To Modify Account2 Different Passwords", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToModifyAccount2DifferentPasswords() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"editProfile\");         EditProfilePage editProfilePage = new EditProfilePage(driver);         editProfilePage.typeFName(\"Mario\");         editProfilePage.typeLName(\"Ferreira\");         editProfilePage.typeRPassword(\"5678\");         editProfilePage.typePassword(\"8765\");         EditProfilePage editProfilePageF = (EditProfilePage) editProfilePage.submitForm(EditProfilePage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToModifyAccountWithoutFName", "name for description": "it Should Not Be Possible To Modify Account Without F Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToModifyAccountWithoutFName() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"editProfile\");         EditProfilePage editProfilePage = new EditProfilePage(driver);         editProfilePage.typeLName(\"Ferreira\");         editProfilePage.typeRPassword(\"5678\");         editProfilePage.typePassword(\"5678\");         EditProfilePage editProfilePageF = (EditProfilePage) editProfilePage.submitForm(EditProfilePage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToModifyAccountWithoutLName", "name for description": "it Should Not Be Possible To Modify Account Without L Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToModifyAccountWithoutLName() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"editProfile\");         EditProfilePage editProfilePage = new EditProfilePage(driver);         editProfilePage.typeFName(\"Mario\");         editProfilePage.typeRPassword(\"5678\");         editProfilePage.typePassword(\"5678\");         EditProfilePage editProfilePageF = (EditProfilePage) editProfilePage.submitForm(EditProfilePage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToModifyAccountWithoutPassword", "name for description": "it Should Not Be Possible To Modify Account Without Password", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToModifyAccountWithoutPassword() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"editProfile\");         EditProfilePage editProfilePage = new EditProfilePage(driver);         editProfilePage.typeFName(\"Mario\");         editProfilePage.typeLName(\"Ferreira\");         EditProfilePage editProfilePageF = (EditProfilePage) editProfilePage.submitForm(EditProfilePage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToCreateAppWithoutName", "name for description": "it Should Not Be Possible To Create App Without Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToCreateAppWithoutName() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"addApp\");         CreateAppPage createAppPage = new CreateAppPage(driver);         createAppPage.typeDescription(\"Test Description\");         CreateAppPage createAppPageF = (CreateAppPage) createAppPage.submitForm(CreateAppPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldNotBePossibleToModifyAppWithoutName", "name for description": "it Should Not Be Possible To Modify App Without Name", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldNotBePossibleToModifyAppWithoutName() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"addApp\");         EditAppPage editAppPage = new EditAppPage(driver);         editAppPage.typeDescription(\"Test Description\");         EditAppPage editAppPageF = (EditAppPage) editAppPage.submitForm(EditAppPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "itShouldDisplayListUsers", "name for description": "it Should Display List Users", "comments": "--------------------------------------------------------------------------  Users List Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "    public void itShouldDisplayListUsers() {         // Create account         driver.get(baseUrl + \"registrationPage\");         RegistrationPage registrationPage = new RegistrationPage(driver);         registrationPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         registrationPage.typeFName(\"Mario\");         registrationPage.typeLName(\"Ferreira\");         registrationPage.typeRPassword(\"1234\");         registrationPage.typePassword(\"1234\");          driver.get(baseUrl);         LoginPage loginPage = new LoginPage(driver);         loginPage.typeEmailAddress(\"mario.ferreira@heig-vd.ch\");         loginPage.typePassword(\"1234\");         loginPage.submitForm(HomePage.class);          driver.get(baseUrl + \"home\");         HomePage homePage = new HomePage(driver);         ListUsersPage listUsersPage = (ListUsersPage) homePage.submitListUsers(ListUsersPage.class);     }", "path": "projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"}
{"repo_name": "getInitialJavascriptLinksAddToPageQueue", "name for description": "get Initial Javascript Links Add To Page Queue", "comments": "  work in progress, meant to be called just after configure   @param intialPageUrl  @return ", "url": true, "content": "    public Queue getInitialJavascriptLinksAddToPageQueue(String intialPageUrl, String javascriptLinkIdentifier, String customAttributeLabel) {         driver.get(intialPageUrl);          List<WebElement> links;         List<String[]> initialUrls = new ArrayList<String[]>();         List<String> urls = new ArrayList<String>();          links = driver.findElements(By.tagName(\"a\"));          Queue<String[]> queue = new ConcurrentLinkedQueue<String[]>();          for (WebElement link : links) {             String customAttribute = null;             try {                 customAttribute = link.getAttribute(customAttributeLabel);                 if (customAttribute.contains(javascriptLinkIdentifier)) {                     customAttribute = customLogic(customAttribute);                     String[] testEntry = new String[sizeOfStringArrayEnum];                     testEntry[ThreadCommunicationBase.PageQueueEntries.BASE_URL.ordinal()] = intialPageUrl;                     testEntry[ThreadCommunicationBase.PageQueueEntries.CUSTOM_PARAM.ordinal()] = customAttribute;                     queue.add(testEntry);                 }             } catch (Exception e) {             }         }         return queue;     }", "path": "src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Core/PageRetrieverThreadManagerScraper.java"}
{"repo_name": "getLinkFromOnclickElement", "name for description": "get Link From Onclick Element", "comments": "", "url": true, "content": "    private static void getLinkFromOnclickElement(WebDriver driver, String searchUrl, String baseUrl, String key) {          String url = searchUrl + pageNum;         driver.get(url);          List<WebElement> links;         List<String[]> initialUrls = new ArrayList<String[]>();         List<String> urls = new ArrayList<String>();          links = driver.findElements(By.tagName(\"a\"));          for (WebElement link : links) {             String onclick = null;             try {                 onclick = link.getAttribute(\"onclick\");                 if (onclick.startsWith(\"snap_to_marker\")) {                     String title = link.getAttribute(\"title\");                     sleep();                     link.click();                     String[] tmpArray = {convertToUrl(baseUrl, title).toLowerCase(), title.toLowerCase()};                     initialUrls.add(tmpArray);                 }             } catch (Exception e) {                 //e.printStackTrace();             }         }          for (String[] curEntry : initialUrls) {              String pulledUrl = pullCompanyUrl(driver, curEntry, key);             if (pulledUrl != null) {                 urls.add(pulledUrl);                 System.out.println(pulledUrl);                 //PersistenceImpl_WriteToFile.appendToFile(fileOutput, pulledUrl + \"\\n\");                 persistEntry(pulledUrl);             }         }     }", "path": "src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Deprecated/Entry_Scraper2.java"}
{"repo_name": "itShouldNotBePossibleToSigninWithAnInvalidEmail", "name for description": "it Should Not Be Possible To Signin With An Invalid Email", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "  public void itShouldNotBePossibleToSigninWithAnInvalidEmail() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"this is not a valid email address\");     loginPage.typePassword(\"any password\");     loginPage.submitFormExpectingFailure();   }", "path": "MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"}
{"repo_name": "successfulSigninShouldBringUserToHomePage", "name for description": "successful Signin Should Bring User To Home Page", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "  public void successfulSigninShouldBringUserToHomePage() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"a@a.com\");     loginPage.typePassword(\"any password\");     HomePage homePage = (HomePage)loginPage.submitForm(HomePage.class);   }", "path": "MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"}
{"repo_name": "aUserTryingToGetToAboutPageShouldBeRedirectedThereAfterSignin", "name for description": "a User Trying To Get To About Page Should Be Redirected There After Signin", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "  public void aUserTryingToGetToAboutPageShouldBeRedirectedThereAfterSignin() {     driver.get(baseUrl + \"/pages/about\");     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"a@a.com\");     loginPage.typePassword(\"any password\");     AboutPage aboutPage = (AboutPage)loginPage.submitForm(AboutPage.class);   }", "path": "MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"}
{"repo_name": "aUserShouldBeAbleToVisitAllPagesAfterSignin", "name for description": "a User Should Be Able To Visit All Pages After Signin", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "  public void aUserShouldBeAbleToVisitAllPagesAfterSignin() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"a@a.com\");     loginPage.typePassword(\"any password\");     HomePage homePage = (HomePage)loginPage.submitForm(HomePage.class);     homePage.goToBeersPageViaMenu()       .goToBeersPageViaMenu()       .goToAJAXPageViaMenu()       .goToGenerateTestDataPageViaMenu()       .goToCorporateInformationPageViaMenu();   }", "path": "MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"}
{"repo_name": "aUserShouldBeAbleToGetDetailsInformationAboutACompany", "name for description": "a User Should Be Able To Get Details Information About A Company", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "  public void aUserShouldBeAbleToGetDetailsInformationAboutACompany() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"a@a.com\");     loginPage.typePassword(\"any password\");     HomePage homePage = (HomePage)loginPage.submitForm(HomePage.class);     homePage.goToCorporateInformationPageViaMenu()       .clickOnFirstCompanyLinkInCompaniesTable();   }", "path": "MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"}
{"repo_name": "itShouldNotBePossibleToSigninWithAnInvalidEmail", "name for description": "it Should Not Be Possible To Signin With An Invalid Email", "comments": " Test", "url": true, "content": "  public void itShouldNotBePossibleToSigninWithAnInvalidEmail() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"this is not a valid email address\");     loginPage.typePassword(\"any password\");     loginPage.submitFormExpectingFailure();   }", "path": "GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"}
{"repo_name": "successfulSigninShouldBringUserToHomePage", "name for description": "successful Signin Should Bring User To Home Page", "comments": "Test", "url": true, "content": "  public void successfulSigninShouldBringUserToHomePage() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);     loginPage.typeEmailAddress(\"a@a.com\");     loginPage.typePassword(\"any password\");    YourAppPage yourapppage = (YourAppPage)loginPage.submitForm(YourAppPage.class);   }", "path": "GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"}
{"repo_name": "ClickCreateAccountButtonShouldBringUserToAccountRegistrationPage", "name for description": "Click Create Account Button Should Bring User To Account Registration Page", "comments": "Test", "url": true, "content": "  public void ClickCreateAccountButtonShouldBringUserToAccountRegistrationPage() {     driver.get(baseUrl);     LoginPage loginPage = new LoginPage(driver);         AccountRegistrationPage accountregistrationpage = (AccountRegistrationPage)loginPage.submitForm(AccountRegistrationPage.class);   }", "path": "GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"}
{"repo_name": "successfulCreatAccountShouldBringUserToyourAppPage", "name for description": "successful Creat Account Should Bring User Toyour App Page", "comments": "Test", "url": true, "content": "  public void successfulCreatAccountShouldBringUserToyourAppPage() {     driver.get(baseUrl + \"/pages/yourApps\");     AccountRegistrationPage creatAccountPage = new AccountRegistrationPage(driver);     creatAccountPage.typeEmailAddress(\"a@a.com\");     creatAccountPage.typeFirstname(\"any firstname\");     creatAccountPage.typeLastname(\"any lastname\");     creatAccountPage.typeLastname(\"any lastname\");     creatAccountPage.typePassword(\"any password\");     creatAccountPage.typeConfirmPassword(\"any password\");     YourAppPage yourapppage = (YourAppPage)creatAccountPage.submitForm(YourAppPage.class);   }", "path": "GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"}
{"repo_name": "aWrongLoginStaysToHomePage", "name for description": "a Wrong Login Stays To Home Page", "comments": "Test ProbeTest(tags = \"WebUI\")", "url": true, "content": "  public void aWrongLoginStaysToHomePage() throws InterruptedException {     Thread.sleep(2000);     driver.get(baseUrl);     HomePage homePage = new HomePage(driver);     Thread.sleep(2000);     homePage.typeIncorrectCreditentials();        Thread.sleep(5000);       if (!\"GoomY\".equals(driver.getTitle())) {       throw new IllegalStateException(\"This is not the correct page\");     }        }", "path": "project/GoomY/src/test/java/ch/heigvd/amt/goomy/selenium/GOOMYTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testCanBlockInvalidSslCertificates", "name for description": "test Can Block Invalid Ssl Certificates", "comments": "", "url": true, "content": "  public void testCanBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = new FirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Ignore(value = {IE, SELENESE})", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")) .getText();      assertEquals(shalom, text);   }", "path": "common/test/java/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testWSO2FormatTestCase", "name for description": "test WSO2 Format Test Case", "comments": "Test(groups = \"\", description = \"\")", "url": true, "content": "    public void testWSO2FormatTestCase() throws Exception {         //METHOD:testLoginTestCase:start         //WINDOW:apimng.login         driver.get(baseUrl + \"/publisher/design\");         driver.findElement(By.id(\"username\")).clear();         driver.findElement(By.id(\"username\")).sendKeys(\"admin\");         driver.findElement(By.id(\"pass\")).clear();         driver.findElement(By.id(\"pass\")).sendKeys(\"admin\");         driver.findElement(By.id(\"loginButton\")).click();         //METHOD:testLoginTestCase:end         //METHOD:testMainWindowTestCase:start         //WINDOW:apimng.main         for (int second = 0; ; second++) {             if (second >= 60) {                 fail(\"timeout\");             }             try {                 if (isElementPresent(By.linkText(\"All Statistics\"))) {                     break;                 }             } catch (Exception e) {             }             Thread.sleep(1000);         }          driver.findElement(By.linkText(\"All Statistics\")).click();         for (int second = 0; ; second++) {             if (second >= 60) {                 fail(\"timeout\");             }             try {                 if (isElementPresent(By.linkText(\"API Response Times\"))) {                     break;                 }             } catch (Exception e) {             }             Thread.sleep(1000);         }          driver.findElement(By.linkText(\"API Response Times\")).click();         driver.findElement(By.linkText(\"API Usage by Resource Path\")).click();         driver.findElement(By.linkText(\"API Usage by User\")).click();         driver.findElement(By.linkText(\"Browse\")).click();         driver.findElement(By.linkText(\"Subscriptions\")).click();         driver.findElement(By.linkText(\"Statistics\")).click();         driver.findElement(By.linkText(\"API Subscriptions\")).click();         driver.findElement(By.linkText(\"API Usage\")).click();         driver.findElement(By.linkText(\"API Response Times\")).click();         driver.findElement(By.linkText(\"API Last Access Times\")).click();         driver.findElement(By.linkText(\"Browse\")).click();         driver.findElement(By.linkText(\"Browse\")).click();         driver.findElement(By.linkText(\"Add\")).click();         //METHOD:testMainWindowTestCase:end     }", "path": "src/main/resources/WSO2FormatTestCase.java"}
{"repo_name": "testCanBlockInvalidSslCertificates", "name for description": "test Can Block Invalid Ssl Certificates", "comments": "", "url": true, "content": "  public void testCanBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = new FirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = wait.until(alertIsPresent());      UsernamePasswordCredentials user = new UsernamePasswordCredentials(\"test\", \"test\");      alert.authenticateUsing(user);      assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testGetAndCheckText", "name for description": "test Get And Check Text", "comments": "  \u5165\u9580\u8ab2\u984c\u305d\u306e7:\u300c\u8868\u793a\u3055\u308c\u305f\u5024\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u307f\u3088\u3046\u300d  \u89e3\u7b54\u4f8b  Test", "url": true, "content": "    public void testGetAndCheckText() throws Exception {         File html = new File(\"introwork/introWork7.html\");         String url = html.toURI().toString();         driver.get(url);                  WebElement total = driver.findElement(By.id(\"total\"));         assertThat(total.getText(), is(\"9000\"));     }", "path": "answer/test/java/introwork/IntroWork7Test.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI, SELENESE, OPERA_MOBILE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testAnElementFoundInADifferentFrameViaJsShouldHaveSameId", "name for description": "test An Element Found In A Different Frame Via Js Should Have Same Id", "comments": "JavascriptEnabled Ignore(value = {ANDROID, IPHONE, SELENESE, OPERA, OPERA_MOBILE}, Test", "url": true, "content": "  public void testAnElementFoundInADifferentFrameViaJsShouldHaveSameId() {     String url = appServer.whereIs(\"missedJsReference.html\");     driver.get(url);      driver.switchTo().frame(\"inner\");     WebElement first = driver.findElement(By.id(\"oneline\"));      driver.switchTo().defaultContent();     WebElement element = (WebElement) ((JavascriptExecutor) driver).executeScript(         \"return frames[0].document.getElementById('oneline');\");      driver.switchTo().frame(\"inner\");      WebElement second = driver.findElement(By.id(\"oneline\"));      checkIdEqualityIfRemote(first, element);     checkIdEqualityIfRemote(second, element);   }", "path": "java/client/test/org/openqa/selenium/ElementEqualityTest.java"}
{"repo_name": "testAnElementFoundInADifferentFrameViaJsCanBeUsed", "name for description": "test An Element Found In A Different Frame Via Js Can Be Used", "comments": "JavascriptEnabled Ignore({ANDROID, IPHONE, OPERA, SELENESE, OPERA_MOBILE}) Test", "url": true, "content": "  public void testAnElementFoundInADifferentFrameViaJsCanBeUsed() {     String url = appServer.whereIs(\"missedJsReference.html\");     driver.get(url);      try {       driver.switchTo().frame(\"inner\");       WebElement first = driver.findElement(By.id(\"oneline\"));        driver.switchTo().defaultContent();       WebElement element = (WebElement) ((JavascriptExecutor) driver).executeScript(           \"return frames[0].document.getElementById('oneline');\");         driver.switchTo().frame(\"inner\");        WebElement second = driver.findElement(By.id(\"oneline\"));        assertEquals(first, element);       assertEquals(second, element);     } finally {       driver.switchTo().defaultContent();     }   }", "path": "java/client/test/org/openqa/selenium/ElementFindingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Ignore(value = {IE, SELENESE}) Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = waitFor(alertToBePresent(driver));      UserAndPassword user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);      assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testESStoreBookmarkTestCase", "name for description": "test ES Store Bookmark Test Case", "comments": "Test(groups = \"wso2.es.store\", description = \"Test Bookmarking\")", "url": true, "content": "    public void testESStoreBookmarkTestCase() throws Exception {          driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //get the first element from the gadget list         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")));         String bookmarkedAsset = driver.findElement(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")).getText();         driver.findElement(By.cssSelector(\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")).click();          //bookmark the asset         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.id(\"btn-add-gadget\")));         driver.findElement(By.id(\"btn-add-gadget\")).click();          wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(\"btn-add-gadget\"), \"Bookmarked\"));         assertEquals(\"Bookmarked\", driver.findElement(By.id(\"btn-add-gadget\")).getText(), \"Bookmarking failed\");          //check if shown in My Items page /*         wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"div.ast-title a.ast-name\")));         assertEquals(bookmarkedAsset, driver.findElement(By.cssSelector(\"div.ast-title a.ast-name\")).getText(),                 \"Bookmarked asset not shown in My Items page\");         wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\".bookmark-link\")));         driver.findElement(By.cssSelector(\".bookmark-link\")).click();         */      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"}
{"repo_name": "shouldHaveTokenAssociatedAfterOAuth", "name for description": "should Have Token Associated After O Auth", "comments": "Test", "url": true, "content": "    public void shouldHaveTokenAssociatedAfterOAuth() throws IOException {         // Let's try to auth, redirecting back to the verification page when done         final String authUrl = deploymentUrl.toExternalForm() + PATH_AUTHORIZE_WITH_REDIRECT;         log.info(\"Starting URL: \" + authUrl);          driver.navigate().to(authUrl);         performGitHubOAuth(driver);          // Validate that we landed on the verification page, and that we've got a         // GitHub access token in session         final String finalContent = driver.getPageSource();         String expected = \"{\\\"session_has_github_access_token\\\":true}\";         log.info(\"Response from verification after OAuth: \" + finalContent);         // Assert on contains because phantomjs will wrap in HTML tags         Assert.assertTrue(finalContent.contains(expected));     }", "path": "tests/src/test/java/org/kontinuity/catapult/test/GitHubResourceIT.java"}
{"repo_name": "testClearAndSendKeys", "name for description": "test Clear And Send Keys", "comments": "  \u5165\u9580\u8ab2\u984c\u305d\u306e3:\u300c\u6587\u5b57\u5217\u3092\u5165\u529b\u3057\u3066\u307f\u3088\u3046\u300d  \u89e3\u7b54\u4f8b  Test", "url": true, "content": "    public void testClearAndSendKeys() throws Exception {         File html = new File(\"introwork/introWork3.html\");         String url = html.toURI().toString();         driver.get(url);                  WebElement subject = driver.findElement(By.id(\"subject\"));         subject.clear();         subject.sendKeys(\"Selenium\");     }", "path": "answer/test/java/introwork/IntroWork3Test.java"}
{"repo_name": "testReserveWith9MembersUsingCalendarUtility", "name for description": "test Reserve With9 Members Using Calendar Utility", "comments": "Test", "url": true, "content": "    public void testReserveWith9MembersUsingCalendarUtility() {         File html = new File(\"reserveApp/index.html\");         String url = html.toURI().toString();         driver.get(url);          // \u73fe\u5728\u306e\u30b7\u30b9\u30c6\u30e0\u65e5\u4ed8\u3092\u8d77\u70b9\u306b\u660e\u65e5\u4ee5\u964d\u306e\u76f4\u8fd1\u306e\u571f\u66dc\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059         Calendar immediateSaturday = CalendarUtility.getImmediateDayOfWeek(Calendar.getInstance(), Calendar.SATURDAY);         int reserveYear = immediateSaturday.get(Calendar.YEAR);         int reserveMonth = immediateSaturday.get(Calendar.MONTH) + 1;         int reserveDay = immediateSaturday.get(Calendar.DAY_OF_MONTH);          // \u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305f\u76f4\u8fd1\u306e\u571f\u66dc\u65e5\u3092\u4f7f\u7528\u3057\u307e\u3059         driver.findElement(By.id(\"reserve_year\")).clear();         driver.findElement(By.id(\"reserve_year\")).sendKeys(Integer.toString(reserveYear));         driver.findElement(By.id(\"reserve_month\")).clear();         driver.findElement(By.id(\"reserve_month\")).sendKeys(Integer.toString(reserveMonth));         driver.findElement(By.id(\"reserve_day\")).clear();         driver.findElement(By.id(\"reserve_day\")).sendKeys(Integer.toString(reserveDay));         driver.findElement(By.id(\"reserve_term\")).clear();         driver.findElement(By.id(\"reserve_term\")).sendKeys(\"1\");         driver.findElement(By.id(\"headcount\")).clear();         driver.findElement(By.id(\"headcount\")).sendKeys(\"9\");         driver.findElement(By.id(\"breakfast_on\")).click();         WebElement planA = driver.findElement(By.id(\"plan_a\"));         if (!planA.isSelected()) {             planA.click();         }         WebElement planB = driver.findElement(By.id(\"plan_b\"));         if (!planB.isSelected()) {             planB.click();         }         driver.findElement(By.id(\"guestname\")).clear();         driver.findElement(By.id(\"guestname\")).sendKeys(\"a\");         driver.findElement(By.id(\"goto_next\")).click();          // 2\u30da\u30fc\u30b8\u76ee\u5165\u529b\u753b\u9762         Calendar checkoutSunday = (Calendar) immediateSaturday.clone();         checkoutSunday.add(Calendar.DAY_OF_MONTH, 1);         int checkoutYear = checkoutSunday.get(Calendar.YEAR);         int checkoutMonth = checkoutSunday.get(Calendar.MONTH) + 1;         int checkoutDay = checkoutSunday.get(Calendar.DAY_OF_MONTH);         assertThat(driver.findElement(By.id(\"price\")).getText(), is(\"105750\"));         assertThat(driver.findElement(By.id(\"datefrom\")).getText(), is(reserveYear + \"\u5e74\" + reserveMonth + \"\u6708\" + reserveDay + \"\u65e5\"));         assertThat(driver.findElement(By.id(\"dateto\")).getText(), is(checkoutYear + \"\u5e74\" + checkoutMonth + \"\u6708\" + checkoutDay + \"\u65e5\"));         assertThat(driver.findElement(By.id(\"dayscount\")).getText(), is(\"1\"));         assertThat(driver.findElement(By.id(\"hc\")).getText(), is(\"9\"));         assertThat(driver.findElement(By.id(\"bf_order\")).getText(), is(\"\u3042\u308a\"));         assertThat(driver.findElement(By.id(\"plan_a_order\")).getText(), is(\"\u663c\u304b\u3089\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30d7\u30e9\u30f3\"));         assertThat(driver.findElement(By.id(\"plan_b_order\")).getText(), is(\"\u304a\u5f97\u306a\u89b3\u5149\u30d7\u30e9\u30f3\"));         assertThat(driver.findElement(By.id(\"gname\")).getText(), is(\"a\"));         driver.findElement(By.id(\"commit\")).click();     }", "path": "answer/test/java/practicework/work1/PracticeWork1Test.java"}
{"repo_name": "testSelectOptionByValue", "name for description": "test Select Option By Value", "comments": "  \u5165\u9580\u8ab2\u984c\u305d\u306e6:\u300c\u30d7\u30eb\u30c0\u30a6\u30f3\u3092\u9078\u629e\u3057\u3066\u307f\u3088\u3046\u300d  Test", "url": true, "content": "    public void testSelectOptionByValue() throws Exception {         File html = new File(\"introwork/introWork6.html\");         String url = html.toURI().toString();         driver.get(url);                  WebElement headCount = driver.findElement(By.id(\"head_count\"));         Select select = new Select(headCount);         select.selectByValue(\"5\");     }", "path": "answer/test/java/introwork/IntroWork6Test.java"}
{"repo_name": "testPostConnectivityDataTenTimes", "name for description": "test Post Connectivity Data Ten Times", "comments": "  Navigates to the \"Large Scale Connectivity\" page ten times.   @throws Exception if something goes wrong ", "url": true, "content": "    public void testPostConnectivityDataTenTimes() throws Exception {         loginAdmin();          for (int i = 0; i < 10; i++) {             postConnectivityData();             webDriver.get(baseUrl + USER_PROFILE_URL_SUFFIX);             WebElement logout = findElement(By.name(\"logout\"));             assertEquals(\"button\", logout.getTagName());             assertEquals(\"submit\", logout.getAttribute(\"type\"));         }          logout();     }", "path": "tvb/tests/ui_tests/functional_tests/src/main/java/org/tvb/tests/ConnectivityTest.java"}
{"repo_name": "testESPublishToStore", "name for description": "test ES Publish To Store", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")", "url": true, "content": "    public void testESPublishToStore() throws Exception {         //Add a new gadget with info         driver.findElement(By.linkText(\"Add\")).click();         driver.findElement(By.name(\"overview_provider\")).clear();         driver.findElement(By.name(\"overview_provider\")).sendKeys(userInfo.getUserName());         driver.findElement(By.name(\"overview_name\")).clear();         driver.findElement(By.name(\"overview_name\")).sendKeys(ASSET_NAME);         driver.findElement(By.name(\"overview_version\")).clear();         driver.findElement(By.name(\"overview_version\")).sendKeys(ASSET_VERSION);         driver.findElement(By.name(\"overview_createdtime\")).clear();         driver.findElement(By.name(\"overview_createdtime\")).sendKeys(ASSET_CREATED_TIME);         driver.findElement(By.name(\"overview_url\")).clear();         driver.findElement(By.name(\"overview_url\")).sendKeys(ASSET_URL);         driver.findElement(By.name(\"overview_description\")).clear();         driver.findElement(By.name(\"overview_description\")).sendKeys(ASSET_DESCRIPTION);         driver.findElement(By.id(\"btn-create-asset\")).click();         if (isAlertPresent()) {             closeAlertAndGetItsText();         }         //publish the gadget to store         driver.findElement(By.cssSelector(\"a.btn\")).click();         driver.findElementPoll(By.linkText(ASSET_NAME), MAX_POLL_COUNT);         driver.findElement(By.linkText(ASSET_NAME)).click();         driver.findElement(By.linkText(\"Life Cycle\")).click();          driver.findElement(By.id(\"In-Review\")).click();         driver.findElement(By.id(\"commentModalText\")).clear();         driver.findElement(By.id(\"commentModalText\")).sendKeys(LC_COMMENT);         driver.findElement(By.id(\"commentModalSave\")).click();          driver.get(driver.getCurrentUrl());         driver.findElement(By.id(\"Published\")).click();         driver.findElement(By.id(\"commentModalText\")).clear();         driver.findElement(By.id(\"commentModalText\")).sendKeys(LC_COMMENT);         driver.findElement(By.id(\"commentModalSave\")).click();         //navigate to store to check the published gadget         driver.get(baseUrl + STORE_URL);         driver.findElementPoll(By.xpath(\"//a[contains(.,'\" + ASSET_NAME + \"')]\"), 5);         assertEquals(ASSET_NAME, driver.findElement(By.cssSelector(\"h4\")).getText());         driver.findElement(By.cssSelector(\"div.asset-author-category > ul > li\")).click();         assertEquals(ASSET_NAME, driver.findElement(By.cssSelector(\"h3\")).getText());         assertEquals(ASSET_DESCRIPTION, driver.findElement(By.cssSelector(\"p\")).getText());     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"}
{"repo_name": "testESPublisherAssetNewPageTestCase", "name for description": "test ES Publisher Asset New Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test adding a new asset page in extensions\")", "url": true, "content": "    public void testESPublisherAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/asts/servicex/new_page\");         assertTrue(isElementPresent(By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"}
{"repo_name": "testESPublisherAddedAssetTestCase", "name for description": "test ES Publisher Added Asset Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new asset type in extensions\")", "url": true, "content": "    public void testESPublisherAddedAssetTestCase() throws Exception {         driver.get(baseUrl + PUBLISHER_URL);         assertTrue(isElementPresent(By.cssSelector(\"button.btn.dropdown-toggle\")));         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         assertTrue(isElementPresent(By.cssSelector(\"span.publisherTitle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"}
{"repo_name": "testStoreSortOnPopularity", "name for description": "test Store Sort On Popularity", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on popularity\")", "url": true, "content": "    public void testStoreSortOnPopularity() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //sort by popularity         driver.findElement(By.cssSelector(\"i.icon-star\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(\"h4\"), popularAsset1));         assertEquals(driver.findElement(By.cssSelector(\"h4\")).getText(), popularAsset1, \"Popularity Sort failed\");         assertEquals(driver.findElement(By.xpath                 (\"//div[@id='assets-container']/div/div[2]/div/div/a/h4\")).getText(), popularAsset2,                 \"Popularity Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testStoreSortOnAlphabeticalOrder", "name for description": "test Store Sort On Alphabetical Order", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on alphabetical order\")", "url": true, "content": "    public void testStoreSortOnAlphabeticalOrder() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //sort by alphabetical order         driver.findElement(By.cssSelector(\"i.icon-sort-alphabetical\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.xpath                 (\"//div[@id='assets-container']/div/div[3]/div/div/a/h4\"), BUBBLE_CHART));         assertEquals(assetName, driver.findElement(By.cssSelector(\"h4\")).getText(), \"Alphabetical Sort failed\");         assertEquals(BAR_CHART, driver.findElement(By.xpath                 (\"//div[@id='assets-container']/div/div[2]/div/div/a/h4\")).getText(), \"Alphabetical Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testStoreSortOnCreatedTime", "name for description": "test Store Sort On Created Time", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on created time\")", "url": true, "content": "    public void testStoreSortOnCreatedTime() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //sort by created time         driver.findElement(By.cssSelector(\"i.icon-calendar\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(\"h4\"), assetName));         assertEquals(assetName, driver.findElement(By.cssSelector(\"h4\")).getText(), \"Recent Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideRendererTestCase", "name for description": "test ES Publisher Asset Override Renderer Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a renderer in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverrideRendererTestCase() throws Exception {         driver.get(lifecycleUrl);         assertTrue(isElementPresent(By.id(\"assetLifecyclePartial\")));         assertEquals(driver.findElement(By.id(\"assetLifecyclePartial\")).getText(), \"Asset Overridden Lifecycle through renderer\");     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideRendererTestCase.java"}
{"repo_name": "testESPublisherAssetCaramelPageTestCase", "name for description": "test ES Publisher Asset Caramel Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new caramel page in extensions\")", "url": true, "content": "    public void testESPublisherAssetCaramelPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/asts/servicex/new_caramel_page\");         assertTrue(isElementPresent(By.linkText(\"Overview\")));         assertTrue(isElementPresent(By.linkText(\"Edit\")));         assertTrue(isElementPresent(By.linkText(\"Life Cycle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"}
{"repo_name": "testStoreBeforeAddRatings", "name for description": "test Store Before Add Ratings", "comments": "Test(groups = \"wso2.es.store.ratings\", description = \"Test Start Add Rating\")", "url": true, "content": "    public void testStoreBeforeAddRatings() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         driver.findElement(By.cssSelector(\"i.icon-cog\")).click();         driver.findElement(By.cssSelector(\"h4\")).click();         driver.findElement(By.linkText(\"User Reviews\")).click();         driver.switchTo().frame(driver.findElement(By.id(\"socialIfr\")));         assertEquals(\"Please Sign in to add a Review\",                 driver.findElement(By.cssSelector(\"div.com-guest\")).getText());         assertEquals(\"Be the first one to review!\",                 driver.findElement(By.cssSelector(\"p.com-first-review\")).getText());         driver.switchTo().defaultContent();     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"}
{"repo_name": "testListPageSortByName", "name for description": "test List Page Sort By Name", "comments": "Test(groups = \"wso2.es.publisher\", description = \"Test sort by name\")", "url": true, "content": "    public void testListPageSortByName() throws Exception {         driver.get(baseUrl + PUBLISHER_URL);         driver.findElementPoll(By.linkText(ASSET_NAME), MAX_POLL_COUNT);         driver.findElement(By.partialLinkText(\"NAME\")).click();         assertEquals(NAME_SORT_ASSET_1, driver.findElement(By.xpath(\"//tbody[@id='list-asset-table-body']/tr[1]/td[2]\"))                 .getText(), \"Sort on name failed\");         assertEquals(NAME_SORT_ASSET_2, driver.findElement(By.xpath(\"//tbody[@id='list-asset-table-body']/tr[14]/td[2]\"))                 .getText(), \"Sort on name failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testESStoreNewGlobalPageTestCase", "name for description": "test ES Store New Global Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Add new Global page via extension test case\")", "url": true, "content": "    public void testESStoreNewGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/store/pages/servicex_global\");         assertTrue(isElementPresent(By.id(\"assetNewGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideExistingPageTestCase", "name for description": "test ES Publisher Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding existing page in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverrideExistingPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/asts/gadget/list\");         driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/asts/servicex/details\");         assertTrue(isElementPresent(By.id(\"assetOveriddenDetailsPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESPublisherAssetOverridePartialTestCase", "name for description": "test ES Publisher Asset Override Partial Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a partial in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverridePartialTestCase() throws Exception {         driver.get(updateUrl);         assertTrue(isElementPresent(By.id(\"assetOverriddenListingH1\")));         assertEquals(driver.findElement(By.id(\"assetOverriddenListingH1\")).getText(), \"New Asset Update Partial of Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"}
{"repo_name": "testESStoreBookmarkTestCase", "name for description": "test ES Store Bookmark Test Case", "comments": "Test(groups = \"wso2.es.store\", description = \"Test Bookmarking\")", "url": true, "content": "    public void testESStoreBookmarkTestCase() throws Exception {         driver.get(baseUrl + STORE_TOP_ASSETS_PAGE);         driver.findElement(By.xpath(\"//i[@class='icon-cog']\")).click();         //select an asset to bookmark and open it         String bookmarkedAsset = driver.findElement(By.xpath(\"//div[@id='assets-container']/div/div[1]/div/div/a/h4\"))                 .getText();         driver.findElement(By.xpath(\"//div[@id='assets-container']/div/div[1]/div/div/a/h4\")).click();         if (isElementPresent(By.linkText(\"Sign in\"))) {             driver.findElement(By.linkText(\"Sign in\")).click();         }         //bookmark the asset         driver.findElement(By.id(\"btn-add-gadget\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(\"btn-add-gadget\"), \"Bookmarked\"));         assertEquals(\"Bookmarked\", driver.findElement(By.id(\"btn-add-gadget\")).getText(), \"Bookmarking failed\");          //check if shown in My Items page         driver.findElement(By.linkText(\"My Items\")).click();         wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"strong\")));         assertEquals(bookmarkedAsset, driver.findElement(By.cssSelector(\"strong\")).getText(),                 \"Bookmarked asset not shown in My Items page\");          //check if shown in My assets section         driver.findElement(By.xpath(\"//div[@id='container-search']/div/div/div/div/a/li\")).click();         assertTrue(isElementPresent(By.linkText(\"My Assets\")), \"My Assets section missing\");         driver.findElement(By.cssSelector(\"i.icon-angle-down.pull-right\")).click();         assertEquals(bookmarkedAsset, driver.findElement(By.cssSelector(\"strong > a\")).getText(),                 \"Bookmarked asset not shown in My Assets section\");          driver.findElement(By.linkText(\"View all\")).click();         assertEquals(\"My Assets\", driver.findElement(By.cssSelector(\"h3.asset-title-separator.asset-type-gadget\"))                 .getText(), \"View all not directing to My Items page\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"}
{"repo_name": "testESStoreAssetOverrideExistingPageTestCase", "name for description": "test ES Store Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Overriding list page via extensions test case\")", "url": true, "content": "    public void testESStoreAssetOverrideExistingPageTestCase() throws Exception {          driver.get(baseUrl + \"/store/asts/servicex/list\");         assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESStoreAddedAssetTestCase", "name for description": "test ES Store Added Asset Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"The new asset type list page extension in store Test Case\")", "url": true, "content": "    public void testESStoreAddedAssetTestCase() throws Exception {         driver.get(baseUrl + \"/store/asts/gadget/list\");         driver.findElement(By.xpath(\"//div[@id='container-search']/div/div/div/div/a[3]/li\")).click();         driver.findElementPoll(By.id(\"assetListingPageH1\"),POLL_COUNT);         assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"}
{"repo_name": "testESRegisterUserTestCase", "name for description": "test ES Register User Test Case", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing user registration\")", "url": true, "content": "    public void testESRegisterUserTestCase() throws Exception {         //Register new user         driver.get(baseUrl + STORE_URL);         driver.findElement(By.id(\"btn-register\")).click();         driver.findElement(By.id(\"reg-username\")).clear();         driver.findElement(By.id(\"reg-username\")).sendKeys(NEW_USER_NAME);         driver.findElement(By.id(\"reg-password\")).clear();         driver.findElement(By.id(\"reg-password\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.id(\"reg-password2\")).clear();         driver.findElement(By.id(\"reg-password2\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.id(\"registrationSubmit\")).click();         //check login for store         assertTrue(isElementPresent(By.linkText(\"My Items\")), \"Login failed for Store\");         assertTrue(isElementPresent(By.linkText(NEW_USER_NAME)), \"Login failed for Store\");         //check login for publisher         driver.get(baseUrl + PUBLISHER_URL);         assertTrue(isElementPresent(By.linkText(NEW_USER_NAME)), \"Login failed for Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"}
{"repo_name": "testESPublisherNewGlobalPageTestCase", "name for description": "test ES Publisher New Global Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test adding a new global page in extensions\")", "url": true, "content": "    public void testESPublisherNewGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/pages/servicex_global\");         assertTrue(isElementPresent(By.id(\"assetNewGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"}
{"repo_name": "testESPublisherOverridenGlobalPageTestCase", "name for description": "test ES Publisher Overriden Global Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a global page in extensions\")", "url": true, "content": "    public void testESPublisherOverridenGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/pages/splash\");         assertTrue(isElementPresent(By.id(\"assetOverridenGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"}
{"repo_name": "testESStoreAssetNewPageTestCase", "name for description": "test ES Store Asset New Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"New page added via extensions test case\")", "url": true, "content": "    public void testESStoreAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/store/asts/servicex/new_page\");         assertTrue(isElementPresent(By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI, SELENESE, OPERA_MOBILE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore({IE, CHROME, SELENESE, IPHONE})", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      // This should work     assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "common/test/java/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain", "name for description": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"simpleTest.html\");     driver.get(url);      Cookie cookie = options.getCookieNamed(\"fish\");     assertNull(String.valueOf(cookie), cookie);   }", "path": "common/test/java/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testGetCookieDoesNotRetriveBeyondCurrentDomain", "name for description": "test Get Cookie Does Not Retrive Beyond Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testGetCookieDoesNotRetriveBeyondCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"\");     driver.get(url);      Set<Cookie> cookies = options.getCookies();     assertFalse(cookies.contains(cookie1));   }", "path": "common/test/java/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testESPublishToStore", "name for description": "test ES Publish To Store", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")", "url": true, "content": "    public void testESPublishToStore() throws Exception {         //Add a new gadget with info         driver.findElement(By.linkText(\"Add \" + ASSET_TYPE)).click();         driver.findElement(By.name(\"overview_name\")).clear();         driver.findElement(By.name(\"overview_name\")).sendKeys(ASSET_NAME);         driver.findElement(By.name(\"overview_version\")).clear();         driver.findElement(By.name(\"overview_version\")).sendKeys(ASSET_VERSION);         driver.findElement(By.name(\"overview_url\")).clear();         driver.findElement(By.name(\"overview_url\")).sendKeys(ASSET_URL);         driver.findElement(By.name(\"overview_description\")).clear();         driver.findElement(By.name(\"overview_description\")).sendKeys(ASSET_DESCRIPTION);         driver.findElement(By.id(\"btn-create-asset\")).click();         if (isAlertPresent(driver)) {             closeAlertAndGetItsText(driver, true);         }         //publish the gadget to store         driver.findElementPoll(By.linkText(ASSET_NAME), MAX_POLL_COUNT);         driver.findElement(By.linkText(ASSET_NAME)).click();         driver.findElement(By.linkText(\"Life Cycle\")).click();          driver.findElement(By.id(\"In-Review\")).click();         driver.findElement(By.id(\"commentModalText\")).clear();         driver.findElement(By.id(\"commentModalText\")).sendKeys(LC_COMMENT);         driver.findElement(By.id(\"commentModalSave\")).click();          driver.get(driver.getCurrentUrl());         driver.findElement(By.id(\"Published\")).click();         driver.findElement(By.id(\"commentModalText\")).clear();         driver.findElement(By.id(\"commentModalText\")).sendKeys(LC_COMMENT);         driver.findElement(By.id(\"commentModalSave\")).click();         //navigate to store to check the published gadget         driver.get(baseUrl + STORE_URL);         driver.findElementPoll(By.xpath(\"//a[contains(.,'\" + ASSET_NAME + \"')]\"), 5);         assertEquals(ASSET_NAME, driver.findElement(By.cssSelector(\"h4\")).getText());         driver.findElement(By.cssSelector(\"div.asset-author-category > ul > li\")).click();         assertEquals(ASSET_NAME, driver.findElement(By.cssSelector(\"h3\")).getText());         assertEquals(ASSET_DESCRIPTION, driver.findElement(By.cssSelector(\"p\")).getText());     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"}
{"repo_name": "testBaseURLExternalLinks", "name for description": "test Base URL External Links", "comments": "Test //testBaseURLExternalLinks", "url": true, "content": "    public void testBaseURLExternalLinks() throws Exception { \t\ttry { \t\t\tdriver.get(baseUrl); \t\t\tjava.util.List<WebElement> links = driver.findElements(By.tagName(\"a\")); \t\t\tHashSet hset = new HashSet(); \t\t\tint lcv = 0; \t\t\tfor (int i=0; i<links.size(); i++) { \t\t\t\tString href = links.get(i).getAttribute(\"href\"); \t\t\t\tif (href != null && href.length()>0) { \t\t\t\t\tif (!hset.contains(href)) { \t\t\t\t\t\thset.add(href); \t\t\t\t\t} \t\t\t    } \t\t\t} \t\t\tIterator it = hset.iterator(); \t\t\twhile (it.hasNext()) { \t\t\t\tString href = (String) it.next(); \t\t\t\tif (!href.startsWith(baseUrl)) { \t\t\t\t\tlcv++; \t\t\t\t\tint responseCode = getHTTPResponseCode(href); \t\t\t\t\tSystem.out.println(\"(\" + lcv + \") \" + href + \" (response code: \" + responseCode + \")\"); \t\t\t\t\tassertTrue(responseCode == 200); \t\t\t\t} \t\t\t} \t    } catch (Exception ex) {             ex.printStackTrace();             assertTrue(false); \t\t} \t\tassertTrue(true); \t}", "path": "software/junit-test/output/TestTermBrowserTestCase.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      waitFor(WaitingConditions.pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, FIREFOX, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      waitFor(WaitingConditions.pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      waitFor(WaitingConditions.pageTitleToBe(driver, \"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "shouldFlingViaCatapultConsoleButton", "name for description": "should Fling Via Catapult Console Button", "comments": "  Ensures that a fling operation initiated from the HTML console  is working as contracted  @throws IOException  Test RunAsClient InSequence(1) OperateOnDeployment(\"real\")", "url": true, "content": "   public void shouldFlingViaCatapultConsoleButton() throws IOException {        // Define the request URL       final String consoleUrl = this.getDeploymentUrl().toExternalForm();       log.info(\"Request URL: \" + consoleUrl);        // Execute the Fling URL which should perform all actions       driver.navigate().to(consoleUrl);        final File scrFile1 = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);       FileUtils.copyFile(scrFile1,               new File(                       \"target/\" +                               this.getClass().getSimpleName() +                               \"-1-consoleBeforeSubmission.png\"));        // Fill out the form and submit       final WebElement select = driver.findElement(By.id(\"flingSourceRepo\"));       final List<WebElement> options = select.findElements(By.tagName(\"option\"));       for(final WebElement option : options){          if(option.getAttribute(\"value\").equals(this.getSourceRepo())){             option.click();             break;          }       }       final WebElement submit = driver.findElement(By.id(\"flingSubmitButton\"));       submit.click();        // Do OAuth       GitHubResourceIT.performGitHubOAuth(               driver);        // Ensure we end up in the right place       final File scrFile2 = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);       FileUtils.copyFile(scrFile2,               new File(                       \"target/\" +                               this.getClass().getSimpleName() +                               \"-2-consoleAfterSubmission.png\"));       this.assertLanding(driver);    }", "path": "tests/src/test/java/org/kontinuity/catapult/test/CatapultConsoleIT.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Ignore(IE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")) .getText();      assertEquals(shalom, text);   }", "path": "common/test/java/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testCreateEventJUnit4", "name for description": "test Create Event J Unit4", "comments": "Test", "url": true, "content": "  public void testCreateEventJUnit4() throws Exception {     driver.get(baseUrl + \"/\");     driver.findElement(By.linkText(\"inputLogin using your gmail account\")).click();     driver.findElement(By.id(\"Email\")).clear();     driver.findElement(By.id(\"Email\")).sendKeys(\"harshithachidanand\");     driver.findElement(By.id(\"next\")).click();     driver.findElement(By.id(\"Passwd\")).clear();     driver.findElement(By.id(\"Passwd\")).sendKeys(\"\");     driver.findElement(By.id(\"next\")).click();     driver.findElement(By.id(\"eventName\")).clear();     driver.findElement(By.id(\"eventName\")).sendKeys(\"New events\");     driver.findElement(By.id(\"eventTagline\")).clear();     driver.findElement(By.id(\"eventTagline\")).sendKeys(\"New is awesome\");     driver.findElement(By.xpath(\"//table[@id='eventDate_table']/tbody/tr[3]/td[6]/div\")).click();     driver.findElement(By.cssSelector(\"button.btn-flat.picker__close\")).click();     driver.findElement(By.id(\"eventTime\")).clear();     driver.findElement(By.id(\"eventTime\")).sendKeys(\"9:00AM\");     driver.findElement(By.id(\"duration\")).clear();     driver.findElement(By.id(\"duration\")).sendKeys(\"2 hours\");     driver.findElement(By.cssSelector(\"input.select-dropdown.active\")).click();     driver.findElement(By.cssSelector(\"li.active > span\")).click();     driver.findElement(By.cssSelector(\"input.select-dropdown.active\")).click();     driver.findElement(By.cssSelector(\"#select-options-815bcc23-dabb-d8e7-0c54-cc604715e2d4 > li.active > span\")).click();     driver.findElement(By.cssSelector(\"input.select-dropdown.active\")).click();     driver.findElement(By.cssSelector(\"#select-options-091efa9b-6d5f-ef96-ae17-69722f5ba9b7 > li.active > span\")).click();     driver.findElement(By.cssSelector(\"input.select-dropdown.active\")).click();     driver.findElement(By.cssSelector(\"#select-options-7ed503fc-e8cb-c3b8-0752-c157b27088ea > li.active > span\")).click();     driver.findElement(By.id(\"capacity\")).clear();     driver.findElement(By.id(\"capacity\")).sendKeys(\"90\");     driver.findElement(By.id(\"location\")).clear();     driver.findElement(By.id(\"location\")).sendKeys(\"HFH\");     driver.findElement(By.id(\"description\")).clear();     driver.findElement(By.id(\"description\")).sendKeys(\"yep! come n see what new\");     driver.findElement(By.id(\"createrName\")).clear();     driver.findElement(By.id(\"createrName\")).sendKeys(\"Harshitha\");     driver.findElement(By.id(\"createrEmail\")).clear();     driver.findElement(By.id(\"createrEmail\")).sendKeys(\"har@gmail.com\");     driver.findElement(By.name(\"action\")).click();     driver.findElement(By.xpath(\"//ul[@id='nav-mobile']/li[3]/a\")).click();     driver.findElement(By.linkText(\"call_madeSignout\")).click();   }", "path": "eventize/src/test/TestCreateEvent_JUnit4.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);     Assert.assertFalse(\"\".equals(homepage.header.getText()));   }", "path": "src/main/resources/archetype-resources/src/test/java/SampleTestNgTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain", "name for description": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"simpleTest.html\");     driver.get(url);      Cookie cookie = options.getCookieNamed(\"fish\");     assertNull(String.valueOf(cookie), cookie);   }", "path": "common/test/java/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testGetCookieDoesNotRetriveBeyondCurrentDomain", "name for description": "test Get Cookie Does Not Retrive Beyond Current Domain", "comments": "Ignore(SELENESE)", "url": true, "content": "  public void testGetCookieDoesNotRetriveBeyondCurrentDomain() {     Cookie cookie1 = new Cookie(\"fish\", \"cod\");     WebDriver.Options options = driver.manage();     options.addCookie(cookie1);      String url = GlobalTestEnvironment.get().getAppServer().whereElseIs(\"\");     driver.get(url);      Set<Cookie> cookies = options.getCookies();     assertFalse(cookies.contains(cookie1));   }", "path": "common/test/java/org/openqa/selenium/CookieImplementationTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = wait.until(alertIsPresent());      Credentials user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);  \tWebElement element = wait.until(presenceOfElementLocated(By.tagName(\"h1\")));     assertEquals(\"authorized\", element.getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore({IE, CHROME, SELENESE, IPHONE})", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      // This should work     assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "common/test/java/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testESPublisherAssetOverrideExistingPageTestCase", "name for description": "test ES Publisher Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetOverrideExistingPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/asts/servicex/details\");     assertTrue(isElementPresent(By.id(\"assetOveriddenDetailsPage\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideRendererTestCase", "name for description": "test ES Publisher Asset Override Renderer Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetOverrideRendererTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/asts/servicex/lifecycle\");  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideRendererTestCase.java"}
{"repo_name": "testESStoreAssetOverrideExistingPageTestCase", "name for description": "test ES Store Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreAssetOverrideExistingPageTestCase() throws Exception {     driver.get(baseUrl + \"/store/asts/servicex/list\");     assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));  }", "path": "modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESPublisherAssetNewPageTestCase", "name for description": "test ES Publisher Asset New Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetNewPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/asts/servicex/new_page\");     assertTrue(isElementPresent(By.id(\"servicexNewPageH1\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetNewPageTestCase.java"}
{"repo_name": "testNotFoundNoAlert", "name for description": "test Not Found No Alert", "comments": "Test", "url": true, "content": "\t  public void testNotFoundNoAlert() throws Exception{ \t\t  driver.get(baseUrl + \"not_found\"); \t\t  assertFalse(isAlertPresent()); \t}", "path": "tests/selenium/java_package/src/selenium_package/tests/second_page/TestSecondPage.java"}
{"repo_name": "testNotFoundNoAlert", "name for description": "test Not Found No Alert", "comments": "Test", "url": true, "content": "\t  public void testNotFoundNoAlert() throws Exception{ \t\t  driver.get(baseUrl + \"not_found\"); \t\t  assertFalse(isAlertPresent()); \t  }", "path": "tests/selenium/java_package/src/selenium_package/tests/TestStaff.java"}
{"repo_name": "testESPublisherAssetOverridePartialTestCase", "name for description": "test ES Publisher Asset Override Partial Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetOverridePartialTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/asts/servicex/update\");  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverridePartialTestCase.java"}
{"repo_name": "testESStoreAddedAssetTestCase", "name for description": "test ES Store Added Asset Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreAddedAssetTestCase() throws Exception {     driver.get(baseUrl + \"/store/asts/gadget/list\");     driver.findElement(By.xpath(\"//div[@id='container-search']/div/div/div/div/a[3]/li\")).click();     assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));  }", "path": "modules/integration/selenium/generated/store/extensions/asset/ESStoreAddedAssetTestCase.java"}
{"repo_name": "testESPublisherAssetCaramelPageTestCase", "name for description": "test ES Publisher Asset Caramel Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetCaramelPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/asts/servicex/new_caramel_page\");     assertTrue(isElementPresent(By.cssSelector(\"span.publisherTitle\")));     assertTrue(isElementPresent(By.linkText(\"Overview\")));     assertTrue(isElementPresent(By.linkText(\"Edit\")));     assertTrue(isElementPresent(By.linkText(\"Life Cycle\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetCaramelPageTestCase.java"}
{"repo_name": "testESStoreAssetNewPageTestCase", "name for description": "test ES Store Asset New Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreAssetNewPageTestCase() throws Exception {     driver.get(baseUrl + \"/store/asts/servicex/new_page\");     assertTrue(isElementPresent(By.id(\"assetNewPageH1\")));  }", "path": "modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetNewPageTestCase.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, OPERA, OPERA_MOBILE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({OPERA, OPERA_MOBILE, MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({ANDROID, IPHONE, OPERA, OPERA_MOBILE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore(value = {IE, CHROME, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE, PHANTOMJS}, Test", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     // TODO(user): Set the SSL capability to true.     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(TestUtilities.isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "displaysPolicyUrlInLoginPage", "name for description": "displays Policy Url In Login Page", "comments": "Parameters({\"redirectUris\", \"redirectUri\"}) Test", "url": true, "content": "    public void displaysPolicyUrlInLoginPage(final String redirectUris, final String redirectUri) throws Exception {         showTitle(\"OC5:FeatureTest-Displays Policy in Login Page\");          List<ResponseType> responseTypes = Arrays.asList(ResponseType.CODE);         String policyUri = \"http://www.gluu.org/policy\";          // 1. Register client         RegisterRequest registerRequest = new RegisterRequest(ApplicationType.WEB, \"oxAuth test app\",                 StringUtils.spaceSeparatedToList(redirectUris));         registerRequest.setResponseTypes(responseTypes);         registerRequest.setPolicyUri(policyUri);          RegisterClient registerClient = new RegisterClient(registrationEndpoint);         registerClient.setRequest(registerRequest);         RegisterResponse registerResponse = registerClient.exec();          showClient(registerClient);         assertEquals(registerResponse.getStatus(), 200, \"Unexpected response code: \" + registerResponse.getEntity());         assertNotNull(registerResponse.getClientId());         assertNotNull(registerResponse.getClientSecret());         assertNotNull(registerResponse.getRegistrationAccessToken());         assertNotNull(registerResponse.getClientIdIssuedAt());         assertNotNull(registerResponse.getClientSecretExpiresAt());          String clientId = registerResponse.getClientId();          // 2. Request authorization and receive the authorization code.         List<String> scopes = Arrays.asList(\"openid\", \"profile\", \"address\", \"email\");         String state = UUID.randomUUID().toString();          AuthorizationRequest authorizationRequest = new AuthorizationRequest(responseTypes, clientId, scopes, redirectUri, null);         authorizationRequest.setState(state);          String authorizationRequestUrl = getAuthorizationEndpoint() + \"?\" + authorizationRequest.getQueryString();          AuthorizeClient authorizeClient = new AuthorizeClient(getAuthorizationEndpoint());         authorizeClient.setRequest(authorizationRequest);          try {             startSelenium();             driver.navigate().to(authorizationRequestUrl);              WebElement policy = driver.findElement(By.xpath(\"//a[@href='\" + policyUri + \"']\"));             assertNotNull(policy);         } catch (NoSuchElementException ex) {             fail(\"Policy not found\");         } finally {             stopSelenium();         }     }", "path": "Client/src/test/java/org/xdi/oxauth/interop/DisplaysPolicyUriInLoginPage.java"}
{"repo_name": "displaysLogoInLoginPage", "name for description": "displays Logo In Login Page", "comments": "Parameters({\"redirectUris\", \"redirectUri\"}) Test", "url": true, "content": "    public void displaysLogoInLoginPage(final String redirectUris, final String redirectUri) throws Exception {         showTitle(\"OC5:FeatureTest-Displays Logo in Login Page\");          List<ResponseType> responseTypes = Arrays.asList(ResponseType.CODE);         String logoUri = \"http://www.gluu.org/wp-content/themes/gluursn/images/logo.png\";          // 1. Register client         RegisterRequest registerRequest = new RegisterRequest(ApplicationType.WEB, \"oxAuth test app\",                 StringUtils.spaceSeparatedToList(redirectUris));         registerRequest.setResponseTypes(responseTypes);         registerRequest.setLogoUri(logoUri);          RegisterClient registerClient = new RegisterClient(registrationEndpoint);         registerClient.setRequest(registerRequest);         RegisterResponse registerResponse = registerClient.exec();          showClient(registerClient);         assertEquals(registerResponse.getStatus(), 200, \"Unexpected response code: \" + registerResponse.getEntity());         assertNotNull(registerResponse.getClientId());         assertNotNull(registerResponse.getClientSecret());         assertNotNull(registerResponse.getRegistrationAccessToken());         assertNotNull(registerResponse.getClientIdIssuedAt());         assertNotNull(registerResponse.getClientSecretExpiresAt());          String clientId = registerResponse.getClientId();          // 2. Request authorization and receive the authorization code.         List<String> scopes = Arrays.asList(\"openid\", \"profile\", \"address\", \"email\");         String state = UUID.randomUUID().toString();          AuthorizationRequest authorizationRequest = new AuthorizationRequest(responseTypes, clientId, scopes, redirectUri, null);         authorizationRequest.setState(state);          String authorizationRequestUrl = getAuthorizationEndpoint() + \"?\" + authorizationRequest.getQueryString();          AuthorizeClient authorizeClient = new AuthorizeClient(getAuthorizationEndpoint());         authorizeClient.setRequest(authorizationRequest);          try {             startSelenium();             driver.navigate().to(authorizationRequestUrl);              WebElement logo = driver.findElement(By.xpath(\"//img[@src='\" + logoUri + \"']\"));             assertNotNull(logo);         } catch (NoSuchElementException ex) {             fail(\"Logo not found\");         } finally {             stopSelenium();         }     }", "path": "Client/src/test/java/org/xdi/oxauth/interop/DisplaysLogoInLoginPage.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testESPublisherAssetOverridePartialTestCase", "name for description": "test ES Publisher Asset Override Partial Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a partial in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverridePartialTestCase() throws Exception {         driver.get(updateUrl);         assertTrue(isElementPresent(driver, By.id(\"assetOverriddenListingH1\")));         assertEquals(driver.findElement(By.id(\"assetOverriddenListingH1\")).getText(), \"New Asset Update Partial of Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE}, Test", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     // TODO(user): Set the SSL capability to true.     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, SAFARI, SELENESE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(TestUtilities.isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({OPERA, OPERA_MOBILE, MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, HTMLUNIT, IE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, OPERA, OPERA_MOBILE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testHomePageHasAHeader", "name for description": "test Home Page Has A Header", "comments": "Test", "url": true, "content": "  public void testHomePageHasAHeader() {     driver.get(baseUrl);     Assert.assertFalse(\"\".equals(homepage.header.getText()));   }", "path": "src/test/java/ru/stqa/selenium/SampleTestNgTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE}, NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test Ignore(value = {IE},", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE, PHANTOMJS}, Test", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     // TODO(user): Set the SSL capability to true.     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     driver.get(url);      assertThat(driver.getTitle(), equalTo(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, SELENESE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(TestUtilities.isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testCanNavigateToAGivenUrl", "name for description": "test Can Navigate To A Given Url", "comments": "", "url": true, "content": "\tpublic void testCanNavigateToAGivenUrl() throws Exception {  \t\tfinal String url = \"http://www.example.com\"; \t\t \t\tchecking(new Expectations() {{  \t\t\tone(webdriver).get(url); \t\t}}); \t\t \t\tcontext.goTo(url); \t}", "path": "support/test/java/org/openqa/selenium/lift/WebDriverTestContextTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE}) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, PHANTOMJS, SAFARI, SELENESE, OPERA_MOBILE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testCanNavigateToAGivenUrl", "name for description": "test Can Navigate To A Given Url", "comments": "", "url": true, "content": "\tpublic void testCanNavigateToAGivenUrl() throws Exception {  \t\tfinal String url = \"http://www.example.com\"; \t\t \t\tchecking(new Expectations() {{  \t\t\tone(webdriver).get(url); \t\t}}); \t\t \t\tcontext.goTo(url); \t}", "path": "support/test/java/org/openqa/selenium/lift/TestContextTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testESPublisherAssetOverridePartialTestCase", "name for description": "test ES Publisher Asset Override Partial Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a partial in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverridePartialTestCase() throws Exception {         driver.get(updateUrl);         assertTrue(isElementPresent(driver, By.id(\"assetOverriddenListingH1\")));         assertEquals(driver.findElement(By.id(\"assetOverriddenListingH1\")).getText(), \"New Asset Update Partial of Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideListAssetBodyPartialTestCase", "name for description": "test ES Publisher Asset Override List Asset Body Partial Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding listAssetTableBody partial in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverrideListAssetBodyPartialTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/servicex/list\");         assertTrue(isElementPresent(driver, By.className(\"assetOverriddenListingElement\")));         assertEquals(driver.findElement(By.className(\"assetOverriddenListingElement\")).getText(), \"New Asset List Partial of Publisher\");     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test(enabled = false)  @Ignore(value = { ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI,  SELENESE, OPERA_MOBILE }, reason =  \"Untested on all other browsers, fails on chrome, fails on IE.\", issues = {  3508 })", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.dismiss();      assertEquals(\"Tasty cheese\", text);   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate", "name for description": "test Should Be Able To Access Pages With An Insecure Ssl Certificate", "comments": "  @Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI,  OPERA_MOBILE}, reason = \"Safari: does not support insecure SSL\")  Test(enabled = false)", "url": true, "content": "  public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {     // TODO(user): Set the SSL capability to true.     //String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");     //driver.get(url);      //Assert.assertEquals(driver.getTitle(), (\"Hello WebDriver\"));   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "  @Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE,  SAFARI, SELENESE})  Test(enabled = false)", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     /*      * assumeTrue(TestUtilities.isLocal());      *       * DesiredCapabilities requiredCaps = new DesiredCapabilities();      * requiredCaps.setCapability(ACCEPT_SSL_CERTS, false); WebDriverBuilder      * builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);      * localDriver = builder.get();      *       * String url =      * GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\"      * ); localDriver.get(url);      *       * assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));      */   }", "path": "ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "Ignore(value = {SELENESE}) Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testESRegisterUserTestCase", "name for description": "test ES Register User Test Case", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing user registration\")", "url": true, "content": "    public void testESRegisterUserTestCase() throws Exception {         //Register new user         driver.get(baseUrl + STORE_URL);         driver.findElement(By.id(\"btn-register\")).click();         driver.findElement(By.id(\"reg-username\")).clear();         driver.findElement(By.id(\"reg-username\")).sendKeys(NEW_USER_NAME);         driver.findElement(By.id(\"reg-password\")).clear();         driver.findElement(By.id(\"reg-password\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.id(\"reg-password2\")).clear();         driver.findElement(By.id(\"reg-password2\")).sendKeys(NEW_USER_PWD);          driver.findElement(By.name(\"reg-email\")).clear();         driver.findElement(By.name(\"reg-email\")).sendKeys(NEW_USER_EMAIL);         driver.findElement(By.name(\"reg-first-name\")).clear();         driver.findElement(By.name(\"reg-first-name\")).sendKeys(NEW_USER_FNAME);         driver.findElement(By.name(\"reg-last-name\")).clear();         driver.findElement(By.name(\"reg-last-name\")).sendKeys(NEW_USER_LNAME);         driver.findElement(By.id(\"registrationSubmit\")).click();         // check the success message         assertTrue(isElementPresent(driver,By.id(\"regFormSuc\")),\"User creation failed.\");         driver.findElement(By.id(\"signInLink\")).click();          driver.findElementPoll(By.id(\"username\"), MAX_POLL_COUNT);         driver.findElement(By.id(\"username\")).clear();         driver.findElement(By.id(\"username\")).sendKeys(NEW_USER_NAME);         driver.findElement(By.id(\"password\")).clear();         driver.findElement(By.id(\"password\")).sendKeys(NEW_USER_PWD);         driver.findElement(By.xpath(\"//button[@type='submit']\")).click();          WebElement userNameElement = driver.findElement(By.id(\"logedInUser\"));          assertEquals(userNameElement.getText().trim(), NEW_USER_NAME);          //Checking claim from carbon console.         driver.get(baseUrl + MANAGEMENT_CONSOLE_URL);         driver.findElement(By.id(\"txtUserName\")).clear();         driver.findElement(By.id(\"txtUserName\")).sendKeys(adminUserName);         driver.findElement(By.id(\"txtPassword\")).clear();         driver.findElement(By.id(\"txtPassword\")).sendKeys(adminUserPwd);          driver.findElement(By.cssSelector(\"input.button\")).click();         driver.findElement(By.linkText(\"Users and Roles\")).click();         driver.findElement(By.linkText(\"Users\")).click();         driver.findElement(By.cssSelector(\"#userTable tbody tr:last-child td:nth-child(2) a:nth-child(5)\")).click();         driver.findElement(By.linkText(\"default\")).click();         assertEquals(driver.findElement(By.cssSelector(\".styledLeft tr:nth-child(7) input\")).getAttribute(\"value\"), NEW_USER_EMAIL , \"Claims are not working properly.\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"}
{"repo_name": "testESStoreBookmarkTestCase", "name for description": "test ES Store Bookmark Test Case", "comments": "Test(groups = \"wso2.es.store\", description = \"Test Bookmarking\")", "url": true, "content": "    public void testESStoreBookmarkTestCase() throws Exception {          driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //get the first element from the gadget list         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")));         String bookmarkedAsset = driver.findElement(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")).getText();         driver.findElement(By.cssSelector(\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")).click();          //bookmark the asset         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.id(\"btn-add-gadget\")));         driver.findElement(By.id(\"btn-add-gadget\")).click();          wait.until(ExpectedConditions.textToBePresentInElementLocated(By.id(\"main-bookmark\"), \"Bookmarked\"));         assertEquals(\"Bookmarked\", driver.findElement(By.id(\"main-bookmark\")).getText(), \"Bookmarking failed\");          //check if shown in My Items page         driver.findElement(By.cssSelector(\".bookmark-link-text\")).click();         wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"div.ast-title a.ast-name\")));         assertEquals(bookmarkedAsset, driver.findElement(By.cssSelector(\"div.ast-title a.ast-name\")).getText(),                 \"Bookmarked asset not shown in My Items page\");      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"}
{"repo_name": "testRestrictAddAssetAsReviewer", "name for description": "test Restrict Add Asset As Reviewer", "comments": "Test(groups = \"wso2.es.publisher\", description = \"verify not being able to add asset\",", "url": true, "content": "    public void testRestrictAddAssetAsReviewer() throws Exception {         driver.get(baseUrl + PUBLISHER_GADGET_LIST_PAGE);         assertTrue(!isElementPresent(driver, By.id(\"Addgadget\")), \"User who has only internal/reviewer role can add \" +                 \"asset.\");      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"}
{"repo_name": "testRestrictEditAssetAsReviewer", "name for description": "test Restrict Edit Asset As Reviewer", "comments": "Test(groups = \"wso2.es.publisher\", description = \"verify not being able to edit asset\",", "url": true, "content": "    public void testRestrictEditAssetAsReviewer() throws Exception {         driver.get(baseUrl + PUBLISHER_GADGET_LIST_PAGE);         driver.findElement(By.cssSelector(\"h3.ast-name\")).click();         assertTrue(!isElementPresent(driver, By.id(\"Edit\")), \"User who has only internal/reviewer role can edit \" +                 \"asset.\");      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"}
{"repo_name": "testRestrictVersionAssetAsReviewer", "name for description": "test Restrict Version Asset As Reviewer", "comments": "Test(groups = \"wso2.es.publisher\", description = \"verify not being able to version asset\",", "url": true, "content": "    public void testRestrictVersionAssetAsReviewer() throws Exception {         driver.get(baseUrl + PUBLISHER_GADGET_LIST_PAGE);         driver.findElement(By.cssSelector(\"h3.ast-name\")).click();         assertTrue(!isElementPresent(driver, By.id(\"Version\")), \"User who has only internal/reviewer role can version\" +                 \"asset.\");      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"}
{"repo_name": "testRestrictLoginToStoreAsReviewer", "name for description": "test Restrict Login To Store As Reviewer", "comments": "Test(groups = \"wso2.es.publisher\", description = \"verify not being able to login to store\",", "url": true, "content": "    public void testRestrictLoginToStoreAsReviewer() throws Exception {         driver.get(baseUrl + STORE_TOP_ASSETS_PAGE);         WebDriverWait wait = new WebDriverWait(driver, MAX_POLL_COUNT);         wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"btn-signin\")));         driver.findElement(By.id(\"btn-signin\")).click();         assertEquals(driver.findElement(By.cssSelector(\"h3\")).getText(), \"You do not have permission to login to this\" +                 \" application.Please contact your administrator and request permission.\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"}
{"repo_name": "testESPublishToStore", "name for description": "test ES Publish To Store", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")", "url": true, "content": "    public void testESPublishToStore() throws Exception {         //Add a new gadget with info         driver.findElement(By.id(\"Add\" + ASSET_TYPE)).click();         driver.findElement(By.name(\"overview_name\")).clear();         driver.findElement(By.name(\"overview_name\")).sendKeys(ASSET_NAME);         driver.findElement(By.name(\"overview_version\")).clear();         driver.findElement(By.name(\"overview_version\")).sendKeys(ASSET_VERSION);         driver.findElement(By.name(\"overview_url\")).clear();         driver.findElement(By.name(\"overview_url\")).sendKeys(ASSET_URL);         driver.findElement(By.name(\"overview_description\")).clear();         driver.findElement(By.name(\"overview_description\")).sendKeys(ASSET_DESCRIPTION);         driver.findElement(By.name(\"images_thumbnail\")).sendKeys(FrameworkPathUtil.getReportLocation()                 +\"/../src/test/resources/images/thumbnail.jpg\");         driver.findElement(By.name(\"images_banner\")).sendKeys(FrameworkPathUtil.getReportLocation()                 + \"/../src/test/resources/images/banner.jpg\");         driver.findElement(By.id(\"btn-create-asset\")).click(); //        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"Add\" + ASSET_TYPE)));          //publish the gadget to store         driver.findElementPoll(By.linkText(ASSET_NAME), MAX_POLL_COUNT);         driver.findElement(By.linkText(ASSET_NAME)).click();         driver.findElement(By.id(\"LifeCycle\")).click();          driver.findElement(By.id(\"lcActionPromote\")).click(); //        driver.findElement(By.id(\"commentModalText\")).clear(); //        driver.findElement(By.id(\"commentModalText\")).sendKeys(LC_COMMENT); //        driver.findElement(By.id(\"commentModalSave\")).click();          driver.get(driver.getCurrentUrl());         driver.findElement(By.id(\"lcActionPromote\")).click(); //        driver.findElement(By.id(\"commentModalText\")).clear(); //        driver.findElement(By.id(\"commentModalText\")).sendKeys(LC_COMMENT); //        driver.findElement(By.id(\"commentModalSave\")).click();         //navigate to store to check the published gadget         driver.get(baseUrl + STORE_URL);         driver.findElementPoll(By.linkText(ASSET_NAME), MAX_POLL_COUNT);         driver.findElement(By.linkText(ASSET_NAME)).click();         assertEquals(ASSET_NAME, driver.findElement(By.cssSelector(\"h4\")).getText());     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"}
{"repo_name": "testRestrictLoginToPublisherAsStoreOnlyUser", "name for description": "test Restrict Login To Publisher As Store Only User", "comments": "Test(groups = \"wso2.es.store\", description = \"verify not being able to login to publisher\",", "url": true, "content": "    public void testRestrictLoginToPublisherAsStoreOnlyUser() throws Exception {         driver.get(baseUrl + PUBLISHER_GADGET_LIST_PAGE);         assertEquals(driver.findElement(By.cssSelector(\"h3\")).getText(), \"You do not have permission to login to this\" +                 \" application.Please contact your administrator and request permission.\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsStoreUserTestCase.java"}
{"repo_name": "testESPublisherAssetNewPageTestCase", "name for description": "test ES Publisher Asset New Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test adding a new asset page in extensions\")", "url": true, "content": "    public void testESPublisherAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/servicex/list\"); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();          driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/assets/servicex/new_page\");         assertTrue(isElementPresent(driver, By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideExistingPageTestCase", "name for description": "test ES Publisher Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding existing page in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverrideExistingPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/servicex/list\"); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();          driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/assets/servicex/details\");         assertTrue(isElementPresent(driver, By.id(\"assetOveriddenDetailsPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESPublisherAssetCaramelPageTestCase", "name for description": "test ES Publisher Asset Caramel Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new caramel page in extensions\")", "url": true, "content": "    public void testESPublisherAssetCaramelPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/assets/servicex/list\"); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();          driver.findElement(By.linkText(\"Service\")).click();         driver.get(baseUrl + \"/publisher/assets/servicex/new_caramel_page\");         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         assertTrue(isElementPresent(driver, By.id(\"Overview\")));         assertTrue(isElementPresent(driver, By.id(\"Edit\")));         //assertTrue(isElementPresent(driver, By.id(\"Life Cycle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, SELENESE, OPERA, OPERA_MOBILE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = wait.until(alertIsPresent());      UserAndPassword user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);      assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testESStoreNewGlobalPageTestCase", "name for description": "test ES Store New Global Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Add new Global page via extension test case\")", "url": true, "content": "    public void testESStoreNewGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/store/pages/servicex_global\");         assertTrue(isElementPresent(driver, By.id(\"assetNewGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testESPublisherAssetOverrideExistingPageTestCase", "name for description": "test ES Publisher Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetOverrideExistingPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/assets/servicex/details\");     assertTrue(isElementPresent(By.id(\"assetOveriddenDetailsPage\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testESPublisherAssetOverrideRendererTestCase", "name for description": "test ES Publisher Asset Override Renderer Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a renderer in extensions\")", "url": true, "content": "    public void testESPublisherAssetOverrideRendererTestCase() throws Exception {         driver.get(lifecycleUrl);         assertTrue(isElementPresent(driver, By.id(\"assetLifecyclePartial\")));         assertEquals(driver.findElement(By.id(\"assetLifecyclePartial\")).getText(), \"Asset Overridden Lifecycle through renderer\");     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideRendererTestCase.java"}
{"repo_name": "testSelfSignUpForm", "name for description": "test Self Sign Up Form", "comments": "Test(groups = \"wso2.es.common\", description = \"Testing correctness of self sign up form\")", "url": true, "content": "    public void testSelfSignUpForm() throws Exception {         driver.get(baseUrl + MANAGEMENT_CONSOLE_URL);         driver.findElement(By.xpath(\"//span[contains(.,'Configure')]\")).click();         driver.findElement(By.linkText(\"Claim Management\")).click();         driver.findElement(By.linkText(\"http://wso2.org/claims\")).click();         driver.findElement(By.xpath(\"//span[contains(.,'Country')]\")).click();         driver.findElement(By.xpath(\"//a[@href='update-claim.jsp?dialect=http://wso2.org/claims&claimUri=http://wso2.org/claims/country']\")).click();         driver.findElement(By.xpath(\"//input[@id='required']\")).click();         driver.findElement(By.xpath(\"//input[@value='Update']\")).click();         driver.get(baseUrl + PUBLISHER_URL);         assertTrue(isElementPresent(driver, By.name(\"reg-country\")), \"New claim is not shown up in sign up form\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESSelfSignUpTestCase.java"}
{"repo_name": "testESPublisherOverridenGlobalPageTestCase", "name for description": "test ES Publisher Overriden Global Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test overriding a global page in extensions\")", "url": true, "content": "    public void testESPublisherOverridenGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/pages/splash\");         assertTrue(isElementPresent(driver, By.id(\"assetOverridenGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"}
{"repo_name": "testESPublisherNewGlobalPageTestCase", "name for description": "test ES Publisher New Global Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Test adding a new global page in extensions\")", "url": true, "content": "    public void testESPublisherNewGlobalPageTestCase() throws Exception {         driver.get(baseUrl + \"/publisher/pages/servicex_global\");         assertTrue(isElementPresent(driver, By.id(\"assetNewGlobalPage\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"}
{"repo_name": "testListPageSortByName", "name for description": "test List Page Sort By Name", "comments": "Test(groups = \"wso2.es.publisher\", description = \"Test sort by name\", enabled = false)", "url": true, "content": "    public void testListPageSortByName() throws Exception {         driver.get(baseUrl + PUBLISHER_URL);         driver.findElementPoll(By.linkText(ASSET_NAME), MAX_POLL_COUNT);         driver.findElement(By.cssSelector(\"#dropdownMenu1 > img\")).click();         driver.findElement(By.linkText(\"Name\")).click();         assertEquals(NAME_SORT_ASSET_1, driver.findElement(By.xpath(\"/html/body/div/div[3]/div/div[3]/div/div[1]/div/div/a/h3\"))                 .getText(), \"Sort on name failed\");         assertEquals(NAME_SORT_ASSET_2, driver.findElement(By.xpath(\"/html/body/div/div[3]/div/div[3]/div/div[2]/div/div/a/h3\"))                 .getText(), \"Sort on name failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"}
{"repo_name": "testESStoreAssetNewPageTestCase", "name for description": "test ES Store Asset New Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreAssetNewPageTestCase() throws Exception {     driver.get(baseUrl + \"/store/assets/servicex/new_page\");     assertTrue(isElementPresent(By.id(\"assetNewPageH1\")));  }", "path": "modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetNewPageTestCase.java"}
{"repo_name": "testESStoreAddedAssetTestCase", "name for description": "test ES Store Added Asset Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"The new asset type list page extension in store Test Case\")", "url": true, "content": "    public void testESStoreAddedAssetTestCase() throws Exception {         driver.get(baseUrl + \"/store/assets/service/list\");         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         //WebElement myDynamicElement = (new WebDriverWait(driver, 10))           //      .until(ExpectedConditions.presenceOfElementLocated(By.id(\"popoverExampleTwo\")));         //driver.findElement(By.id(\"popoverExampleTwo\")).click();          //driver.findElement(By.linkText(\"Service\")).click();         //driver.findElementPoll(By.id(\"assetListingPageH1\"),POLL_COUNT);         //assertTrue(isElementPresent(driver, By.id(\"assetListingPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"}
{"repo_name": "testESPublisherAssetOverridePartialTestCase", "name for description": "test ES Publisher Asset Override Partial Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetOverridePartialTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/assets/servicex/update\");  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverridePartialTestCase.java"}
{"repo_name": "testESPublisherAssetCaramelPageTestCase", "name for description": "test ES Publisher Asset Caramel Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetCaramelPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/assets/servicex/new_caramel_page\");     assertTrue(isElementPresent(By.cssSelector(\"span.publisherTitle\")));     assertTrue(isElementPresent(By.linkText(\"Overview\")));     assertTrue(isElementPresent(By.linkText(\"Edit\")));     assertTrue(isElementPresent(By.linkText(\"Life Cycle\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetCaramelPageTestCase.java"}
{"repo_name": "testStoreSortOnPopularity", "name for description": "test Store Sort On Popularity", "comments": "TODO fix this part ones the UI is fixed for sort by popularity  @Test(groups = \"wso2.es.store\", description = \"Testing sorting on popularity\")", "url": true, "content": "    public void testStoreSortOnPopularity() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //sort by popularity         driver.findElement(By.cssSelector(\"i.icon-star\")).click();         wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(\"h4\"), popularAsset1));         assertEquals(driver.findElement(By.cssSelector(\"h4\")).getText(), popularAsset1, \"Popularity Sort failed\");         assertEquals(driver.findElement(By.xpath                 (\"//div[@id='assets-container']/div/div[2]/div/div/a/h4\")).getText(), popularAsset2,                 \"Popularity Sort failed\");     }*/", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testStoreSortOnAlphabeticalOrder", "name for description": "test Store Sort On Alphabetical Order", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on alphabetical order\")", "url": true, "content": "    public void testStoreSortOnAlphabeticalOrder() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //sort by alphabetical order         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.id(\"sortDropdown\")));         driver.findElement(By.cssSelector(\"#sortDropdown > img\")).click();         driver.findElement(By.cssSelector(\"#ul-sort-assets li:nth-child(2) a\")).click();         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")));         assertEquals(assetName, driver.findElement(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")).getText(), \"Alphabetical Sort failed\");         assertEquals(WSO2_JIRA, driver.findElement(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:nth-child(2) a.ast-name\")).getText(), \"Alphabetical Sort failed\");     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testStoreSortOnCreatedTime", "name for description": "test Store Sort On Created Time", "comments": "Test(groups = \"wso2.es.store\", description = \"Testing sorting on created time\")", "url": true, "content": "    public void testStoreSortOnCreatedTime() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         //sort by created time ( no need to click on hte link for sorting on created time since this is the default case )         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector                 (\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")));         assertEquals(assetName, driver.findElement(By.cssSelector(\".assets-container section div.ctrl-wr-asset:first-child a.ast-name\")).getText(), \"Alphabetical Sort failed\");      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"}
{"repo_name": "testESPublisherAssetOverrideRendererTestCase", "name for description": "test ES Publisher Asset Override Renderer Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetOverrideRendererTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/assets/servicex/lifecycle\");  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideRendererTestCase.java"}
{"repo_name": "testESPublisherAddedAssetTestCase", "name for description": "test ES Publisher Added Asset Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new asset type in extensions\")", "url": true, "content": "    public void testESPublisherAddedAssetTestCase() throws Exception {         driver.get(baseUrl + PUBLISHER_URL); //        assertTrue(isElementPresent(driver, By.cssSelector(\"button.btn.dropdown-toggle\"))); //        driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click(); //        driver.findElement(By.linkText(\"Service\")).click();         driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);         driver.findElement(By.id(\"popoverExampleTwo\")).click();         assertEquals(driver.findElement(By.linkText(ASSET_TYPE)).getText(), ASSET_TYPE);         driver.findElement(By.linkText(ASSET_TYPE)).click();          assertTrue(isElementPresent(driver, By.linkText(ASSET_TYPE_PLURAL)));         //assertEquals(driver.findElement(By.linkText(ASSET_TYPE_PLURAL)).getText(), ASSET_TYPE_PLURAL);         assertTrue(isElementPresent(driver, By.xpath(\"//h2[@class='app-title']\")));         //assertEquals(driver.findElement(By.xpath(\"//h2[@class='app-title']\")).getText(), \"Enterprise Store Back Office\"); //        assertTrue(isElementPresent(driver, By.cssSelector(\"span.publisherTitle\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"}
{"repo_name": "testESPublisherAssetNewPageTestCase", "name for description": "test ES Publisher Asset New Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAssetNewPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/assets/servicex/new_page\");     assertTrue(isElementPresent(By.id(\"servicexNewPageH1\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetNewPageTestCase.java"}
{"repo_name": "testESStoreAssetOverrideExistingPageTestCase", "name for description": "test ES Store Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"Overriding list page via extensions test case\")", "url": true, "content": "    public void testESStoreAssetOverrideExistingPageTestCase() throws Exception {          driver.get(baseUrl + \"/store/assets/servicex/list\");         assertTrue(isElementPresent(driver, By.id(\"assetListingPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testESStoreAssetOverrideExistingPageTestCase", "name for description": "test ES Store Asset Override Existing Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreAssetOverrideExistingPageTestCase() throws Exception {     driver.get(baseUrl + \"/store/assets/servicex/list\");     assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));  }", "path": "modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetOverrideExistingPageTestCase.java"}
{"repo_name": "testESStoreAssetNewPageTestCase", "name for description": "test ES Store Asset New Page Test Case", "comments": "Test(groups = \"wso2.es.extensions\", description = \"New page added via extensions test case\")", "url": true, "content": "    public void testESStoreAssetNewPageTestCase() throws Exception {         driver.get(baseUrl + \"/store/assets/servicex/new_page\");         assertTrue(isElementPresent(driver, By.id(\"assetNewPageH1\")));     }", "path": "modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"}
{"repo_name": "testStoreBeforeAddRatings", "name for description": "test Store Before Add Ratings", "comments": "Test(groups = \"wso2.es.store.ratings\", description = \"Test Start Add Rating\")", "url": true, "content": "    public void testStoreBeforeAddRatings() throws Exception {         driver.get(baseUrl + \"/store/assets/gadget/list\");         driver.findElement(By.cssSelector(\"i.icon-cog\")).click();         driver.findElement(By.cssSelector(\"h4\")).click();         driver.findElement(By.linkText(\"User Reviews\")).click();         driver.switchTo().frame(driver.findElement(By.id(\"socialIfr\")));         assertEquals(\"Please Sign in to add a Review\",                 driver.findElement(By.cssSelector(\"div.com-guest\")).getText());         assertEquals(\"Be the first one to review!\",                 driver.findElement(By.cssSelector(\"p.com-first-review\")).getText());         driver.switchTo().defaultContent();     }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"}
{"repo_name": "testESStoreAddedAssetTestCase", "name for description": "test ES Store Added Asset Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreAddedAssetTestCase() throws Exception {     driver.get(baseUrl + \"/store/assets/gadget/list\");     driver.findElement(By.xpath(\"//div[@id='container-search']/div/div/div/div/a[3]/li\")).click();     assertTrue(isElementPresent(By.id(\"assetListingPageH1\")));  }", "path": "modules/integration/selenium/generated/store/extensions/asset/ESStoreAddedAssetTestCase.java"}
{"repo_name": "testAnonAssetListingPage", "name for description": "test Anon Asset Listing Page", "comments": "Test(groups = \"wso2.es.store\", description = \"Test if the asset listing page loads when using /t/domain as anon \" +", "url": true, "content": "    public void testAnonAssetListingPage() throws Exception {         driver.get(baseUrl + STORE_GADGET_LIST_PAGE);         wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(\".ctrl-wr-asset\")));         assertTrue(isElementPresent(driver, By.cssSelector(\".app-logo\")), \"Home Page error: Logo missing\");         assertTrue(isElementPresent(driver, By.cssSelector(\".ctrl-wr-asset\")), \"Home Page error: Gadgets list is not populated\");      }", "path": "modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonTenantHomePageTestCase.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = waitFor(alertToBePresent(driver));      UserAndPassword user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);      assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "canNavigateToAGivenUrl", "name for description": "can Navigate To A Given Url", "comments": "Test", "url": true, "content": "  public void canNavigateToAGivenUrl() throws Exception {     final String url = \"http://www.example.com\";      checking(new Expectations() {{       one(webdriver).get(url);     }});      context.goTo(url);   }", "path": "java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"}
{"repo_name": "canNavigateToAGivenUrl", "name for description": "can Navigate To A Given Url", "comments": "Test", "url": true, "content": "  public void canNavigateToAGivenUrl() throws Exception {      final String url = \"http://www.example.com\";      checking(new Expectations() {{       one(webdriver).get(url);     }});      context.goTo(url);   }", "path": "java/client/test/org/openqa/selenium/lift/TestContextTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({ANDROID, IPHONE, OPERA, OPERA_MOBILE, MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore({IE, HTMLUNIT})", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testESPublisherNewGlobalPageTestCase", "name for description": "test ES Publisher New Global Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherNewGlobalPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/pages/servicex_global\");     assertTrue(isElementPresent(By.id(\"assetNewGlobalPage\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherNewGlobalPageTestCase.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore(IE)", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testESStoreNewGlobalPageTestCase", "name for description": "test ES Store New Global Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESStoreNewGlobalPageTestCase() throws Exception {     driver.get(baseUrl + \"/store/pages/servicex_global\");     assertTrue(isElementPresent(By.id(\"assetNewGlobalPage\")));  }", "path": "modules/integration/selenium/generated/store/extensions/app/ESStoreNewGlobalPageTestCase.java"}
{"repo_name": "testESPublisherOverridenGlobalPageTestCase", "name for description": "test ES Publisher Overriden Global Page Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherOverridenGlobalPageTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/pages/splash\");     assertTrue(isElementPresent(By.id(\"assetOverridenGlobalPage\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherOverridenGlobalPageTestCase.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testESPublisherAddedAssetTestCase", "name for description": "test ES Publisher Added Asset Test Case", "comments": "Test(groups = \"wso2.es\", description = \"\")", "url": true, "content": "  public void testESPublisherAddedAssetTestCase() throws Exception {     driver.get(baseUrl + \"/publisher/\");     assertTrue(isElementPresent(By.cssSelector(\"button.btn.dropdown-toggle\")));     // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]     driver.findElement(By.cssSelector(\"button.btn.dropdown-toggle\")).click();     driver.findElement(By.linkText(\"Service\")).click();     assertTrue(isElementPresent(By.cssSelector(\"span.publisherTitle\")));  }", "path": "modules/integration/selenium/generated/publisher/extensions/ESPublisherAddedAssetTestCase.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test Ignore(value = {IE},", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = wait.until(alertIsPresent());      Credentials user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);  \tWebElement element = wait.until(presenceOfElementLocated(By.tagName(\"h1\")));     assertEquals(\"authorized\", element.getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE}, reason = \"Chrome: failed\") SwitchToTopAfterTest", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testGetInfoFromSecurityContext", "name for description": "test Get Info From Security Context", "comments": "Test", "url": true, "content": "    public void testGetInfoFromSecurityContext() throws Exception {         User user = makeTestUser();         String jsonUser = UserCookieEncoder.toCookieValue( user );          // go to the site and set the user cookie (the security filter would normally do this upon login)         driver.get( baseUrl + \"blank.html\" );         driver.manage().addCookie( new Cookie( UserCookieEncoder.USER_COOKIE_NAME,                                                jsonUser,                                                \"/\",                                                new Date( System.currentTimeMillis() + 1000 * 60 * 24 ) ) );          // now go to the app with the cookie in place         driver.get( baseUrl );         waitForDefaultPerspective();         driver.get( baseUrl + \"#\" + SecurityContextInfoScreen.class.getName() );          WebElement userLabel = driver.findElement( By.id( \"gwt-debug-SecurityStatusScreen-userLabel\" ) );         assertEquals( user.getIdentifier(), userLabel.getText() );          WebElement rolesLabel = driver.findElement( By.id( \"gwt-debug-SecurityStatusScreen-rolesLabel\" ) );         assertEquals( user.getRoles().toString(), rolesLabel.getText() );          WebElement groupsLabel = driver.findElement( By.id( \"gwt-debug-SecurityStatusScreen-groupsLabel\" ) );         assertEquals( user.getGroups().toString(), groupsLabel.getText() );     }", "path": "uberfire-workbench/uberfire-workbench-client-tests/src/test/java/org/uberfire/wbtest/selenium/UserCookieTest.java"}
{"repo_name": "testGetInfoFromInjectedUser", "name for description": "test Get Info From Injected User", "comments": "Test", "url": true, "content": "    public void testGetInfoFromInjectedUser() throws Exception {         User user = makeTestUser();         String jsonUser = UserCookieEncoder.toCookieValue( user );          // go to the site and set the user cookie (the security filter would normally do this upon login)         driver.get( baseUrl + \"blank.html\" );         driver.manage().addCookie( new Cookie( UserCookieEncoder.USER_COOKIE_NAME,                                                jsonUser,                                                \"/\",                                                new Date( System.currentTimeMillis() + 1000 * 60 * 24 ) ) );          // now go to the app with the cookie in place         driver.get( baseUrl );         waitForDefaultPerspective();         driver.get( baseUrl + \"#\" + InjectedUserScreen.class.getName() );          WebElement userLabel = driver.findElement( By.id( \"gwt-debug-SecurityStatusScreen-userLabel\" ) );         assertEquals( user.getIdentifier(), userLabel.getText() );          WebElement rolesLabel = driver.findElement( By.id( \"gwt-debug-SecurityStatusScreen-rolesLabel\" ) );         assertEquals( user.getRoles().toString(), rolesLabel.getText() );          WebElement groupsLabel = driver.findElement( By.id( \"gwt-debug-SecurityStatusScreen-groupsLabel\" ) );         assertEquals( user.getGroups().toString(), groupsLabel.getText() );     }", "path": "uberfire-workbench/uberfire-workbench-client-tests/src/test/java/org/uberfire/wbtest/selenium/UserCookieTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = wait.until(alertIsPresent());      UserAndPassword user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);      assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "canNavigateToAGivenUrl", "name for description": "can Navigate To A Given Url", "comments": "Test", "url": true, "content": "  public void canNavigateToAGivenUrl() throws Exception {     final String url = \"http://www.example.com\";      context.goTo(url);      verify(webdriver).get(url);   }", "path": "java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"}
{"repo_name": "canNavigateToAGivenUrl", "name for description": "can Navigate To A Given Url", "comments": "Test", "url": true, "content": "  public void canNavigateToAGivenUrl() throws Exception {      final String url = \"http://www.example.com\";      context.goTo(url);     verify(webdriver).get(url);   }", "path": "java/client/test/org/openqa/selenium/lift/TestContextTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE, HTMLUNIT},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "handleFormWithJavascriptAction", "name for description": "handle Form With Javascript Action", "comments": "Test Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},", "url": true, "content": "  public void handleFormWithJavascriptAction() {     String url = appServer.whereIs(\"form_handling_js_submit.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"theForm\"));     element.submit();     Alert alert = driver.switchTo().alert();     String text = alert.getText();     alert.accept();      assertEquals(\"Tasty cheese\", text);   }", "path": "java/client/test/org/openqa/selenium/FormHandlingTest.java"}
{"repo_name": "testShouldReturnURLOnNotExistedPage", "name for description": "test Should Return URL On Not Existed Page", "comments": "Test", "url": true, "content": "  public void testShouldReturnURLOnNotExistedPage() {     String url = appServer.whereIs(\"not_existed_page.html\");     driver.get(url);     assertEquals(url, driver.getCurrentUrl());   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability", "name for description": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability", "comments": "Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE}) NotYetImplemented(HTMLUNIT) Test", "url": true, "content": "  public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability() {     // TODO: Resolve why this test doesn't work on the remote server     assumeTrue(isLocal());      DesiredCapabilities requiredCaps = new DesiredCapabilities();     requiredCaps.setCapability(ACCEPT_SSL_CERTS, false);     WebDriverBuilder builder = new WebDriverBuilder().setRequiredCapabilities(requiredCaps);     localDriver = builder.get();      String url = appServer.whereIsSecure(\"simpleTest.html\");     localDriver.get(url);      assertThat(localDriver.getTitle(), not(\"Hello WebDriver\"));   }", "path": "java/client/test/org/openqa/selenium/PageLoadingTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInTheViewport", "name for description": "test Should Be Able To Click On An Element In The Viewport", "comments": " See http://code.google.com/p/selenium/issues/attachmentText?id=2700 Test", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInTheViewport() {     String url = appServer.whereIs(\"click_out_of_bounds.html\");      driver.get(url);     WebElement button = driver.findElement(By.id(\"button\"));      try {       button.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element Greater Than Two Viewports", "comments": "Test Ignore(value = {MARIONETTE})", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {     String url = appServer.whereIs(\"click_too_big.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"click\"));      element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports", "name for description": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports", "comments": "Test Ignore(value = {CHROME, MARIONETTE},", "url": true, "content": "  public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {     assumeFalse(isFirefox(driver) && isNativeEventsEnabled(driver));      String url = appServer.whereIs(\"click_too_big_in_frame.html\");     driver.get(url);      WebElement frame = driver.findElement(By.id(\"iframe1\"));     driver.switchTo().frame(frame);      WebElement element = driver.findElement(By.id(\"click\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnRTLLanguageLink", "name for description": "test Should Be Able To Click On RTL Language Link", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnRTLLanguageLink() {     String url = appServer.whereIs(\"click_rtl.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"ar_link\"));     element.click();      wait.until(titleIs(\"clicks\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter() {     String url = appServer.whereIs(\"fixedFooterNoScroll.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode", "name for description": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode", "comments": "Test", "url": true, "content": "  public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode() {     String url = appServer.whereIs(\"fixedFooterNoScrollQuirksMode.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"link\"));     element.click();      wait.until(titleIs(\"XHTML Test Page\"));   }", "path": "java/client/test/org/openqa/selenium/ClickTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test Ignore({MARIONETTE})", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldBeAbleToReturnTheTextInAPage", "name for description": "test Should Be Able To Return The Text In A Page", "comments": "NeedsFreshDriver Test Ignore(MARIONETTE)", "url": true, "content": "  public void testShouldBeAbleToReturnTheTextInAPage() {     String url = GlobalTestEnvironment.get()         .getAppServer()         .whereIs(\"encoding\");     driver.get(url);      String text = driver.findElement(By.tagName(\"body\")).getText();      assertEquals(shalom, text);   }", "path": "java/client/test/org/openqa/selenium/I18nTest.java"}
{"repo_name": "parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden", "name for description": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden", "comments": "Test", "url": true, "content": "  public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden() {     String url = appServer.whereIs(\"visibility-css.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"suggest\"));     assertTrue(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "tooSmallAWindowWithOverflowHiddenIsNotAProblem", "name for description": "too Small A Window With Overflow Hidden Is Not A Problem", "comments": "Test", "url": true, "content": "  public void tooSmallAWindowWithOverflowHiddenIsNotAProblem() {     // Browser window cannot be resized on ANDROID (and most mobile platforms     // though others aren't defined in org.openqa.selenium.Platform).     assumeFalse(TestUtilities.getEffectivePlatform(driver).is(ANDROID));     WebDriver.Window window = driver.manage().window();     Dimension originalSize = window.getSize();      try {       // Short in the Y dimension       window.setSize(new Dimension(1024, 500));        String url = appServer.whereIs(\"overflow-body.html\");       driver.get(url);        WebElement element = driver.findElement(By.name(\"resultsFrame\"));       assertTrue(element.isDisplayed());     } finally {       window.setSize(originalSize);     }   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "shouldShowElementNotVisibleWithHiddenAttribute", "name for description": "should Show Element Not Visible With Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void shouldShowElementNotVisibleWithHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);     WebElement element = driver.findElement(By.id(\"singleHidden\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute", "name for description": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute", "comments": "Test Ignore(IE) NotYetImplemented(HTMLUNIT)", "url": true, "content": "  public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute() {     String url = appServer.whereIs(\"hidden.html\");     driver.get(url);      WebElement element = driver.findElement(By.id(\"child\"));     assertFalse(element.isDisplayed());   }", "path": "java/client/test/org/openqa/selenium/VisibilityTest.java"}
{"repo_name": "testShouldScrollToClickOnAnElementHiddenByOverflow", "name for description": "test Should Scroll To Click On An Element Hidden By Overflow", "comments": "Test", "url": true, "content": "  public void testShouldScrollToClickOnAnElementHiddenByOverflow() {     String url = appServer.whereIs(\"click_out_of_bounds_overflow.html\");     driver.get(url);      WebElement link = driver.findElement(By.id(\"link\"));     try {       link.click();     } catch (MoveTargetOutOfBoundsException e) {       fail(\"Should not be out of bounds: \" + e.getMessage());     }   }", "path": "java/client/test/org/openqa/selenium/ClickScrollingTest.java"}
{"repo_name": "canBlockInvalidSslCertificates", "name for description": "can Block Invalid Ssl Certificates", "comments": "Test", "url": true, "content": "  public void canBlockInvalidSslCertificates() {     FirefoxProfile profile = new FirefoxProfile();     profile.setAcceptUntrustedCertificates(false);     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure(\"simpleTest.html\");      WebDriver secondDriver = null;     try {       secondDriver = newFirefoxDriver(profile);       secondDriver.get(url);       String gotTitle = secondDriver.getTitle();       assertFalse(\"Hello WebDriver\".equals(gotTitle));     } catch (Exception e) {       e.printStackTrace();       fail(\"Creating driver with untrusted certificates set to false failed.\");     } finally {       if (secondDriver != null) {         secondDriver.quit();       }     }   }", "path": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"}
{"repo_name": "canAuthenticateUsingBasicAuthentication", "name for description": "can Authenticate Using Basic Authentication", "comments": "Test", "url": true, "content": "  public void canAuthenticateUsingBasicAuthentication() {     String url = appServer.whereIs(\"basicAuth\");     driver.get(url);      Alert alert = wait.until(alertIsPresent());      Credentials user = new UserAndPassword(\"test\", \"test\");      alert.authenticateUsing(user);      assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());   }", "path": "java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"}
{"repo_name": "canNavigateToAGivenUrl", "name for description": "can Navigate To A Given Url", "comments": "Test", "url": true, "content": "  public void canNavigateToAGivenUrl() throws Exception {      final String url = \"http://www.example.com\";      context.goTo(url);     verify(webdriver).get(url);   }", "path": "java/client/test/org/openqa/selenium/lift/TestContextTest.java"}
{"repo_name": "canNavigateToAGivenUrl", "name for description": "can Navigate To A Given Url", "comments": "Test", "url": true, "content": "  public void canNavigateToAGivenUrl() throws Exception {     final String url = \"http://www.example.com\";      context.goTo(url);      verify(webdriver).get(url);   }", "path": "java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"}
{"repo_name": "shouldCreateASeparateSessionWithEveryNewDriverInstance", "name for description": "should Create A Separate Session With Every New Driver Instance", "comments": "Test", "url": true, "content": "    public void shouldCreateASeparateSessionWithEveryNewDriverInstance() {         WebDriver d = getDriver();         d.get(url);          // Grab NEW set of session cookies         Set<Cookie> newSessionCookies = d.manage().getCookies();          // No cookie of the new Session can be found in the cookies of the old Session         for (Cookie c : sessionCookies) {             assertFalse(newSessionCookies.contains(c));         }         // No cookie of the old Session can be found in the cookies of the new Session         for (Cookie c : newSessionCookies) {             assertFalse(sessionCookies.contains(c));         }     }", "path": "test/ghostdriver-test/java/src/test/java/ghostdriver/IsolatedSessionTest.java"}
