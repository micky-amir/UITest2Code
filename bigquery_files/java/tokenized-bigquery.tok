<DOCUMENT_ID="user_with_email_logs_onto_the_site_0/tree/master/src/test/java/uk/co/hmtt/cukes/core/steps/Booking.java"> public void function ( String email ) throws Throwable { final User user = new User ( ) ; user . setEmail ( email ) ; user . setPasscode ( PASS_CODE ) ; if ( runtimeScope . getWebDriver ( ) != null ) { runtimeScope . getWebDriver ( ) . quit ( ) ; runtimeScope . setWebDriver ( null ) ; } final WebDriver webDriver = webDriverFactory . newInstance ( runtimeScope . getScenario ( ) ) ; runtimeScope . setWebDriver ( webDriver ) ; webDriver . get ( gymBookerUrl ) ; logonToGym . logon ( user ) ; } </DOCUMENT>
<DOCUMENT_ID="the_user_logs_onto_the_mobile_site_1/tree/master/src/test/java/uk/co/hmtt/cukes/core/steps/Mobile.java"> public void function ( String email ) throws Throwable { final User user = new User ( ) ; user . setEmail ( email ) ; user . setPasscode ( PASS_CODE ) ; if ( runtimeScope . getWebDriver ( ) != null ) { runtimeScope . getWebDriver ( ) . quit ( ) ; runtimeScope . setWebDriver ( null ) ; } final WebDriver webDriver = webDriverFactory . newInstance ( runtimeScope . getScenario ( ) ) ; final Dimension dimension = new Dimension ( 420 , 600 ) ; webDriver . manage ( ) . window ( ) . setSize ( dimension ) ; runtimeScope . setWebDriver ( webDriver ) ; webDriver . get ( gymBookerUrl ) ; logonToGym . logon ( user ) ; } </DOCUMENT>
<DOCUMENT_ID="the_user_cannot_access_site_2/tree/master/src/test/java/uk/co/hmtt/cukes/core/steps/Logon.java"> public void function ( ) throws Throwable { runtimeScope . getWebDriver ( ) . get ( gymBookerUrl ) ; ( ( CukesWebDriver ) runtimeScope . getWebDriver ( ) ) . takeScreenShot ( ) ; assertThat ( runtimeScope . getWebDriver ( ) . getCurrentUrl ( ) , containsString ( "login" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loadLoginPage_3/tree/master/src/test/java/integration/web/AbstractWebITCase.java"> private void function ( ) { webDriver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="iVisitPageUrl_4/tree/master/gepard-examples/src/main/java/com/epam/gepard/examples/gherkin/cucumber/selenium/SimpleSeleniumFeature.java"> public void function ( String url ) { logComment ( "Open ▁ URL: ▁ " + url ) ; webDriverUtil . getWebDriver ( ) . get ( url ) ; webDriverUtil . logEvent ( "Page ▁ loaded" , true ) ; } </DOCUMENT>
<DOCUMENT_ID="saveScreenshotToFile_5/tree/master/src/test/java/cz/vse/kit/ssc/SpringTest.java"> public void function ( ) { driver . get ( baseUrl + "/" ) ; compatibilityTester . takeScreenshotAndSaveToRepo ( "springTest" , driver ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_6/tree/master/acceptanceTest/webfixture/src/main/java/org/testeditor/fixture/web/WebFixture.java"> public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_7/tree/master/acceptanceTest/webfixture/src/main/java/org/testeditor/fixture/web/AbstractWebFixture.java"> public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_8/tree/master/src/main/java/cz/etnetera/seb/Seb.java"> public void function ( String url ) { getDriver ( ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testProductsPage_9/tree/master/fontus-web/src/test/java/com/github/iexel/fontus/web/test/SeleniumIT.java"> public void function ( ) throws Exception { int demoWaitTime = 2000 ; driver . get ( baseUrl + "/about" ) ; driver . findElement ( By . linkText ( "Products ▁ & ▁ Invoices" ) ) . click ( ) ; driver . findElement ( By . id ( "j_username" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "j_password" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_password" ) ) . sendKeys ( "admin" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( "input.button" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . xpath ( " // tr[@id='4']/td[2]" ) ) . click ( ) ; driver . findElement ( By . id ( "editBtn" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "price" ) ) . clear ( ) ; driver . findElement ( By . id ( "price" ) ) . sendKeys ( "45.50 ▁ a" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "sData" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; assertPresent ( "#tr_name ▁ .field-error-message" ) ; assertPresent ( "#tr_price ▁ .field-error-message" ) ; driver . findElement ( By . id ( "cData" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "editBtn" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "price" ) ) . clear ( ) ; driver . findElement ( By . id ( "price" ) ) . sendKeys ( "45.51" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "sData" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( "span.ui-icon.ui-icon-seek-next" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( "span.ui-icon.ui-icon-seek-prev" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; assertEquals ( "$ ▁ 45.51" , driver . findElement ( By . xpath ( " // tr[@id='4']/td[3]" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( " // tr[@id='4']/td[2]" ) ) . click ( ) ; driver . findElement ( By . id ( "editBtn" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "price" ) ) . clear ( ) ; driver . findElement ( By . id ( "price" ) ) . sendKeys ( "45.50" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( "sData" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( "span.ui-icon.ui-icon-seek-next" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( "span.ui-icon.ui-icon-seek-prev" ) ) . click ( ) ; assertEquals ( "$ ▁ 45.50" , driver . findElement ( By . xpath ( " // tr[@id='4']/td[3]" ) ) . getText ( ) ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . linkText ( "Logout: ▁ admin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testMoexRubusd_10/tree/master/src/main/resources/MoexRubusd.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),'Валюта')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // tr[3]/td/a/span" ) ) . click ( ) ; String sTitle = driver . findElement ( By . xpath ( " // tr[3]/td/a/span" ) ) . getText ( ) ; String sValue = driver . findElement ( By . xpath ( " // tr[3]/td[4]/span" ) ) . getText ( ) ; System . out . println ( sTitle + ": ▁ " + sValue ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestURL_11/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="navigate_to_url_12/tree/master/SenBotRunner/src/main/java/com/gfk/senbot/framework/services/selenium/NavigationService.java"> public void function ( String url ) throws IOException { if ( url . startsWith ( SenBotContext . RESOURCE_LOCATION_PREFIX ) ) { String urlLoc = getSenBotContext ( ) . getRuntimeResources ( ) + url . replace ( SenBotContext . RESOURCE_LOCATION_PREFIX , "" ) ; if ( urlLoc . startsWith ( "/" ) ) { urlLoc = urlLoc . replaceFirst ( "/" , "" ) ; } url = "file: // /" + urlLoc ; } getWebDriver ( ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testNavigate_to_url_onUnixPath_13/tree/master/SenBotRunner/src/test/java/com/gfk/senbot/framework/services/selenium/NavigationServiceMockedEnvTest.java"> public void function ( ) throws Exception { SenBotContext . cleanupSenBot ( ) ; System . setProperty ( "senbotContext.alternateRuntimeResources" , "/some/path" ) ; final WebDriver mockDriver = Mockito . mock ( WebDriver . class ) ; String pageUnderTest = "/test_pages/exampleButton.html" ; String expectedUrl = "file: // /some/path" + pageUnderTest ; NavigationService serviceUnderTest = new NavigationService ( seleniumElementService ) { @ Override public WebDriver getWebDriver ( ) { return mockDriver ; } } ; serviceUnderTest . navigate_to_url ( SenBotContext . RESOURCE_LOCATION_PREFIX + pageUnderTest ) ; Mockito . verify ( mockDriver , Mockito . times ( 1 ) ) . get ( expectedUrl ) ; SenBotContext . cleanupSenBot ( ) ; } </DOCUMENT>
<DOCUMENT_ID="I_navigate_to_14/tree/master/src/test/java/info/bowkett/joxy/stepdefs/ServerStartupStepDefs.java"> public void function ( String url ) throws Throwable { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="sOpenWindow_15/tree/master/ZimbraSelenium/src/java/com/zimbra/qa/selenium/framework/ui/AbsSeleniumObject.java"> public void function ( String url , String windowID ) throws HarnessException { if ( ZimbraSeleniumProperties . isWebDriver ( ) ) { logger . info ( "...WebDriver...navigate().to()" ) ; webDriver ( ) . navigate ( ) . to ( url ) ; } else { ClientSessionFactory . session ( ) . selenium ( ) . openWindow ( url , windowID ) ; } logger . info ( "openWindow(" + url + ", ▁ " + windowID + ")" ) ; } </DOCUMENT>
<DOCUMENT_ID="testWSO2FormatTestCase_16/tree/master/src/main/resources/WSO2FormatTestCaseTweakP1.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/design" ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( "apimng.login.username.id" ) ) ) . clear ( ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( "apimng.login.username.id" ) ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( "apimng.login.pass.id" ) ) ) . clear ( ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( "apimng.login.pass.id" ) ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( "apimng.login.loginbutton.id" ) ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( "timeout" ) ; } try { if ( isElementPresent ( By . linkText ( UIElementMapper . getElement ( "apimng.main.allstatistics.linktext" ) ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.allstatistics.linktext" ) ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( "timeout" ) ; } try { if ( isElementPresent ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apiresponsetimes.linktext" ) ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apiresponsetimes.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apiusagebyresourcepath.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apiusagebyuser.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.browse.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.subscriptions.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.statistics.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apisubscriptions.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apiusage.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apiresponsetimes.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.apilastaccesstimes.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.browse.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.browse.linktext" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( "apimng.main.add.linktext" ) ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testWSO2FormatTestCase_17/tree/master/src/main/resources/aaWSO2FormatTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/design" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "pass" ) ) . clear ( ) ; driver . findElement ( By . id ( "pass" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "loginButton" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( "timeout" ) ; } try { if ( isElementPresent ( By . linkText ( "All ▁ Statistics" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "All ▁ Statistics" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( "timeout" ) ; } try { if ( isElementPresent ( By . linkText ( "API ▁ Response ▁ Times" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "API ▁ Response ▁ Times" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Usage ▁ by ▁ Resource ▁ Path" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Usage ▁ by ▁ User" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Browse" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Subscriptions" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Statistics" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Subscriptions" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Usage" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Response ▁ Times" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Last ▁ Access ▁ Times" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Browse" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Browse" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="gotoTestCourse_18/tree/master/opaque-api/src/test/java/com/googlecode/ounit/test/moodle21/HomePage.java"> public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="gotoTestCourse_19/tree/master/opaque-api/src/test/java/com/googlecode/ounit/test/moodle19/HomePage.java"> public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="populateFromJournal_20/tree/master/backend/ACM-DL-Crawler-master/src/main/java/fi/helsinki/acmcrawler/domain/support/DefaultSeedFactory.java"> private void function ( String url , int timeoutSeconds ) { WebDriver driver = new HtmlUnitDriver ( true ) ; driver . get ( url ) ; WebDriverWait wait = new WebDriverWait ( driver , timeoutSeconds ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( XPATH_AUTHOR_LINK_A ) ) ) ; List < WebElement > aList = driver . findElements ( By . xpath ( XPATH_AUTHOR_LINK_A ) ) ; for ( WebElement e : aList ) { System . out . println ( " ▁ ▁ " + e . getText ( ) ) ; String raw = e . getAttribute ( "href" ) ; int i1 = raw . indexOf ( "id=" ) ; if ( i1 < 0 ) { continue ; } int i2 = raw . indexOf ( "&" ) ; if ( i2 < 0 || i2 < i1 ) { continue ; } String id = raw . substring ( i1 + "id=" . length ( ) , i2 ) . trim ( ) ; AuthorNode authorNode = new AuthorNode ( id ) ; authorNode . setName ( e . getText ( ) . trim ( ) ) ; authorNode . setDb ( db ) ; if ( db != null ) { db . addAuthor ( authorNode . getId ( ) , authorNode . getName ( ) ) ; processAuthor ( id , timeoutSeconds ) ; } this . list . add ( authorNode ) ; -- max ; if ( max <= 0 ) { return ; } } } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_21/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertEquals ( "Keycloak ▁ Account ▁ Management" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="navigate_to_web_page_headless_22/tree/master/src/test/java/com/jawbone/lib/Env_html.java"> public void function ( String url , String Suburl ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( "================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ " + given_url ) ; driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( "================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ " + getter_url ) ; Print_out ( "" ) ; print_page_title_h ( ) ; } </DOCUMENT>
<DOCUMENT_ID="Open_web_page_23/tree/master/src/test/java/com/jawbone/lib/Env.java"> public boolean function ( String url ) { driver . get ( url ) ; driver . manage ( ) . window ( ) . maximize ( ) ; get_wait ( 60 ) ; Print_out ( "Success ▁ ..." ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="Navigate_to_web_page_24/tree/master/src/test/java/com/jawbone/lib/Env.java"> public void function ( String url , String Suburl , String Jenkins_job , String sale ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( "================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ " + given_url ) ; if ( sale . equalsIgnoreCase ( "on" ) ) { Print_out ( "-MESSAGE: ▁ PROMO ▁ SALE ▁ KEYWORD ▁ IS ▁ SET ▁ TO ▁ ON" ) ; Print_out ( "-IsPromoSale_On ▁ method ▁ running ▁ / ▁ verification ▁ of ▁ promo ▁ banner ▁ is ▁ starting.../" ) ; Print_out ( "" ) ; isPromoSale_On ( Jenkins_job ) ; } else { Print_out ( "-MESSAGE: ▁ PROMO ▁ SALE ▁ KEYWORD ▁ IS ▁ SET ▁ TO ▁ OFF" ) ; Print_out ( "" ) ; } driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( "================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ " + getter_url ) ; Print_out ( "Success ▁ ..." ) ; } </DOCUMENT>
<DOCUMENT_ID="Navigate_to_intern_web_page_25/tree/master/src/test/java/com/jawbone/lib/Env.java"> public void function ( String url , String Suburl ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( "================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ " + given_url ) ; driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( "================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ " + getter_url ) ; Print_out ( "Success ▁ ..." ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpFailedOnInvalidPassword_26/tree/master/src/test/java/com/iBase/web/SignUpFailedPasswordTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/signup" ) ; driver . findElement ( By . id ( "firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "firstName" ) ) . sendKeys ( "Jake" ) ; driver . findElement ( By . id ( "lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "lastName" ) ) . sendKeys ( "Krammer" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "jake123@asu.edu" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "pass1" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "password ▁ must ▁ be ▁ atleast ▁ 6 ▁ characters!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGoToSignUp_27/tree/master/src/test/java/com/iBase/web/SignUpTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . cssSelector ( "a ▁ > ▁ font" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Registration" , driver . findElement ( By . cssSelector ( "h2" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpFailedOnInvalidEmail_28/tree/master/src/test/java/com/iBase/web/SignUpFailedEmailTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/signup" ) ; driver . findElement ( By . id ( "firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "firstName" ) ) . sendKeys ( "Jake" ) ; driver . findElement ( By . id ( "lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "lastName" ) ) . sendKeys ( "Krammer" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "jake123" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "invalid ▁ email ▁ address!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testUploadPassed_29/tree/master/src/test/java/com/iBase/web/UploadPassedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; driver . get ( baseUrl + "/iBase/upload" ) ; driver . findElement ( By . name ( "imageFile" ) ) . sendKeys ( "/Users/KartheekGanesh/Sources/iBaseTestImages/sparky.jpg" ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "ASU ▁ Logo" ) ; assertEquals ( "Home" , driver . findElement ( By . linkText ( "Home" ) ) . getText ( ) ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; assertEquals ( "Upload" , driver . findElement ( By . linkText ( "Upload" ) ) . getText ( ) ) ; assertEquals ( "Settings" , driver . findElement ( By . xpath ( " // li[3]" ) ) . getText ( ) ) ; assertEquals ( "Logout" , driver . findElement ( By . linkText ( "Logout" ) ) . getText ( ) ) ; assertEquals ( "Share ▁ your ▁ photo ▁ with ▁ the ▁ world!" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( "" , driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . getText ( ) ) ; assertEquals ( "Title:" , driver . findElement ( By . id ( "imageFile" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testUploadFailedOnWrongImageType_30/tree/master/src/test/java/com/iBase/web/UploadFailedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; driver . get ( baseUrl + "/iBase/upload" ) ; driver . findElement ( By . name ( "imageFile" ) ) . sendKeys ( "/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif" ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "gif ▁ image" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Sorry! ▁ Invalid ▁ File!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; assertEquals ( "Upload" , driver . findElement ( By . linkText ( "Upload" ) ) . getText ( ) ) ; assertEquals ( "Settings" , driver . findElement ( By . linkText ( "Settings" ) ) . getText ( ) ) ; assertEquals ( "Logout" , driver . findElement ( By . linkText ( "Logout" ) ) . getText ( ) ) ; assertEquals ( "Share ▁ your ▁ photo ▁ with ▁ the ▁ world!" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( "" , driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . getText ( ) ) ; assertEquals ( "Title:" , driver . findElement ( By . id ( "imageFile" ) ) . getText ( ) ) ; assertEquals ( "Home" , driver . findElement ( By . linkText ( "Home" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSettingsPassed_31/tree/master/src/test/java/com/iBase/web/SettingsPassedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; driver . get ( baseUrl + "/iBase/settings" ) ; driver . findElement ( By . name ( "profileImageFile" ) ) . sendKeys ( "/Users/KartheekGanesh/Sources/iBaseTestImages/sparky.jpg" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Settings" , driver . findElement ( By . linkText ( "Settings" ) ) . getText ( ) ) ; assertEquals ( "Upload" , driver . findElement ( By . linkText ( "Upload" ) ) . getText ( ) ) ; assertEquals ( "Home" , driver . findElement ( By . linkText ( "Home" ) ) . getText ( ) ) ; assertEquals ( "Logout" , driver . findElement ( By . linkText ( "Logout" ) ) . getText ( ) ) ; assertEquals ( "Update ▁ your ▁ profile ▁ picture!" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( "Profile ▁ picture ▁ successfully ▁ updated!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginFailedOnInvalidUsernameAndPassword_32/tree/master/src/test/java/com/iBase/web/LoginFailedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake1234@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "Invalid ▁ username ▁ and ▁ password!" , driver . findElement ( By . cssSelector ( "div.error" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSettingsFailedOnWrongImageType_33/tree/master/src/test/java/com/iBase/web/SettingsFailedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; driver . get ( baseUrl + "/iBase/settings" ) ; driver . findElement ( By . name ( "profileImageFile" ) ) . sendKeys ( "/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Home" , driver . findElement ( By . linkText ( "Home" ) ) . getText ( ) ) ; assertEquals ( "Upload" , driver . findElement ( By . linkText ( "Upload" ) ) . getText ( ) ) ; assertEquals ( "Settings" , driver . findElement ( By . linkText ( "Settings" ) ) . getText ( ) ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; assertEquals ( "Logout" , driver . findElement ( By . linkText ( "Logout" ) ) . getText ( ) ) ; assertEquals ( "Update ▁ your ▁ profile ▁ picture!" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( "" , driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . getText ( ) ) ; assertEquals ( "Sorry! ▁ Invalid ▁ File!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginPassed_34/tree/master/src/test/java/com/iBase/web/LoginPassedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpFailedOnUsernameTaken_35/tree/master/src/test/java/com/iBase/web/SignUpFailedUsernameTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/iBase/signup" ) ; driver . findElement ( By . id ( "firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "firstName" ) ) . sendKeys ( "Jake" ) ; driver . findElement ( By . id ( "lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "lastName" ) ) . sendKeys ( "Krammer" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Username ▁ Taken!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="test20ExistingFriends_36/tree/master/tests/src/com/kynetx/forever/tests/TestForever.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "#table-friends" ) ) ) ; friends = driver . findElements ( By . cssSelector ( "#table-friends>tr" ) ) . size ( ) ; WebElement firstFriend = driver . findElement ( By . cssSelector ( "#table-friends>tr:nth-of-type(1)>td" ) ) ; assertEquals ( "Steve ▁ Fulling" , firstFriend . getText ( ) ) ; firstFriend . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "friend-name" ) ) ) ; assertEquals ( "Steve ▁ Fulling" , driver . findElement ( By . cssSelector ( "#view-friend ▁ #friend-name" ) ) . getText ( ) ) ; assertEquals ( "swf@kynetx.com" , driver . findElement ( By . cssSelector ( "#view-friend ▁ #friend-email" ) ) . getText ( ) ) ; assertEquals ( "8016023200" , driver . findElement ( By . cssSelector ( "#view-friend ▁ #friend-phone" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="test40NewAccount_37/tree/master/tests/src/com/kynetx/forever/tests/TestForever.java"> public void function ( ) throws Exception { driver . get ( squareTagUrl ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "navAvatar" ) ) ) ; driver . findElement ( By . id ( "navAvatar" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "#navRight ▁ ul.dropdown-menu" ) ) ) ; driver . findElement ( By . linkText ( "Logout" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "formLogin" ) ) ) ; driver . get ( baseUrl ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "view-friends" ) ) ) ; driver . findElement ( By . cssSelector ( "div.navbar-inner ▁ .container-fluid ▁ button.btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Logout" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( "Click ▁ here ▁ to ▁ Link ▁ Squaretag" ) ) ) ; driver . findElement ( By . linkText ( "Click ▁ here ▁ to ▁ Link ▁ Squaretag" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( "I'm ▁ a ▁ new ▁ SquareTag ▁ User" ) ) ) ; driver . findElement ( By . linkText ( "I'm ▁ a ▁ new ▁ SquareTag ▁ User" ) ) . click ( ) ; long time = System . currentTimeMillis ( ) ; String email = "cloudos_test" + time + "@kynetx.com" ; String password = "fizzbazz" ; driver . findElement ( By . id ( "signupEmail" ) ) . sendKeys ( email ) ; driver . findElement ( By . id ( "signupPassword" ) ) . sendKeys ( password ) ; driver . findElement ( By . id ( "confirmPassword" ) ) . sendKeys ( password ) ; driver . findElement ( By . id ( "signupSubmit" ) ) . click ( ) ; By authorizeLink = By . cssSelector ( "#cloudAppPanel-b177052x7-content ▁ a.btn-primary" ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( authorizeLink ) ) ; driver . findElement ( authorizeLink ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "view-home-auth" ) ) ) ; assertEquals ( "Forever ▁ is ▁ linked ▁ to ▁ your ▁ personal ▁ cloud" , driver . findElement ( By . cssSelector ( "#view-home-auth ▁ h3" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="visitTestCases_38/tree/master/src/main/java/org/owasp/benchmark/tools/BenchmarkRunner.java"> public static void function ( AtomicInteger nextTest , int tests ) { FirefoxDriver driver = new FirefoxDriver ( ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; while ( nextTest . get ( ) <= tests ) { int test = nextTest . getAndIncrement ( ) ; try { String url = allTestCases . get ( test ) ; driver . get ( url ) ; for ( WebElement we : driver . findElements ( By . tagName ( "form" ) ) ) { we . submit ( ) ; } driver . get ( url ) ; Thread . sleep ( 500 ) ; String jQuerySelector = "#login-btn" ; js . executeScript ( "$(\"" + jQuerySelector + "\").click();" ) ; Thread . sleep ( 500 ) ; } catch ( Exception e ) { } } driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_39/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_40/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_41/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_42/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_43/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_44/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_45/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_46/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_47/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_48/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAddCategory_49/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/getcoverage/CategoryDeleteTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Categories" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "flowers" ) ; driver . findElement ( By . name ( "desc" ) ) . clear ( ) ; driver . findElement ( By . name ( "desc" ) ) . sendKeys ( "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) ; driver . findElement ( By . id ( "listRadioNo" ) ) . click ( ) ; driver . findElement ( By . id ( "listRadioYe" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "^[\\s\\S]*Category ▁ \"flowers\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'Delete ▁ / ▁ Clear')])[2]" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "^[\\s\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\(direct\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\s\\S]*$" ) ) ; driver . findElement ( By . xpath ( "( // input[@name='howto'])[4]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\s\\S]*$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPromoteToInReview_50/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToInReview.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , "supertenantuser ▁ changed ▁ the ▁ asset ▁ from ▁ Created ▁ to ▁ In-Review" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddStoryAssert_51/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/getcoverage/add_story.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Stories" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "Photos" ) ; driver . findElement ( By . name ( "desc" ) ) . clear ( ) ; driver . findElement ( By . name ( "desc" ) ) . sendKeys ( "Greenery ▁ !!" ) ; assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "^[\\s\\S]*Get ▁ Comments[\\s\\S]*$" ) ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a[title=\"Log ▁ Out\"]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateDescription_52/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/UpdateDescription.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; driver . findElement ( By . id ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . id ( "overview_description" ) ) . sendKeys ( "this ▁ is ▁ my ▁ user ▁ added ▁ asset ▁ 1 ▁ + ▁ added ▁ description" ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateSuperTenantUser_53/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/CreateSuperTenantUser.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/" ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; try { assertEquals ( "supertenantuser" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAddCategory_54/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/instrumentedtests/CategoryDeleteTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Admin ▁ Page" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "sendKeys" , "editor" ) . sendKeys ( "editor" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Manage ▁ Categories" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "name" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "name" ) ) ) , "sendKeys" , "flowers" ) . sendKeys ( "flowers" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( "desc" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( "desc" ) ) ) , "sendKeys" , "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) . sendKeys ( "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "listRadioNo" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "listRadioYe" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "BODY" ) ) ) . getText ( ) . matches ( "^[\\s\\S]*Category ▁ \"flowers\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( "assertTrue(driver.findElement(By.cssSelector(\"BODY\")).getText().matches(\"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\"))" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . xpath ( "( // a[contains(text(),'Delete ▁ / ▁ Clear')])[2]" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "BODY" ) ) ) . getText ( ) . matches ( "^[\\s\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\(direct\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\s\\S]*$" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( "assertTrue(driver.findElement(By.cssSelector(\"BODY\")).getText().matches(\"^[\\\\s\\\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\\\(direct\\\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\\\s\\\\S]*$\"))" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . xpath ( "( // input[@name='howto'])[4]" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\s\\S]*$" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( "assertTrue(closeAlertAndGetItsText().matches(\"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\\\s\\\\S]*$\"))" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginLogOut_55/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/instrumentedtests/login_logout.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Admin ▁ Page" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "sendKeys" , "editor" ) . sendKeys ( "editor" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Manage ▁ Categories" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "<< ▁ Admin ▁ Page" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Log ▁ Out" ) ) ) , "click" , "" ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testPromoteToPublishedTenant_56/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToPublishedTenant.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; assertEquals ( val . getText ( ) , "tenantAdmin ▁ changed ▁ the ▁ asset ▁ from ▁ In-Review ▁ to ▁ Published" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddReview_57/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestAddReview.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . xpath ( "(( // div[@class='span3 ▁ asset'])[last()]) // a" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . id ( "com-body" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . id ( "com-body" ) ) . clear ( ) ; driver . findElement ( By . id ( "com-body" ) ) . sendKeys ( "my ▁ test ▁ rating ▁ with ▁ 3 ▁ stars" ) ; driver . findElement ( By . linkText ( "3" ) ) . click ( ) ; driver . findElement ( By . id ( "btn-post" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( ".com-review" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . refresh ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSortByPopDefaults_58/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestSortByPopDefaults.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . cssSelector ( "i.icon-star" ) ) . click ( ) ; assertEquals ( 12 , driver . findElements ( By . cssSelector ( ".asset-icon" ) ) . size ( ) ) ; JavascriptExecutor jsx = ( JavascriptExecutor ) driver ; jsx . executeScript ( "window.scrollBy(0,5000)" , "" ) ; assertEquals ( 16 , driver . findElements ( By . cssSelector ( ".asset-icon" ) ) . size ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPromoteToPublished_59/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToPublished.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , "admin ▁ changed ▁ the ▁ asset ▁ from ▁ In-Review ▁ to ▁ Published" ) ; } </DOCUMENT>
<DOCUMENT_ID="testGadgetsAvailable_60/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestGadgetsAvailable.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; try { assertEquals ( 12 , driver . findElements ( By . cssSelector ( ".asset-icon" ) ) . size ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } JavascriptExecutor jsx = ( JavascriptExecutor ) driver ; jsx . executeScript ( "window.scrollBy(0,5000)" , "" ) ; try { assertEquals ( 16 , driver . findElements ( By . cssSelector ( ".asset-icon" ) ) . size ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAddStoryAssert_61/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/add_story.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Stories" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "Photos" ) ; driver . findElement ( By . name ( "desc" ) ) . clear ( ) ; driver . findElement ( By . name ( "desc" ) ) . sendKeys ( "Greenery ▁ !!" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "div.method" ) ) . getText ( ) . matches ( "^[\\s\\S]*Story ▁ \"Photos\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; driver . findElement ( By . cssSelector ( "a[title=\"Log ▁ Out\"]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginAsSuperTenantUser_62/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsSuperTenantUser.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "supertenantuser" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testPromoteToInReviewTenant_63/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToInReviewTenant.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , "tenantUser ▁ changed ▁ the ▁ asset ▁ from ▁ Created ▁ to ▁ In-Review" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShowMyItems_64/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/ShowMyItems.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; Utils . waitSomeTime ( ) ; driver . findElement ( By . linkText ( "My ▁ Items" ) ) . click ( ) ; Utils . waitSomeTime ( ) ; assertEquals ( "by ▁ admin" , driver . findElement ( By . cssSelector ( "div.store-my-item ▁ .bookmark-assert-provider" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCandidateSearch_65/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/qwerty/originaltests/CandidateSearch.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "kandidaadid" ) ; WebElement candidatesDiv = driver . findElement ( By . id ( "candidates" ) ) ; driver . findElement ( By . id ( "nimi" ) ) . clear ( ) ; driver . findElement ( By . id ( "nimi" ) ) . sendKeys ( "li" ) ; assertThat ( driver . getCurrentUrl ( ) , containsString ( "/kandidaadid/kogu_riik/erakonnata/li" ) ) ; assertThat ( candidatesDiv . getText ( ) , containsString ( "Linnar ▁ Lind" ) ) ; assertThat ( candidatesDiv . getText ( ) , containsString ( "Liine ▁ Näri" ) ) ; new Select ( driver . findElement ( By . id ( "erakond" ) ) ) . selectByVisibleText ( "ABC" ) ; new Select ( driver . findElement ( By . id ( "ringkond" ) ) ) . selectByVisibleText ( "Haabersti, ▁ Kristiine, ▁ Põhja-Tallinn" ) ; assertThat ( driver . getCurrentUrl ( ) , containsString ( "/kandidaadid/HAAB/ABC/li" ) ) ; assertThat ( candidatesDiv . getText ( ) , containsString ( "Linnar ▁ Lind" ) ) ; driver . get ( baseUrl + "kandidaadid/V%C3%95RU/%C3%9CPE/j%C3%B5" ) ; candidatesDiv = driver . findElement ( By . id ( "candidates" ) ) ; assertThat ( candidatesDiv . getText ( ) , not ( containsString ( "Linnar ▁ Lind" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginLogOut_66/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/getcoverage/login_logout.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Categories" ) ) . click ( ) ; driver . findElement ( By . linkText ( "<< ▁ Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ Out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testReLogin_67/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/ReLogin.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddStoryAssert_68/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/instrumentedtests/add_story.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Admin ▁ Page" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "sendKeys" , "editor" ) . sendKeys ( "editor" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Manage ▁ Stories" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "name" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "name" ) ) ) , "sendKeys" , "Photos" ) . sendKeys ( "Photos" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( "desc" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( "desc" ) ) ) , "sendKeys" , "Greenery ▁ !!" ) . sendKeys ( "Greenery ▁ !!" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "div.method" ) ) ) . getText ( ) . matches ( "^[\\s\\S]*Story ▁ \"Photos\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( "assertTrue(driver.findElement(By.cssSelector(\"div.method\")).getText().matches(\"^[\\\\s\\\\S]*Story ▁ \\\"Photos\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\"))" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "a[title=\"Log ▁ Out\"]" ) ) ) , "click" , "" ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSortByPopAfterReview_69/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestSortByPopAfterReview.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . xpath ( "(( // div[@class='span3 ▁ asset'])[8]) // a" ) ) . click ( ) ; String populerAsset = driver . getCurrentUrl ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . findElement ( By . id ( "com-body" ) ) . clear ( ) ; driver . findElement ( By . id ( "com-body" ) ) . sendKeys ( "my ▁ test ▁ rating ▁ with ▁ 5 ▁ stars" ) ; driver . findElement ( By . linkText ( "5" ) ) . click ( ) ; driver . findElement ( By . id ( "btn-post" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( ".com-review" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . cssSelector ( "i.icon-star" ) ) . click ( ) ; driver . findElement ( By . xpath ( "(( // div[@class='span3 ▁ asset'])[1]) // a" ) ) . click ( ) ; assertEquals ( populerAsset , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_70/tree/master/core/src/main/java/com/crawljax/browser/WebDriverBackedEmbeddedBrowser.java"> public void function ( URL url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . debug ( "goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded" , e ) ; Thread . currentThread ( ) . interrupt ( ) ; return ; } } </DOCUMENT>
<DOCUMENT_ID="testAddCategory_71/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/CategoryDeleteTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Categories" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "flowers" ) ; driver . findElement ( By . name ( "desc" ) ) . clear ( ) ; driver . findElement ( By . name ( "desc" ) ) . sendKeys ( "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) ; driver . findElement ( By . id ( "listRadioNo" ) ) . click ( ) ; driver . findElement ( By . id ( "listRadioYe" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "^[\\s\\S]*Category ▁ \"flowers\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'Delete ▁ / ▁ Clear')])[2]" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "^[\\s\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\(direct\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\s\\S]*$" ) ) ; driver . findElement ( By . xpath ( "( // input[@name='howto'])[4]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\s\\S]*$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddCategory_72/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/CategoryAddTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Categories" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "flowers" ) ; driver . findElement ( By . name ( "desc" ) ) . clear ( ) ; driver . findElement ( By . name ( "desc" ) ) . sendKeys ( "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) ; driver . findElement ( By . id ( "listRadioNo" ) ) . click ( ) ; driver . findElement ( By . id ( "listRadioYe" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "div.method" ) ) . getText ( ) . matches ( "^[\\s\\S]*Category ▁ \"flowers\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; driver . findElement ( By . cssSelector ( "a[title=\"Log ▁ Out\"]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testBookmarkAsset_73/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/BookmarkAsset.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . cssSelector ( "#assets-container ▁ a" ) ) . click ( ) ; driver . findElement ( By . id ( "btn-add-gadget" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Bookmarked" . equals ( driver . findElement ( By . id ( "btn-add-gadget" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testIfAssetAddedToPublisher_74/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestIfAssetAddedToPublisher.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; assertTrue ( isElementPresent ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddNewAsset_75/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/AddNewAsset.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . linkText ( "Add ▁ gadget" ) ) . click ( ) ; driver . findElement ( By . id ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . id ( "overview_name" ) ) . sendKeys ( "userAddedAsset" ) ; driver . findElement ( By . id ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . id ( "overview_version" ) ) . sendKeys ( "1.2.3" ) ; driver . findElement ( By . xpath ( " // ul[@role='menu']/li[3]/a/span" ) ) . click ( ) ; driver . findElement ( By . id ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . id ( "overview_url" ) ) . sendKeys ( "http: // example.com/gadget.xml" ) ; driver . findElement ( By . id ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . id ( "overview_description" ) ) . sendKeys ( "this ▁ is ▁ my ▁ user ▁ added ▁ asset ▁ 1" ) ; driver . findElement ( By . id ( "images_thumbnail" ) ) . clear ( ) ; driver . findElement ( By . id ( "images_thumbnail" ) ) . sendKeys ( "~/Pictures/thumbnail.jpg" ) ; driver . findElement ( By . id ( "images_banner" ) ) . clear ( ) ; driver . findElement ( By . id ( "images_banner" ) ) . sendKeys ( "~/Pictures/banner.jpg" ) ; driver . findElement ( By . id ( "token-input-tag-container" ) ) . sendKeys ( "wso2," ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( ! driver . findElement ( By . cssSelector ( ".asset-being-added" ) ) . isDisplayed ( ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testIfAssetAddedToStoreTenant_76/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestIfAssetAddedToStoreTenant.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; try { assertEquals ( "by ▁ tenantUser" , driver . findElement ( By . xpath ( " // div[@id='container-assets'] // small[2]" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginAsAdmin_77/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsAdmin.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "admin" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginAsTenantAdmin_78/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsTenantAdmin.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "tenantAdmin@mytestdomain.com" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "admin1234" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "tenantAdmin" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAddCategory_79/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/getcoverage/CategoryAddTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Categories" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "flowers" ) ; driver . findElement ( By . name ( "desc" ) ) . clear ( ) ; driver . findElement ( By . name ( "desc" ) ) . sendKeys ( "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) ; driver . findElement ( By . id ( "listRadioNo" ) ) . click ( ) ; driver . findElement ( By . id ( "listRadioYe" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "^[\\s\\S]*Category ▁ \"flowers\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddCategory_80/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/instrumentedtests/CategoryAddTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Admin ▁ Page" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "loginAdminPass" ) ) ) , "sendKeys" , "editor" ) . sendKeys ( "editor" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( "Manage ▁ Categories" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "name" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "name" ) ) ) , "sendKeys" , "flowers" ) . sendKeys ( "flowers" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( "desc" ) ) ) , "clear" , "" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( "desc" ) ) ) , "sendKeys" , "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) . sendKeys ( "contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "listRadioNo" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( "listRadioYe" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "input.submit" ) ) ) , "click" , "" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "div.method" ) ) ) . getText ( ) . matches ( "^[\\s\\S]*Category ▁ \"flowers\" ▁ added ▁ succesfully![\\s\\S]*$" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( "assertTrue(driver.findElement(By.cssSelector(\"div.method\")).getText().matches(\"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\"))" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( "a[title=\"Log ▁ Out\"]" ) ) ) , "click" , "" ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginAsTenantUser_81/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsTenantUser.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "tenantUser@mytestdomain.com" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "tenantUser" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "tenantUser" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginLogOut_82/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/photogallery/originaltests/login_logout.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/phormer331/" ) ; driver . findElement ( By . linkText ( "Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . clear ( ) ; driver . findElement ( By . id ( "loginAdminPass" ) ) . sendKeys ( "editor" ) ; driver . findElement ( By . cssSelector ( "input.submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Categories" ) ) . click ( ) ; driver . findElement ( By . linkText ( "<< ▁ Admin ▁ Page" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ Out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="beforeTestCaseMethod_83/tree/master/src/test/java/com/homerenting/test/modules/navigation/NavigationTest.java"> public void function ( ) throws InterruptedException { webDriver . get ( url ) ; Thread . sleep ( 5000 ) ; } </DOCUMENT>
<DOCUMENT_ID="afterTestCaseMethod_84/tree/master/src/test/java/com/homerenting/test/modules/navigation/NavigationTest.java"> public void function ( ) throws InterruptedException { webDriver . get ( url ) ; Thread . sleep ( 2000 ) ; } </DOCUMENT>
<DOCUMENT_ID="getDynamicContentFromUrl_85/tree/master/src/main/java/org/bg/winddata/DynamicContentScraper.java"> public String function ( String url ) { logger . info ( "Loading ▁ Selenium: ▁ " ) ; WebDriver driver = new FirefoxDriver ( createFirefoxProfile ( ) ) ; driver . get ( url ) ; try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException ex ) { logger . error ( "Exception ▁ in ▁ selenium ▁ interupt: ▁ " , ex ) ; Thread . currentThread ( ) . interrupt ( ) ; } String html_content = driver . getPageSource ( ) ; driver . close ( ) ; return html_content ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_86/tree/master/src/main/java/com/crawljax/browser/WebDriverBackedEmbeddedBrowser.java"> public void function ( String url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( "goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded" , e ) ; return ; } } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_87/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_88/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_89/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_90/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_91/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_92/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_93/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_94/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_95/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_96/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_97/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_98/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testWebApp_99/tree/master/tasksoluna/tasksoluna-selenium/src/test/java/org/mtfm/tasksoluna/selenium/welcome/HelloIT.java"> public void function ( ) throws IOException { webDriver . get ( applicationContextUrl ) ; assertThat ( webDriver . findElement ( By . id ( "loginInfo" ) ) . getAttribute ( "action" ) , is ( StringContains . containsString ( "authentication" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnaerobicLactic_100/tree/master/physusp/test/com/gedaeusp/selenium/AnaerobicLacticTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/physusp/esc" ) ; driver . findElement ( By . id ( "parameters.calculateAerobic" ) ) . click ( ) ; driver . findElement ( By . id ( "parameters.calculateAnaerobicAlactic" ) ) . click ( ) ; driver . findElement ( By . id ( "btnNext" ) ) . click ( ) ; driver . findElement ( By . id ( "anaerobicLacticParameters.peakLactateConcentration" ) ) . clear ( ) ; driver . findElement ( By . id ( "anaerobicLacticParameters.peakLactateConcentration" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "anaerobicLacticParameters.restLactateConcentration" ) ) . clear ( ) ; driver . findElement ( By . id ( "anaerobicLacticParameters.restLactateConcentration" ) ) . sendKeys ( "2" ) ; driver . findElement ( By . id ( "anaerobicLacticParameters.weight" ) ) . clear ( ) ; driver . findElement ( By . id ( "anaerobicLacticParameters.weight" ) ) . sendKeys ( "70" ) ; driver . findElement ( By . id ( "btnNext" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldHandleBasicForms_101/tree/master/skuldsku-testrunner/src/test/java/no/steria/skuldsku/testrunner/httprunner/TestHttpPlayer.java"> public void function ( ) throws Exception { InMemoryReporter reporter = new InMemoryReporter ( ) ; TestFilter . setReporter ( reporter ) ; JettyServer jettyServer = new JettyServer ( 0 ) ; jettyServer . start ( ) ; try { int port = jettyServer . getPort ( ) ; final String baseUrl = "http: // localhost:" + port ; WebDriver browser = new HtmlUnitDriver ( ) ; browser . get ( baseUrl + "/post/more" ) ; browser . findElement ( By . name ( "firstname" ) ) . sendKeys ( "Darth" ) ; browser . findElement ( By . name ( "lastname" ) ) . sendKeys ( "Vader" ) ; browser . findElement ( By . name ( "doPerson" ) ) . submit ( ) ; Thread . sleep ( 100 ) ; final List < HttpCall > httpCalls = reporter . getPlayBook ( ) ; assertThat ( httpCalls ) . hasSize ( 2 ) ; List < PlayStep > playbook = httpCalls . stream ( ) . map ( PlayStep :: new ) . collect ( Collectors . toList ( ) ) ; final HttpCallPersister callReporter = mock ( HttpCallPersister . class ) ; TestFilter . setReporter ( callReporter ) ; final HttpPlayer player = new HttpPlayer ( baseUrl ) ; player . addManipulator ( new HiddenFieldManipulator ( "token" ) ) ; player . playSteps ( playbook ) ; assertThat ( playbook . get ( 1 ) . getRecorded ( ) ) . contains ( "Your ▁ name ▁ is ▁ Darth ▁ Vader" ) ; } finally { jettyServer . stop ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="openTestURL_102/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testSeleniumH1_103/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; assertEquals ( "Play ▁ the ▁ amazing ▁ Tic ▁ Tac ▁ Toe ▁ game" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelenuimParagraph_104/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; assertEquals ( "Enter ▁ a ▁ number ▁ between ▁ 1-9" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelenuimInputChar_105/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "a" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Invalid ▁ move ▁ , ▁ try ▁ again" , driver . findElement ( By . xpath ( " // div[@id='results']/pre[2]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelenuimTooSmallNumber_106/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Invalid ▁ move ▁ , ▁ try ▁ again" , driver . findElement ( By . xpath ( " // div[@id='results']/pre[2]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelenuimTooLargeNumber_107/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "10" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Invalid ▁ move ▁ , ▁ try ▁ again" , driver . findElement ( By . xpath ( " // div[@id='results']/pre[2]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelenuimGameOver_108/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "2" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "3" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "5" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "6" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "7" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "8" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "9" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "GAME ▁ OVER" , driver . findElement ( By . xpath ( " // div[@id='results']/pre[2]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_109/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_110/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_111/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_112/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_113/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_114/tree/master/src/test/java/com/youtube/SampleTestNgTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_115/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_116/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testEZRxInitialPage_117/tree/master/src/test/java/com/bna/ezrxlookup/ui/web/EZRxInitialPage.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/EZRxLookup" ) ; try { assertTrue ( isElementPresent ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testEZRxLookupResultPageNoNegativeNoRecalls_118/tree/master/src/test/java/com/bna/ezrxlookup/ui/web/EZRxBusinessTests.java"> public void function ( ) throws Exception { try { driver . get ( baseUrl + "/EZRxLookup/" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "51439-007-02" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:search" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 10 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( "label" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; assertEquals ( "ACNE ▁ CLEARNING ▁ TREATMENT ▁ FACE" , driver . findElement ( By . id ( "j_idt5:j_idt19:cmdBName" ) ) . getText ( ) ) ; WebElement element = driver . findElement ( By . id ( "j_idt5:j_idt19:j_idt28" ) ) ; String path = element . getAttribute ( "src" ) ; assert ( path . contains ( "green" ) ) ; } catch ( Error e ) { verificationErrors . append ( e ) ; } } </DOCUMENT>
<DOCUMENT_ID="testEZRxLookupResultPageRecallsFound_119/tree/master/src/test/java/com/bna/ezrxlookup/ui/web/EZRxBusinessTests.java"> public void function ( ) throws Exception { try { driver . get ( baseUrl + "/EZRxLookup/" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "43598-209-53" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:search" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 10 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( "label" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; assertEquals ( "AMOXICILLIN" , driver . findElement ( By . id ( "j_idt5:j_idt19:cmdBName" ) ) . getText ( ) ) ; WebElement element = driver . findElement ( By . id ( "j_idt5:j_idt19:j_idt28" ) ) ; String path = element . getAttribute ( "src" ) ; assert ( path . contains ( "red" ) ) ; } catch ( Error e ) { verificationErrors . append ( e ) ; } } </DOCUMENT>
<DOCUMENT_ID="testKontoBearbeiten_120/tree/master/src/test/java/org/shareezy/test/integration/KontoBearbeitenTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . id ( "j_id_10:eMail" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:eMail" ) ) . sendKeys ( "Test@test.com" ) ; driver . findElement ( By . id ( "j_id_10:kennwort" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:kennwort" ) ) . sendKeys ( "123" ) ; driver . findElement ( By . id ( "j_id_10:kennwortWiederholung" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:kennwortWiederholung" ) ) . sendKeys ( "123" ) ; driver . findElement ( By . id ( "j_id_10:altesKennwort" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:altesKennwort" ) ) . sendKeys ( "1234" ) ; driver . findElement ( By . id ( "j_id_10:j_id_16" ) ) . click ( ) ; driver . findElement ( By . id ( "j_id_10:kennwort" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:kennwort" ) ) . sendKeys ( "123" ) ; driver . findElement ( By . id ( "j_id_10:kennwortWiederholung" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:kennwortWiederholung" ) ) . sendKeys ( "1234" ) ; driver . findElement ( By . id ( "j_id_10:altesKennwort" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:altesKennwort" ) ) . sendKeys ( "1234" ) ; driver . findElement ( By . id ( "j_id_10:j_id_16" ) ) . click ( ) ; driver . findElement ( By . id ( "j_id_10:kennwort" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:kennwort" ) ) . sendKeys ( "123" ) ; driver . findElement ( By . id ( "j_id_10:kennwortWiederholung" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:kennwortWiederholung" ) ) . sendKeys ( "123" ) ; driver . findElement ( By . id ( "j_id_10:altesKennwort" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_id_10:altesKennwort" ) ) . sendKeys ( "123" ) ; driver . findElement ( By . id ( "j_id_10:j_id_16" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getLoginPage_122/tree/master/src/test/java/org/olat/selenium/page/LoginPage.java"> public static LoginPage function ( WebDriver browser , URL deployemntUrl ) { LoginPage page = new LoginPage ( browser ) ; browser . navigate ( ) . to ( deployemntUrl ) ; return page ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_121/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_124/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="playNewStream_123/tree/master/modules/matterhorn-load-test-engage/src/main/java/org/opencastproject/loadtest/engage/LoadTestEngage.java"> public void function ( ) { if ( episodeList == null || episodeList . size ( ) <= 0 ) { return ; } String episodeUrl = engageServerUrl + "/engage/ui/watch.html?id=" + episodeList . get ( generator . nextInt ( episodeList . size ( ) ) ) ; driver . get ( episodeUrl ) ; if ( ! driver . getCurrentUrl ( ) . equalsIgnoreCase ( episodeUrl ) ) { authenticate ( ) ; } logger . info ( name + " ▁ - ▁ Playing ▁ episode ▁ " + episodeUrl ) ; logger . debug ( "Episode ▁ Page ▁ title ▁ is: ▁ " + driver . getTitle ( ) ) ; WebElement play = ( new WebDriverWait ( driver , 60 ) ) . until ( new ExpectedCondition < WebElement > ( ) { @ Override public WebElement apply ( WebDriver driver ) { WebElement webElement = driver . findElement ( By . id ( "oc_btn-play-pause" ) ) ; if ( webElement != null && webElement . isDisplayed ( ) ) { return webElement ; } return null ; } } ) ; play . click ( ) ; WebElement fastForward = ( new WebDriverWait ( driver , 10000 ) ) . until ( new ExpectedCondition < WebElement > ( ) { @ Override public WebElement apply ( WebDriver driver ) { WebElement webElement = driver . findElement ( By . id ( "oc_btn-fast-forward" ) ) ; if ( webElement != null && webElement . isDisplayed ( ) ) { return webElement ; } return null ; } } ) ; for ( int i = 0 ; i < 5 ; i ++ ) { fastForward . click ( ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { logger . error ( "There ▁ was ▁ an ▁ exception ▁ while ▁ fastforwarding:" , e ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_125/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_126/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_127/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_128/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_129/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_130/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="nonAdminTryAccessAdminPages_132/tree/master/ArcGames/test/ch/hearc/arcgames/tests/AdminSecurityTest.java"> public void function ( ) throws Exception { String username = "nonAdmin" ; String passwd = "nonAdminPassword" ; driver . get ( baseUrl + "/ArcGames/" ) ; login ( username , passwd ) ; for ( String page : adminUrlList ) { String adminUrl = baseUrl + page ; driver . get ( adminUrl ) ; assertNotEquals ( driver . getCurrentUrl ( ) , adminUrl ) ; } driver . findElement ( By . linkText ( "logout" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="adminAccessAdminPages_133/tree/master/ArcGames/test/ch/hearc/arcgames/tests/AdminSecurityTest.java"> public void function ( ) throws Exception { String username = "Admin" ; String passwd = "123456" ; driver . get ( baseUrl + "/ArcGames/" ) ; login ( username , passwd ) ; for ( String page : adminUrlList ) { String adminUrl = baseUrl + page ; driver . get ( adminUrl ) ; assertEquals ( driver . getCurrentUrl ( ) , adminUrl ) ; } driver . findElement ( By . linkText ( "logout" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilm_131/tree/master/src/test/java/ru/st/selenium/AddFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . linkText ( "Add ▁ movie" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "my ▁ first ▁ film" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2013" ) ; driver . findElement ( By . name ( "duration" ) ) . clear ( ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "1000" ) ; driver . findElement ( By . name ( "rating" ) ) . clear ( ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "1000" ) ; driver . findElement ( By . id ( "seen_no" ) ) . click ( ) ; driver . findElement ( By . id ( "own_no" ) ) . click ( ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="loggedUserTryAccessPages_134/tree/master/ArcGames/test/ch/hearc/arcgames/tests/searchTest.java"> public void function ( ) throws Exception { String username = "nonAdmin" ; String passwd = "nonAdminPassword" ; driver . get ( baseUrl + "/ArcGames/" ) ; String pattern = "fake" ; signUp ( pattern , pattern , pattern , pattern , pattern , pattern ) ; login ( username , passwd ) ; driver . findElement ( By . linkText ( "Users" ) ) . click ( ) ; simpleSearch ( pattern ) ; String result = driver . findElement ( By . xpath ( " // form[@id='j_idt21']/table/tbody[2]/tr/td" ) ) . getText ( ) ; assertTrue ( result . contains ( pattern ) ) ; advancedSearch ( pattern ) ; result = driver . findElement ( By . xpath ( " // form[@id='j_idt21']/table/tbody[2]/tr/td" ) ) . getText ( ) ; assertTrue ( result . contains ( pattern ) ) ; driver . findElement ( By . linkText ( "logout" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openConfigurationPage_136/tree/master/cloud-jenkins-plugin/src/test/java/com/sap/hana/cloud/samples/jenkins/plugin/uitests/CloudJenkinsPluginTest.java"> private CloudJenkinsConfigurationPage function ( final URL url ) { webDriver . navigate ( ) . to ( url ) ; return PageFactory . initElements ( webDriver , CloudJenkinsConfigurationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain_137/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain_138/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCookieIntegrity_139/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( "fish" , "cod" , "/common/animals" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } </DOCUMENT>
<DOCUMENT_ID="loggedUserTryAccessPages_135/tree/master/ArcGames/test/ch/hearc/arcgames/tests/DBInteractionTest.java"> public void function ( ) throws Exception { String username = "myUsername" ; String mail = "myMail@gmail.com" ; String location = "Neuchâtel" ; String firstName = "myFName" ; String lastName = "myLName" ; String passwd = "myPasswd" ; driver . get ( baseUrl + "/ArcGames/" ) ; signUp ( username , mail , passwd , location , firstName , lastName ) ; login ( username , passwd ) ; String s = "edited" ; driver . findElement ( By . linkText ( username ) ) . click ( ) ; driver . findElement ( By . id ( "j_idt19:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:username" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:mail" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:mail" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:passwd" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:passwd" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:passwdConfirm" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:passwdConfirm" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:location" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:location" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:firstName" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt19:lastName" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( "j_idt19:submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "logout" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testRetainsCookieExpiry_140/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( "fish" , "cod" , "/common/animals" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Cookie retrieved = options . getCookieNamed ( "fish" ) ; assertNotNull ( retrieved ) ; assertEquals ( cookie1 . getExpiry ( ) , retrieved . getExpiry ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSettingACookieThatExpiredInThePast_141/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long expires = System . currentTimeMillis ( ) - 1000 ; Cookie cookie = new Cookie ( "expired" , "yes" , "/common/animals" , new Date ( expires ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie ) ; cookie = options . getCookieNamed ( "fish" ) ; assertNull ( "Cookie ▁ expired ▁ before ▁ it ▁ was ▁ set, ▁ so ▁ nothing ▁ should ▁ be ▁ returned: ▁ " + cookie , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates_142/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_143/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_144/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl_146/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl_145/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_147/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_149/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/ESUtil.java"> public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( "Sign-out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_148/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_150/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="iVisitTheWebsite_152/tree/master/src/main/java/com/lylyn/jbehave/steps/SomethingSteps.java"> public void function ( String url ) { driverProvider . get ( ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testDataBrowser_153/tree/master/src/test/java/ro/roda/integration/WebDriverIT.java"> public void function ( ) throws Exception { driver . get ( dataBrowserUrl ) ; WebElement dbTitle = driver . findElement ( By . id ( "ext-comp-1009_header" ) ) . findElement ( By . id ( "ext-comp-1009_header-body" ) ) . findElement ( By . id ( "ext-comp-1009_header-innerCt" ) ) . findElement ( By . id ( "ext-comp-1009_header-targetEl" ) ) . findElement ( By . id ( "ext-comp-1009_header_hd" ) ) . findElement ( By . id ( "ext-comp-1009_header_hd-textEl" ) ) ; Assert . assertTrue ( "Data ▁ Browser ▁ panel ▁ structure ▁ OK" , dbTitle . getText ( ) . contains ( "RODA ▁ - ▁ Data ▁ Browser" ) ) ; WebElement catalogLabel = driver . findElement ( By . id ( "CatalogsTabConfig-btnInnerEl" ) ) ; Assert . assertTrue ( "Catalog ▁ Button ▁ OK" , catalogLabel . getText ( ) . contains ( "Cataloage" ) ) ; WebElement catalogHandler = driver . findElement ( By . id ( "CatalogsTabConfig" ) ) ; catalogHandler . click ( ) ; Assert . assertTrue ( "Catalog ▁ tree ▁ panel ▁ loaded ▁ ok" , driver . findElement ( By . id ( "CatalogsTreeView" ) ) . isDisplayed ( ) ) ; WebElement aniLabel = driver . findElement ( By . id ( "YearsTabConfig-btnEl" ) ) ; Assert . assertTrue ( "Years ▁ Button ▁ OK" , aniLabel . getText ( ) . contains ( "Ani" ) ) ; WebElement aniHandler = driver . findElement ( By . id ( "YearsTabConfig" ) ) ; aniHandler . click ( ) ; Assert . assertTrue ( "Years ▁ tree ▁ panel ▁ loaded ▁ ok" , driver . findElement ( By . id ( "YearsTreeView" ) ) . isDisplayed ( ) ) ; WebElement utLabel = driver . findElement ( By . id ( "UsersTabConfig-btnEl" ) ) ; Assert . assertTrue ( "Users ▁ Button ▁ OK" , utLabel . getText ( ) . contains ( "Utilizatori" ) ) ; WebElement utHandler = driver . findElement ( By . id ( "UsersTabConfig" ) ) ; utHandler . click ( ) ; Assert . assertTrue ( "Users ▁ grid ▁ panel ▁ loaded ▁ ok" , driver . findElement ( By . id ( "UsersGridView" ) ) . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="checkAndPutExampleBluelightEnglish_154/tree/master/framework/testtools/selenium/tests/org/ofbiz/testtools/webdriverTests/utils/Utils.java"> public static void function ( String baseUrl , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; WebElement waitFor ; boolean themeAndLanguageCorrect , firstTime ; firstTime = true ; int i = 2 ; do { themeAndLanguageCorrect = false ; driver . get ( baseUrl + "example/control/logout" ) ; waitFor = driverWait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "USERNAME" ) ) ) ; waitFor . clear ( ) ; waitFor . sendKeys ( "admin" ) ; WebElement element = driver . findElement ( By . name ( "PASSWORD" ) ) ; element . clear ( ) ; element . sendKeys ( "ofbiz" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; driverWait . until ( ExpectedConditions . titleContains ( "OFBiz: ▁ Example: ▁ Find ▁ Example" ) ) ; List < WebElement > currentLanguages = driver . findElements ( By . xpath ( " // ul[@id='preferences-menu']/li[3]/a" ) ) ; if ( currentLanguages . size ( ) == 0 || ! currentLanguages . get ( 0 ) . getText ( ) . contains ( "Language ▁ : ▁ English" ) ) { Utils . testChangeLanguage ( baseUrl , null , null , "BLUELIGHT" , driver ) ; themeAndLanguageCorrect = true ; i -= 1 ; firstTime = i > 0 ; } } while ( themeAndLanguageCorrect && firstTime ) ; assertTrue ( firstTime ) ; } </DOCUMENT>
<DOCUMENT_ID="testPasswordRecoveryEmail_151/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPasswordRecovery.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-signin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Forgot ▁ your ▁ password?" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( USER ) ; driver . findElement ( By . id ( "validationSubmit" ) ) . click ( ) ; String resourceLocation = getResourceLocation ( ) ; smtpPropertyLocation = resourceLocation + SMTP_PROPERTY_FILE ; Thread . sleep ( 10000 ) ; String message = ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , RESET_MAIL_TITLE ) ; String resetUrl = message . split ( "" ) [ 5 ] . trim ( ) . substring ( "https: // localhost:9443" . length ( ) ) ; driver . get ( baseUrl + resetUrl ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( "password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "password2" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( "resetPassword" ) ) . click ( ) ; ESUtil . login ( driver , baseUrl , STORE_APP , USER , NEW_PASSWORD ) ; } </DOCUMENT>
<DOCUMENT_ID="testChangeLanguage_155/tree/master/framework/testtools/selenium/tests/org/ofbiz/testtools/webdriverTests/utils/Utils.java"> public static void function ( String baseUrl , String component , String language , String theme , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; if ( language == null ) { language = "English ▁ ▁ ▁ ▁ - ▁ ▁ ▁ ▁ [en]" ; } if ( theme == null ) { theme = "BLUELIGHT" ; } if ( component == null ) { component = "catalog" ; } driver . get ( baseUrl + component + "/control/logout" ) ; if ( "webtools" . equals ( component ) ) { driver . get ( baseUrl + component + "/control/checkLogin" ) ; } WebElement waitFor = driverWait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input[type=\"submit\"]" ) ) ) ; WebElement element = driver . findElement ( By . name ( "USERNAME" ) ) ; element . clear ( ) ; element . sendKeys ( "admin" ) ; element = driver . findElement ( By . name ( "PASSWORD" ) ) ; element . clear ( ) ; element . sendKeys ( "ofbiz" ) ; waitFor . click ( ) ; Thread . sleep ( 500 ) ; if ( isElementPresent ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) , driver ) ) { driver . findElement ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) ) . click ( ) ; driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "theme" ) ) ) . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"javascript:document.SetUserPreferences_" + theme + ".submit()\"]" ) ) ) ; waitFor . click ( ) ; } else { driver . get ( baseUrl + component + "/control/ListVisualThemes" ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"javascript:document.SetUserPreferences_" + theme + ".submit()\"]" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"/" + component + "/control/main\"]" ) ) ) ; waitFor . click ( ) ; if ( isElementPresent ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) , driver ) ) { driver . findElement ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) ) . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "language" ) ) ) ; waitFor . click ( ) ; } else { waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"/" + component + "/control/ListLocales\"]" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . linkText ( language ) ) ) ; waitFor . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="changeThemeLanguage_156/tree/master/framework/testtools/selenium/tests/org/ofbiz/testtools/webdriverTests/utils/Utils.java"> public static void function ( String baseUrl , String component , String language , String theme , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; if ( language == null ) { language = "English ▁ ▁ ▁ ▁ - ▁ ▁ ▁ ▁ [en]" ; } if ( theme == null ) { theme = "TOMAHAWK" ; } WebElement waitFor ; WebElement we ; if ( isElementPresent ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) , driver ) ) { we = driver . findElement ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) ) ; we . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "theme" ) ) ) ; waitFor . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"javascript:document.SetUserPreferences_" + theme + ".submit()\"]" ) ) ) ; waitFor . click ( ) ; } else { driver . get ( baseUrl + component + "/control/ListVisualThemes" ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"javascript:document.SetUserPreferences_" + theme + ".submit()\"]" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"/" + component + "/control/main\"]" ) ) ) ; waitFor . click ( ) ; Thread . sleep ( 500 ) ; if ( isElementPresent ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) , driver ) ) { we = driver . findElement ( By . xpath ( " // div[@id=\"controls\"] // span[@id=\"prefBtn\"] // a" ) ) ; we . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "language" ) ) ) ; waitFor . click ( ) ; } else { waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( " // a[@href=\"/" + component + "/control/ListLocales\"]" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . linkText ( language ) ) ) ; waitFor . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_158/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertEquals ( "Keycloak ▁ Account ▁ Management" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="errorMessageAfterFailedLoginAttempt_159/tree/master/src/test/java/uk/co/yottr/acceptance/SignInSignOutIT.java"> public void function ( ) { driver . navigate ( ) . to ( urlBase + "/yottr" ) ; final WebElement usernameField = driver . findElement ( By . id ( "username" ) ) ; final WebElement passwordField = driver . findElement ( By . id ( "password" ) ) ; final WebElement signInButton = driver . findElement ( By . id ( "sign-in-button" ) ) ; usernameField . sendKeys ( "mike" ) ; passwordField . sendKeys ( "wrongpassword" ) ; signInButton . click ( ) ; final WebElement errorMessage = driver . findElement ( By . id ( "error-msg" ) ) ; assertEquals ( "Invalid ▁ username ▁ and ▁ password." , errorMessage . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_157/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="signInSignOut_160/tree/master/src/test/java/uk/co/yottr/acceptance/SignInSignOutIT.java"> public void function ( ) { driver . navigate ( ) . to ( urlBase + "/yottr" ) ; final WebElement usernameField = driver . findElement ( By . id ( "username" ) ) ; final WebElement passwordField = driver . findElement ( By . id ( "password" ) ) ; final WebElement signInButton = driver . findElement ( By . id ( "sign-in-button" ) ) ; usernameField . sendKeys ( "mike" ) ; passwordField . sendKeys ( "aph3xtwIn" ) ; signInButton . click ( ) ; final WebElement logoutLink = driver . findElement ( By . id ( "logout-link" ) ) ; assertEquals ( "Logout" , logoutLink . getText ( ) ) ; logoutLink . click ( ) ; final WebElement loggedOutMessage = driver . findElement ( By . id ( "logged-out-msg" ) ) ; assertEquals ( "You ▁ have ▁ been ▁ logged ▁ out." , loggedOutMessage . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_162/tree/master/common/test/java/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates_161/tree/master/firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testReserveWith9Mmebers_163/tree/master/src/test/java/practicework/PracticeWork1Test.java"> public void function ( ) throws Exception { File html = new File ( "reserveApp/index.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; Thread . sleep ( 8000 ) ; driver . findElement ( By . id ( "reserve_year" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_year" ) ) . sendKeys ( "2013" ) ; driver . findElement ( By . id ( "reserve_month" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_month" ) ) . sendKeys ( "12" ) ; driver . findElement ( By . id ( "reserve_day" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_day" ) ) . sendKeys ( "7" ) ; driver . findElement ( By . id ( "reserve_term" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_term" ) ) . sendKeys ( "1" ) ; assertThat ( driver . findElement ( By . id ( "price" ) ) . getText ( ) , is ( "105750" ) ) ; assertThat ( driver . findElement ( By . id ( "datefrom" ) ) . getText ( ) , is ( "2013年12月7日" ) ) ; assertThat ( driver . findElement ( By . id ( "dateto" ) ) . getText ( ) , is ( "2013年12月8日" ) ) ; assertThat ( driver . findElement ( By . id ( "dayscount" ) ) . getText ( ) , is ( "1" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testClickOKButton_165/tree/master/src/test/java/introwork/IntroWork9Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork9.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement okButton = driver . findElement ( By . id ( "ok_button" ) ) ; okButton . click ( ) ; Thread . sleep ( 8000 ) ; } </DOCUMENT>
<DOCUMENT_ID="checkThatInstalledSuccessfully_164/tree/master/src/test/java/EnvironmentCheckTest.java"> public void function ( ) { File html = new File ( "introWork/introWork1.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement userName = driver . findElement ( By . id ( "user_name" ) ) ; userName . sendKeys ( "TestUser" ) ; WebElement password = driver . findElement ( By . id ( "password" ) ) ; password . sendKeys ( "pass" ) ; WebElement login = driver . findElement ( By . id ( "login" ) ) ; login . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginSuccess_166/tree/master/src/test/java/introwork/IntroWork1Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork1.html" ) ; String url = html . toURI ( ) . toString ( ) ; System . out . println ( url ) ; driver . get ( url ) ; Thread . sleep ( 1000 ) ; WebElement userName = driver . findElement ( By . id ( "user_name" ) ) ; userName . sendKeys ( "TestUser" ) ; Thread . sleep ( 1000 ) ; WebElement password = driver . findElement ( By . id ( "password" ) ) ; password . sendKeys ( "pass" ) ; Thread . sleep ( 1000 ) ; WebElement login = driver . findElement ( By . id ( "login" ) ) ; login . click ( ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; Thread . sleep ( 1000 ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_168/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_167/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_169/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_170/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_171/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_173/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_174/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_175/tree/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertEquals ( "Keycloak ▁ Account ▁ Management" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_172/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_177/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToURL_178/tree/master/src/main/java/com/goeuro/utility/GeneralUtility.java"> public static void function ( WebDriver driver , String url ) { LOGGER . log ( Level . INFO , String . format ( "Navigating ▁ to ▁ the ▁ URL: ▁ \"%s\"" , url ) ) ; driver . navigate ( ) . to ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="preLoginTo_176/tree/master/java/client/test/fff/helloflash.java"> public void function ( String url , String account , String password , WebDriver driver ) throws InterruptedException { driver . get ( "https: // login.alibaba.com/?Done=http%3A%2F%2Fbiz.alibaba.com%2Fgeneralorders%2Flist_orders.htm" ) ; Thread . sleep ( 3000 ) ; WebElement xloginPassportId = driver . findElement ( By . id ( "xloginPassportId" ) ) ; xloginPassportId . clear ( ) ; xloginPassportId . sendKeys ( account ) ; driver . findElement ( By . id ( "xloginPasswordId" ) ) . sendKeys ( password ) ; driver . findElement ( By . id ( "signInButton" ) ) . click ( ) ; int tryTime = 40 ; while ( driver . getCurrentUrl ( ) . contains ( "login.alibaba.com" ) && tryTime > 0 ) { tryTime -- ; } if ( tryTime <= 0 ) { driver . get ( url ) ; } } </DOCUMENT>
<DOCUMENT_ID="Js_error_account_179/tree/master/src/test/java/js_errors/Js_error_account.java"> public void function ( ) throws Exception { Actions actions = new Actions ( driver ) ; driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl + "customer/account/login/" ) ; WebElement email = driver . findElement ( By . id ( "email" ) ) ; email . clear ( ) ; email . sendKeys ( "qatestingtestqa@gmail.com" ) ; WebElement pass = driver . findElement ( By . id ( "pass" ) ) ; pass . clear ( ) ; pass . sendKeys ( "qwerty" ) ; WebElement submit = driver . findElement ( By . cssSelector ( "button[title=\"Login\"]" ) ) ; submit . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; WebElement h1 = driver . findElement ( By . tagName ( "h1" ) ) ; assertEquals ( "MY ▁ DASHBOARD" , h1 . getText ( ) ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( "browser" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } WebElement signout = driver . findElement ( By . linkText ( "Sign ▁ Out" ) ) ; WebElement my_account = driver . findElement ( By . linkText ( "My ▁ Account" ) ) ; actions . moveToElement ( my_account ) . build ( ) . perform ( ) ; signout . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; assertEquals ( list , logsEntries ) ; } </DOCUMENT>
<DOCUMENT_ID="Js_error_register_181/tree/master/src/test/java/js_errors/Js_error_register.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl + "customer/account/create/" ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( "browser" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } assertEquals ( list , logsEntries ) ; } </DOCUMENT>
<DOCUMENT_ID="Js_error_login_182/tree/master/src/test/java/js_errors/Js_error_login.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl + "customer/account/login/" ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( "browser" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } assertEquals ( list , logsEntries ) ; } </DOCUMENT>
<DOCUMENT_ID="Add_all_cart_180/tree/master/src/test/java/wishlist/Add_all_cart.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + "personalised-swarovski-crystal-heart-vase.html" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "li ▁ > ▁ a.button ▁ > ▁ span" ) ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( "li ▁ > ▁ a.button ▁ > ▁ span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "qatestingtestqa@gmail.com" ) ; driver . findElement ( By . id ( "pass" ) ) . clear ( ) ; driver . findElement ( By . id ( "pass" ) ) . sendKeys ( "qwerty" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "send2" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; assertEquals ( "Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase ▁ has ▁ been ▁ added ▁ to ▁ your ▁ wishlist." , driver . findElement ( By . cssSelector ( "span" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "button.mfp-close" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . get ( baseUrl + "personalised-swarovski-big-heart-diamante-vase.html" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "li ▁ > ▁ a.button ▁ > ▁ span" ) ) ) ; driver . findElement ( By . cssSelector ( "li ▁ > ▁ a.button ▁ > ▁ span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( "button.mfp-close" ) ) . click ( ) ; driver . get ( baseUrl + "wishlist/" ) ; TimeUnit . SECONDS . sleep ( 3 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "button.button.btn-add" ) ) ) ; driver . findElement ( By . cssSelector ( "button.button.btn-add" ) ) . click ( ) ; try { assertEquals ( "2 ▁ product(s) ▁ have ▁ been ▁ added ▁ to ▁ shopping ▁ cart: ▁ \"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\", ▁ \"Personalised ▁ Swarovski ▁ Diamante ▁ Vase ▁ - ▁ Big ▁ Heart ▁ Design\"." , driver . findElement ( By . cssSelector ( "li ▁ > ▁ span" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertEquals ( "You ▁ have ▁ no ▁ items ▁ in ▁ your ▁ wishlist." , driver . findElement ( By . cssSelector ( "p.wishlist-empty" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . get ( baseUrl + "checkout/cart/" ) ; assertEquals ( "YOUR ▁ SHOPPING ▁ BASKET" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; try { assertEquals ( "Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase" , driver . findElement ( By . xpath ( "( // a[contains(text(),'Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase')])[3]" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( " // div[@class='item']/div[7]/a" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 7 ) ; driver . findElement ( By . xpath ( " // div[@class='item']/div[7]/a" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( "SHOPPING ▁ CART ▁ IS ▁ EMPTY" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . get ( baseUrl + "customer/account/logout" ) ; } </DOCUMENT>
<DOCUMENT_ID="Js_error_home_184/tree/master/src/test/java/js_errors/Js_error_home.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( "browser" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } assertEquals ( list , logsEntries ) ; } </DOCUMENT>
<DOCUMENT_ID="Add_delete_wishlist_185/tree/master/src/test/java/wishlist/Add_delete_wishlist.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + "personalised-swarovski-crystal-heart-vase.html" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "li ▁ > ▁ a.button ▁ > ▁ span" ) ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( "li ▁ > ▁ a.button ▁ > ▁ span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "qatestingtestqa@gmail.com" ) ; driver . findElement ( By . id ( "pass" ) ) . clear ( ) ; driver . findElement ( By . id ( "pass" ) ) . sendKeys ( "qwerty" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "send2" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 15 ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; assertEquals ( "Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase ▁ has ▁ been ▁ added ▁ to ▁ your ▁ wishlist." , driver . findElement ( By . cssSelector ( "span" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "button.mfp-close" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . get ( baseUrl + "wishlist/" ) ; assertEquals ( "Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase" , driver . findElement ( By . cssSelector ( "div.columns.small-6 ▁ > ▁ h3.product-name ▁ > ▁ a[title=\"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\"]" ) ) . getText ( ) ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "div.columns.small-6 ▁ > ▁ h3.product-name ▁ > ▁ a[title=\"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "div.r-tbody ▁ > ▁ div:last-child ▁ > ▁ div.columns.small-1 ▁ > ▁ a.btn-remove.btn-remove2" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this ▁ product ▁ from ▁ your ▁ wishlist[\\s\\S]$" ) ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( "(0 ▁ items)" , driver . findElement ( By . cssSelector ( "span.item-count" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; WebElement signout = driver . findElement ( By . linkText ( "Sign ▁ Out" ) ) ; WebElement my_account = driver . findElement ( By . linkText ( "My ▁ Account" ) ) ; actions . moveToElement ( my_account ) . build ( ) . perform ( ) ; signout . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="Order_login_customer_183/tree/master/src/test/java/checkout/Order_login_customer.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + "customer/account/login/" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "qatestingtestqa@gmail.com" ) ; driver . findElement ( By . id ( "pass" ) ) . clear ( ) ; driver . findElement ( By . id ( "pass" ) ) . sendKeys ( "qwerty" ) ; driver . findElement ( By . id ( "send2" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; assertEquals ( "MY ▁ DASHBOARD" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; driver . get ( baseUrl + "personalised-swarovski-crystal-heart-vase.html" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "button[title=\"Add ▁ to ▁ Basket\"]" ) ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( "button[title=\"Add ▁ to ▁ Basket\"]" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . xpath ( " // a[2]/span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . get ( baseUrl + "checkout/onepage/" ) ; TimeUnit . SECONDS . sleep ( 7 ) ; assertEquals ( "SECURE ▁ CHECKOUT" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "#billing-buttons-container ▁ > ▁ button.button.btn-primary" ) ) ) ; driver . findElement ( By . cssSelector ( "#billing-buttons-container ▁ > ▁ button.button.btn-primary" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . cssSelector ( "label[for='s_method_productmatrix_royal_mail_48']" ) ) . click ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "#shipping-method-buttons-container ▁ > ▁ button.button.btn-primary" ) ) ) ; driver . findElement ( By . cssSelector ( "#shipping-method-buttons-container ▁ > ▁ button.button.btn-primary" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . xpath ( " // *[@id='checkout-step-payment']/div[1]/h2" ) ) ) ; TimeUnit . SECONDS . sleep ( 7 ) ; driver . findElement ( By . cssSelector ( "label[for='p_method_checkmo']" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . xpath ( " // ul[@id='checkout-payment-method-load']/li[5]/div/label" ) ) . click ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . cssSelector ( "#payment-buttons-container ▁ > ▁ button.button.btn-primary" ) ) ) ; driver . findElement ( By . cssSelector ( "#payment-buttons-container ▁ > ▁ button.button.btn-primary" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "arguments[0].scrollIntoView();" , driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( "A ▁ BIG ▁ THANK ▁ YOU ▁ TOM ▁ NOW ▁ SEE ▁ BELOW ▁ WHAT ▁ YOU ▁ CAN ▁ DO" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; String order = driver . findElement ( By . xpath ( "/html/body/div[2]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/div/strong" ) ) . getText ( ) ; String regex = "[0-9]\\d+" ; Pattern p = Pattern . compile ( regex ) ; Matcher m = p . matcher ( order ) ; if ( m . find ( ) ) { driver . get ( baseUrl + "customer/account/logout" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . get ( baseUrl + "dukkan" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "Turnkey@1986" ) ; driver . findElement ( By . id ( "login" ) ) . clear ( ) ; driver . findElement ( By . id ( "login" ) ) . sendKeys ( "E/4zp^Gi79:heX6{wp" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( "input.form-button" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 25 ) ; Boolean test1 = isElementPresent ( By . cssSelector ( "a[title=\"close\"] ▁ > ▁ span" ) ) ; if ( test1 == true ) { driver . findElement ( By . cssSelector ( "a[title=\"close\"] ▁ > ▁ span" ) ) . click ( ) ; } actions . moveToElement ( driver . findElement ( By . xpath ( " // *[@id='nav']/li[2]/a/span" ) ) ) . build ( ) . perform ( ) ; driver . findElement ( By . xpath ( " // *[@id='nav']/li[2]/ul/li[1]/a/span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "sales_order_grid_filter_am_real_order_id" ) ) . clear ( ) ; driver . findElement ( By . id ( "sales_order_grid_filter_am_real_order_id" ) ) . sendKeys ( m . group ( ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( "button[title=\"Search\"]" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . cssSelector ( "input[name=\"order_ids\"]" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; new Select ( driver . findElement ( By . id ( "sales_order_grid_massaction-select" ) ) ) . selectByVisibleText ( "Cancel" ) ; driver . findElement ( By . cssSelector ( "button[title=\"Submit\"]" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( "1 ▁ order(s) ▁ have ▁ been ▁ canceled." , driver . findElement ( By . cssSelector ( "li ▁ > ▁ span" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "#html-body ▁ > ▁ div.wrapper ▁ > ▁ div.header ▁ > ▁ div.header-top ▁ > ▁ div ▁ > ▁ p ▁ > ▁ a.link-logout" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 8 ) ; } } private boolean isElementPresent ( By by ) { try { driver . findElement ( by ) ; return true ; } catch ( NoSuchElementException e ) { return false ; } } private String closeAlertAndGetItsText ( ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; String alertText = alert . getText ( ) ; if ( acceptNextAlert ) { alert . accept ( ) ; } else { alert . dismiss ( ) ; } return alertText ; } finally { acceptNextAlert = true ; } } } </DOCUMENT>
<DOCUMENT_ID="Create_delete_wishlist_186/tree/master/src/test/java/wishlist/Create_delete_wishlist.java"> public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + "customer/account/login/" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "qatestingtestqa@gmail.com" ) ; driver . findElement ( By . id ( "pass" ) ) . clear ( ) ; driver . findElement ( By . id ( "pass" ) ) . sendKeys ( "qwerty" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( "send2" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; assertEquals ( "MY ▁ DASHBOARD" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . xpath ( "/html/body/div[2]/div[1]/div[1]/div[3]/div/div[2]/ul/li[8]/a" ) ) . click ( ) ; assertEquals ( "MY ▁ WISHLISTS" , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . id ( "wishlist-create-button" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . id ( "wishlist-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "wishlist-name" ) ) . sendKeys ( "Test ▁ 123" ) ; driver . findElement ( By . cssSelector ( "button.button.btn-save" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( "Wishlist ▁ \"Test ▁ 123\" ▁ was ▁ successfully ▁ saved" , driver . findElement ( By . cssSelector ( "li ▁ > ▁ span" ) ) . getText ( ) ) ; assertEquals ( "Test ▁ 123 ▁ / ▁ Edit ▁ (0 ▁ items)" , driver . findElement ( By . cssSelector ( "div.box-title ▁ > ▁ h3" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( " // *[@id='wishlist-view-form']/fieldset/div/button/span/span" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 7 ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^You ▁ are ▁ about ▁ to ▁ delete ▁ your ▁ wish ▁ list\\. \n This ▁ action ▁ cannot ▁ be ▁ undone\\. \n Do ▁ you ▁ want ▁ to ▁ proceed[\\s\\S]$" ) ) ; TimeUnit . SECONDS . sleep ( 7 ) ; assertEquals ( "Wishlist ▁ \"Test ▁ 123\" ▁ has ▁ been ▁ deleted." , driver . findElement ( By . cssSelector ( "li ▁ > ▁ span" ) ) . getText ( ) ) ; driver . get ( baseUrl + "customer/account/logout" ) ; TimeUnit . SECONDS . sleep ( 7 ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_188/tree/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertTrue ( driver . getTitle ( ) . contains ( "Account ▁ Management" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="openHomeUrl_189/tree/master/src/test/java/ru/qatools/school/twister/web/steps/LoginSteps.java"> public void function ( ) { driver . get ( homeUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="CreatePostPage_190/tree/master/src/test/java/ru/qatools/school/twister/web/page/CreatePostPage.java"> public function ( WebDriver driver ) { super ( driver ) ; PageFactory . initElements ( new HtmlElementDecorator ( driver ) , this ) ; driver . get ( homeUrl + "post/new" ) ; } </DOCUMENT>
<DOCUMENT_ID="testISaidHello_191/tree/master/server/src/test/java/org/craftercms/studio/test/integration/HomepageIntegrationTest.java"> public void function ( ) { driver . get ( baseUrl + "/" ) ; final String htmlText = driver . findElement ( By . tagName ( "h2" ) ) . getText ( ) ; assertNotNull ( driver . findElement ( By . tagName ( "h2" ) ) ) ; assertEquals ( htmlText , "Hello ▁ World!" ) ; } </DOCUMENT>
<DOCUMENT_ID="createYoutubeVideoObjectFromVideoId_187/tree/master/VideoSummary/app/utils/Summarizer/TranscriptFactory.java"> private static YoutubeVideo function ( String videoId ) { if ( getNumConcurrentBrowswers ( ) >= Constants . NUM_CONCURRENT_VIDEO_INFO_RETRIEVAL_ACTORS ) { throw new RuntimeException ( "Too ▁ Many ▁ Active ▁ Video ▁ Retrieval ▁ Browsers. ▁ Try ▁ again ▁ later" ) ; } WebDriver browser = createWebDriver ( ) ; WebElement moreButton = null ; WebElement transcriptButton = null ; WebElement transcriptContainer = null ; WebElement videoEndTimeElement = null ; WebElement videoTitleElement = null ; String url = StringManip . generateUrlFromVideoId ( videoId ) ; String videoEndTime = null ; String videoTitle = null ; long startTime = System . currentTimeMillis ( ) ; browser . manage ( ) . timeouts ( ) . implicitlyWait ( TIMEOUT , TimeUnit . SECONDS ) ; try { browser . get ( url ) ; logger . debug ( "retrieved ▁ url: ▁ {}" , url ) ; videoEndTimeElement = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . className ( "ytp-time-duration" ) ) ) ; videoEndTime = videoEndTimeElement . getText ( ) ; logger . debug ( "retrieved ▁ video ▁ end ▁ time: ▁ {}" , videoEndTime ) ; videoTitleElement = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "eow-title" ) ) ) ; videoTitle = videoTitleElement . getText ( ) ; logger . debug ( "retrieved ▁ video ▁ title: ▁ {}" , videoTitle ) ; moreButton = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . elementToBeClickable ( By . id ( "action-panel-overflow-button" ) ) ) ; clickElement ( browser , moreButton ) ; logger . debug ( "clicked ▁ more ▁ button" ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; killWebDriver ( browser ) ; return null ; } int counter = 0 ; while ( transcriptButton == null && counter < Constants . BROWSER_RETRIES ) { try { transcriptButton = new WebDriverWait ( browser , 1 ) . until ( ExpectedConditions . elementToBeClickable ( By . className ( "action-panel-trigger-transcript" ) ) ) ; } catch ( Exception e ) { System . out . println ( "caught ▁ exception" ) ; clickElement ( browser , moreButton ) ; System . out . println ( "clicked ▁ more ▁ button" ) ; counter ++ ; } } if ( counter == Constants . BROWSER_RETRIES ) { killWebDriver ( browser ) ; return null ; } try { Thread . sleep ( 1500 ) ; clickElement ( browser , transcriptButton ) ; transcriptContainer = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "transcript-scrollbox" ) ) ) ; logger . debug ( "transcript ▁ successfully ▁ loaded ▁ into ▁ webdriver" ) ; Document doc = Jsoup . parse ( transcriptContainer . getAttribute ( "innerHTML" ) ) ; LinkedHashMap < String , String > timeToText = new LinkedHashMap < > ( ) ; for ( Element timeRegion : doc . body ( ) . children ( ) ) { Elements timeRegionData = timeRegion . children ( ) ; String currentTime = timeRegionData . get ( 0 ) . text ( ) ; String currentCaption = timeRegionData . get ( 1 ) . text ( ) ; if ( timeToText . containsKey ( currentTime ) ) { timeToText . put ( currentTime , timeToText . get ( currentTime ) + currentCaption . trim ( ) ) ; } else { timeToText . put ( currentTime , currentCaption . trim ( ) ) ; } } String rawTranscript = timeToTextMappingToRawTranscript ( timeToText , videoEndTime ) ; logger . debug ( "transcript ▁ successfully ▁ parsed" ) ; long finishTime = System . currentTimeMillis ( ) ; logger . debug ( "time ▁ taken: ▁ {}" , ( finishTime - startTime ) * 1.0 / 1000 ) ; killWebDriver ( browser ) ; return new YoutubeVideo ( videoId , rawTranscript , videoTitle ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; logger . error ( e . toString ( ) ) ; killWebDriver ( browser ) ; return null ; } } </DOCUMENT>
<DOCUMENT_ID="cleanGoTo_193/tree/master/src/main/java/org/polimi/zarathustra/webdriver/WebdriverWorker.java"> public void function ( String url ) { cleanDriver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="infectedGoTo_194/tree/master/src/main/java/org/polimi/zarathustra/webdriver/WebdriverWorker.java"> public void function ( String url ) { infectedDriver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_195/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="getDocumentAndStoreSource_192/tree/master/src/main/java/org/polimi/zarathustra/webdriver/LocalWebdriverWorker.java"> public Document function ( final String url , File outputDir , String fileName ) { MonitorThread monitor = new MonitorThread ( hardLimitTimeoutSeconds , new Runnable ( ) { @ Override public void run ( ) { driver . quit ( ) ; throw new TimeoutException ( "Timedout ▁ while ▁ retrieving ▁ DOM ▁ for ▁ " + url ) ; } } ) ; monitor . setDaemon ( true ) ; driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( url ) ; String page = driver . getPageSource ( ) ; storeHtmlSource ( outputDir , fileName , page ) ; monitor . done ( ) ; Preconditions . checkNotNull ( url ) ; return WebdriverHelper . getDom ( page ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_196/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_197/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_198/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_200/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_199/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( TestUtilities . isFirefox ( driver ) && TestUtilities . isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_202/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_203/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_201/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_204/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_205/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_207/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_206/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_208/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_209/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getTwitterAuthorizationPINPageSource_211/tree/master/ManalithBot/src/main/java/org/manalith/ircbot/plugin/tweetreader/TweetReader.java"> private String function ( ) { String url = requestToken . getAuthenticationURL ( ) ; driver . get ( url ) ; jse . executeScript ( "document.getElementById('username_or_email').setAttribute('value','" + username + "')" ) ; jse . executeScript ( "document.getElementById('password').setAttribute('value','" + password + "')" ) ; jse . executeScript ( "document.getElementById('allow').click()" ) ; driver . getPageSource ( ) ; return driver . getPageSource ( ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_210/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToURL_212/tree/master/mmcrawler/src/main/java/com/waku/mmdataextract/SalesIssues3.java"> private static void function ( FileWriter fw , WebDriver driver , String finalUrl ) throws Exception { driver . get ( finalUrl ) ; List < WebElement > tables = driver . findElements ( By . tagName ( "table" ) ) ; WebElement mainTable = tables . get ( 1 ) ; List < WebElement > trs = mainTable . findElements ( By . tagName ( "tr" ) ) ; Boolean firstOne = true ; int cols = 0 ; for ( WebElement tr : trs ) { try { if ( firstOne ) { StringBuilder header = new StringBuilder ( ) ; firstOne = false ; List < WebElement > tds = tr . findElements ( By . tagName ( "td" ) ) ; for ( WebElement td : tds ) { try { String s = td . findElement ( By . tagName ( "strong" ) ) . getText ( ) ; header . append ( s + "," ) ; } catch ( NoSuchElementException e ) { header . append ( "ImageURL," ) ; } } System . out . println ( header . toString ( ) ) ; fw . write ( header + " \n " ) ; cols = header . toString ( ) . split ( "," ) . length ; } else { List < WebElement > tds = tr . findElements ( By . tagName ( "td" ) ) ; if ( tds . size ( ) == cols ) { StringBuilder line = new StringBuilder ( ) ; for ( WebElement td : tds ) { try { String s = "http: // shouji.gd.chinamobile.com" + td . findElement ( By . tagName ( "img" ) ) . getAttribute ( "src" ) ; line . append ( s + "," ) ; } catch ( NoSuchElementException e ) { line . append ( td . getText ( ) + "," ) ; } } System . out . println ( line ) ; fw . write ( line . toString ( ) + " \n " ) ; } else { StringBuilder line = new StringBuilder ( ) ; for ( int i = 0 ; i < ( cols - tds . size ( ) ) ; i ++ ) { line . append ( "," ) ; } for ( WebElement td : tds ) { line . append ( td . getText ( ) + "," ) ; } System . out . println ( line ) ; fw . write ( line . toString ( ) + " \n " ) ; } } } catch ( NoSuchElementException e ) { System . out . println ( "One ▁ page ▁ end!" ) ; fw . write ( "One ▁ page ▁ end!" . toString ( ) + " \n " ) ; } } } </DOCUMENT>
<DOCUMENT_ID="getHTMLContent_214/tree/master/src/com/onwebbe/travelPlan/databugs/QiongYouInternationalCityInfo.java"> public String function ( String url ) { driver . get ( url ) ; String source = driver . getPageSource ( ) ; return source ; } </DOCUMENT>
<DOCUMENT_ID="getHTMLContent_215/tree/master/src/com/onwebbe/travelPlan/databugs/QiongYouInternationalCityType.java"> public String function ( String url ) { driver . get ( url ) ; String source = driver . getPageSource ( ) ; return source ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentPos_216/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisiblePos_217/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentPos_218/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilTextPresent ( text ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearPos_219/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentPos_220/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="readForEachPage_213/tree/master/mmcrawler/src/main/java/com/waku/mmdataextract/IMEI.java"> private static void function ( FileWriter fw , WebDriver driver , String url ) throws Exception { try { driver . get ( url ) ; WebElement table = driver . findElement ( By . xpath ( " // table[@bgcolor='BFBEC3']" ) ) ; List < WebElement > items = table . findElements ( By . xpath ( "./tbody/tr" ) ) ; for ( int i = 1 ; i < items . size ( ) - 1 ; i ++ ) { List < WebElement > cols = items . get ( i ) . findElements ( By . tagName ( "td" ) ) ; for ( WebElement col : cols ) { System . out . print ( col . getText ( ) + "," ) ; fw . write ( col . getText ( ) + "," ) ; } System . out . println ( ) ; fw . write ( " \n " ) ; } } catch ( Exception e ) { System . out . println ( "---------Retry--------------------------" ) ; System . out . println ( e . getMessage ( ) ) ; System . out . println ( "---------Retry---------------------------" ) ; readForEachPage ( fw , driver , url ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWasitUntilElementPipedLocator_221/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( pipedLocator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilWebPageIsValidatedNeg_222/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageIsValidated ( new BasicPageImpl ( ) { @ Override public BasicPageImpl getPage ( ) { return this ; } } ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentNeg_223/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisibleNeg_224/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentNeg_225/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearNeg_226/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentNeg_227/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_228/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/ESUtil.java"> public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( "Sign-out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase_229/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/assets/servicex/details" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOveriddenDetailsPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_230/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElement ( By . id ( "Addgadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_name" ) ) ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div.col-lg-10" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(3) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div.col-lg-10" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_231/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Edit" ) ) ) ; driver . findElement ( By . id ( "Edit" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_version" ) ) ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION_2 ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Overview" ) ) ) ; driver . findElement ( By . id ( "Overview" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Overview" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( "/html/body/div/div[3]/div[1]/div/div/div[2]/h1" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div.col-lg-10" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(3) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div.col-lg-10" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_232/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElement ( By . id ( "Addgadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_name" ) ) ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div.col-lg-10" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(3) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div.col-lg-10" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div.col-lg-10" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_233/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase_235/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginToPublisher_234/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertEquals ( "Asset ▁ | ▁ WSO2 ▁ Enterprise ▁ Store ▁ back-office" , driver . getTitle ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( "/html/body/div/div[1]/header/div/div[2]/div/a/div/span" ) ) . getText ( ) , "Logged ▁ in ▁ user ▁ not ▁ shown" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase_236/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . name ( "reg-email" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-email" ) ) . sendKeys ( NEW_USER_EMAIL ) ; driver . findElement ( By . name ( "reg-first-name" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-first-name" ) ) . sendKeys ( NEW_USER_FNAME ) ; driver . findElement ( By . name ( "reg-last-name" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-last-name" ) ) . sendKeys ( NEW_USER_LNAME ) ; new Select ( driver . findElement ( By . name ( "secret-question" ) ) ) . selectByVisibleText ( SECRET_QUESTION ) ; driver . findElement ( By . name ( "secret-answer" ) ) . clear ( ) ; driver . findElement ( By . name ( "secret-answer" ) ) . sendKeys ( SECRET_ANSWER ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "My ▁ Items" ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( NEW_USER_NAME ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( driver , By . linkText ( NEW_USER_NAME ) ) , "Login ▁ failed ▁ for ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testFacebookSharing_237/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Gadget')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/facebook.png']" ) ) . click ( ) ; String facebookLink = driver . getCurrentUrl ( ) ; facebookLink = URLDecoder . decode ( URLDecoder . decode ( facebookLink , "UTF-8" ) , "UTF-8" ) ; assertTrue ( facebookLink . contains ( correctFacebookLink ) , "Facebook ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testGPlusSharing_238/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Gadget')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/google.png']" ) ) . click ( ) ; String gplusLink = driver . getCurrentUrl ( ) ; gplusLink = URLDecoder . decode ( gplusLink , "UTF-8" ) ; assertTrue ( gplusLink . contains ( correctGplusLink ) , "GPlus ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testTwitterSharing_239/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Gadget')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/twitter.png']" ) ) . click ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , "UTF-8" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testDiggSharing_240/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Gadget')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/diggit.png']" ) ) . click ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , "UTF-8" ) ; assertTrue ( diggLink . contains ( correctDiggLink ) , "Digg ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase_241/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/assets/servicex/new_caramel_page" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; assertTrue ( isElementPresent ( driver , By . id ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( driver , By . id ( "Edit" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="fakeTypeURL_242/tree/master/server/src/main/java/org/uiautomation/ios/server/command/web/GetHandler.java"> private void function ( String url ) { getWebDriver ( ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_243/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="gotoApplicationUrl_244/tree/master/java-maven/pi-calculator/pi-calculator-test/pi-calculator-selenium-test/src/main/java/com/jeeatwork/ci/exmaple/picalculator/test/selenium/SeleniumPiCalculator.java"> void function ( Context context ) { LOG . debug ( "Navigating ▁ to ▁ homepage" ) ; String homepageUrl = System . getProperty ( HOMEPAGE_UR ) ; if ( homepageUrl == null || homepageUrl . isEmpty ( ) ) { LOG . info ( String . format ( "System ▁ property ▁ \"%s\" ▁ not ▁ set, ▁ using ▁ default ▁ homepage ▁ url ▁ \"%s\"" , HOMEPAGE_UR , DEFAULT_HOMEPAGE_URL ) ) ; homepageUrl = DEFAULT_HOMEPAGE_URL ; } LOG . debug ( String . format ( "Trying ▁ to ▁ navigate ▁ to ▁ url ▁ \"%s\"" , homepageUrl ) ) ; context . driver ( ) . get ( homepageUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionOpenURL_245/tree/master/source/src/main/java/org/cerberus/service/webdriver/impl/WebDriverService.java"> public MessageEvent function ( Session session , String host , Identifier identifier , boolean withBase ) { MessageEvent message ; String url = "" ; try { url = identifier . getLocator ( ) ; if ( ! StringUtil . isNull ( url ) ) { if ( withBase ) { host = StringUtil . cleanHostURL ( host ) ; url = host + url ; } session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; } else { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; } } catch ( TimeoutException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL_TIMEOUT ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%TIMEOUT%" , String . valueOf ( session . getDefaultWait ( ) ) ) ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . WARN , exception . toString ( ) ) ; } catch ( WebDriverException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_SELENIUM_CONNECTIVITY ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . FATAL , exception . toString ( ) ) ; } return message ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionUrlLogin_246/tree/master/source/src/main/java/org/cerberus/service/webdriver/impl/WebDriverService.java"> public MessageEvent function ( Session session , String host , String uri ) { MessageEvent message ; host = StringUtil . cleanHostURL ( host ) ; String url = host + ( host . endsWith ( "/" ) ? uri . replace ( "/" , "" ) : uri ) ; try { session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; } catch ( TimeoutException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN_TIMEOUT ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%TIMEOUT%" , String . valueOf ( session . getDefaultWait ( ) ) ) ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . WARN , exception . toString ( ) ) ; } catch ( Exception e ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) + " ▁ " + e . getMessage ( ) ) ; } return message ; } </DOCUMENT>
<DOCUMENT_ID="OpenTargetURL_248/tree/master/src/main/java/com/atlassian/test/BPT_Auto/PageFactory/CommonPageModel.java"> public void function ( WebDriver driver , String url ) { driver . get ( url ) ; System . out . println ( "Start ▁ to ▁ open ▁ the ▁ url ▁ : ▁ " + url ) ; } </DOCUMENT>
<DOCUMENT_ID="testUserLogin_247/tree/master/src/test/java/ru/st/selenium/LoginTest.java"> public void function ( String user , String pass ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement usernameField = driver . findElement ( By . id ( "username" ) ) ; usernameField . clear ( ) ; usernameField . sendKeys ( user ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( pass ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionOpenURL_250/tree/master/source/src/main/java/org/cerberus/serviceEngine/impl/WebDriverService.java"> public MessageEvent function ( Session session , String host , String value , String property , boolean withBase ) { MessageEvent message ; String url = "null" ; try { if ( ! StringUtil . isNull ( value ) ) { url = value ; } else if ( ! StringUtil . isNull ( property ) ) { url = property ; } if ( ! StringUtil . isNull ( url ) ) { if ( withBase ) { url = "http: // " + host + url ; } session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; return message ; } } catch ( WebDriverException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_SELENIUM_CONNECTIVITY ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . FATAL , exception . toString ( ) ) ; return message ; } message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; return message ; } </DOCUMENT>
<DOCUMENT_ID="getDHCPClientList_249/tree/master/routerapi/src/main/java/vb/smarthome/routerAPI/driver/ClientDriver.java"> public List < DHCPClient > function ( ) { logger . info ( "Fetching ▁ DHCP ▁ clients" ) ; webDriver . get ( baseUrl ) ; webDriver . findElement ( By . id ( "pcPassword" ) ) . clear ( ) ; webDriver . findElement ( By . id ( "pcPassword" ) ) . sendKeys ( "admin" ) ; webDriver . findElement ( By . id ( "loginBtn" ) ) . click ( ) ; String title = webDriver . getTitle ( ) ; logger . debug ( "Page ▁ title:" + title ) ; WebDriver menuFrame1 = webDriver . switchTo ( ) . frame ( webDriver . findElement ( By . id ( "frame1" ) ) ) ; WebElement findElement = webDriver . findElement ( By . id ( "menu" ) ) ; findElement . findElement ( By . id ( "menu_dhcp" ) ) . click ( ) ; webDriver . findElement ( By . id ( "menu_dhcpclient" ) ) . click ( ) ; logger . debug ( "DHCP ▁ menu ▁ opened" ) ; webDriver . switchTo ( ) . defaultContent ( ) ; WebDriver menuFrame2 = webDriver . switchTo ( ) . frame ( webDriver . findElement ( By . id ( "frame2" ) ) ) ; webDriver . findElement ( By . id ( "updateBtn" ) ) . click ( ) ; logger . debug ( "DHCP ▁ clients ▁ updated" ) ; WebElement dhcpClientsTable = webDriver . findElement ( By . tagName ( "tbody" ) ) ; List < WebElement > dhcpClientsTableRows = dhcpClientsTable . findElements ( By . tagName ( "tr" ) ) ; List < DHCPClient > dhcpClients = new ArrayList < DHCPClient > ( ) ; for ( WebElement webElement : dhcpClientsTableRows ) { List < WebElement > dhcpClientsTableCols = webElement . findElements ( By . tagName ( "td" ) ) ; DHCPClient client = new DHCPClient ( ) ; client . setId ( Integer . parseInt ( dhcpClientsTableCols . get ( 0 ) . getText ( ) . trim ( ) ) ) ; client . setName ( dhcpClientsTableCols . get ( 1 ) . getText ( ) . trim ( ) ) ; client . setMacAddress ( dhcpClientsTableCols . get ( 2 ) . getText ( ) . trim ( ) ) ; client . setAssignedIP ( dhcpClientsTableCols . get ( 3 ) . getText ( ) . trim ( ) ) ; client . setLeaseTime ( dhcpClientsTableCols . get ( 4 ) . getText ( ) . trim ( ) ) ; dhcpClients . add ( client ) ; logger . info ( client . getId ( ) + " ▁ " + client . getName ( ) + " ▁ " + client . getMacAddress ( ) + " ▁ " + client . getAssignedIP ( ) + " ▁ " + client . getLeaseTime ( ) ) ; } return dhcpClients ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionUrlLogin_251/tree/master/source/src/main/java/org/cerberus/serviceEngine/impl/WebDriverService.java"> public MessageEvent function ( Session session , String host , String uri ) { MessageEvent message ; String url = "http: // " + host + ( host . endsWith ( "/" ) ? uri . replace ( "/" , "" ) : uri ) ; try { session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; return message ; } catch ( Exception e ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) + " ▁ " + e . getMessage ( ) ) ; return message ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginSuccess_253/tree/master/src/test/java/introwork/IntroWork1Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork1.html" ) ; String url = html . toURI ( ) . toString ( ) ; System . out . println ( url ) ; driver . get ( url ) ; Thread . sleep ( 1000 ) ; WebElement userName = driver . findElement ( By . id ( "user_name" ) ) ; userName . sendKeys ( "TestUser" ) ; Thread . sleep ( 1000 ) ; WebElement password = driver . findElement ( By . id ( "password" ) ) ; password . sendKeys ( "pass" ) ; Thread . sleep ( 1000 ) ; WebElement login = driver . findElement ( By . id ( "login" ) ) ; login . click ( ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; Thread . sleep ( 1000 ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginSuccess_252/tree/master/src/test/java/introwork/Work.java"> public void function ( ) throws Exception { String url = "http: // 192.168.99.100/" ; String url_goods = "http: // 192.168.99.100/products/detail/10002" ; driver . get ( url ) ; driver . get ( url_goods ) ; driver . findElement ( By . className ( "btn-primary" ) ) . click ( ) ; driver . findElement ( By . className ( "hover_change_image" ) ) . click ( ) ; driver . findElement ( By . className ( "hover_change_image" ) ) . click ( ) ; driver . get ( "http: // 192.168.99.100/shopping/nonmember" ) ; driver . findElement ( By . id ( "nonmember_name_name01" ) ) . sendKeys ( "Familyname" ) ; driver . findElement ( By . id ( "nonmember_name_name02" ) ) . sendKeys ( "Firstname" ) ; driver . findElement ( By . id ( "nonmember_kana_kana01" ) ) . sendKeys ( "familyname" ) ; driver . findElement ( By . id ( "nonmember_kana_kana02" ) ) . sendKeys ( "firstname" ) ; driver . findElement ( By . id ( "nonmember_company_name" ) ) . sendKeys ( "会社名" ) ; driver . findElement ( By . id ( "zip01" ) ) . sendKeys ( "000" ) ; driver . findElement ( By . id ( "zip02" ) ) . sendKeys ( "0000" ) ; WebElement selectBox0 = ( driver . findElement ( By . id ( "pref" ) ) ) ; Select select0 = new Select ( selectBox0 ) ; select0 . selectByValue ( "36" ) ; driver . findElement ( By . id ( "addr01" ) ) . sendKeys ( "都道府県11111" ) ; driver . findElement ( By . id ( "addr02" ) ) . sendKeys ( "町11111" ) ; driver . findElement ( By . id ( "nonmember_tel_tel01" ) ) . sendKeys ( "000" ) ; driver . findElement ( By . id ( "nonmember_tel_tel02" ) ) . sendKeys ( "0000" ) ; driver . findElement ( By . id ( "nonmember_tel_tel03" ) ) . sendKeys ( "0000" ) ; driver . findElement ( By . id ( "nonmember_fax_fax01" ) ) . sendKeys ( "00" ) ; driver . findElement ( By . id ( "nonmember_fax_fax02" ) ) . sendKeys ( "0000" ) ; driver . findElement ( By . id ( "nonmember_fax_fax03" ) ) . sendKeys ( "0000" ) ; driver . findElement ( By . id ( "nonmember_email" ) ) . sendKeys ( "matsumoto@example.com" ) ; driver . findElement ( By . id ( "nonmember_sex_1" ) ) . click ( ) ; WebElement selectBox = ( driver . findElement ( By . id ( "nonmember_job" ) ) ) ; Select select = new Select ( selectBox ) ; select . selectByValue ( "1" ) ; WebElement selectBox1 = ( driver . findElement ( By . id ( "nonmember_birth_year" ) ) ) ; Select select1 = new Select ( selectBox1 ) ; select1 . selectByValue ( "1993" ) ; WebElement selectBox2 = ( driver . findElement ( By . id ( "nonmember_birth_month" ) ) ) ; Select select2 = new Select ( selectBox2 ) ; select2 . selectByValue ( "1" ) ; WebElement selectBox3 = ( driver . findElement ( By . id ( "nonmember_birth_day" ) ) ) ; Select select3 = new Select ( selectBox3 ) ; select3 . selectByValue ( "7" ) ; driver . findElement ( By . id ( "singular" ) ) . click ( ) ; driver . findElement ( By . id ( "next-top" ) ) . click ( ) ; assertThat ( driver . findElement ( By . className ( "title" ) ) . getText ( ) , is ( "ご購入完了" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="checkThatInstalledSuccessfully_254/tree/master/src/test/java/EnvironmentCheckTest.java"> public void function ( ) { File html = new File ( "introWork/introWork1.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement userName = driver . findElement ( By . id ( "user_name" ) ) ; userName . sendKeys ( "TestUser" ) ; WebElement password = driver . findElement ( By . id ( "password" ) ) ; password . sendKeys ( "pass" ) ; WebElement login = driver . findElement ( By . id ( "login" ) ) ; login . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } </DOCUMENT>
<DOCUMENT_ID="urlToPng_256/tree/master/web-renderer-java/src/main/java/io/github/arnodb/webrenderer/WebRenderer.java"> public static byte [ ] function ( WebDriver driver , String url ) { driver . get ( url ) ; TakesScreenshot ts = ( TakesScreenshot ) driver ; byte [ ] data = ts . getScreenshotAs ( OutputType . BYTES ) ; return data ; } </DOCUMENT>
<DOCUMENT_ID="getGoogleAccessToken_255/tree/master/tests/appengine-tck-oauth/src/test/java/com/google/appengine/tck/oauth/ClientSideWebAppFlowTest.java"> private String function ( String email , String pw , String client_id , String redirect_uri , String scope ) { Property staticToken = property ( "authToken" ) ; if ( staticToken . exists ( ) ) { return staticToken . getPropertyValue ( ) ; } String requestTokenUrl = String . format ( "%s?response_type=token&client_id=%s&redirect_uri=%s&scope=%s" , GOOGLE_OAUTH2_REQUEST_TOKEN_URL , client_id , redirect_uri , scope ) ; String cacheKey = email + ":" + requestTokenUrl ; if ( tokenCache . containsKey ( cacheKey ) ) { return tokenCache . get ( cacheKey ) ; } driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( requestTokenUrl ) ; try { driver . findElement ( By . id ( "Email" ) ) . sendKeys ( email ) ; driver . findElement ( By . id ( "Passwd" ) ) . sendKeys ( pw ) ; driver . findElement ( By . id ( "signIn" ) ) . submit ( ) ; } catch ( NoSuchElementException nsee ) { String errMsg = driver . getCurrentUrl ( ) + " ▁ ----- ▁ " + driver . getPageSource ( ) ; throw new NoSuchElementException ( nsee . toString ( ) + " ▁ ----- ▁ " + errMsg ) ; } try { WebElement button = driver . findElement ( By . id ( "submit_approve_access" ) ) ; Graphene . waitModel ( driver ) . withTimeout ( 5 , TimeUnit . SECONDS ) . until ( ) . element ( button ) . is ( ) . enabled ( ) ; button . click ( ) ; } catch ( NoSuchElementException e ) { } String redirectUrlWithToken = driver . getCurrentUrl ( ) . replace ( "#access_token=" , "?access_token=" ) ; List < NameValuePair > params ; try { params = URLEncodedUtils . parse ( new URI ( redirectUrlWithToken ) , "UTF-8" ) ; } catch ( URISyntaxException urise ) { throw new IllegalStateException ( urise ) ; } String accessToken = null ; for ( NameValuePair param : params ) { if ( param . getName ( ) . equals ( "access_token" ) ) { accessToken = param . getValue ( ) ; } } assertNotNull ( "Token ▁ is ▁ null:" + driver . getCurrentUrl ( ) + " ▁ ----- ▁ " + driver . getPageSource ( ) , accessToken ) ; tokenCache . put ( cacheKey , accessToken ) ; return accessToken ; } </DOCUMENT>
<DOCUMENT_ID="goToServerRoot_258/tree/master/server/src/webtest/java/org/neo4j/server/webdriver/WebadminWebdriverLibrary.java"> public void function ( ) { d . get ( serverUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageTitle_257/tree/master/src/test/java/ru/yandex/autoschool/splinter/IndexResources/PageTitleTest.java"> public void function ( String url , String ER ) { driver . get ( url ) ; String title = driver . getTitle ( ) ; assertThat ( title , equalTo ( ER ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToWebadminStartPage_259/tree/master/server/src/webtest/java/org/neo4j/server/webdriver/WebadminWebdriverLibrary.java"> public void function ( ) { if ( isUsingDevDotHTML ( ) ) { d . get ( serverUrl + "webadmin/dev.html" ) ; } else if ( avoidRedirectAndGoStraightToWebAdminHomepage ( ) ) { d . get ( serverUrl + "webadmin/" ) ; } else { goToServerRoot ( ) ; } waitForTitleToBe ( "Neo4j ▁ Monitoring ▁ and ▁ Management ▁ Tool" ) ; } </DOCUMENT>
<DOCUMENT_ID="testWithWebDriver_260/tree/master/src/test/java/org/littleshoot/proxy/EndToEndStoppingTest.java"> public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = new DefaultHttpProxyServer ( port ) ; proxyServer . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( "localhost:%d" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = "http: // www.yahoo.com/" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } </DOCUMENT>
<DOCUMENT_ID="visitTestCases_261/tree/master/src/main/java/org/owasp/benchmark/tools/BenchmarkRunner.java"> public static void function ( AtomicInteger nextTest , int tests ) { String baseUrl = "https: // localhost:8443/benchmark/BenchmarkTest" ; FirefoxDriver driver = new FirefoxDriver ( ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; while ( nextTest . get ( ) <= tests ) { String test = "000000" + nextTest . getAndIncrement ( ) ; test = test . substring ( test . length ( ) - 5 ) ; try { String url = baseUrl + test + ".html" ; System . out . println ( "URL: ▁ " + url ) ; driver . get ( url ) ; for ( WebElement we : driver . findElements ( By . tagName ( "form" ) ) ) { we . submit ( ) ; } driver . get ( url ) ; Thread . sleep ( 500 ) ; String jQuerySelector = "#login-btn" ; js . executeScript ( "$(\"" + jQuerySelector + "\").click();" ) ; Thread . sleep ( 500 ) ; } catch ( Exception e ) { } } driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_263/tree/master/src/test/java/org/imaginea/test/automation/framework/keyword/webdriverbased/google/GoogleKeyword.java"> public void function ( String url ) { this . driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginProjectsLogout_262/tree/master/src/test/java/org/manathome/totask2/selenium/LoginProjectsLogout.java"> public void function ( ) throws Exception { LOG . debug ( "selenium: ▁ running ▁ test.." ) ; driver . get ( baseUrl + "/" ) ; assertTrue ( driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) . matches ( "^[\\s\\S]*totask2[\\s\\S]*$" ) ) ; assertEquals ( "edit ▁ weekly ▁ work ▁ hours.." , driver . findElement ( By . xpath ( " // a[contains(@href, ▁ '/weekEntry')]" ) ) . getText ( ) ) ; driver . findElement ( By . linkText ( "projects.." ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( "loginForm" ) ) . getText ( ) . matches ( "^[\\s\\S]*sign ▁ in[\\s\\S]*$" ) ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "unit-test-user" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "t123456" ) ; driver . findElement ( By . cssSelector ( "button.btn.btn-primary" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) . matches ( "^currently ▁ defined ▁ projects[\\s\\S]*$" ) ) ; driver . findElement ( By . xpath ( " // button[@value='sign ▁ out']" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( "div.container.paper-box" ) ) . getText ( ) . matches ( "^[\\s\\S]*you ▁ have ▁ been ▁ logged ▁ out[\\s\\S]*$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="a_test_login_page_264/tree/master/src/test/java/no/ntnu/team2/studyeasy/selenium/SeleniumTests.java"> public void function ( ) throws Throwable { System . out . println ( "This ▁ is ▁ test ▁ number ▁ 1" ) ; driver . get ( url ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( "email" ) ) . sendKeys ( "admin@test.com" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( "pwd" ) ) . sendKeys ( "1234" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( "btn-default" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( "calendarView" ) ) != null ) ; } </DOCUMENT>
<DOCUMENT_ID="b_test_headerNavigation_265/tree/master/src/test/java/no/ntnu/team2/studyeasy/selenium/SeleniumTests.java"> public void function ( ) throws Throwable { System . out . println ( "This ▁ is ▁ test ▁ number ▁ 2" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . get ( url ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( "users_link" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( "createUserForm" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( "orderRoom_link" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( "mapWrap" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( "createTimetable_link" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( "createTimetableForm" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( "calendar_link" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( "calendarView" ) ) != null ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_267/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_268/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentPos_269/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisiblePos_270/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentPos_271/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilTextPresent ( text ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearPos_272/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentPos_273/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWasitUntilElementPipedLocator_274/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( pipedLocator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilWebPageIsValidatedNeg_275/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilWebPageIsValidated ( new BasicPageImpl ( ) { @ Override public BasicPageImpl getPage ( ) { return this ; } } ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentNeg_276/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisibleNeg_277/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentNeg_278/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearNeg_279/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="c_test_calendar_266/tree/master/src/test/java/no/ntnu/team2/studyeasy/selenium/SeleniumTests.java"> public void function ( ) throws Throwable { System . out . println ( "This ▁ is ▁ test ▁ number ▁ 3" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . get ( url ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( "fc-agendaWeek-button" ) ) . click ( ) ; assert ( driver . findElement ( By . className ( "fc-agendaWeek-view" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( "fc-agendaDay-button" ) ) . click ( ) ; assert ( driver . findElement ( By . className ( "fc-agendaDay-view" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( "fc-month-button" ) ) . click ( ) ; assert ( driver . findElement ( By . className ( "fc-month-view" ) ) != null ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentNeg_280/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="go_to_the_page_282/tree/master/src/test/java/cn/shin/autotest/steps/CucumberSteps.java"> public void function ( String url ) throws Throwable { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testVaadinAbstractForm_283/tree/master/org.abstractform.vaadin/src/test/java/org/abstractform/vaadin/test/ITTestVaadinAbstractForm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/test" ) ; assertEquals ( "Search ▁ Key" , driver . findElement ( By . xpath ( " // div[@id='ROOT-2521314']/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[6]/div/div" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_281/tree/master/zeppelin/zeppelin-server/src/test/java/com/nflabs/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Start" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="testVaadinAbstractForm_284/tree/master/org.abstractform.itest/src/test/java/org/abstractform/vaadin/itest/test/ITTestAll.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/test" ) ; assertEquals ( "Sample ▁ Name" , driver . findElement ( By . xpath ( "( // input[@type='text'])[4]" ) ) . getAttribute ( "value" ) ) ; assertEquals ( "on" , driver . findElement ( By . id ( "gwt-uid-2" ) ) . getAttribute ( "value" ) ) ; driver . findElement ( By . cssSelector ( "span.v-button-caption" ) ) . click ( ) ; Thread . sleep ( 500 ) ; assertEquals ( "A" , driver . findElement ( By . xpath ( "( // input[@type='text'])[8]" ) ) . getAttribute ( "value" ) ) ; assertEquals ( "mail@nomail.org" , driver . findElement ( By . xpath ( "( // input[@type='text'])[7]" ) ) . getAttribute ( "value" ) ) ; assertEquals ( "▼Others" , driver . findElement ( By . cssSelector ( "span.v-button-caption" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( " // div[2]/div/div/span/span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; assertEquals ( "Otro ▁ nombre" , driver . findElement ( By . xpath ( "( // input[@type='text'])[4]" ) ) . getAttribute ( "value" ) ) ; assertEquals ( "B" , driver . findElement ( By . xpath ( "( // input[@type='text'])[8]" ) ) . getAttribute ( "value" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="should_find_saved_people_285/tree/master/src/test/java/com/exilesoft/javaee/PersonWebTest.java"> public void function ( ) throws Exception { JdbcConnectionPool dataSource = JdbcConnectionPool . create ( "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1" , "sa" , "sa" ) ; JdbcPersonRepository . createDatabaseSchema ( dataSource ) ; new EnvEntry ( "jdbc/primaryDs" , dataSource ) ; Server server = new Server ( 0 ) ; server . setHandler ( new WebAppContext ( "src/main/webapp" , "/" ) ) ; server . start ( ) ; String rootUrl = "http: // localhost:" + server . getConnectors ( ) [ 0 ] . getLocalPort ( ) + "/" ; WebDriver browser = new HtmlUnitDriver ( ) { @ Override public WebElement findElement ( By by ) { try { return super . findElement ( by ) ; } catch ( NoSuchElementException e ) { throw new NoSuchElementException ( "Can't ▁ find ▁ " + by + " ▁ in ▁ " + getPageSource ( ) ) ; } } } ; browser . get ( rootUrl ) ; browser . findElement ( By . linkText ( "Create ▁ person" ) ) . click ( ) ; browser . findElement ( By . name ( "full_name" ) ) . sendKeys ( "Darth ▁ Vader" ) ; browser . findElement ( By . name ( "create_person" ) ) . click ( ) ; browser . findElement ( By . linkText ( "Find ▁ people" ) ) . click ( ) ; assertThat ( browser . getPageSource ( ) ) . contains ( "Darth ▁ Vader" ) ; } </DOCUMENT>
<DOCUMENT_ID="redirectToLocation_286/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/ds/ui/integration/util/DSUIIntegrationTest.java"> public void function ( String domain , String location ) throws Exception { driver = getDriver ( ) ; String url = getBaseUrl ( ) + "/" + domain ; if ( location != null && ! location . isEmpty ( ) ) { url += "/" + location ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchTitle_288/tree/master/src/test/java/selenium/TitleSearch.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "catalog-search-input" ) ) . clear ( ) ; driver . findElement ( By . id ( "catalog-search-input" ) ) . sendKeys ( "waiting ▁ for ▁ godot" ) ; driver . findElement ( By . id ( "catalog-search-button" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Waiting ▁ for ▁ Godot ▁ [En ▁ attendant ▁ Godot. ▁ Engl.]. ▁ A ▁ tragicomedy ▁ in ▁ 2 ▁ acts. ▁ (1. ▁ publ.)" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testOrderBook_287/tree/master/src/test/java/selenium/BookOrder.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "catalog-search-input" ) ) . clear ( ) ; driver . findElement ( By . id ( "catalog-search-input" ) ) . sendKeys ( "beckett" ) ; driver . findElement ( By . id ( "catalog-search-button" ) ) . click ( ) ; driver . findElement ( By . id ( "exlidFacet3-0" ) ) . click ( ) ; driver . findElement ( By . id ( "exlidFacet4-0" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Wie ▁ es ▁ ist" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Bestellen" ) ) . click ( ) ; driver . findElement ( By . id ( "REQUEST_TAB_SIGN_IN_RECORD_3" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnPopularity_289/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-star" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , popularAsset1 ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , popularAsset1 , "Popularity ▁ Sort ▁ failed" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[2]/div/div/a/h4" ) ) . getText ( ) , popularAsset2 , "Popularity ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnCreatedTime_291/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-calendar" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , assetName ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Recent ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryGoogle_292/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Google" ) ) . click ( ) ; assertEquals ( 3 , driver . findElements ( By . cssSelector ( "div.asset-details" ) ) . size ( ) , "Google ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnAlphabeticalOrder_290/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-sort-alphabetical" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . xpath ( " // div[@id='assets-container']/div/div[3]/div/div/a/h4" ) , BUBBLE_CHART ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; assertEquals ( BAR_CHART , driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[2]/div/div/a/h4" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryTemplate_294/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Templates" ) ) . click ( ) ; assertEquals ( 6 , driver . findElements ( By . cssSelector ( "div.span3.asset" ) ) . size ( ) , "Templates ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryWSO2_293/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "WSO2" ) ) . click ( ) ; assertEquals ( 5 , driver . findElements ( By . cssSelector ( "div.asset-details" ) ) . size ( ) , "WSO2 ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryMenu_295/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Templates" ) ) . click ( ) ; assertEquals ( "Templates" , driver . findElement ( By . cssSelector ( "div.breadcrumb-head" ) ) . getText ( ) , "Category ▁ drop ▁ down ▁ not ▁ showing ▁ selected ▁ category ▁ " ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_296/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( assetCategory1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetUrl1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription1 ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase_298/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase_299/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_297/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( assetCategory2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetUrl2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( "Overview" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]" ) ) . getText ( ) , "Incorrect ▁ provider" ) ; assertEquals ( assetName , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]" ) ) . getText ( ) , "Incorrect ▁ asset ▁ name" ) ; assertEquals ( assetVersion , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( assetCategory2 , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]" ) ) . getText ( ) , "Incorrect ▁ Category" ) ; assertEquals ( assetUrl2 , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( assetDescription2 , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_300/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( providerName ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( assetCategory1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetUrl1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription1 ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="findElementPoll_302/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org.wso2.es.ui.integration.extension.util/ESWebDriver.java"> public void function ( By by , int pollCount ) { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_301/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( assetCategory2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetUrl2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( "Overview" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]" ) ) . getText ( ) , providerName , "Incorrect ▁ provider" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]" ) ) . getText ( ) , assetName , "Incorrect ▁ asset ▁ name" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]" ) ) . getText ( ) , assetVersion , "Incorrect ▁ version" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]" ) ) . getText ( ) , "WSO2" , "Incorrect ▁ Category" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]" ) ) . getText ( ) , assetUrl2 , "Incorrect ▁ URL" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]" ) ) . getText ( ) , assetDescription2 , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_303/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSearchGadgetListTestCase.java"> public void function ( ) throws Exception { ESUtil . login ( driver , baseUrl , "publisher" , userInfo . getUserName ( ) , userInfo . getPassword ( ) ) ; driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( assetAuthor ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( assetCategory ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetURL ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { String alert = closeAlertAndGetItsText ( ) ; log . warn ( alert + ": ▁ modal ▁ box ▁ appeared" ) ; } driver . findElementPoll ( By . linkText ( assetName ) , 10 ) ; driver . findElement ( By . cssSelector ( "a.btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , assetName ) ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "div.pull-left" ) , "Lifecycle ▁ - ▁ " + assetName ) ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "commentModalLabel" ) , "Add ▁ a ▁ comment" ) ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( "ok" ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "state" ) , "IN-REVIEW" ) ) ; assertEquals ( driver . findElement ( By . id ( "state" ) ) . getText ( ) , "IN-REVIEW" , "Not ▁ Promoted ▁ to ▁ In-Review" ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "commentModalLabel" ) , "Add ▁ a ▁ comment" ) ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( "ok" ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "state" ) , "PUBLISHED" ) ) ; assertEquals ( driver . findElement ( By . id ( "state" ) ) . getText ( ) , "PUBLISHED" , "Not ▁ Promoted ▁ to ▁ Published" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase_304/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase_306/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase_305/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store" ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( newUserName ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( newUserPwd ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( newUserPwd ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "My ▁ Items" ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; assertTrue ( isElementPresent ( By . linkText ( newUserName ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; driver . get ( baseUrl + "/publisher" ) ; assertTrue ( isElementPresent ( By . linkText ( newUserName ) ) , "Login ▁ failed ▁ for ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreBeforeAddRatings_307/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( "socialIfr" ) ) ) ; assertEquals ( "Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review" , driver . findElement ( By . cssSelector ( "div.com-guest" ) ) . getText ( ) ) ; assertEquals ( "Be ▁ the ▁ first ▁ one ▁ to ▁ review!" , driver . findElement ( By . cssSelector ( "p.com-first-review" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_308/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , assetType , providerName , assetName , assetVersion , createdTime ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + "/carbon/" ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ " + "tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonNavigationTop_310/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[1]/li" ) ) . click ( ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( " // h4[contains(.," + "'" + LINE_PLUS_BAR_CHART + "')]" ) ) . getText ( ) , "Gadgets ▁ Menu ▁ not ▁ working" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[2]/li" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( " // h4[contains(.," + "'" + AMAZON + "')]" ) ) . getText ( ) , "Sites ▁ Menu ▁ not ▁ working" ) ; driver . findElement ( By . cssSelector ( "a.brand" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonNavigationLinks_311/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store" ) ; driver . findElement ( By . cssSelector ( "a.brand" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Recent ▁ Gadgets" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . xpath ( " // h4[contains(.,'" + LINE_CHART + "')]" ) ) . getText ( ) , "Recent ▁ Gadgets ▁ link ▁ not ▁ working" ) ; driver . findElement ( By . cssSelector ( "a.brand" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Recent ▁ Sites" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( " // h4[contains(.,'" + AMAZON + "')]" ) ) . getText ( ) , "Recent ▁ Sites ▁ link ▁ not ▁ working" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonHomePage_309/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store" ) ; try { assertTrue ( isElementPresent ( By . cssSelector ( "a.brand" ) ) , "Home ▁ Page ▁ error: ▁ Logo ▁ missing" ) ; assertEquals ( "Sign ▁ in" , driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Sign ▁ in ▁ button ▁ missing" ) ; assertTrue ( isElementPresent ( By . id ( "btn-register" ) ) , "Home ▁ Page ▁ error: ▁ Register ▁ button" + " ▁ missing" ) ; assertEquals ( "Gadget" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[1]/li" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Gadget ▁ menu ▁ missing" ) ; assertEquals ( "Site" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[2]/li" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Site ▁ menu ▁ missing" ) ; assertEquals ( "Recent ▁ Gadgets" , driver . findElement ( By . linkText ( "Recent ▁ Gadgets" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Recent ▁ Gadgets ▁ links ▁ missing" ) ; assertEquals ( "Recent ▁ Sites" , driver . findElement ( By . linkText ( "Recent ▁ Sites" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Recent ▁ Sites ▁ links ▁ missing" ) ; assertTrue ( isElementPresent ( By . id ( "search" ) ) , "Home ▁ Page ▁ error: ▁ Search ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "div.span3.store-right ▁ > ▁ div.row ▁ > ▁ div" + ".span3" ) ) , "Home ▁ Page ▁ error: ▁ Recent ▁ Added ▁ side ▁ list ▁ missing" ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } verificationErrors = failOnError ( verificationErrors ) ; } </DOCUMENT>
<DOCUMENT_ID="testLinksFromPage_313/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; try { assertEquals ( firstAsset , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Gadget ▁ list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[contains(text(),'Line ▁ Chart')]" ) ) . click ( ) ; assertEquals ( "Line ▁ Chart" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Recently ▁ added ▁ list" ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } verificationErrors = failOnError ( verificationErrors ) ; } </DOCUMENT>
<DOCUMENT_ID="testGadgetPage_312/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; try { assertEquals ( "Gadget" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . getText ( ) , "Gadget ▁ Menu ▁ missing" ) ; assertEquals ( "Line ▁ Plus ▁ Bar ▁ Chart" , driver . findElement ( By . xpath ( " // a[contains(text(),'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . getText ( ) , "Gadgets ▁ missing" ) ; firstAsset = driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ; assertEquals ( "Recently ▁ Added" , driver . findElement ( By . xpath ( " // div[@id='container-assets']/div/div[2]/div[1]/div/h4" ) ) . getText ( ) , "Recently ▁ Added ▁ section ▁ missing" ) ; assertEquals ( "Line ▁ Plus ▁ Bar ▁ Chart" , driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . getText ( ) , "Recently ▁ added ▁ Gadgets ▁ missing" ) ; assertEquals ( "Tags" , driver . findElement ( By . xpath ( " // div[@id='container-assets']/div/div[2]/div[2]/div/h4" ) ) . getText ( ) , "Tags ▁ section ▁ missing" ) ; assertTrue ( isElementPresent ( By . linkText ( "charts" ) ) , "Tags ▁ missing ▁ (charts ▁ tag)" ) ; assertEquals ( "All ▁ Categories" , driver . findElement ( By . cssSelector ( "div.breadcrumb-head" ) ) . getText ( ) , "Category ▁ drop ▁ down ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "i.icon-star" ) ) , "Popularity ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "i.icon-sort-alphabetical" ) ) , "Alphabetical ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "i.icon-calendar" ) ) , "Recent ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( By . id ( "search" ) ) , "Search ▁ tray ▁ missing" ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } verificationErrors = failOnError ( verificationErrors ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase_314/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreLogout_316/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store" ) ; driver . findElement ( By . linkText ( currentUserName ) ) . click ( ) ; driver . findElement ( By . linkText ( "Sign ▁ out" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "Sign ▁ in" ) ) , "Sign ▁ in ▁ link ▁ missing" ) ; assertEquals ( "Register" , driver . findElement ( By . id ( "btn-register" ) ) . getText ( ) , "Register ▁ button ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreLogin_315/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "My ▁ Items" ) ) , "My ▁ Items ▁ link ▁ missing" ) ; assertTrue ( isElementPresent ( By . linkText ( currentUserName ) ) , "Logged ▁ in ▁ user ▁ not ▁ shown" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase_317/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase_319/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore_318/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void function ( ) throws Exception { driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( userInfo . getUserName ( ) ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( assetCreatedTime ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetUrl ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . findElement ( By . cssSelector ( "a.btn" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . linkText ( "Publishing ▁ Asset" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( lcComment ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( lcComment ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; driver . get ( baseUrl + "/store" ) ; driver . findElementPoll ( By . xpath ( " // a[contains(.,'" + assetName + "')]" ) , 5 ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "div.asset-author-category ▁ > ▁ ul ▁ > ▁ li" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( assetDescription , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_321/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; AssetUtil . updateAsset ( driver , baseUrl , assetType , assetName , assetDescription ) ; driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , emailPwd , email , updateNotificationSubject ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_320/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , assetType , currentUserName , assetName , assetVersion , createdTime ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + "/carbon/" ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ " + "tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase_322/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_323/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org.wso2.es.ui.integration.util/ESUtil.java"> public static void function ( ESWebDriver driver , String url ) { driver . get ( url + adminConsoleSuffix ) ; driver . findElement ( By . linkText ( "Sign-out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase_324/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; driver . findElementPoll ( By . id ( "assetListingPageH1" ) , 30 ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_325/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; AssetUtil . updateAsset ( driver , baseUrl , assetType , assetName , assetDescription ) ; driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , emailPwd , email , updateNotificationSubject ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase_326/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="findElementPoll_327/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org.wso2.es.ui.integration.util/ESWebDriver.java"> public void function ( By by , int pollCount ) { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } </DOCUMENT>
<DOCUMENT_ID="testListPageSortByName_328/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher" ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . partialLinkText ( "NAME" ) ) . click ( ) ; assertEquals ( nameSortAsset1 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[1]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; assertEquals ( nameSortAsset2 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[14]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_329/tree/master/src/main/java/com/crawljax/browser/WebDriverBackedEmbeddedBrowser.java"> public void function ( String url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( "goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded" , e ) ; return ; } } </DOCUMENT>
<DOCUMENT_ID="testSeleLoginLogout_331/tree/master/src/test/java/put/io2/nerdlounge/SeleLoginLogout.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "nick" ) ) . clear ( ) ; driver . findElement ( By . id ( "nick" ) ) . sendKeys ( "user" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "pass" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertEquals ( "user" , driver . findElement ( By . cssSelector ( "p.navbar-text.navbar-right ▁ > ▁ span" ) ) . getText ( ) ) ; driver . findElement ( By . linkText ( "Logout" ) ) . click ( ) ; assertEquals ( "Please ▁ input ▁ your ▁ credentials" , driver . findElement ( By . xpath ( " // span" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_332/tree/master/web/src/main/java/org/testeditor/fixture/web/WebFixture.java"> public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="testSeleCreateLocation_330/tree/master/src/test/java/put/io2/nerdlounge/SeleCreateLocation.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ location" ) ) . click ( ) ; driver . findElement ( By . id ( "nick" ) ) . clear ( ) ; driver . findElement ( By . id ( "nick" ) ) . sendKeys ( "user" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "pass" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . clear ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "Huehue" ) ; driver . findElement ( By . id ( "city" ) ) . clear ( ) ; driver . findElement ( By . id ( "city" ) ) . sendKeys ( "Huehueland" ) ; driver . findElement ( By . id ( "code" ) ) . clear ( ) ; driver . findElement ( By . id ( "code" ) ) . sendKeys ( "66-666" ) ; driver . findElement ( By . id ( "address" ) ) . clear ( ) ; driver . findElement ( By . id ( "address" ) ) . sendKeys ( "Huehue ▁ st." ) ; driver . findElement ( By . id ( "public" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertEquals ( "Name: ▁ Huehue" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; assertEquals ( "City: ▁ Huehueland" , driver . findElement ( By . xpath ( " // p[2]" ) ) . getText ( ) ) ; assertEquals ( "Postal: ▁ 66-666" , driver . findElement ( By . xpath ( " // p[3]" ) ) . getText ( ) ) ; assertEquals ( "Street: ▁ Huehue ▁ st." , driver . findElement ( By . xpath ( " // p[4]" ) ) . getText ( ) ) ; assertEquals ( "Public: ▁ true" , driver . findElement ( By . xpath ( " // p[5]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSortItem_334/tree/master/src/test/java/UITestBase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Innovation ▁ Item" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Owner" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Submission ▁ Date" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Theme" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "span.glyphicon.glyphicon-chevron-up" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "span.glyphicon.glyphicon-chevron-down" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='albums']/div[3]/div/div[4]/div/div/div/a/span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "div.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ a" ) ) . click ( ) ; driver . findElement ( By . id ( "releaseYear" ) ) . clear ( ) ; driver . findElement ( By . id ( "releaseYear" ) ) . sendKeys ( "4/30/2015" ) ; driver . findElement ( By . xpath ( " // div[3]/button" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_333/tree/master/web/src/main/java/org/testeditor/fixture/web/AbstractWebFixture.java"> public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="testAddItem_335/tree/master/src/test/java/UITestBase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "add ▁ an ▁ idea" ) ) . click ( ) ; driver . findElement ( By . id ( "title" ) ) . clear ( ) ; driver . findElement ( By . id ( "title" ) ) . sendKeys ( "Authorization ▁ as ▁ a ▁ Service" ) ; driver . findElement ( By . id ( "artist" ) ) . clear ( ) ; driver . findElement ( By . id ( "artist" ) ) . sendKeys ( "Patrick ▁ Graziosi" ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "That ▁ guy ▁ in ▁ the ▁ picture ▁ loved ▁ it!" ) ; driver . findElement ( By . id ( "releaseYear" ) ) . clear ( ) ; driver . findElement ( By . id ( "releaseYear" ) ) . sendKeys ( "4/30/2016" ) ; driver . findElement ( By . id ( "genre" ) ) . clear ( ) ; driver . findElement ( By . id ( "genre" ) ) . sendKeys ( "Right ▁ Speed ▁ IT" ) ; driver . findElement ( By . xpath ( " // div[3]/button" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSoiduLoomine_337/tree/master/Automaattestid/Soidu loomine.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/soidud" ) ; driver . findElement ( By . id ( "est" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "button.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . id ( "lahtekoht" ) ) . clear ( ) ; driver . findElement ( By . id ( "lahtekoht" ) ) . sendKeys ( "asd" ) ; driver . findElement ( By . id ( "sihtkoht" ) ) . clear ( ) ; driver . findElement ( By . id ( "sihtkoht" ) ) . sendKeys ( "asd" ) ; driver . findElement ( By . id ( "lisainfo" ) ) . clear ( ) ; driver . findElement ( By . id ( "lisainfo" ) ) . sendKeys ( "asd" ) ; driver . findElement ( By . id ( "lisasoitnupp" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Lisamine ▁ oli ▁ edukas" . equals ( driver . findElement ( By . xpath ( " // div/div/div/div" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAddAndDeleteItem_336/tree/master/src/test/java/UITestBase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "add ▁ an ▁ idea" ) ) . click ( ) ; driver . findElement ( By . id ( "title" ) ) . clear ( ) ; driver . findElement ( By . id ( "title" ) ) . sendKeys ( "Test ▁ Idea ▁ 2" ) ; driver . findElement ( By . id ( "artist" ) ) . clear ( ) ; driver . findElement ( By . id ( "artist" ) ) . sendKeys ( "Patrick ▁ Graziosi" ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "Test ▁ Idea ▁ 2" ) ; driver . findElement ( By . id ( "releaseYear" ) ) . clear ( ) ; driver . findElement ( By . id ( "releaseYear" ) ) . sendKeys ( "4/30/2016" ) ; driver . findElement ( By . id ( "genre" ) ) . clear ( ) ; driver . findElement ( By . id ( "genre" ) ) . sendKeys ( "Cloud ▁ Ready" ) ; driver . findElement ( By . xpath ( " // div[3]/button" ) ) . click ( ) ; driver . findElement ( By . linkText ( "add ▁ an ▁ idea" ) ) . click ( ) ; driver . findElement ( By . id ( "title" ) ) . clear ( ) ; driver . findElement ( By . id ( "title" ) ) . sendKeys ( "Test ▁ Idea ▁ 3" ) ; driver . findElement ( By . id ( "artist" ) ) . clear ( ) ; driver . findElement ( By . id ( "artist" ) ) . sendKeys ( "Patrick ▁ Graziosi" ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "Test ▁ Idea ▁ 3" ) ; driver . findElement ( By . id ( "releaseYear" ) ) . clear ( ) ; driver . findElement ( By . id ( "releaseYear" ) ) . sendKeys ( "4/30/2016" ) ; driver . findElement ( By . id ( "genre" ) ) . clear ( ) ; driver . findElement ( By . id ( "genre" ) ) . sendKeys ( "Connected ▁ Workforce" ) ; driver . findElement ( By . xpath ( " // div[3]/button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='albums']/div[3]/div/div[5]/div/div/div/a/span" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'delete')])[5]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='albums']/div[3]/div/div[5]/div/div/div/a/span" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'delete')])[5]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testRegistreerimineFail_338/tree/master/Automaattestid/Registreerimine_fail.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/login" ) ; driver . findElement ( By . id ( "kasutajanimi" ) ) . clear ( ) ; driver . findElement ( By . id ( "kasutajanimi" ) ) . sendKeys ( "Testkasutaja" ) ; driver . findElement ( By . id ( "eesnimi" ) ) . clear ( ) ; driver . findElement ( By . id ( "eesnimi" ) ) . sendKeys ( "Test" ) ; driver . findElement ( By . id ( "perenimi" ) ) . clear ( ) ; driver . findElement ( By . id ( "perenimi" ) ) . sendKeys ( "Kasutaja1" ) ; driver . findElement ( By . id ( "eesnimi" ) ) . clear ( ) ; driver . findElement ( By . id ( "eesnimi" ) ) . sendKeys ( "Test1" ) ; driver . findElement ( By . id ( "kasutajanimi" ) ) . clear ( ) ; driver . findElement ( By . id ( "kasutajanimi" ) ) . sendKeys ( "Testkasutaja1" ) ; driver . findElement ( By . id ( "parool" ) ) . clear ( ) ; driver . findElement ( By . id ( "parool" ) ) . sendKeys ( "aaa" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "testkasutaja@hot.ee1" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "testkasutaja@hot.ee" ) ; driver . findElement ( By . id ( "telnr" ) ) . clear ( ) ; driver . findElement ( By . id ( "telnr" ) ) . sendKeys ( "55123123" ) ; driver . findElement ( By . id ( "regamisnupp" ) ) . click ( ) ; try { assertEquals ( "The ▁ Parool ▁ field ▁ must ▁ be ▁ at ▁ least ▁ 8 ▁ characters ▁ in ▁ length." , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSisseLogimineFBga_339/tree/master/Automaattestid/Sisse logimine FBga.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/login" ) ; driver . findElement ( By . id ( "engout" ) ) . click ( ) ; try { assertEquals ( "Pöidlapüüdja ▁ - ▁ Home" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "loginButton" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "LOG ▁ OUT" . equals ( driver . findElement ( By . id ( "logout" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSoidugaLiitumineJubaLiitunud_341/tree/master/Automaattestid/Soiduga liitumine juba liitunud.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/soidud" ) ; driver . findElement ( By . linkText ( "SÕIDUD" ) ) . click ( ) ; driver . findElement ( By . id ( "est" ) ) . click ( ) ; try { assertEquals ( "Pöidlapüüdja ▁ - ▁ Sõidud" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( " // tbody[@id='innertable']/tr/td[2]" ) ) . click ( ) ; try { assertEquals ( "Oled ▁ juba ▁ selle ▁ sõiduga ▁ liitunud" , driver . findElement ( By . xpath ( " // div/div/div/div" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSisselogimineVale_340/tree/master/Automaattestid/Sisselogimine_vale.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/login" ) ; driver . findElement ( By . id ( "estout" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "button.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "Testkasutaja" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "valeparool" ) ; driver . findElement ( By . id ( "logimisnupp" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Invalid ▁ username ▁ or ▁ password" . equals ( driver . findElement ( By . xpath ( " // div/div/div/div" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSoidugaLiitumine_342/tree/master/Automaattestid/Soiduga liitumine.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/soidud" ) ; driver . findElement ( By . linkText ( "SÕIDUD" ) ) . click ( ) ; driver . findElement ( By . id ( "est" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // tbody[@id='innertable']/tr/td[2]" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Liitusid ▁ sõiduga" . equals ( driver . findElement ( By . xpath ( " // div/div/div/div" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSoiduKustutamineKaasreisjana_343/tree/master/Automaattestid/Soidu kustutamine(kaasreisjana).java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/soidud" ) ; driver . findElement ( By . linkText ( "LIITUTUD ▁ SÕIDUD" ) ) . click ( ) ; driver . findElement ( By . id ( "est" ) ) . click ( ) ; try { assertEquals ( "Pöidlapüüdja ▁ - ▁ Liitutud ▁ sõidud" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( " // tbody[@id='innertable']/tr/td[2]" ) ) . click ( ) ; try { assertEquals ( "Lahkusid ▁ sõidust" , driver . findElement ( By . xpath ( " // div/div/div/div" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testValjaLogimine_344/tree/master/Automaattestid/Valja logimine.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/soidud" ) ; driver . findElement ( By . linkText ( "SÕIDUD" ) ) . click ( ) ; driver . findElement ( By . id ( "est" ) ) . click ( ) ; driver . findElement ( By . id ( "logout" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pöidlapüüdja ▁ - ▁ Pealeht" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Logi ▁ sisse" . equals ( driver . findElement ( By . cssSelector ( "button.btn.btn-default" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="openHelloWorldPage_345/tree/master/fantacalcio-web/src/test-acceptance/java/com/javangarda/fantacalcio/web/pages/Site.java"> public HelloWorldPage function ( ) { this . webDriver . get ( url ) ; return helloWorldPage ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_346/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/ds/ui/integration/util/DSUIIntegrationTest.java"> public static void function ( DSWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . cssSelector ( ".right ▁ > ▁ a" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_347/tree/master/src/main/java/automation/applogic/NavigationHelper.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_348/tree/master/src/main/java/automation/applogic/NavigationHelper.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_349/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="goToServerRoot_350/tree/master/server/src/webtest/java/org/neo4j/server/webdriver/WebadminWebdriverLibrary.java"> public void function ( ) { d . get ( serverUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testStudentListPage_351/tree/master/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"> public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select schoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; schoolSelect . selectByVisibleText ( "Illinois ▁ PS145" ) ; Select courseSelect = new Select ( driver . findElement ( By . id ( "courseSelect" ) ) ) ; courseSelect . selectByVisibleText ( "Algebra" ) ; Select sectionSelect = new Select ( driver . findElement ( By . id ( "sectionSelect" ) ) ) ; sectionSelect . selectByVisibleText ( "Section1" ) ; WebElement textDiv = driver . findElement ( By . id ( "studentDiv" ) ) ; String studentText = textDiv . getText ( ) ; assertTrue ( studentText . contains ( "Dawson ▁ Deborah" ) ) ; assertFalse ( studentText . contains ( "Random ▁ name" ) ) ; sectionSelect = new Select ( driver . findElement ( By . id ( "sectionSelect" ) ) ) ; sectionSelect . selectByVisibleText ( "Section2" ) ; WebElement temp = driver . findElement ( By . id ( "studentDiv" ) ) ; studentText = temp . getText ( ) ; assertTrue ( studentText . contains ( "Marks ▁ Hector" ) ) ; assertFalse ( studentText . contains ( "Dawson ▁ Deborah" ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testUsersHaveDiffLists_352/tree/master/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"> public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select userASchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userASchoolItem = userASchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; driver . get ( studentListUrl + usernameParamPrefix + userB ) ; Select userBSchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userBSchoolItem = userBSchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; assertFalse ( userBSchoolItem . equals ( userASchoolItem ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginPage_353/tree/master/src/integrationtest/java/org/slc/sli/selenium/controller/LoginSeleniumITest.java"> public void function ( ) { driver . get ( loginUrl ) ; WebElement username = driver . findElement ( By . name ( "username" ) ) ; username . sendKeys ( testBadUser ) ; WebElement errorMessage = driver . findElement ( By . name ( "errorMessage" ) ) ; assertTrue ( errorMessage . getCssValue ( "display" ) . equalsIgnoreCase ( "none" ) ) ; WebElement loginForm = driver . findElement ( By . name ( "loginForm" ) ) ; loginForm . submit ( ) ; errorMessage = driver . findElement ( By . name ( "errorMessage" ) ) ; assertTrue ( errorMessage . getCssValue ( "display" ) . equalsIgnoreCase ( "block" ) ) ; username = driver . findElement ( By . name ( "username" ) ) ; username . sendKeys ( testUser ) ; loginForm = driver . findElement ( By . name ( "loginForm" ) ) ; loginForm . submit ( ) ; WebElement body = driver . findElement ( By . tagName ( "body" ) ) ; String bodyText = body . getText ( ) ; assertTrue ( bodyText . contains ( "Select ▁ an ▁ application" ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="startGraphHostAppInNewWinndow_355/tree/master/selenium2/src/at/mannaz/socialsnapshot/SocialSnapshot.java"> private static void function ( String graphUrl ) { WebDriver driver = new FirefoxDriver ( ) ; driver . get ( graphUrl ) ; driver . findElement ( By . id ( "continue" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentPos_356/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisiblePos_357/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentPos_358/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilTextPresent ( text ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearPos_359/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; try { WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentPos_360/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentNeg_361/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; fail ( "Wait ▁ Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="collectOnlineData_354/tree/master/java/99-project/bilibili-lucky-princess/trunk/src/main/java/exp/blp/core/PageDataAnalyzer.java"> public void function ( ) { if ( StrUtils . isEmpty ( httpUrl ) ) { UIUtils . log ( "无效的HTTP, ▁ 终止操作." ) ; return ; } isStop = false ; UIUtils . log ( "正在开启浏览器捕获数据..." ) ; WebDriver driver = null ; try { driver = browserDriver . getWebDriver ( ) ; UIUtils . log ( "正在打开网页 ▁ [" + httpUrl + "] ▁ ..." ) ; driver . get ( httpUrl ) ; UIUtils . openHomePage ( ) ; UIUtils . log ( "统计在线用户数据开始..." ) ; int lastSize = 0 ; while ( isStop ( ) == false ) { WebElement chatMsgList = driver . findElement ( By . id ( CHAT_MSG_LIST_NAME ) ) ; String data = chatMsgList . getText ( ) ; int curSize = data . length ( ) ; if ( lastSize != curSize ) { lastSize = curSize ; analyzer . statistics ( data ) ; log . info ( "已刷新在线用户数据." ) ; } else { log . info ( "在线用户数据无变化." ) ; } browserDriver . refresh ( driver ) ; } UIUtils . log ( "统计在线用户数据结束." ) ; } catch ( NoSuchElementException e ) { log . error ( "加载网页元素失败: ▁ [{}]." , httpUrl , e ) ; } catch ( Throwable e ) { log . error ( "统计在线用户数据异常: ▁ [{}]." , httpUrl , e ) ; } finally { UIUtils . log ( "浏览器已关闭." ) ; isStop = true ; browserDriver . close ( driver ) ; System . exit ( 0 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisibleNeg_362/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; fail ( "Wait ▁ Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearNeg_364/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; fail ( "Runtime ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentNeg_363/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } fail ( "Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentNeg_365/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } fail ( "Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_367/tree/master/adressbook/src/com/example/fw/ApplicationManager.java"> public void function ( ) { driver . get ( baseUrl + "/" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_368/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void function ( ) { } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_369/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void function ( ) { } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_370/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testExampleCategorical2_366/tree/master/src/test/java/org/mousephenotype/www/ChartsPageTest.java"> public void function ( ) throws Exception { String testName = "testExampleCategorical2" ; List < String > errorList = new ArrayList ( ) ; List < String > successList = new ArrayList ( ) ; List < String > exceptionList = new ArrayList ( ) ; Date start = new Date ( ) ; int targetCount = 1 ; String mgiGeneAcc = "MGI:98373" ; String impressParameter = "M-G-P_014_001_001" ; String zygosity = "homozygote" ; String geneSymbol = "Sparc" ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 3 , TimeUnit . SECONDS ) ; String tempUrl = baseUrl + "/charts?accession=" + mgiGeneAcc + "&parameter_stable_id=" + impressParameter + "&zygosity=" + zygosity ; driver . get ( tempUrl ) ; String title = driver . findElement ( By . className ( "title" ) ) . getText ( ) ; if ( ! title . contains ( geneSymbol ) ) { errorList . add ( "ERROR: ▁ Expected ▁ title ▁ to ▁ contain ▁ '" + geneSymbol + "' ▁ but ▁ was ▁ '" + title + "'. ▁ ▁ URL: ▁ " + tempUrl + "'" ) ; } else { successList . add ( "OK" ) ; } TestUtils . printEpilogue ( testName , start , errorList , exceptionList , successList , targetCount , 1 ) ; System . out . println ( ) ; } </DOCUMENT>
<DOCUMENT_ID="fakeTypeURL_371/tree/master/server/src/main/java/org/uiautomation/ios/server/command/web/GetHandler.java"> private void function ( String url ) { getSession ( ) . getRemoteWebDriver ( ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_373/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_374/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_375/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_376/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="testGoogleSeleniumWebdriverTestCase_372/tree/master/src/com/example/tests/GoogleSeleniumWebdriverTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "gbqfq" ) ) . clear ( ) ; driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( "selenium ▁ hq" ) ; } </DOCUMENT>
<DOCUMENT_ID="checkAddFilmFromCatalog_377/tree/master/src/test/java/ru/st/selenium/SearchFilmFromCatalog.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( "input#username" ) ) ; WebElement password = driver . findElement ( By . name ( "password" ) ) ; WebElement login = driver . findElement ( By . name ( "submit" ) ) ; userName . sendKeys ( "admin" ) ; password . sendKeys ( "admin" ) ; login . click ( ) ; String movieTitle = "Óíåñ¸ííûå ▁ âåòðîì" ; WebElement addMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "a[href='./?go=add']" ) ) ) ; addMovie . click ( ) ; WebElement imdbsearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "imdbsearch" ) ) ) ; imdbsearchField . sendKeys ( movieTitle ) ; driver . findElement ( By . cssSelector ( "input[value='Search']" ) ) . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "table.imdbmovies ▁ tr:nth-child(1)" ) ) ) ; String year = driver . findElement ( By . cssSelector ( "table.imdbmovies ▁ tr:nth-child(1) ▁ td.year" ) ) . getText ( ) ; movie . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "form#updateform" ) ) ) ; WebElement save = driver . findElement ( By . id ( "submit" ) ) ; save . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( ".maininfo_full ▁ h2" ) ) ) ; System . out . println ( movieTitle + " ▁ (" + year + ")" ) ; assertEquals ( h2Title . getText ( ) , movieTitle + " ▁ (" + year + ")" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmWithoutResult_379/tree/master/src/test/java/ru/st/selenium/SearchFilmWithoutResult.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( "input#username" ) ) ; WebElement password = driver . findElement ( By . name ( "password" ) ) ; WebElement login = driver . findElement ( By . name ( "submit" ) ) ; userName . sendKeys ( "admin" ) ; password . sendKeys ( "admin" ) ; login . click ( ) ; String movieTitle = "Ïî ▁ ýòîìó ▁ çàïðîñó ▁ ÿ ▁ íè÷åãî ▁ íå ▁ íàéäó" ; WebElement addMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "a[href='./?go=add']" ) ) ) ; addMovie . click ( ) ; WebElement imdbsearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "imdbsearch" ) ) ) ; imdbsearchField . sendKeys ( movieTitle ) ; driver . findElement ( By . cssSelector ( "input[value='Search']" ) ) . click ( ) ; WebElement resultNotFound = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "#content ▁ .content ▁ div" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElement ( resultNotFound , "No ▁ movies ▁ where ▁ found." ) ) ; assertEquals ( resultNotFound . getText ( ) , "No ▁ movies ▁ where ▁ found." ) ; } </DOCUMENT>
<DOCUMENT_ID="checkRemoveFilm_380/tree/master/src/test/java/ru/st/selenium/RemoveFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( "input#username" ) ) ; WebElement password = driver . findElement ( By . name ( "password" ) ) ; WebElement login = driver . findElement ( By . name ( "submit" ) ) ; userName . sendKeys ( "admin" ) ; password . sendKeys ( "admin" ) ; login . click ( ) ; String movieTitle = "Äåâ÷àòà" ; String year = "1961" ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "#results ▁ img[title='" + movieTitle + "']" ) ) ) ; movie . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( ".maininfo ▁ h2" ) ) ) ; AssertJUnit . assertEquals ( h2Title . getText ( ) , movieTitle + " ▁ (" + year + ")" ) ; driver . findElement ( By . cssSelector ( "#content ▁ nav ▁ ul ▁ li:nth-child(7) ▁ a" ) ) . click ( ) ; Alert alert = wait . until ( ExpectedConditions . alertIsPresent ( ) ) ; alert . accept ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "#results" ) ) ) ; assertEquals ( 0 , driver . findElements ( By . cssSelector ( "#results ▁ img[title='" + movieTitle + "']" ) ) . size ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCaptureTutorial13_381/tree/master/pitalium-sample/src/main/java/com/htmlhifive/pitalium/sample/PtlSampleTest.java"> public void function ( ) throws Exception { String url = "conts/web/view/tutorial/interacting-with-controllers" ; driver . get ( url ) ; ScreenshotArgument arg = ScreenshotArgument . builder ( "tutorial13" ) . addNewTarget ( ) . addHiddenElementSelectors ( GOTOTOP_DOM_ELEMENT ) . build ( ) ; assertionView . assertView ( arg ) ; } </DOCUMENT>
<DOCUMENT_ID="testCaptureTutorialTop_382/tree/master/pitalium-sample/src/main/java/com/htmlhifive/pitalium/sample/PtlSampleTest.java"> public void function ( ) throws Exception { String url = "conts/web/view/tutorial/menu" ; driver . get ( url ) ; PtlWebElement e = ( PtlWebElement ) driver . findElement ( By . cssSelector ( ".wikimodel-freestanding" ) ) ; DoubleValueRect rect = e . getDoubleValueRect ( ) ; driver . executeScript ( "arguments[0].width=arguments[1]" , e , rect . getWidth ( ) ) ; driver . executeScript ( "arguments[0].height=arguments[1]" , e , rect . getHeight ( ) ) ; driver . executeScript ( "arguments[0].src=''" , e ) ; ScreenshotArgument arg = ScreenshotArgument . builder ( "tutorialTop" ) . addNewTarget ( ) . addHiddenElementSelectors ( GOTOTOP_DOM_ELEMENT ) . build ( ) ; assertionView . assertView ( arg ) ; } </DOCUMENT>
<DOCUMENT_ID="AbstractWebWorkFlow_383/tree/master/functional-test/src/main/java/org/zanata/workflow/AbstractWebWorkFlow.java"> public function ( ) { String baseUrl = WebDriverFactory . INSTANCE . getHostUrl ( ) ; hostUrl = appendTrailingSlash ( baseUrl ) ; driver = WebDriverFactory . INSTANCE . getDriver ( ) ; driver . get ( hostUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="goToHome_384/tree/master/functional-test/src/main/java/org/zanata/workflow/AbstractWebWorkFlow.java"> public HomePage function ( ) { new BasePage ( driver ) . waitForAMoment ( ) . until ( new Predicate < WebDriver > ( ) { @ Override public boolean apply ( WebDriver input ) { driver . get ( hostUrl ) ; return new HomePage ( driver ) . isPageValid ( ) ; } } ) ; return new HomePage ( driver ) ; } </DOCUMENT>
<DOCUMENT_ID="goToDashboard_385/tree/master/functional-test/src/main/java/org/zanata/workflow/AbstractWebWorkFlow.java"> public DashboardBasePage function ( ) { driver . get ( hostUrl + "dashboard" ) ; return new DashboardBasePage ( driver ) ; } </DOCUMENT>
<DOCUMENT_ID="delayGetAndDelay_386/tree/master/ittest/src/test/java/com/flexdms/flexims/it/TestITbase.java"> public void function ( String url ) throws InterruptedException { Thread . sleep ( 2000 ) ; driver . get ( url ) ; Thread . sleep ( 2000 ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_387/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/ESUtil.java"> public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( "Sign-out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="checkEditFilm_378/tree/master/src/test/java/ru/st/selenium/EditFilmTest.java"> public void function ( ) throws Exception { String movieTitle = "Äåâ÷àòà" ; String imdbNumber = "0134614" ; String alsoKnowAs = "Devchata" ; String duration = "92" ; String rating = "8.362" ; String pathToImage = "C:/Users/Evgenia/Pictures/devchata.jpg" ; String linkTrailer = "https: // www.youtube.com/watch?v=LaCUkjlQuVw" ; String year = "1961" ; driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( "input#username" ) ) ; WebElement password = driver . findElement ( By . name ( "password" ) ) ; WebElement login = driver . findElement ( By . name ( "submit" ) ) ; userName . sendKeys ( "admin" ) ; password . sendKeys ( "admin" ) ; login . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "#results ▁ div[title='" + movieTitle + "']" ) ) ) ; movie . click ( ) ; WebElement edit = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "#content ▁ nav ▁ ul ▁ li:nth-child(3) ▁ a" ) ) ) ; edit . click ( ) ; WebElement imdbidField = driver . findElement ( By . name ( "imdbid" ) ) ; imdbidField . sendKeys ( imdbNumber ) ; WebElement akaField = driver . findElement ( By . name ( "aka" ) ) ; akaField . sendKeys ( alsoKnowAs ) ; WebElement durationField = driver . findElement ( By . name ( "duration" ) ) ; durationField . sendKeys ( duration ) ; WebElement ratingField = driver . findElement ( By . name ( "rating" ) ) ; ratingField . sendKeys ( rating ) ; WebElement fileInput = driver . findElement ( By . id ( "cover" ) ) ; fileInput . sendKeys ( pathToImage ) ; WebElement trailerField = driver . findElement ( By . name ( "trailer" ) ) ; trailerField . sendKeys ( linkTrailer ) ; WebElement save = driver . findElement ( By . id ( "submit" ) ) ; save . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( ".maininfo ▁ h2" ) ) ) ; assertEquals ( h2Title . getText ( ) , movieTitle + " ▁ (" + year + ")" ) ; driver . findElement ( By . cssSelector ( "#content ▁ nav ▁ ul ▁ li:nth-child(6) ▁ a" ) ) . click ( ) ; WebElement imdbidField2 = driver . findElement ( By . name ( "imdbid" ) ) ; WebElement akaField2 = driver . findElement ( By . name ( "aka" ) ) ; WebElement durationField2 = driver . findElement ( By . name ( "duration" ) ) ; WebElement ratingField2 = driver . findElement ( By . name ( "rating" ) ) ; WebElement trailerField2 = driver . findElement ( By . name ( "trailer" ) ) ; assertEquals ( imdbidField2 . getAttribute ( "value" ) , imdbNumber ) ; assertEquals ( akaField2 . getText ( ) , alsoKnowAs ) ; assertEquals ( durationField2 . getAttribute ( "value" ) , duration ) ; assertEquals ( ratingField2 . getAttribute ( "value" ) , rating ) ; assertEquals ( trailerField2 . getAttribute ( "value" ) , linkTrailer ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase_388/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . name ( "reg-email" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-email" ) ) . sendKeys ( NEW_USER_EMAIL ) ; driver . findElement ( By . name ( "reg-first-name" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-first-name" ) ) . sendKeys ( NEW_USER_FNAME ) ; driver . findElement ( By . name ( "reg-last-name" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-last-name" ) ) . sendKeys ( NEW_USER_LNAME ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . id ( "regFormSuc" ) ) , "User ▁ creation ▁ failed." ) ; driver . findElement ( By . id ( "signInLink" ) ) . click ( ) ; driver . findElementPoll ( By . id ( "username" ) , MAX_POLL_COUNT ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "#logedInUser" ) ) ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "My ▁ Items" ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( NEW_USER_NAME ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; } </DOCUMENT>
<DOCUMENT_ID="getAnalyzeMarketAvg_389/tree/master/src/main/java/general/virt/MainPage.java"> public MainPage function ( int session ) throws InterruptedException { String mainUrl = driver . getCurrentUrl ( ) ; driver . get ( "http: // virtonomica.ru/vera/main/globalreport/marketing/by_trade_at_cities" ) ; String productName = "" ; Select s1 = new Select ( driver . findElement ( By . id ( "__product_category_list" ) ) ) ; for ( int i = 0 ; i < s1 . getOptions ( ) . size ( ) ; i ++ ) { s1 . selectByIndex ( i ) ; for ( int j = 0 ; j < driver . findElements ( By . xpath ( " // *[@id='__products_list']/span" ) ) . size ( ) ; j ++ ) { waitForElement ( " // *[@id='__products_list']/span[" + ( j + 1 ) + "] // img" ) ; driver . findElement ( By . xpath ( " // *[@id='__products_list']/span[" + ( j + 1 ) + "] // img" ) ) . click ( ) ; productName = driver . findElement ( By . xpath ( " // *[@id='__products_list']/span[" + ( j + 1 ) + "] // img" ) ) . getAttribute ( "title" ) ; getMarketAvgData ( session , productName ) ; } s1 = new Select ( driver . findElement ( By . id ( "__product_category_list" ) ) ) ; } driver . get ( mainUrl ) ; logMe ( "Wait ▁ 11 ▁ minutes..." ) ; return new MainPage ( driver ) ; } </DOCUMENT>
<DOCUMENT_ID="getAnalyzeMarket_390/tree/master/src/main/java/general/virt/MainPage.java"> public MainPage function ( String productName , String typeProduct , int session ) throws InterruptedException { logMe ( "-----------------------------------------------" ) ; logMe ( productName ) ; logMe ( "-----------------------------------------------" ) ; String [ ] countries = { "Болгария" , "Венесуэла" , "Германия" , "Греция" , "Казахстан" , "Канада" , "Куба" , "Латвия" , "Литва" , "Нидерланды" , "Норвегия" , "Россия" , "Украина" , "Финляндия" , "Франция" , "Эстония" } ; String mainUrl = driver . getCurrentUrl ( ) ; driver . get ( "http: // virtonomica.ru/vera/main/globalreport/marketing/by_trade_at_cities" ) ; Select s1 = new Select ( driver . findElement ( By . id ( "__product_category_list" ) ) ) ; s1 . selectByVisibleText ( typeProduct ) ; waitForElement ( " // img[@alt='" + productName + "']" ) ; waitForElementVisible ( " // img[@alt='" + productName + "']" ) ; driver . findElement ( By . xpath ( " // img[@alt='" + productName + "']" ) ) . click ( ) ; int counter = 0 ; Select c1 = new Select ( driver . findElements ( By . xpath ( " // *[@id='mainContent']/fieldset/table[2] // select" ) ) . get ( 0 ) ) ; for ( int i = 0 ; i < countries . length ; i ++ ) { c1 . selectByVisibleText ( countries [ i ] ) ; Select c2 = new Select ( driver . findElements ( By . xpath ( " // *[@id='mainContent']/fieldset/table[2] // select" ) ) . get ( 1 ) ) ; for ( int j = 1 ; j < c2 . getOptions ( ) . size ( ) ; j ++ ) { c2 . selectByIndex ( j ) ; Select c3 = new Select ( driver . findElements ( By . xpath ( " // *[@id='mainContent']/fieldset/table[2] // select" ) ) . get ( 2 ) ) ; for ( int k = 1 ; k < c3 . getOptions ( ) . size ( ) ; k ++ ) { c3 . selectByIndex ( k ) ; getMarketData ( session , productName ) ; logMe ( "Completed: ▁ " + counter ) ; counter ++ ; c3 = new Select ( driver . findElements ( By . xpath ( " // *[@id='mainContent']/fieldset/table[2] // select" ) ) . get ( 2 ) ) ; } c2 = new Select ( driver . findElements ( By . xpath ( " // *[@id='mainContent']/fieldset/table[2] // select" ) ) . get ( 1 ) ) ; } c1 = new Select ( driver . findElements ( By . xpath ( " // *[@id='mainContent']/fieldset/table[2] // select" ) ) . get ( 0 ) ) ; } driver . get ( mainUrl ) ; logMe ( "Wait ▁ 11 ▁ minutes..." ) ; Thread . sleep ( 5 * 60 * 1000 ) ; return new MainPage ( driver ) ; } </DOCUMENT>
<DOCUMENT_ID="test_calculate_two_values_392/tree/master/src/test/java/com/seleniumsimplified/webdriver/datadriven/CsvDataDrivenTest.java"> public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( "number1" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( "number2" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( "function" ) ) ; functionList . findElement ( By . cssSelector ( "option[value='" + this . function + "']" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( "calculate" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "answer" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="test_calculate_two_values_393/tree/master/src/test/java/com/seleniumsimplified/webdriver/datadriven/BasicDataDrivenTest.java"> public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( "number1" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( "number2" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( "function" ) ) ; functionList . findElement ( By . cssSelector ( "option[value='" + this . function + "']" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( "calculate" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "answer" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLogOutputInHtmlResponse_394/tree/master/src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"> public void function ( ) throws Exception { String url = getBaseUrl ( ) ; logger . info ( "making ▁ request ▁ to ▁ '{}'" , url ) ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( "Bootstrap ▁ 101 ▁ Template" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( "return ▁ logged.length;" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLogOutputInServletResponse_395/tree/master/src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"> public void function ( ) throws Exception { String url = getBaseUrl ( ) + "/testservlet" ; logger . info ( "making ▁ request ▁ to ▁ '{}'" , url ) ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( "TestServlet" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( "return ▁ logged.length;" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLogOutputInForwardedRequest_396/tree/master/src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"> public void function ( ) throws Exception { String url = getBaseUrl ( ) + "/forwardservlet" ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( "WEB-INF/jsp/forward.jsp" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; System . out . println ( source ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( "return ▁ logged.length;" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmNegative_397/tree/master/src/test/java/selenium/tests/SearchFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement search_field = driver . findElement ( By . xpath ( " // div[@id='content']/section/nav/div[@id='search'] // input[@id='q']" ) ) ; search_field . click ( ) ; search_field . clear ( ) ; search_field . sendKeys ( "Hobbit" ) ; search_field . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . xpath ( " // div[@id='results']/div[contains(text(), ▁ \"No ▁ movies ▁ where ▁ found.\")]" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmPositive_398/tree/master/src/test/java/selenium/tests/SearchFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; int film_count = driver . findElements ( By . xpath ( " // div[@id='results'] // div[@class='movie_box']" ) ) . size ( ) ; int film_countAfter ; WebElement search_field = driver . findElement ( By . xpath ( " // div[@id='content']/section/nav/div[@id='search'] // input[@id='q']" ) ) ; search_field . click ( ) ; search_field . clear ( ) ; search_field . sendKeys ( "Interstellar" ) ; search_field . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . xpath ( " // div[@id='results']/a // div[@class='title']/self::div[contains(text(),\"Interstellar\")]" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; film_countAfter = driver . findElements ( By . xpath ( " // div[@id='results'] // div[@class='movie_box']" ) ) . size ( ) ; try { assertNotEquals ( film_count , film_countAfter ) ; } catch ( Exception e ) { verificationErrors . append ( e . toString ( ) ) ; } List < WebElement > fMovies = driver . findElements ( By . xpath ( " // div[@id='results'] // div[@class='movie_box'] // div[@class='title']" ) ) ; String title ; for ( WebElement movieBox : fMovies ) { try { assertTrue ( movieBox . getText ( ) . contains ( "Interstellar" ) ) ; } catch ( Exception e ) { verificationErrors . append ( e . toString ( ) ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testElementsExists_399/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/ActivateLibrariesTest.java"> public void function ( ) { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement component = this . findWebElementByClassName ( OUTER_COMPONENT ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "div" , component . getTagName ( ) ) ; this . findWebElementByClassName ( OPTION_RENDERED ) ; } </DOCUMENT>
<DOCUMENT_ID="testRenderedOption_400/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/ActivateLibrariesTest.java"> public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseRenderedOption = this . findWebElementByClassName ( OPTION_RENDERED ) ; String [ ] content = browser . getPageSource ( ) . split ( "arquillian_activateLibraries_selector" ) ; Assert . assertTrue ( content [ 1 ] . startsWith ( "\"><!--ButterFaces ▁ information" ) ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; content = browser . getPageSource ( ) . split ( "arquillian_activateLibraries_selector" ) ; Assert . assertFalse ( content [ 1 ] . startsWith ( "\"><!--ButterFaces ▁ information" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testElementsExists_401/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/CommandButtonTest.java"> public void function ( ) { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "a" , component . getTagName ( ) ) ; this . findWebElementByClassName ( OPTION_RENDERED ) ; this . findWebElementByClassName ( OPTION_VALUE ) ; this . findWebElementByClassName ( OPTION_GLYPHICON ) ; this . findWebElementByClassName ( CLICKS_SPAN ) ; } </DOCUMENT>
<DOCUMENT_ID="testRenderedOption_402/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/CommandButtonTest.java"> public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseRenderedOption = this . findWebElementByClassName ( OPTION_RENDERED ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNull ( "Element ▁ should ▁ not ▁ be ▁ rendered ▁ but ▁ was." , findNullableWebElementByClassName ( BUTTER_COMPONENT ) ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNotNull ( "Element ▁ should ▁ be ▁ rendered ▁ but ▁ was ▁ not." , findNullableWebElementByClassName ( BUTTER_COMPONENT ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testValueOption_403/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/CommandButtonTest.java"> public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseValueOption = this . findWebElementByClassName ( OPTION_VALUE ) ; showcaseValueOption . clear ( ) ; guardHttp ( showcaseValueOption ) . submit ( ) ; WebElement component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertTrue ( component . getText ( ) . isEmpty ( ) ) ; guardAjax ( showcaseValueOption ) . sendKeys ( "hello" ) ; component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertEquals ( "hello" , component . getText ( ) ) ; guardAjax ( showcaseValueOption ) . sendKeys ( " ▁ world!" ) ; component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertEquals ( "hello ▁ world!" , component . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGlyphiconOption_404/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/CommandButtonTest.java"> public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final Select glyphicon = new Select ( this . findWebElementByClassName ( OPTION_GLYPHICON ) ) ; guardAjax ( glyphicon ) . selectByIndex ( 0 ) ; WebElement component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; List < WebElement > spans = component . findElements ( By . cssSelector ( "span.butter-component-glyphicon" ) ) ; Assert . assertEquals ( "Find ▁ span ▁ but ▁ span ▁ should ▁ not ▁ been ▁ rendered." , 0 , spans . size ( ) ) ; guardAjax ( glyphicon ) . selectByIndex ( 1 ) ; spans = component . findElements ( By . cssSelector ( "span.butter-component-glyphicon" ) ) ; Assert . assertEquals ( "Could ▁ not ▁ find ▁ span ▁ tag ▁ in ▁ showcase ▁ component." , 1 , spans . size ( ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "glyphicon" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "glyphicon-thumbs-up" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "glyphicon-lg" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "butter-component-glyphicon" ) ) ; guardAjax ( glyphicon ) . selectByIndex ( 2 ) ; spans = component . findElements ( By . cssSelector ( "span.butter-component-glyphicon" ) ) ; Assert . assertEquals ( "Could ▁ not ▁ find ▁ span ▁ tag ▁ in ▁ showcase ▁ component." , 1 , spans . size ( ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "fa" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "fa-language" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "fa-lg" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( "class" ) . contains ( "butter-component-glyphicon" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testElementsExists_405/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/NumberComponentTest.java"> public void function ( ) { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement outerComponent = this . findWebElementByClassName ( ARQUILLIAN_CONTAINER ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "div" , outerComponent . getTagName ( ) ) ; final WebElement component = outerComponent . findElement ( By . className ( "butter-component" ) ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "div" , component . getTagName ( ) ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "button" , component . findElement ( By . className ( "bootstrap-touchspin-up" ) ) . getTagName ( ) ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "button" , component . findElement ( By . className ( "bootstrap-touchspin-down" ) ) . getTagName ( ) ) ; Assert . assertEquals ( "Wrong ▁ tag ▁ name" , "input" , this . findButterInputComponent ( ) . getTagName ( ) ) ; this . findWebElementByClassName ( OPTION_RENDERED ) ; this . findWebElementByClassName ( OPTION_AJAX ) ; this . findWebElementByClassName ( OUTPUT_VALUE ) ; } </DOCUMENT>
<DOCUMENT_ID="testRenderedOption_406/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/NumberComponentTest.java"> public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseRenderedOption = this . findWebElementByClassName ( OPTION_RENDERED ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNull ( "Element ▁ should ▁ not ▁ be ▁ rendered ▁ but ▁ was." , findNullableButterComponent ( ) ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNotNull ( "Element ▁ should ▁ be ▁ rendered ▁ but ▁ was ▁ not." , findNullableButterComponent ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAjaxOption_407/tree/master/test/src/test/java/de/larmic/butterfaces/test/component/NumberComponentTest.java"> public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final Select showcaseAjaxOption = new Select ( this . findWebElementByClassName ( OPTION_AJAX ) ) ; WebElement number = this . findButterInputComponent ( ) ; number . sendKeys ( "23" ) ; number . submit ( ) ; Assert . assertEquals ( "23" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; guardAjax ( showcaseAjaxOption ) . selectByIndex ( 1 ) ; guardAjax ( this . findButtonUp ( ) ) . click ( ) ; Assert . assertEquals ( "24" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; guardAjax ( this . findButtonUp ( ) ) . click ( ) ; Assert . assertEquals ( "25" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; guardAjax ( this . findButtonDown ( ) ) . click ( ) ; Assert . assertEquals ( "24" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="seleniumTestRun_408/tree/master/src/test/java/org/sahagin/report/HtmlReportTest.java"> private void function ( File indexHtml , boolean chrome ) { WebDriver driver ; if ( chrome ) { boolean onTravisCI = StringUtils . equals ( System . getenv ( "CI" ) , "true" ) && StringUtils . equals ( System . getenv ( "TRAVIS" ) , "true" ) ; boolean onCircleCI = StringUtils . equals ( System . getenv ( "CI" ) , "true" ) && StringUtils . equals ( System . getenv ( "CIRCLECI" ) , "true" ) ; Assume . assumeTrue ( ! onTravisCI ) ; if ( ! onCircleCI ) { System . setProperty ( "webdriver.chrome.driver" , chromeDriverPath ( ) ) ; } driver = new ChromeDriver ( ) ; } else { driver = new FirefoxDriver ( ) ; } try { driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; String indexHtmlUrl = "file: // /" + indexHtml . getAbsolutePath ( ) ; driver . get ( indexHtmlUrl ) ; driver . findElement ( By . linkText ( "sample.SampleTest.shouldSucceed" ) ) . click ( ) ; driver . navigate ( ) . back ( ) ; driver . findElement ( By . linkText ( "sample.SampleTest.shouldFail" ) ) . click ( ) ; } finally { quietQuit ( driver ) ; } } </DOCUMENT>
<DOCUMENT_ID="testIDETest1_409/tree/master/src/test/java/com/selflearning/webdriver/IDETest1.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/ss/" ) ; driver . findElement ( By . cssSelector ( "em ▁ > ▁ a" ) ) . click ( ) ; driver . findElement ( By . linkText ( "网友速递" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'网友速递')])[2]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "img[alt=\"新足迹\"]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "论坛信息" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getUptimeTest_410/tree/master/src/test/java/de/spqrinfo/selenium/ZenossTest.java"> public void function ( ) { final WebDriver driver = new FirefoxDriver ( ) ; final String zenossUrl = System . getProperty ( "zenossUrl" ) ; final String zenossUsername = System . getProperty ( "zenossUsername" ) ; final String zenossPassword = System . getProperty ( "zenossPassword" ) ; if ( zenossUrl == null || zenossUsername == null || zenossPassword == null ) { System . out . println ( "Skipping ▁ test ▁ because ▁ of ▁ missing ▁ system ▁ properties!" ) ; } driver . get ( zenossUrl ) ; final WebElement username = driver . findElement ( By . name ( "__ac_name" ) ) ; username . sendKeys ( zenossUsername ) ; final WebElement password = driver . findElement ( By . name ( "__ac_password" ) ) ; password . sendKeys ( zenossPassword ) ; password . submit ( ) ; System . out . println ( "Page ▁ title ▁ is: ▁ " + driver . getTitle ( ) ) ; new WebDriverWait ( driver , 10 ) . until ( ( WebDriver d ) -> { return d . getTitle ( ) . toLowerCase ( ) . contains ( "dashboard" ) ; } ) ; final WebElement searchBox = driver . findElement ( By . id ( "searchbox-query" ) ) ; searchBox . sendKeys ( "localhost" ) ; new WebDriverWait ( driver , 5 ) . until ( ( WebDriver d ) -> { final WebElement excerpt = d . findElement ( By . className ( "excerpt" ) ) ; return null != excerpt && excerpt . getText ( ) . contains ( "etiscan-1" ) ; } ) ; final WebElement excerpt = driver . findElement ( By . className ( "excerpt" ) ) ; excerpt . click ( ) ; new WebDriverWait ( driver , 5 ) . until ( ( WebDriver d ) -> { return d . getTitle ( ) . toLowerCase ( ) . endsWith ( "etiscan-1" ) ; } ) ; final WebElement uptime = driver . findElement ( By . name ( "uptime" ) ) ; System . out . println ( "Uptime: ▁ " + uptime . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_411/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_412/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_413/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_414/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_415/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_416/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilmPositive_417/tree/master/src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ; addMovieButton . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 50 ) ; WebElement imdbidField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "imdbid" ) ) ) ; imdbidField . clear ( ) ; imdbidField . sendKeys ( "1111" ) ; String filmTitle = "My ▁ Test ▁ Film" ; WebElement filmTitleField = driver . findElement ( By . name ( "name" ) ) ; filmTitleField . clear ( ) ; filmTitleField . sendKeys ( filmTitle ) ; WebElement akaField = driver . findElement ( By . name ( "aka" ) ) ; akaField . clear ( ) ; akaField . sendKeys ( "Selenium ▁ First ▁ Test" ) ; int year = 1989 ; String yearToStr = new Integer ( year ) . toString ( ) ; WebElement yearField = driver . findElement ( By . name ( "year" ) ) ; yearField . clear ( ) ; yearField . sendKeys ( yearToStr ) ; WebElement durationField = driver . findElement ( By . name ( "duration" ) ) ; durationField . clear ( ) ; durationField . sendKeys ( "120" ) ; WebElement ratingField = driver . findElement ( By . name ( "rating" ) ) ; ratingField . clear ( ) ; ratingField . sendKeys ( "5" ) ; WebElement formatField = driver . findElement ( By . id ( "formats" ) ) ; formatField . clear ( ) ; formatField . sendKeys ( "DVD" ) ; WebElement ownRadioButtonNo = driver . findElement ( By . id ( "own_no" ) ) ; ownRadioButtonNo . click ( ) ; WebElement seenRadioButtonNo = driver . findElement ( By . id ( "seen_no" ) ) ; seenRadioButtonNo . click ( ) ; WebElement loanedRadioButtonYes = driver . findElement ( By . id ( "loaned_yes" ) ) ; loanedRadioButtonYes . click ( ) ; WebElement loanNameField = driver . findElement ( By . name ( "loanname" ) ) ; loanNameField . clear ( ) ; loanNameField . sendKeys ( "John ▁ Doe" ) ; WebElement loanDateField = driver . findElement ( By . name ( "loandate" ) ) ; loanDateField . clear ( ) ; loanDateField . sendKeys ( "2015-04-24" ) ; driver . findElement ( By . id ( "cover" ) ) . sendKeys ( ( new File ( "cover.jpg" ) . getAbsolutePath ( ) ) ) ; WebElement trailerUrlField = driver . findElement ( By . name ( "trailer" ) ) ; trailerUrlField . clear ( ) ; trailerUrlField . sendKeys ( "http: // youtube.com" ) ; WebElement notesField = driver . findElement ( By . name ( "notes" ) ) ; notesField . clear ( ) ; notesField . sendKeys ( "notes" ) ; WebElement taglinesField = driver . findElement ( By . name ( "taglines" ) ) ; taglinesField . clear ( ) ; taglinesField . sendKeys ( "tag" ) ; WebElement plotOutLinesField = driver . findElement ( By . name ( "plotoutline" ) ) ; plotOutLinesField . clear ( ) ; plotOutLinesField . sendKeys ( "plot_outline" ) ; WebElement plotsField = driver . findElement ( By . name ( "plots" ) ) ; plotsField . clear ( ) ; plotsField . sendKeys ( "plots" ) ; WebElement languagesField = driver . findElement ( By . id ( "text_languages_0" ) ) ; languagesField . clear ( ) ; languagesField . sendKeys ( "langs" ) ; WebElement subtitlesField = driver . findElement ( By . name ( "subtitles" ) ) ; subtitlesField . clear ( ) ; subtitlesField . sendKeys ( "subtitles" ) ; WebElement audioField = driver . findElement ( By . name ( "audio" ) ) ; audioField . clear ( ) ; audioField . sendKeys ( "audio" ) ; WebElement videoField = driver . findElement ( By . name ( "video" ) ) ; videoField . clear ( ) ; videoField . sendKeys ( "video" ) ; WebElement countryField = driver . findElement ( By . name ( "country" ) ) ; countryField . clear ( ) ; countryField . sendKeys ( "country" ) ; WebElement genresField = driver . findElement ( By . name ( "genres" ) ) ; genresField . clear ( ) ; genresField . sendKeys ( "genres" ) ; WebElement directorField = driver . findElement ( By . name ( "director" ) ) ; directorField . clear ( ) ; directorField . sendKeys ( "director" ) ; WebElement writerField = driver . findElement ( By . name ( "writer" ) ) ; writerField . clear ( ) ; writerField . sendKeys ( "writer" ) ; WebElement producerField = driver . findElement ( By . name ( "producer" ) ) ; producerField . clear ( ) ; producerField . sendKeys ( "producer" ) ; WebElement musicField = driver . findElement ( By . name ( "music" ) ) ; musicField . clear ( ) ; musicField . sendKeys ( "music" ) ; WebElement castField = driver . findElement ( By . name ( "cast" ) ) ; castField . clear ( ) ; castField . sendKeys ( "cast" ) ; WebElement saveFilmButton = driver . findElement ( By . id ( "submit" ) ) ; saveFilmButton . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "movie" ) ) ) ; WebElement titleAndYear = movie . findElement ( By . tagName ( "h2" ) ) ; assertTrue ( titleAndYear . getText ( ) . equals ( filmTitle + " ▁ (" + yearToStr + ")" ) ) ; WebElement goHomeButton = driver . findElement ( By . linkText ( "Home" ) ) ; goHomeButton . click ( ) ; WebElement movies = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "results" ) ) ) ; assertTrue ( isElementPresent ( movies , ( By . cssSelector ( "img[alt=\"" + filmTitle + "\"]" ) ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilmFromImdb_418/tree/master/src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ; addMovieButton . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; WebElement imdbSearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "imdbsearch" ) ) ) ; imdbSearchField . clear ( ) ; imdbSearchField . sendKeys ( "123456" ) ; WebElement imdbSearchButton = driver . findElement ( By . xpath ( "/html/body/div/div/div/section/div/form/table/tbody/tr[2]/td/input" ) ) ; imdbSearchButton . click ( ) ; WebElement searchedMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . linkText ( "Home ▁ and ▁ Away" ) ) ) ; searchedMovie . click ( ) ; WebElement saveFilmButton = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "submit" ) ) ) ; saveFilmButton . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "movie" ) ) ) ; WebElement titleAndYear = movie . findElement ( By . tagName ( "h2" ) ) ; assertTrue ( titleAndYear . getText ( ) . equals ( "Home ▁ and ▁ Away ▁ (1988)" ) ) ; WebElement goHomeButton = driver . findElement ( By . linkText ( "Home" ) ) ; goHomeButton . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilmNoYear_419/tree/master/src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ; addMovieButton . click ( ) ; WebElement filmTitleField = driver . findElement ( By . name ( "name" ) ) ; filmTitleField . clear ( ) ; filmTitleField . sendKeys ( "My ▁ Test ▁ Film" ) ; WebElement saveFilmButton = driver . findElement ( By . id ( "submit" ) ) ; saveFilmButton . click ( ) ; WebElement errorLabel = driver . findElement ( By . xpath ( "/html/body/div/div/div/section/div/div/form/table/tbody/tr[4]/td[2]/label" ) ) ; assertTrue ( errorLabel . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginToApplication_420/tree/master/src/test/java/ru/abbyy/lingvolive/LoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String siteUsername = PropertyLoader . loadProperty ( "site.username" ) ; String sitePassword = PropertyLoader . loadProperty ( "site.password" ) ; WebElement usernameField = driver . findElement ( By . id ( "username" ) ) ; usernameField . clear ( ) ; usernameField . sendKeys ( siteUsername ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( sitePassword ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; Thread . sleep ( 200 ) ; WebElement logoutButton = driver . findElement ( By . xpath ( "/html/body/div[1]/div/header/div/nav/ul/li[4]" ) ) ; assertTrue ( logoutButton . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchNegative_421/tree/master/src/test/java/ru/abbyy/lingvolive/SearchFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; List < WebElement > films = driver . findElements ( By . className ( "movie_box" ) ) ; WebElement searchField = driver . findElement ( By . id ( "q" ) ) ; searchField . clear ( ) ; searchField . sendKeys ( "rainbow" + Keys . RETURN ) ; Thread . sleep ( 500 ) ; List < WebElement > newFilms = driver . findElements ( By . className ( "movie_box" ) ) ; assertTrue ( newFilms . isEmpty ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testDeleteFilmPositive_422/tree/master/src/test/java/ru/abbyy/lingvolive/DeleteFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; List < WebElement > films = driver . findElements ( By . className ( "movie_box" ) ) ; String filmId = films . get ( 0 ) . getAttribute ( "id" ) ; films . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 50 ) ; WebElement deleteButton = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) ) ; deleteButton . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; Thread . sleep ( 100 ) ; List < WebElement > newFilms = driver . findElements ( By . className ( "movie_box" ) ) ; for ( WebElement element : newFilms ) { assertNotEquals ( element . getAttribute ( "id" ) , filmId ) ; } } </DOCUMENT>
<DOCUMENT_ID="testManagerLogin_423/tree/master/WEB-INF/src/java/junit/ManagerLoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "gillian" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . id ( "Logout_0" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testEmptyLogin_424/tree/master/WEB-INF/src/java/junit/EmptyLoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; try { assertEquals ( "Invalid ▁ username" , driver . findElement ( By . cssSelector ( "div.errorMessage" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertEquals ( "Invalid ▁ Password" , driver . findElement ( By . cssSelector ( "#wwerr_Login_Password ▁ > ▁ div.errorMessage" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testManageAppraisal_425/tree/master/WEB-INF/src/java/junit/ManageAppraisalTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "gillian" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Employee ▁ Appraisal" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "SelectedEmployee_firstName" ) ) ) . selectByVisibleText ( "Poppy" ) ; driver . findElement ( By . id ( "SelectedEmployee_Submit" ) ) . click ( ) ; driver . findElement ( By . xpath ( "/html/body/div/div/table/tbody/tr[6]/td[8]/a/i" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testEmployeeLogin_426/tree/master/WEB-INF/src/java/junit/EmployeeLoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "sarah" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . id ( "Logout_0" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testProjectAssignment_427/tree/master/WEB-INF/src/java/junit/ProjectAssignmentTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "gillian" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Manage ▁ Projects" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Assign ▁ Employee" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "CompleteAssignment_projectName" ) ) ) . selectByVisibleText ( "iOS ▁ App ▁ Development" ) ; new Select ( driver . findElement ( By . id ( "CompleteAssignment_firstName" ) ) ) . selectByVisibleText ( "Sarah" ) ; driver . findElement ( By . id ( "CompleteAssignment_Assign" ) ) . click ( ) ; try { assertEquals ( "Project ▁ Assignment ▁ Complete" , driver . findElement ( By . cssSelector ( "h4.center" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="autoBuyWithDep_391/tree/master/src/main/java/general/virt/StorePage.java"> public StorePage function ( String department ) throws InterruptedException { int maxDepSize = getStoreDepMaxSize ( ) ; ArrayList < String > companyDepSellProducts = getMyProductsDepToSell ( ) ; driver . findElement ( By . xpath ( " // a[text()='Торговый ▁ зал']" ) ) . click ( ) ; ArrayList < String > currentTypesDep = getCurrentTypesDepFromSalesRoom ( ) ; ArrayList < String > companyProductsToSell = getMyProductsToSell ( ) ; int depCount = Integer . valueOf ( currentTypesDep . size ( ) ) ; driver . findElement ( By . xpath ( " // a[text()='Снабжение']" ) ) . click ( ) ; String productInfo = new String ( ) ; org . openqa . selenium . support . ui . Select s = null ; for ( String companyProduct : companyDepSellProducts ) { if ( department . equals ( companyProduct . split ( ";" ) [ 0 ] ) ) { logMe ( "покупаем ▁ продукцию: ▁ " + companyProduct . split ( ";" ) [ 0 ] ) ; for ( int i = 1 ; i < companyProduct . split ( ";" ) . length ; i ++ ) { productInfo = getProductDataFromCompanyConfig ( companyProduct . split ( ";" ) [ i ] , companyProductsToSell ) ; if ( isThisProductSellOnSellPage ( productInfo . split ( ";" ) [ 0 ] ) ) continue ; logMe ( productInfo ) ; s = new org . openqa . selenium . support . ui . Select ( driver . findElement ( By . name ( "productCategory" ) ) ) ; s . selectByVisibleText ( companyProduct . split ( ";" ) [ 0 ] ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( " // span[label/img[@alt='" + productInfo . split ( ";" ) [ 0 ] + "']]/input" ) ) . click ( ) ; String handle1 = driver . getWindowHandle ( ) ; driver . findElement ( By . xpath ( " // input[@value='Добавить ▁ поставщика']" ) ) . click ( ) ; Set < String > handles = driver . getWindowHandles ( ) ; Iterator < String > it = handles . iterator ( ) ; while ( it . hasNext ( ) ) { String popupHandle = it . next ( ) . toString ( ) ; if ( ! popupHandle . contains ( handle1 ) ) { driver . switchTo ( ) . window ( popupHandle ) ; } } Double price = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[1]" ) ) . getText ( ) . split ( ":" ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double qa = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[2]" ) ) . getText ( ) . split ( " ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double brand = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[3]" ) ) . getText ( ) . split ( " ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double confPrice = Double . valueOf ( productInfo . split ( ";" ) [ 5 ] ) ; Double confQa = Double . valueOf ( productInfo . split ( ";" ) [ 3 ] ) ; Double confBrand = Double . valueOf ( productInfo . split ( ";" ) [ 4 ] ) ; String valueToSet = productInfo . split ( ";" ) [ 6 ] ; logMe ( "" + price + ">=" + confPrice ) ; logMe ( "" + qa + "<" + confQa ) ; logMe ( "" + brand + "<" + confBrand ) ; logMe ( valueToSet ) ; if ( price >= confPrice && confBrand > brand && confQa > qa ) { logMe ( "Ура, ▁ продукт ▁ подошел!" ) ; driver . findElement ( By . xpath ( " // a[text()='Свои']" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . size ( ) != 0 ) if ( driver . findElement ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . isDisplayed ( ) ) driver . findElement ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // tr[td[text()='Cвободно']]/td[2]/a[2]/img" ) ) . size ( ) != 0 ) { Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( " // tr[td[text()='Cвободно']]/td[2]/a[2]/img" ) ) . click ( ) ; String goodId = driver . findElement ( By . xpath ( " // table // tr[@class='friendlyHighLight']/td[@class='choose']/span" ) ) . getAttribute ( "id" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "document.getElementById(" + goodId + ").click();" ) ; driver . findElement ( By . id ( "amountInput" ) ) . clear ( ) ; driver . findElement ( By . id ( "amountInput" ) ) . clear ( ) ; driver . findElement ( By . id ( "amountInput" ) ) . sendKeys ( valueToSet ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "document.getElementById('submitLink').click();" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; logMe ( "Закупились ▁ " + productInfo . split ( ";" ) [ 0 ] ) ; } else { logMe ( "Продукта ▁ нет!" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } else { logMe ( "Продукт ▁ не ▁ подошел!" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } } } boolean action = false ; Thread . sleep ( 3000 ) ; waitForElementVisible ( " // a[text()='Торговый ▁ зал']" ) ; waitForElement ( " // a[text()='Торговый ▁ зал']" ) ; driver . findElement ( By . xpath ( " // a[text()='Торговый ▁ зал']" ) ) . click ( ) ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . size ( ) ; i ++ ) { String salePrice = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . getAttribute ( "value" ) ; if ( salePrice . equals ( "0.00" ) ) { Double setupvalue = Double . valueOf ( driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[12]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; setupvalue = setupvalue * 1.3 ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( String . valueOf ( setupvalue ) ) ; action = true ; } } if ( action ) { driver . findElement ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . sendKeys ( Keys . RETURN ) ; } driver . findElement ( By . xpath ( " // a[text()='Магазин']" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage autoBuyProducts ( ) throws InterruptedException { int maxDepSize = Integer . valueOf ( getParameter ( "StoreSize" + driver . findElement ( By . xpath ( " // tr[td[text()='Торговая ▁ площадь']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . split ( "м" ) [ 0 ] ) ) ; ArrayList < String > companyDepSellProducts = getMyProductsDepToSell ( ) ; driver . findElement ( By . xpath ( " // a[text()='Торговый ▁ зал']" ) ) . click ( ) ; ArrayList < String > currentTypesDep = getCurrentTypesDepFromSalesRoom ( ) ; ArrayList < String > companyProductsToSell = getMyProductsToSell ( ) ; int depCount = Integer . valueOf ( currentTypesDep . size ( ) ) ; driver . findElement ( By . xpath ( " // a[text()='Снабжение']" ) ) . click ( ) ; String productInfo = new String ( ) ; org . openqa . selenium . support . ui . Select s = null ; for ( String companyProduct : companyDepSellProducts ) { if ( isDepToSell ( companyProduct . split ( ";" ) [ 0 ] , currentTypesDep ) ) { logMe ( "покупаем ▁ продукцию: ▁ " + companyProduct . split ( ";" ) [ 0 ] ) ; for ( int i = 1 ; i < companyProduct . split ( ";" ) . length ; i ++ ) { productInfo = getProductDataFromCompanyConfig ( companyProduct . split ( ";" ) [ i ] , companyProductsToSell ) ; if ( isThisProductSellOnSellPage ( productInfo . split ( ";" ) [ 0 ] ) ) continue ; logMe ( productInfo ) ; s = new org . openqa . selenium . support . ui . Select ( driver . findElement ( By . name ( "productCategory" ) ) ) ; s . selectByVisibleText ( companyProduct . split ( ";" ) [ 0 ] ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( " // span[label/img[@alt='" + productInfo . split ( ";" ) [ 0 ] + "']]/input" ) ) . click ( ) ; String handle1 = driver . getWindowHandle ( ) ; driver . findElement ( By . xpath ( " // input[@value='Добавить ▁ поставщика']" ) ) . click ( ) ; Set < String > handles = driver . getWindowHandles ( ) ; Iterator < String > it = handles . iterator ( ) ; while ( it . hasNext ( ) ) { String popupHandle = it . next ( ) . toString ( ) ; if ( ! popupHandle . contains ( handle1 ) ) { driver . switchTo ( ) . window ( popupHandle ) ; } } Double price = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[1]" ) ) . getText ( ) . split ( ":" ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double qa = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[2]" ) ) . getText ( ) . split ( " ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double brand = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[3]" ) ) . getText ( ) . split ( " ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double confPrice = Double . valueOf ( productInfo . split ( ";" ) [ 5 ] ) ; Double confQa = Double . valueOf ( productInfo . split ( ";" ) [ 3 ] ) ; Double confBrand = Double . valueOf ( productInfo . split ( ";" ) [ 4 ] ) ; String valueToSet = productInfo . split ( ";" ) [ 6 ] ; logMe ( "" + price + ">=" + confPrice ) ; logMe ( "" + qa + "<" + confQa ) ; logMe ( "" + brand + "<" + confBrand ) ; logMe ( valueToSet ) ; if ( price >= confPrice && confBrand > brand && confQa > qa ) { logMe ( "Ура, ▁ продукт ▁ подошел!" ) ; driver . findElement ( By . xpath ( " // a[text()='Свои']" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . size ( ) != 0 ) if ( driver . findElement ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . isDisplayed ( ) ) driver . findElement ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // tr[td[text()='Cвободно']]/td[2]/a[2]/img" ) ) . size ( ) != 0 ) { Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( " // tr[td[text()='Cвободно']]/td[2]/a[2]/img" ) ) . click ( ) ; String goodId = driver . findElement ( By . xpath ( " // table // tr[@class='friendlyHighLight']/td[@class='choose']/span" ) ) . getAttribute ( "id" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "document.getElementById(" + goodId + ").click();" ) ; driver . findElement ( By . id ( "amountInput" ) ) . clear ( ) ; driver . findElement ( By . id ( "amountInput" ) ) . clear ( ) ; driver . findElement ( By . id ( "amountInput" ) ) . sendKeys ( valueToSet ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "document.getElementById('submitLink').click();" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; logMe ( "Закупились ▁ " + productInfo . split ( ";" ) [ 0 ] ) ; } else { logMe ( "Продукта ▁ нет!" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } else { logMe ( "Продукт ▁ не ▁ подошел!" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } } } for ( String companyProduct : companyDepSellProducts ) { if ( depCount >= maxDepSize ) break ; if ( ! isDepToSell ( companyProduct . split ( ";" ) [ 0 ] , currentTypesDep ) ) { logMe ( "Докупаем ▁ продукцию: ▁ " + companyProduct . split ( ";" ) [ 0 ] ) ; for ( int i = 1 ; i < companyProduct . split ( ";" ) . length ; i ++ ) { productInfo = getProductDataFromCompanyConfig ( companyProduct . split ( ";" ) [ i ] , companyProductsToSell ) ; if ( isThisProductSellOnSellPage ( productInfo . split ( ";" ) [ 0 ] ) ) continue ; logMe ( productInfo ) ; s = new org . openqa . selenium . support . ui . Select ( driver . findElement ( By . name ( "productCategory" ) ) ) ; s . selectByVisibleText ( companyProduct . split ( ";" ) [ 0 ] ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( " // span[label/img[@alt='" + productInfo . split ( ";" ) [ 0 ] + "']]/input" ) ) . click ( ) ; String handle1 = driver . getWindowHandle ( ) ; driver . findElement ( By . xpath ( " // input[@value='Добавить ▁ поставщика']" ) ) . click ( ) ; Set < String > handles = driver . getWindowHandles ( ) ; Iterator < String > it = handles . iterator ( ) ; while ( it . hasNext ( ) ) { String popupHandle = it . next ( ) . toString ( ) ; if ( ! popupHandle . contains ( handle1 ) ) { driver . switchTo ( ) . window ( popupHandle ) ; } } Double price = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[1]" ) ) . getText ( ) . split ( ":" ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double qa = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[2]" ) ) . getText ( ) . split ( " ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double brand = Double . valueOf ( driver . findElement ( By . xpath ( " // table[@class='right_corner'] // tr[2]/td[3]" ) ) . getText ( ) . split ( " ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; Double confPrice = Double . valueOf ( productInfo . split ( ";" ) [ 5 ] ) ; Double confQa = Double . valueOf ( productInfo . split ( ";" ) [ 3 ] ) ; Double confBrand = Double . valueOf ( productInfo . split ( ";" ) [ 4 ] ) ; String valueToSet = productInfo . split ( ";" ) [ 6 ] ; logMe ( "" + price + ">=" + confPrice ) ; logMe ( "" + qa + "<" + confQa ) ; logMe ( "" + brand + "<" + confBrand ) ; logMe ( valueToSet ) ; if ( price >= confPrice && confBrand > brand && confQa > qa ) { logMe ( "Ура, ▁ продукт ▁ подошел!" ) ; driver . findElement ( By . xpath ( " // a[text()='Свои']" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . size ( ) != 0 ) if ( driver . findElement ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . isDisplayed ( ) ) driver . findElement ( By . xpath ( " // a[contains(text(),'Отменить ▁ фильтр')]" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // tr[td[text()='Cвободно']]/td[2]/a[2]/img" ) ) . size ( ) != 0 ) { Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( " // tr[td[text()='Cвободно']]/td[2]/a[2]/img" ) ) . click ( ) ; String goodId = driver . findElement ( By . xpath ( " // table // tr[@class='friendlyHighLight']/td[@class='choose']/span" ) ) . getAttribute ( "id" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "document.getElementById(" + goodId + ").click();" ) ; driver . findElement ( By . id ( "amountInput" ) ) . clear ( ) ; driver . findElement ( By . id ( "amountInput" ) ) . clear ( ) ; driver . findElement ( By . id ( "amountInput" ) ) . sendKeys ( valueToSet ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( "document.getElementById('submitLink').click();" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; logMe ( "Закупились ▁ " + productInfo . split ( ";" ) [ 0 ] ) ; } else { logMe ( "Продукта ▁ не ▁ нашли!!" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } else { logMe ( "Продукт ▁ не ▁ подошел!" ) ; driver . findElement ( By . xpath ( " // span[text()='Закрыть ▁ окно']" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } depCount ++ ; } } boolean action = false ; Thread . sleep ( 3000 ) ; waitForElementVisible ( " // a[text()='Торговый ▁ зал']" ) ; waitForElement ( " // a[text()='Торговый ▁ зал']" ) ; driver . findElement ( By . xpath ( " // a[text()='Торговый ▁ зал']" ) ) . click ( ) ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . size ( ) ; i ++ ) { String salePrice = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . getAttribute ( "value" ) ; if ( salePrice . equals ( "0.00" ) ) { Double setupvalue = Double . valueOf ( driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[12]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) ; setupvalue = setupvalue * 1.3 ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( String . valueOf ( setupvalue ) ) ; action = true ; } } if ( action ) { driver . findElement ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . sendKeys ( Keys . RETURN ) ; } driver . findElement ( By . xpath ( " // a[text()='Магазин']" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage goToTradingRoom ( ) throws InterruptedException { waitForElementVisible ( " // a[text()='Торговый ▁ зал']" ) ; waitForElement ( " // a[text()='Торговый ▁ зал']" ) ; driver . findElement ( By . xpath ( " // a[text()='Торговый ▁ зал']" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage goToMainStorePage ( ) throws InterruptedException { waitForElementVisible ( " // a[text()='Магазин']" ) ; waitForElement ( " // a[text()='Магазин']" ) ; driver . findElement ( By . xpath ( " // a[text()='Магазин']" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage educate ( ) { if ( isStuding ( ) && isNeedtoEducate ( ) ) { logMe ( "Обучаю ▁ персонал" ) ; String currentUrl = driver . getCurrentUrl ( ) ; String UnitId = getUnitIdByUrl ( currentUrl ) ; driver . get ( "http: // virtonomica.ru/vera/window/unit/employees/education/" + UnitId ) ; driver . findElement ( By . xpath ( " // input[@value='Обучить']" ) ) . click ( ) ; driver . get ( currentUrl ) ; } return new StorePage ( driver ) ; } public StorePage statusStore ( ) { String status = driver . findElement ( By . xpath ( " // div[@class='productivity_hint'] // div" ) ) . getText ( ) ; if ( ! status . contains ( "Элитный" ) ) { logMe ( "Магазин ▁ не ▁ Элитный!!!" ) ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , "Магазин. ▁ Статус ▁ магазина: ▁ " + status ) ; } return new StorePage ( driver ) ; } public StorePage getStoreInfo ( ) throws InterruptedException { String depId = getUnitIdByUrl ( driver . getCurrentUrl ( ) ) ; String currentUrl = driver . getCurrentUrl ( ) ; String status = driver . findElement ( By . xpath ( " // div[@class='productivity_hint'] // div" ) ) . getText ( ) ; String famous = driver . findElement ( By . xpath ( " // tr[td[text()='Известность']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; String depCount = String . valueOf ( getStoreDepSize ( ) ) ; String storeSize = driver . findElement ( By . xpath ( " // tr[td[text()='Торговая ▁ площадь']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . split ( "м" ) [ 0 ] ; String employee = driver . findElement ( By . xpath ( " // tr[td[text()='Количество ▁ сотрудников']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . split ( "\\(" ) [ 0 ] ; String visitors = driver . findElement ( By . xpath ( " // tr[td[text()='Количество ▁ посетителей']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\D+" , "" ) ; driver . findElement ( By . xpath ( " // a[text()='Маркетинг ▁ и ▁ Реклама']" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String population = driver . findElement ( By . xpath ( " // tr[td[text()='Население ▁ города']]/td[2]/input" ) ) . getAttribute ( "value" ) ; logMe ( depId + "\t\t\t\t" + employee + "\t\t\t\t" + storeSize + "\t\t\t\t" + depCount + "\t\t\t\t" + visitors + "\t\t\t\t" + famous + "\t\t\t\t" + population + "\t\t\t\t" + status ) ; driver . get ( currentUrl ) ; return new StorePage ( driver ) ; } public StorePage finans ( ) { driver . findElement ( By . xpath ( " // a[text()='Финансовый ▁ отчёт']" ) ) . click ( ) ; String profit = "" ; if ( driver . findElements ( By . xpath ( "/tr[td[text()='Прибыль']]/td[2]/span" ) ) . size ( ) > 0 ) profit = driver . findElement ( By . xpath ( " // tr[td[text()='Прибыль']]/td[2]/span" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ; else profit = driver . findElement ( By . xpath ( " // tr[td[text()='Прибыль']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ; String result = "" ; if ( Double . valueOf ( profit ) > 0 ) result = "GOOD" ; else { result = "BAD" ; if ( Double . valueOf ( driver . findElement ( By . xpath ( " // tr[td[text()='Прибыль']]/td[3]/span" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) < 0 && Double . valueOf ( driver . findElement ( By . xpath ( " // tr[td[text()='Прибыль']]/td[4]/span" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) < 0 && Double . valueOf ( driver . findElement ( By . xpath ( " // tr[td[text()='Прибыль']]/td[5]/span" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ) < 0 ) result = "VERY ▁ BAD" ; } logMe ( result + " ▁ profit: ▁ " + profit ) ; driver . findElement ( By . xpath ( " // a[text()='Магазин']" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage advertising ( Double fame , Double spentMoney ) { driver . findElement ( By . xpath ( " // a[text()='Маркетинг ▁ и ▁ Реклама']" ) ) . click ( ) ; String localFame = driver . findElement ( By . xpath ( " // tr[td[text()='Известность']]/td[2]" ) ) . getText ( ) ; driver . findElement ( By . xpath ( " // a[text()='Магазин']" ) ) . click ( ) ; return new StorePage ( driver ) ; } private void deselectAllAdvetising ( ) { driver . findElement ( By . xpath ( " // tr[td/label[text()='Интернет']]/td/input" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // tr[td/label[text()='Печатные ▁ издания']]/td/input" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // tr[td/label[text()='Наружная ▁ реклама']]/td/input" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // tr[td/label[text()='Радио']]/td/input" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // tr[td/label[text()='Телевидение']]/td/input" ) ) . click ( ) ; } public StorePage trading ( ) throws InterruptedException { driver . findElement ( By . xpath ( " // a[text()='Торговый ▁ зал']" ) ) . click ( ) ; String store = new String ( ) ; String price = new String ( ) ; String saled = new String ( ) ; String basicCost = new String ( ) ; String market = new String ( ) ; String offer = new String ( ) ; String avgPrice = new String ( ) ; String retailerStore = new String ( ) ; String result = new String ( ) ; String productName = new String ( ) ; boolean action = false ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']" ) ) . size ( ) ; i ++ ) { store = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[6]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; if ( Double . valueOf ( store ) == 0 ) { driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[2]/input" ) ) . get ( i ) . click ( ) ; action = true ; } } if ( action ) { if ( driver . findElements ( By . xpath ( " // input[@value='Ликвидировать ▁ остатки ▁ товара']" ) ) . size ( ) > 0 ) driver . findElement ( By . xpath ( " // input[@value='Ликвидировать ▁ остатки ▁ товара']" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } action = false ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']" ) ) . size ( ) ; i ++ ) { Thread . sleep ( 1000 ) ; store = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[6]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; if ( Double . valueOf ( store ) == 0 ) { driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[2]/input" ) ) . get ( i ) . click ( ) ; action = true ; } } if ( action ) { if ( driver . findElements ( By . xpath ( " // input[@value='Ликвидировать ▁ остатки ▁ товара']" ) ) . size ( ) > 0 ) driver . findElement ( By . xpath ( " // input[@value='Ликвидировать ▁ остатки ▁ товара']" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']" ) ) . size ( ) ; i ++ ) { result = "" ; store = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[6]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; saled = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[4]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; basicCost = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[9]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ; avgPrice = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[12]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ; price = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . getAttribute ( "value" ) ; market = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[11]" ) ) . get ( i ) . getText ( ) . split ( " ▁ " ) [ 0 ] ; productName = driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[3]" ) ) . get ( i ) . getAttribute ( "title" ) . split ( " ▁ \\(кликните" ) [ 0 ] ; if ( price . equals ( "0.00" ) ) { price = String . valueOf ( Double . valueOf ( avgPrice ) * 1.30 ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( price ) ; } if ( Double . valueOf ( saled ) == 0 ) { logMe ( "Новый ▁ продукт, ▁ еще ▁ не ▁ продавался" ) ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , "Новый ▁ продукт ▁ еще ▁ не ▁ продавался, ▁ цену ▁ не ▁ трогали: ▁ " + productName ) ; continue ; } if ( Double . valueOf ( store ) / Double . valueOf ( saled ) > 3 ) { if ( Double . valueOf ( price ) < Double . valueOf ( basicCost ) && ! getParameter ( "ShopGoodsLessSelfCost" ) . contains ( productName ) ) { price = basicCost ; result += "Продажа ▁ ниже ▁ себестоимости; ▁ " ; } else { price = String . valueOf ( Double . valueOf ( price ) * 0.9 ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( price ) ; } } else { if ( Double . valueOf ( price ) < Double . valueOf ( basicCost ) && ! getParameter ( "ShopGoodsLessSelfCost" ) . contains ( productName ) ) { if ( saled . equals ( store ) ) { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( price ) ; } else { price = basicCost ; result += "Продажа ▁ ниже ▁ себестоимости; ▁ " ; } } else { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( price ) ; } if ( saled . equals ( store ) ) { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( price ) ; } } if ( Double . valueOf ( market ) > 30 ) { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . get ( i ) . sendKeys ( price ) ; result += "Рынок ▁ забит; ▁ " ; } recordDepartment ( productName , result ) ; } if ( driver . findElements ( By . xpath ( " // input[@value='Установить ▁ цены']" ) ) . size ( ) != 0 ) { driver . findElement ( By . xpath ( " // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input" ) ) . sendKeys ( Keys . ENTER ) ; } driver . findElement ( By . xpath ( " // a[text()='Снабжение']" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( " // tr[contains(@id,'product_sub_row')]/td[7]/input" ) ) . size ( ) > 0 ) { waitForElement ( " // tr[contains(@id,'product_sub_row')]/td[7]/input" ) ; waitForElementVisible ( " // tr[contains(@id,'product_sub_row')]/td[7]/input" ) ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[contains(@id,'product_sub_row')]/td[7]/input" ) ) . size ( ) ; i ++ ) { driver . findElements ( By . xpath ( " // tr[contains(@id,'product_sub_row')]/td[7]/input" ) ) . get ( i ) . click ( ) ; } driver . findElement ( By . xpath ( " // input[@value='Разорвать ▁ выбранные ▁ контракты']" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; logMe ( "удалили ▁ второй ▁ офер" ) ; } action = false ; int rows = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]" ) ) . size ( ) ; waitForElement ( " // tr[contains(@id,'product_row')]/td[10]/input[" + rows + "]" ) ; for ( int i = 0 ; i < rows ; i ++ ) { store = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[1] // tr[1]/td[2]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; String supplierStore = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[9] // tr[3]/td[2]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ; if ( Double . valueOf ( store ) == 0 && Double . valueOf ( supplierStore ) != 0 ) { Thread . sleep ( 100 ) ; try { driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[10]/input" ) ) . get ( i ) . click ( ) ; logMe ( "удалили ▁ того ▁ саплаера ▁ если ▁ у ▁ нас ▁ на ▁ складе ▁ ноль ▁ и ▁ у ▁ него ▁ на ▁ складе ▁ ноль." ) ; action = true ; } catch ( WebDriverException e ) { System . out . println ( e . getMessage ( ) ) ; } } } if ( driver . findElements ( By . xpath ( " // input[@value='Разорвать ▁ выбранные ▁ контракты']" ) ) . size ( ) > 0 ) { driver . findElement ( By . xpath ( " // input[@value='Разорвать ▁ выбранные ▁ контракты']" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } for ( int i = 0 ; i < driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]" ) ) . size ( ) ; i ++ ) { result = "" ; saled = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[1] // tr[5]/td[2]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; basicCost = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[8] // tr[1]/td[2]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$" , "" ) ; store = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[1] // tr[1]/td[2]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; retailerStore = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[9] // tr[3]/td[2]" ) ) . get ( i ) . getText ( ) . replaceAll ( " ▁ " , "" ) ; offer = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . getAttribute ( "value" ) ; productName = driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/th // td/img" ) ) . get ( i ) . getAttribute ( "alt" ) ; if ( Double . valueOf ( offer ) > 1 && Double . valueOf ( retailerStore ) > 1 && Double . valueOf ( store ) < 1 && Double . valueOf ( saled ) < 1 ) { continue ; } if ( Double . valueOf ( saled ) == 0 ) { logMe ( "Новый ▁ продукт ▁ для ▁ продажи, ▁ не ▁ трогаем ▁ оффер" ) ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , "Оффер ▁ не ▁ изменен, ▁ продукт ▁ еще ▁ не ▁ продавался: ▁ " + productName ) ; continue ; } if ( Double . valueOf ( store ) / Double . valueOf ( saled ) >= 3 ) { if ( Double . valueOf ( store ) / Double . valueOf ( saled ) >= 10 ) { offer = "0" ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . sendKeys ( offer ) ; result += "Overcroud ▁ " + productName + " ▁ " + store + "; ▁ " ; } else { offer = String . valueOf ( Double . valueOf ( offer ) * 0.8 ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . sendKeys ( offer ) ; result += "SuperOvercroud ▁ " + productName + " ▁ " + store + "; ▁ " ; } } else { if ( offer . equals ( "0" ) ) offer = String . valueOf ( Double . valueOf ( saled ) * 0.8 ) ; if ( Double . valueOf ( saled ) == Double . valueOf ( store ) || Double . valueOf ( saled ) >= Double . valueOf ( offer ) ) { offer = String . valueOf ( Double . valueOf ( saled ) * 1.5 ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . sendKeys ( offer ) ; } else { offer = String . valueOf ( Double . valueOf ( saled ) * 1.1 ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( " // tr[contains(@id,'product_row')]/td[5]/input" ) ) . get ( i ) . sendKeys ( offer ) ; } } if ( Double . valueOf ( retailerStore ) / Double . valueOf ( saled ) < 3 ) { logMe ( "Warning! ▁ " + productName + " ▁ МАЛО!" ) ; result += "Мало ▁ " + productName + " ▁ " + retailerStore + "; ▁ " ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , "Магазин. ▁ У ▁ поставщика ▁ мало ▁ на ▁ складе: ▁ " + productName ) ; } recordDepartment ( productName , result ) ; } if ( driver . findElements ( By . xpath ( " // input[@value='Изменить']" ) ) . size ( ) > 0 ) { driver . findElement ( By . xpath ( " // input[@value='Изменить']" ) ) . click ( ) ; } driver . findElement ( By . xpath ( " // a[text()='Магазин']" ) ) . click ( ) ; return new StorePage ( driver ) ; } protected void recordDepartment ( String product , String result ) { Connection c = null ; Statement stmt = null ; try { Class . forName ( "org.sqlite.JDBC" ) ; c = DriverManager . getConnection ( "jdbc:sqlite:store.db" ) ; c . setAutoCommit ( false ) ; int session = Integer . valueOf ( formattedDate ( "MMdd" ) ) ; String depName = driver . findElement ( By . xpath ( " // div[@id='headerInfo']/h1" ) ) . getText ( ) ; String depUrl = driver . getCurrentUrl ( ) ; stmt = c . createStatement ( ) ; String sql = "INSERT ▁ INTO ▁ MARKET ▁ (SESSION,DEPNAME,DEPURL,RESULT,PRODUCT) ▁ " + "VALUES ▁ (" + session + ",'" + depName + "'" + ",'" + depUrl + "'" + ",'" + result + "'" + ",'" + product + "'" + ");" ; stmt . executeUpdate ( sql ) ; stmt . close ( ) ; c . commit ( ) ; c . close ( ) ; } catch ( Exception e ) { System . err . println ( e . getClass ( ) . getName ( ) + ": ▁ " + e . getMessage ( ) ) ; System . exit ( 0 ) ; } } public boolean isDepProcessed ( String dep ) { Connection c = null ; Statement stmt = null ; boolean result = false ; try { Class . forName ( "org.sqlite.JDBC" ) ; c = DriverManager . getConnection ( "jdbc:sqlite:store.db" ) ; c . setAutoCommit ( false ) ; int session = Integer . valueOf ( formattedDate ( "MMdd" ) ) ; String depUrl = driver . getCurrentUrl ( ) ; stmt = c . createStatement ( ) ; String sql = "select ▁ count(*) ▁ from ▁ market ▁ where ▁ session=" + session + " ▁ and ▁ depurl ▁ like ▁ '" + dep + "%';" ; ResultSet rs = stmt . executeQuery ( sql ) ; while ( rs . next ( ) ) { int id = rs . getInt ( "count(*)" ) ; if ( id > 0 ) result = true ; else result = false ; } rs . close ( ) ; stmt . close ( ) ; c . commit ( ) ; c . close ( ) ; } catch ( Exception e ) { System . err . println ( e . getClass ( ) . getName ( ) + ": ▁ " + e . getMessage ( ) ) ; System . exit ( 0 ) ; } return result ; } public StorePage setAutoQaSlave ( ) throws InterruptedException { new SalaryPage ( driver ) . autoSetSalaryAndQaFormula ( ) ; return new StorePage ( driver ) ; } private boolean isNeedtoEducate ( ) { String salarySlave = driver . findElement ( By . xpath ( " // tr[td[text()='Зарплата ▁ одного ▁ сотрудника']]/td[2]" ) ) . getText ( ) . replaceAll ( " ▁ " , "" ) . split ( "\\$" ) [ 0 ] . replaceAll ( " ▁ " , "" ) ; String salaryTown = driver . findElement ( By . xpath ( " // tr[td[text()='Зарплата ▁ одного ▁ сотрудника']]/td[2]" ) ) . getText ( ) . split ( "городу ▁ " ) [ 1 ] . replaceAll ( " ▁ " , "" ) . replaceAll ( "\\$\\)" , "" ) . replaceAll ( " ▁ " , "" ) ; if ( Double . valueOf ( salarySlave ) > Double . valueOf ( salaryTown ) * 0.3 ) return true ; else return false ; } private boolean isStuding ( ) { if ( driver . findElements ( By . xpath ( " // a[text()='Обучение ▁ персонала']" ) ) . size ( ) > 0 ) return true ; else return false ; } } </DOCUMENT>
<DOCUMENT_ID="testInvalidLogin_428/tree/master/WEB-INF/src/java/junit/InvalidLoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; try { assertEquals ( "Invalid ▁ username" , driver . findElement ( By . cssSelector ( "div.errorMessage" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAppraisalWithNoProjects_430/tree/master/WEB-INF/src/java/junit/AppraisalWithNoProjectsTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "poppy" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Self ▁ Appraise" ) ) . click ( ) ; driver . findElement ( By . id ( "Appraisal_accomplishments" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_accomplishments" ) ) . sendKeys ( "accomplishments" ) ; driver . findElement ( By . id ( "Appraisal_barriers" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_barriers" ) ) . sendKeys ( "barriers" ) ; driver . findElement ( By . id ( "Appraisal_improvements" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_improvements" ) ) . sendKeys ( "improvement" ) ; driver . findElement ( By . id ( "Appraisal_performance" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_performance" ) ) . sendKeys ( "knowledge" ) ; driver . findElement ( By . id ( "Appraisal_attendanceRecordVery ▁ Good" ) ) . click ( ) ; driver . findElement ( By . id ( "Appraisal_respectRecordAverage ▁ Respect ▁ for ▁ others" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "Appraisal_firstName" ) ) ) . selectByVisibleText ( "Gillian" ) ; driver . findElement ( By . id ( "Appraisal_Appraisal" ) ) . click ( ) ; try { assertEquals ( "Self ▁ Appraisal ▁ Complete" , driver . findElement ( By . cssSelector ( "h6.center" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testRegisterEmployee_429/tree/master/WEB-INF/src/java/junit/RegisterEmployeeTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "gillian" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Register ▁ Employee" ) ) . click ( ) ; driver . findElement ( By . id ( "Register_newFirstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_newFirstName" ) ) . sendKeys ( "Olive" ) ; driver . findElement ( By . id ( "Register_surname" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_surname" ) ) . sendKeys ( "Maguire" ) ; driver . findElement ( By . id ( "Register_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_Username" ) ) . sendKeys ( "olive124" ) ; driver . findElement ( By . id ( "Register_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Register_Address" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_Address" ) ) . sendKeys ( "Dublin" ) ; driver . findElement ( By . id ( "Register_Salary" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_Salary" ) ) . sendKeys ( "12345" ) ; driver . findElement ( By . id ( "Register_UserType" ) ) . clear ( ) ; driver . findElement ( By . id ( "Register_UserType" ) ) . sendKeys ( "employee" ) ; new Select ( driver . findElement ( By . id ( "Register_firstName" ) ) ) . selectByVisibleText ( "Gillian" ) ; driver . findElement ( By . id ( "Register_0" ) ) . click ( ) ; try { assertEquals ( "Employee ▁ Registered" , driver . findElement ( By . cssSelector ( "h4.center" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithCloudBackend_432/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void function ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage cloudsettingsview = reviewsPage . navigateToSettings ( ) ; cloudsettingsview . switchToHanaCloudRemote ( ) ; cloudsettingsview . pressOk ( ) ; cloudsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( "Default ▁ category ▁ does ▁ not ▁ match" , "All ▁ Categories" , reviewsPage . getCategory ( ) ) ; assertEquals ( "Default ▁ product ▁ does ▁ not ▁ match" , "10\" ▁ Portable ▁ DVD ▁ player" , reviewsPage . getProduct ( ) ) ; assertFalse ( "First ▁ reviewer ▁ name ▁ is ▁ empty" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( "First ▁ review ▁ comment ▁ is ▁ empty" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( "Speakers" ) ; reviewsPage . selectProduct ( "Sound ▁ Booster" ) ; CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "review-comment-text-area-id" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( "Good ▁ performance ▁ (" + reviewId + ")" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( "James" ) ; reviewCreationPage . setLastName ( "Field" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( "James ▁ Field" , reviewsPage . getFirstReviewer ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_433/tree/master/src/main/java/org/testeditor/fixture/web/WebFixture.java"> public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_434/tree/master/src/main/java/org/testeditor/fixture/web/AbstractWebFixture.java"> public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithAbapBackend_431/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void function ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage abapsettingsview = reviewsPage . navigateToSettings ( ) ; abapsettingsview . switchToAbapBackend ( ) ; abapsettingsview . pressOk ( ) ; abapsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( "Default ▁ category ▁ does ▁ not ▁ match" , "All ▁ Categories" , reviewsPage . getCategory ( ) ) ; assertEquals ( "Default ▁ product ▁ does ▁ not ▁ match" , "10\" ▁ Portable ▁ DVD ▁ player" , reviewsPage . getProduct ( ) ) ; assertFalse ( "First ▁ reviewer ▁ name ▁ is ▁ empty" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( "First ▁ review ▁ comment ▁ is ▁ empty" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( "Speakers" ) ; reviewsPage . selectProduct ( "Sound ▁ Booster" ) ; CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "review-comment-text-area-id" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( "Good ▁ performance ▁ (" + reviewId + ")" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( "James" ) ; reviewCreationPage . setLastName ( "Field" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( "James ▁ Field" , reviewsPage . getFirstReviewer ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteUpsellBouq_436/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/DeletePrimaryBouq.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_removeOnCart ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_EmptyCart ) ) ; } </DOCUMENT>
<DOCUMENT_ID="CreateNewAccountBuySomeBouqs_437/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/Join_ExistingUser_PurchasedBefore.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . BuyBouqsPayWithCC ( FreeBouqPage . Css_SelectBouqName ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } </DOCUMENT>
<DOCUMENT_ID="wholesalePayWithCC_435/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/ForBusiness/BulkOrders_PaidWithCC.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; String setscroll = "document.documentElement.scrollTop=3000" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; driver . findElement ( By . linkText ( FreeBouqPage . LinkText_wholeSale ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( " // img[@alt='Rose ▁ - ▁ 40cm ▁ - ▁ Red']" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( FreeBouqPage . Text_BuyThisButton ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareFacebookLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareTwitterLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_SharePinterestLink ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ChekoutGiftCard ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "This ▁ field ▁ is ▁ required." ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( "wholesale ▁ first" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( "wholesale ▁ last" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . sendKeys ( "5300 ▁ steven ▁ creek ▁ blvd" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . sendKeys ( "san ▁ jose" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( "95129" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_SelectRelationshipWholeSale ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_California ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . sendKeys ( "8212345678" ) ; Thread . sleep ( 2000 ) ; String deliverDate , dte , dateText ; int i ; Thread . sleep ( 1000 ) ; System . out . println ( selenium . getText ( " // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p" ) ) ; dateText = selenium . getText ( " // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p" ) ; dte = dateText . substring ( 22 , 24 ) ; System . out . println ( dte ) ; i = Integer . valueOf ( dte ) . intValue ( ) ; deliverDate = Integer . toString ( i ) ; System . out . println ( deliverDate ) ; driver . findElement ( By . linkText ( deliverDate ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String txt ; txt = driver . findElement ( By . id ( "errors-modal-body" ) ) . getText ( ) ; if ( CheckoutPage . Text_ErrorTips . equals ( txt ) ) { assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_ErrorTips ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( " // div[@id='errors-modal']/div[2]/div/div/button" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } </DOCUMENT>
<DOCUMENT_ID="bRegistNewAccount_438/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/OfferFunnel/Combination_VaseProductLinkVoucher_LoginNeverBuy_Upsell.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="ultimateGiftVerifyBack_439/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/PackagedSubscription/PKGSubs_UltimateGift_BACK.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . enterPKGSubAfterRegist ( ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection3LearnMore ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection3Name ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . xpath ( PackageSubscriptionPage . Xpth_CollectionSize ) ) . size ( ) == 3 ) ; assertEquals ( PackageSubscriptionPage . Text_BuyButton , driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . getText ( ) ) ; driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_SendTo ) ) . isDisplayed ( ) ) ; Action . inputRelationshipOnPDP ( PackageSubscriptionPage . Text_RelationshipSister , PackageSubscriptionPage . Text_FirstName , PackageSubscriptionPage . Text_LastName , PackageSubscriptionPage . Text_Zip ) ; Action . datePickerOnSubPDP ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; Action . inputAddressOnPDP ( PackageSubscriptionPage . Data_Address , PackageSubscriptionPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step4 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . BillingPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepFourPP ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step3 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . RecipientPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectDelivrySchedulePage ) ) ; String vef = driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_EveryMonth ) ) . getText ( ) ; System . out . println ( vef ) ; assertEquals ( PackageSubscriptionPage . EveryMonth , vef ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Discount20 ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step1 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectCollectionSize ) ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_SizeIsSelected ) ) . isEnabled ( ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepOne ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . ConciergeServices ) ) ; } </DOCUMENT>
<DOCUMENT_ID="cancelOrderCheckOrderHistoryVideo_440/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/CustomerCancelOrderCheckVideo.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; assertTrue ( selenium . isTextPresent ( "Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient" ) ) ; Thread . sleep ( 8000 ) ; Action . selectVieoMesaage ( true ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "(Video ▁ Message ▁ Added)" ) ) ; Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; String orderNum ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNum = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; Email . setEmail ( orderNum ) ; driver . findElement ( By . linkText ( orderNum ) ) . click ( ) ; assertEquals ( AccountSetting . Text_OrderDetail + orderNum , driver . findElement ( By . cssSelector ( AccountSetting . CssSelector_Array ) ) . getText ( ) ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_EditButtonOnOrderHistory ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_cancelButtonOnOrderHistoy ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( "Please ▁ confirm ▁ cancellation ▁ of ▁ the ▁ order." , closeAlertAndGetItsText ( ) ) ; assertFalse ( selenium . isTextPresent ( "Edit ▁ Video ▁ Message" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="addFiveRelationship_442/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/AccountSetting/AddFiveRelationship.java"> public void function ( ) throws Exception { String arr [ ] = { "lei" , "li" , "5300 ▁ stevens ▁ creek ▁ blvd" , "san ▁ jose" , "California" , "95129" , "13565211111" } ; String rel [ ] [ ] = { { "Mom" , "Katrina" } , { "Dad" , "Jim" } , { "Son" , "Tom" } , { "Friend" , "Lily" } , { "Sister" , "Lucy" } } ; String coupon = "Relationship ▁ Reward" ; String balance = "$5.00" ; driver . get ( baseUrl ) ; Thread . sleep ( 2000 ) ; Action . globalRegist ( ) ; Actions act = new Actions ( driver ) ; act . moveToElement ( driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) ) . perform ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_AccountSetting ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ManageRelationship . toUpperCase ( ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; for ( int i = 0 ; i <= 4 ; i ++ ) { driver . findElement ( By . xpath ( AccountSetting . Xpath_AddNewRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectRelationshipType ) ) . click ( ) ; driver . findElement ( By . linkText ( rel [ i ] [ 0 ] ) ) . click ( ) ; driver . findElement ( By . id ( AccountSetting . Id_RelationshipName ) ) . clear ( ) ; driver . findElement ( By . id ( AccountSetting . Id_RelationshipName ) ) . sendKeys ( rel [ i ] [ 1 ] ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SaveButtonOnRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectOccasionType ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . OccasionBirthday ) ) . click ( ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( "var ▁ date=document.getElementById('occasion_date');date.value='12/29';" ) ; driver . findElement ( By . cssSelector ( AccountSetting . CssSelector_Occasion ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertEquals ( AccountSetting . OccasionBirthday , driver . findElement ( By . xpath ( AccountSetting . Xpath_OccasionListLabel1 ) ) . getText ( ) ) ; assertEquals ( "12/29" , driver . findElement ( By . xpath ( AccountSetting . Xpath_OccasionListLabel2 ) ) . getText ( ) ) ; System . out . println ( "Occasion ▁ birthday ▁ is ▁ added ▁ with ▁ 12/29" ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectOccasionType ) ) . click ( ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectMotherDay ) ) . click ( ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SaveButtonOnRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; System . out . println ( "Occasion ▁ mother's ▁ day ▁ is ▁ added." ) ; driver . findElement ( By . xpath ( " // label[@for='bouq_style-1']" ) ) . click ( ) ; driver . findElement ( By . id ( "tabcat-62" ) ) . click ( ) ; driver . findElement ( By . id ( "tabcat-15" ) ) . click ( ) ; driver . findElement ( By . id ( "tabcat-11" ) ) . click ( ) ; System . out . println ( "Flower ▁ choosed!" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( arr [ 0 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( arr [ 1 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . sendKeys ( arr [ 2 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . sendKeys ( arr [ 3 ] ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_State_InputAddressPage ) ) . click ( ) ; driver . findElement ( By . linkText ( arr [ 4 ] ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( arr [ 5 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . sendKeys ( arr [ 6 ] ) ; driver . findElement ( By . id ( AccountSetting . Id_AddAddressOnRelationship ) ) . click ( ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_NoUseOriginal ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_OkButtonOnRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; System . out . println ( "address ▁ added!" ) ; } for ( int i = 0 ; i <= 4 ; i ++ ) { int j = i + 2 ; assertEquals ( rel [ i ] [ 0 ] + ", ▁ " + rel [ i ] [ 1 ] , driver . findElement ( By . xpath ( " // form[@id='relationship_form']/div/div[" + j + "]/div[2]" ) ) . getText ( ) ) ; } System . out . println ( "5 ▁ relatives ▁ added!" ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ vouchers ▁ / ▁ store ▁ credits" . toUpperCase ( ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; for ( int i = 1 ; i <= 4 ; i ++ ) { assertEquals ( coupon , driver . findElement ( By . xpath ( " // table/tbody/tr[" + i + "]/td[2]" ) ) . getText ( ) ) ; assertEquals ( balance , driver . findElement ( By . xpath ( " // table/tbody/tr[" + i + "]/td[3]" ) ) . getText ( ) ) ; } System . out . println ( "Four ▁ store ▁ credit ▁ code ▁ with ▁ each ▁ $5 ▁ shown." ) ; } </DOCUMENT>
<DOCUMENT_ID="wholesalePayWithPP_441/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/ForBusiness/BuyEditWholeSale.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 2000 ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; String setscroll = "document.documentElement.scrollTop=3000" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; driver . findElement ( By . linkText ( FreeBouqPage . LinkText_wholeSale ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( " // img[@alt='Rose ▁ - ▁ 40cm ▁ - ▁ Red']" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( FreeBouqPage . Text_BuyThisButton ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareFacebookLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareTwitterLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_SharePinterestLink ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ChekoutGiftCard ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "This ▁ field ▁ is ▁ required." ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( "wholesale ▁ first" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( "wholesale ▁ last" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . sendKeys ( "5300 ▁ steven ▁ creek ▁ blvd" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . sendKeys ( "san ▁ jose" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( "95129" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_SelectRelationshipWholeSale ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_California ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . sendKeys ( "8212345678" ) ; Thread . sleep ( 2000 ) ; String deliverDate , dte , dateText ; int i ; Thread . sleep ( 1000 ) ; System . out . println ( selenium . getText ( " // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p" ) ) ; dateText = selenium . getText ( " // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p" ) ; dte = dateText . substring ( 22 , 24 ) ; System . out . println ( dte ) ; i = Integer . valueOf ( dte ) . intValue ( ) ; deliverDate = Integer . toString ( i ) ; System . out . println ( deliverDate ) ; driver . findElement ( By . linkText ( deliverDate ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException e ) { driver . findElement ( By . xpath ( CheckoutPage . Xpth_OkButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 3000 ) ; String deliverDateEdit , dteEdit , dateTextEdit ; int iEdit ; Thread . sleep ( 1000 ) ; System . out . println ( selenium . getText ( " // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p" ) ) ; dateTextEdit = selenium . getText ( " // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p" ) ; dteEdit = dateTextEdit . substring ( 22 , 24 ) ; System . out . println ( dteEdit ) ; iEdit = Integer . valueOf ( dteEdit ) . intValue ( ) ; deliverDateEdit = Integer . toString ( iEdit ) ; System . out . println ( "After ▁ edit" ) ; System . out . println ( dteEdit ) ; System . out . println ( iEdit ) ; System . out . println ( deliverDateEdit ) ; driver . findElement ( By . linkText ( deliverDateEdit ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } </DOCUMENT>
<DOCUMENT_ID="checkBookSubsWithVideo_444/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/VideoWidget_Pending.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Subscription . Xpth_SubscriptionsOnHeader ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( Subscription . Xpath_SelectRegularSubscription ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step1 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectCollectionSize ) ) ; driver . findElement ( By . cssSelector ( Subscription . Css_TheFarmersMarket ) ) . click ( ) ; driver . findElement ( By . xpath ( Subscription . Xpath_OriginalOnSubs ) ) . click ( ) ; driver . findElement ( By . id ( Subscription . Id_NextButtonOnSubs ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . dateOnSubsPage ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; driver . findElement ( By . id ( Subscription . Id_ThirdOnSubs ) ) . click ( ) ; driver . findElement ( By . xpath ( Subscription . Xpath_NextButtonOnSubs ) ) . click ( ) ; Action . inputInfoOnSubsPage ( FreeBouqPage . Text_RelationshipSelf , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_Address , FreeBouqPage . Data_ZipCode , "SAN ▁ JOSE" , FreeBouqPage . Text_California , "18212345678" ) ; driver . findElement ( By . xpath ( Subscription . Xpath_NextButtonOnSubs ) ) . click ( ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_NoUseOriginal ) ) . click ( ) ; Action . payWithPPOnSubCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; driver . findElement ( By . xpath ( Subscription . Xpath_SelectBookedSubs ) ) . click ( ) ; driver . findElement ( By . id ( Subscription . Id_EditButtonOnSubs ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_selectRelationship ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_RelationshipWife ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( FreeBouqPage . Data_ZipCode ) ; driver . findElement ( By . id ( FreeBouqPage . Id_RelationshipNextBtton ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( "Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="checkBookOrderWithVideo_445/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/BookOrderWithVideo.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; assertTrue ( selenium . isTextPresent ( "Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient" ) ) ; Thread . sleep ( 8000 ) ; Action . selectVieoMesaage ( true ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "(Video ▁ Message ▁ Added)" ) ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_RelationshipNextBtton ) ) . click ( ) ; Thread . sleep ( 10000 ) ; assertTrue ( selenium . isTextPresent ( "Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient" ) ) ; boolean vf = driver . findElement ( By . name ( "giftpixel-isgift" ) ) . isSelected ( ) ; System . out . println ( "first ▁ edit ▁ video ▁ message ▁ status ▁ = ▁ ▁ " + vf ) ; driver . findElement ( By . name ( "giftpixel-isgift" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertFalse ( selenium . isTextPresent ( "(Video ▁ Message ▁ Added)" ) ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 8000 ) ; assertTrue ( selenium . isTextPresent ( "Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient" ) ) ; boolean vff = driver . findElement ( By . name ( "giftpixel-isgift" ) ) . isSelected ( ) ; System . out . println ( "second ▁ edit ▁ video ▁ message ▁ status ▁ = ▁ ▁ " + vff ) ; Action . selectVieoMesaage ( true ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "(Video ▁ Message ▁ Added)" ) ) ; Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; Action . checkOrderHistory ( ) ; assertFalse ( selenium . isTextPresent ( "Edit ▁ Video ▁ Message" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="giftCardBuyWithCC_443/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/GiftCard/BuyEditGiftCard.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; String setscroll = "document.documentElement.scrollTop=3000" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; driver . findElement ( By . linkText ( FreeBouqPage . LinkText_GiftCards ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . CssSelector_GiftCards ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( FreeBouqPage . Text_BuyThisButton ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareFacebookLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareTwitterLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_SharePinterestLink ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ChekoutGiftCard ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_selectRelationship ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_RelationshipWife ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( "Giftcard ▁ first" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( "Giftcard ▁ last" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Message ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "Did ▁ you ▁ mean ▁ to ▁ send ▁ this ▁ email ▁ with ▁ out ▁ a ▁ message?" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_MessageClickNo ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; String txt ; txt = driver . findElement ( By . id ( "errors-modal-body" ) ) . getText ( ) ; if ( CheckoutPage . Text_ErrorTips . equals ( txt ) ) { assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_ErrorTips ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( " // div[@id='errors-modal']/div[2]/div/div/button" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 3000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( "Giftcard ▁ firstEdit" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( "Giftcard ▁ lastEdit" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "Did ▁ you ▁ mean ▁ to ▁ send ▁ this ▁ email ▁ with ▁ out ▁ a ▁ message?" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_MessageClickYes ) ) . click ( ) ; Thread . sleep ( 2000 ) ; if ( CheckoutPage . Text_ErrorTips . equals ( txt ) ) { assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_ErrorTips ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( " // div[@id='errors-modal']/div[2]/div/div/button" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePage_446/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Shopping/ZipFilter_HomePage.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 3000 ) ; driver . findElement ( By . linkText ( Regist_Login_Page . Link_ClosePOPUP ) ) . click ( ) ; String setscroll = "document.documentElement.scrollTop=1000" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_ArtisanFlorists ) ) . click ( ) ; assertTrue ( selenium . isVisible ( "xpath= // div[@class='hero']" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanButton ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( "This ▁ field ▁ is ▁ required." ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . sendKeys ( "sjs" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanButton ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( "Please ▁ enter ▁ only ▁ digits" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . sendKeys ( "89899" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanButton ) ) . click ( ) ; System . out . println ( driver . findElement ( By . xpath ( " // div[@id='zipPopupFailed']/div/h4" ) ) . getText ( ) ) ; assertTrue ( selenium . isTextPresent ( "AW ▁ SHUCKS! ▁ Same ▁ day ▁ delivery ▁ is ▁ not ▁ yet ▁ available ▁ for ▁ that ▁ area." ) ) ; assertTrue ( selenium . isTextPresent ( "Check ▁ another ▁ zip ▁ code ▁ or ▁ shop ▁ our ▁ Farm ▁ To ▁ Table ▁ Bouqs." ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . sendKeys ( "9512" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCodeButton2 ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( "Please ▁ enter ▁ at ▁ least ▁ 5 ▁ characters." ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . sendKeys ( "76442" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCodeButton2 ) ) . click ( ) ; System . out . println ( driver . findElement ( By . xpath ( " // div[@id='zipPopupFailed']/div/h4" ) ) . getText ( ) ) ; assertTrue ( selenium . isTextPresent ( "AW ▁ SHUCKS! ▁ Same ▁ day ▁ delivery ▁ is ▁ not ▁ yet ▁ available ▁ for ▁ that ▁ area." ) ) ; assertTrue ( selenium . isTextPresent ( "Check ▁ another ▁ zip ▁ code ▁ or ▁ shop ▁ our ▁ Farm ▁ To ▁ Table ▁ Bouqs." ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . sendKeys ( "60604" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCodeButton2 ) ) . click ( ) ; assertTrue ( selenium . isVisible ( "xpath= // ul[@class='product-frame ▁ row']" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="aCancelUpsellBouq_447/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/AdminCancelMainUpsellBouq.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; orderNum = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td/a" ) ) . getText ( ) ; Email . setEmail ( orderNumUpsell ) ; Email . setReferralByUser ( orderNum ) ; orderNum = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td/a" ) ) . getText ( ) ; System . out . println ( "orderNumUpsell ▁ = ▁ " + orderNumUpsell ) ; System . out . println ( "orderNum ▁ = ▁ " + orderNum ) ; } </DOCUMENT>
<DOCUMENT_ID="CreateNewAccount_449/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/Join_ExistingUser_neverPurchased.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } </DOCUMENT>
<DOCUMENT_ID="contactUSEmail_450/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/AccountSetting/ContactUSEmail.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . BuyBouqsPayWithCC ( FreeBouqPage . Css_SelectBouqName ) ; Thread . sleep ( 2000 ) ; try { driver . findElement ( By . id ( "gts-g-cl" ) ) . click ( ) ; } catch ( NoSuchElementException e ) { e . printStackTrace ( ) ; } String setscroll = "document.documentElement.scrollTop=1000" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ContactUs ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectRelationship ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_Relationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_IdContact ) ) . click ( ) ; driver . findElement ( By . linkText ( "Customer ▁ service" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_IdOrder ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[button/@data-id='id_order'] // li[2]/a" ) ) . click ( ) ; driver . findElement ( By . id ( AccountSetting . Id_ContactMessage ) ) . click ( ) ; driver . findElement ( By . id ( AccountSetting . Id_ContactMessage ) ) . clear ( ) ; driver . findElement ( By . id ( AccountSetting . Id_ContactMessage ) ) . sendKeys ( "This ▁ is ▁ email ▁ body." ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( AccountSetting . Id_SendButtonOnMessage ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="aCustmoerCancelUpsellBouq_451/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/CustmoerCancelMainUpsellBouq.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell , vf ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; Email . setEmail ( orderNumUpsell ) ; orderNum = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td/a" ) ) . getText ( ) ; vf = driver . findElement ( By . xpath ( " // table/tbody/tr[2]/td[4]" ) ) . getText ( ) ; System . out . println ( vf ) ; if ( "$18.00" . equals ( vf ) ) { System . out . println ( "orderNumUpsell ▁ = ▁ " + orderNumUpsell ) ; System . out . println ( "orderNum ▁ = ▁ " + orderNum ) ; driver . findElement ( By . linkText ( orderNumUpsell ) ) . click ( ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_EditButtonOnOrderHistory ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_cancelButtonOnOrderHistoy ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( "Please ▁ confirm ▁ cancellation ▁ of ▁ the ▁ order." , closeAlertAndGetItsText ( ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( AccountSetting . Id_ReturnToOrderHistoryButton ) ) . click ( ) ; String status1 , status2 ; status1 = driver . findElement ( By . xpath ( " // table/tbody/tr[2]/td[7]" ) ) . getText ( ) ; status2 = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td[7]" ) ) . getText ( ) ; assertTrue ( selenium . getText ( " // table/tbody/tr[2]/td[7]" ) . contains ( "Canceled" ) ) ; assertTrue ( selenium . getText ( " // table/tbody/tr[3]/td[7]" ) . contains ( "Canceled" ) ) ; System . out . println ( "bouqs ▁ status ▁ = ▁ " + status1 ) ; System . out . println ( "upsell ▁ status ▁ = ▁ " + status2 ) ; } else { System . out . println ( "don't ▁ select ▁ upsell ▁ bouq." ) ; fail ( "don't ▁ select ▁ upsell ▁ bouq." ) ; } } </DOCUMENT>
<DOCUMENT_ID="cCancelMainBouq_448/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/AdminCancelMainUpsellBouq.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; orderNum = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td/a" ) ) . getText ( ) ; Email . setEmail ( orderNumUpsell ) ; Email . setReferralByUser ( orderNum ) ; orderNum = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td/a" ) ) . getText ( ) ; System . out . println ( "orderNumUpsell ▁ = ▁ " + orderNumUpsell ) ; System . out . println ( "orderNum ▁ = ▁ " + orderNum ) ; } </DOCUMENT>
<DOCUMENT_ID="upsellBouqApplyDiscount_453/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/BuyUpsellBouq_applyDiscount.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; driver . findElement ( By . xpath ( " // tbody/tr[2]/td/a/img[@class= ▁ 'remove-icon']" ) ) . click ( ) ; Action . useDiscountOnCartPage ( "JM1000" ) ; Thread . sleep ( 2000 ) ; String dis ; dis = driver . findElement ( By . xpath ( " // tbody/tr[2]/td[2]" ) ) . getText ( ) ; System . out . println ( "JM1000 ▁ discount ▁ is ▁ 10%, ▁ expected ▁ = ▁ -$4.00 ▁ & ▁ actual ▁ = ▁ " + dis ) ; assertTrue ( selenium . isTextPresent ( "-$4.00" ) ) ; driver . findElement ( By . xpath ( " // tbody/tr[2]/td/a/img[@class= ▁ 'remove-icon']" ) ) . click ( ) ; System . out . println ( "remove ▁ Jm1000 ▁ discount" ) ; Action . useDiscountOnCartPage ( "GTB09N1000K" ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( "Your ▁ Store ▁ Credits" ) ) ; assertTrue ( selenium . isTextPresent ( "Google ▁ Credit" ) ) ; assertTrue ( selenium . isTextPresent ( "-$40.00" ) ) ; System . out . println ( "store ▁ credit ▁ code ▁ 'GTB09N1000K' ▁ applied." ) ; } </DOCUMENT>
<DOCUMENT_ID="cCustmoerCancelMainBouq_452/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/CustmoerCancelMainUpsellBouq.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell , vf ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; orderNum = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td/a" ) ) . getText ( ) ; Email . setEmail ( orderNum ) ; vf = driver . findElement ( By . xpath ( " // table/tbody/tr[2]/td[4]" ) ) . getText ( ) ; System . out . println ( vf ) ; if ( "$18.00" . equals ( vf ) ) { System . out . println ( "orderNumUpsell ▁ = ▁ " + orderNumUpsell ) ; System . out . println ( "orderNum ▁ = ▁ " + orderNum ) ; driver . findElement ( By . linkText ( orderNum ) ) . click ( ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_EditButtonOnOrderHistory ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_cancelButtonOnOrderHistoy ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( "Please ▁ confirm ▁ cancellation ▁ of ▁ the ▁ order." , closeAlertAndGetItsText ( ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( AccountSetting . Id_ReturnToOrderHistoryButton ) ) . click ( ) ; String status1 , status2 ; status1 = driver . findElement ( By . xpath ( " // table/tbody/tr[2]/td[7]" ) ) . getText ( ) ; status2 = driver . findElement ( By . xpath ( " // table/tbody/tr[3]/td[7]" ) ) . getText ( ) ; assertTrue ( selenium . getText ( " // table/tbody/tr[2]/td[7]" ) . contains ( "Canceled" ) ) ; assertTrue ( selenium . getText ( " // table/tbody/tr[3]/td[7]" ) . contains ( "Canceled" ) ) ; System . out . println ( "bouqs ▁ status ▁ = ▁ " + status1 ) ; System . out . println ( "upsell ▁ status ▁ = ▁ " + status2 ) ; } else { System . out . println ( "don't ▁ select ▁ upsell ▁ bouq." ) ; fail ( "don't ▁ select ▁ upsell ▁ bouq." ) ; } } </DOCUMENT>
<DOCUMENT_ID="bRegistNewAccount_456/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/OfferFunnel/Combination_VaseProductLinkVoucher_LoginNeverBuy_Free.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="checkVipAccountNotUpsellShown_454/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/Bookorder_corpAccount.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . get ( SiteInfo . adminUrl ( ) ) ; Thread . sleep ( 5000 ) ; String getEmail = Email . getEmail ( ) ; System . out . println ( "account ▁ = ▁ " + getEmail ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Email_Data ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Email_Data ) ) . sendKeys ( Email . adminEmail ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Password_Data ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Password_Data ) ) . sendKeys ( Email . adminPasswd ) ; driver . findElement ( By . name ( "Submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Customers" ) ) . click ( ) ; driver . findElement ( By . name ( "customerFilter_email" ) ) . clear ( ) ; driver . findElement ( By . name ( "customerFilter_email" ) ) . sendKeys ( getEmail ) ; driver . findElement ( By . id ( "submitFilterButton_customer" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( " // img[@title ▁ = ▁ 'Edit']" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; new Select ( driver . findElement ( By . name ( "id_default_group" ) ) ) . selectByVisibleText ( "VIP" ) ; driver . findElement ( By . name ( "submitAddcustomer" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isElementPresent ( "xpath= // i[@class='icon-logged-in']" ) ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertFalse ( selenium . isTextPresent ( "ADD ▁ A ▁ 2ND ▁ BOUQ ▁ FOR ▁ JUST ▁ $15" ) ) ; assertFalse ( selenium . isElementPresent ( FreeBouqPage . Id_butonNoThanks ) ) ; System . out . println ( "Upsell ▁ window ▁ not ▁ shown ▁ because ▁ of ▁ VIP ▁ account ▁ having ▁ discount." ) ; } </DOCUMENT>
<DOCUMENT_ID="BookSubsUpsellForMomWithVase_457/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/SubscriptionUpsell/SubsUpsell_RegistCart_Vase.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipMom , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , true ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; try { boolean vel = driver . findElement ( By . id ( "stick-with-original" ) ) . isEnabled ( ) ; if ( vel == true ) { driver . findElement ( By . id ( "stick-with-original" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ this ▁ button" ) ; } assertFalse ( selenium . isTextPresent ( Subscription . Text_MotherlyLovePackage ) ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_SubscriptionDiscount15 ) ) ; Thread . sleep ( 2000 ) ; String eml = new Email ( ) . newEmail ( ) ; Email . setReferralByUser ( eml ) ; Action . inputNewEmailRegistFromCart ( CheckoutPage . Id_SignUpEmail , eml ) ; Action . inputPasswordRegistFromCart ( CheckoutPage . Id_SignUpPassword , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( CheckoutPage . Id_SignUpButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_MotherlyLovePackage ) ) ; } </DOCUMENT>
<DOCUMENT_ID="BookSubsUpsellForWifeWithVase_455/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/SubscriptionUpsell/SubsUpsell_LoginCart_Vase.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; System . out . println ( eml ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( AccountSetting . Link_Logout . toUpperCase ( ) ) ) . click ( ) ; driver . findElement ( By . xpath ( HomePage . Xpath_ShopOnHeader ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , true ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; try { boolean vel = driver . findElement ( By . id ( "stick-with-original" ) ) . isEnabled ( ) ; if ( vel == true ) { driver . findElement ( By . id ( "stick-with-original" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ this ▁ button" ) ; } assertFalse ( selenium . isTextPresent ( Subscription . Text_RomancePackage ) ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_SubscriptionDiscount15 ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . sendKeys ( eml ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . sendKeys ( Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpButton ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_RomancePackage ) ) ; } </DOCUMENT>
<DOCUMENT_ID="relationshipOccasionFromPDP_458/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/AccountSetting/RelationshipOccasionFromPDP.java"> public void function ( ) throws Exception { String add1 [ ] = { "MeiMei" , "Han" , "5300 ▁ stevens ▁ creek ▁ blvd" , "SAN ▁ JOSE" , "California" , "95129" , "8212345678" } ; driver . get ( baseUrl ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; String dateText , dte ; dateText = driver . findElement ( By . xpath ( FreeBouqPage . Xpath_SelectDeliveryDate ) ) . getText ( ) ; dte = dateText . substring ( 19 , 24 ) ; System . out . println ( dte ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Wedding ▁ Anniversary" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ManageRelationship . toUpperCase ( ) ) ) . click ( ) ; driver . findElement ( By . xpath ( " // form[@id='relationship_form']/div/div[2] // button" ) ) . click ( ) ; assertEquals ( FreeBouqPage . Text_RelationshipWife , driver . findElement ( By . xpath ( " // button[@data-id='relationship_type']" ) ) . getAttribute ( "title" ) ) ; assertEquals ( "Wedding ▁ Anniversary" , driver . findElement ( By . xpath ( " // div[@id='occasion_list']/div/label[1]" ) ) . getText ( ) ) ; System . out . println ( "select ▁ date ▁ = ▁ " + dte ) ; assertEquals ( dte , driver . findElement ( By . xpath ( " // div[@id='occasion_list']/div/label[2]" ) ) . getText ( ) ) ; System . out . println ( "Wife ▁ with ▁ occasion ▁ 'Wedding ▁ aniversary' ▁ ,date ▁ 06/30 ▁ added!" ) ; address1 = add1 [ 2 ] ; city1 = add1 [ 3 ] + ", ▁ " + add1 [ 5 ] ; assertEquals ( "Home" , driver . findElement ( By . xpath ( " // div[@id='address_list']/p[1]" ) ) . getText ( ) ) ; assertEquals ( address1 , driver . findElement ( By . xpath ( " // div[@id='address_list']/p[2]" ) ) . getText ( ) ) ; assertEquals ( city1 , driver . findElement ( By . xpath ( " // div[@id='address_list']/p[3]" ) ) . getText ( ) ) ; System . out . println ( driver . findElement ( By . xpath ( " // div[@id='address_list']/p[3]" ) ) . getText ( ) ) ; System . out . println ( "Address ▁ that ▁ user ▁ inputed ▁ is ▁ saved." ) ; driver . findElement ( By . xpath ( HomePage . Xpath_ShopOnHeader ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( "Dad" , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Love" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; driver . findElement ( By . id ( CheckoutPage . Id_SubmitButton ) ) . click ( ) ; Thread . sleep ( 8000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ManageRelationship . toUpperCase ( ) ) ) . click ( ) ; driver . findElement ( By . xpath ( " // form[@id='relationship_form']/div/div[3] // button" ) ) . click ( ) ; assertEquals ( "Dad" , driver . findElement ( By . xpath ( " // button[@data-id='relationship_type']" ) ) . getAttribute ( "title" ) ) ; try { assertEquals ( "Love" , driver . findElement ( By . xpath ( " // div[@id='occasion_list']/div/label[1]" ) ) . getText ( ) ) ; fail ( "Love ▁ occasion ▁ is ▁ added!" ) ; } catch ( NoSuchElementException e ) { } System . out . println ( "'Love' ▁ occasion ▁ is ▁ not ▁ shown." ) ; assertEquals ( "Home" , driver . findElement ( By . xpath ( " // div[@id='address_list']/p[1]" ) ) . getText ( ) ) ; assertEquals ( address1 , driver . findElement ( By . xpath ( " // div[@id='address_list']/p[2]" ) ) . getText ( ) ) ; assertEquals ( city1 , driver . findElement ( By . xpath ( " // div[@id='address_list']/p[3]" ) ) . getText ( ) ) ; System . out . println ( "Dad ▁ with ▁ correct ▁ delivery ▁ address." ) ; } </DOCUMENT>
<DOCUMENT_ID="CreateNewAccountAndBuyBouqs_460/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/GuestUser_LoginWindow_NotSaturday.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } </DOCUMENT>
<DOCUMENT_ID="editPrimaryBouq_459/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/EditPrimaryBouq.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } driver . findElement ( By . linkText ( FreeBouqPage . link_Loginlink ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_BackToSignUp ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String emil = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . sendKeys ( emil ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . sendKeys ( Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( CheckoutPage . Id_SignUpButton ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertTrue ( selenium . isElementPresent ( HomePage . Xpath_AccountIcon ) ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , true ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . selectUpsellBouq ( " // ul[@class= ▁ 'clearfix']/li/a" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . selectUpsellBouq ( " // ul[@class= ▁ 'clearfix']/li[2]/a" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; Thread . sleep ( 3000 ) ; } </DOCUMENT>
<DOCUMENT_ID="decorateVerifyBack_463/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/PackagedSubscription/PKGSubs_Decorate_BACK.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . enterPKGSubAfterRegist ( ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection2LearnMore ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection2Name ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . xpath ( PackageSubscriptionPage . Xpth_CollectionSize ) ) . size ( ) == 3 ) ; assertEquals ( PackageSubscriptionPage . Text_BuyButton , driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . getText ( ) ) ; driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_SendTo ) ) . isDisplayed ( ) ) ; Action . inputRelationshipOnPDP ( PackageSubscriptionPage . Text_RelationshipSister , PackageSubscriptionPage . Text_FirstName , PackageSubscriptionPage . Text_LastName , PackageSubscriptionPage . Text_Zip ) ; Action . datePickerOnSubPDP ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; Action . inputAddressOnPDP ( PackageSubscriptionPage . Data_Address , PackageSubscriptionPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step4 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . BillingPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepFourPP ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step3 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . RecipientPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectDelivrySchedulePage ) ) ; String vef = driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_EveryMonth ) ) . getText ( ) ; System . out . println ( vef ) ; assertEquals ( PackageSubscriptionPage . EveryMonth , vef ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Discount20 ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step1 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectCollectionSize ) ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_SizeIsSelected ) ) . isEnabled ( ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepOne ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . ConciergeServices ) ) ; } </DOCUMENT>
<DOCUMENT_ID="CommonUserRegist_461/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Regist/RegistFromSignUpWindow.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; driver . findElement ( By . linkText ( Regist_Login_Page . Id_Login_Data ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpName ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpName ) ) . sendKeys ( Regist_Login_Page . strName ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( new Email ( ) . newEmail ( ) ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpPassword_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpPassword_Global ) ) . sendKeys ( Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMonths ) ) . sendKeys ( "2" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileDays ) ) . sendKeys ( "32" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileYears ) ) . sendKeys ( "1988" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileFemale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; System . out . println ( driver . findElement ( By . xpath ( " // label[@class='input-invalid']" ) ) . getText ( ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMonths ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMonths ) ) . sendKeys ( "5" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileDays ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileDays ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileYears ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileYears ) ) . sendKeys ( "2003" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectBusiness_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertTrue ( selenium . isElementPresent ( HomePage . Xpath_AccountIcon ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . linkText ( AccountSetting . Link_myPersonalInfo . toUpperCase ( ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; System . out . print ( selenium . isChecked ( AccountSetting . Id_male ) ) ; assertTrue ( selenium . isChecked ( AccountSetting . Id_male ) ) ; System . out . print ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorMonth ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorMonth ) ) . getText ( ) . contains ( "May" ) ) ; System . out . print ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorDay ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorDay ) ) . getText ( ) . contains ( "30" ) ) ; System . out . print ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorYear ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorYear ) ) . getText ( ) . contains ( "2003" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteUpsellBouq_464/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/DeleteUpsellVase.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( "this ▁ bouq ▁ has ▁ upsell." ) ; if ( "NO ▁ THANKS" . equals ( vef ) ) { driver . findElement ( By . xpath ( " // ul[@class= ▁ 'clearfix']/li/a" ) ) . click ( ) ; } else { System . out . println ( "not ▁ has ▁ upsell" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( "not ▁ has ▁ upsell" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( "Birthday" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; driver . findElement ( By . xpath ( " // div[@class= ▁ 'cart-detail']/div[4]/div[2]/a" ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertFalse ( selenium . isTextPresent ( "2nd ▁ Bouq ▁ for ▁ $15" ) ) ; List < WebElement > ls ; ls = driver . findElements ( By . xpath ( " // div[@class= ▁ 'cart-item']" ) ) ; System . out . println ( "Bouqs ▁ number ▁ in ▁ cart ▁ = ▁ " + ls ) ; assertTrue ( ls . size ( ) == 1 ) ; System . out . println ( "only ▁ main ▁ bouq ▁ shown ▁ in ▁ cart." ) ; } </DOCUMENT>
<DOCUMENT_ID="MovieNotFound_466/tree/master/src/test/java/zolota/Poisk.java"> public void function ( ) throws InterruptedException { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . xpath ( ". // *[@id='q']" ) ) . clear ( ) ; driver . findElement ( By . xpath ( ". // *[@id='q']" ) ) . sendKeys ( "asd" ) ; driver . findElement ( By . xpath ( ". // *[@id='q']" ) ) . sendKeys ( Keys . ENTER ) ; Thread . sleep ( 3000 ) ; if ( driver . getPageSource ( ) . contains ( "No ▁ movies ▁ where ▁ found." ) ) { System . out . println ( "MovieNotFound:done" ) ; } else { System . out . println ( "MovieNotFound:fail" ) ; } Thread . sleep ( 5000 ) ; } </DOCUMENT>
<DOCUMENT_ID="testCaptureTutorial13_467/tree/master/hifive-test-library-sample/src/main/java/com/htmlhifive/testlib/sample/MrtSampleTest.java"> public void function ( ) throws Exception { String url = "conts/web/view/tutorial/interacting-with-controllers" ; driver . get ( url ) ; assertionView . assertView ( "tutorial13" , null , HIDE_ELEMENTS ) ; } </DOCUMENT>
<DOCUMENT_ID="testCaptureTutorialTop_468/tree/master/hifive-test-library-sample/src/main/java/com/htmlhifive/testlib/sample/MrtSampleTest.java"> public void function ( ) throws Exception { String url = "conts/web/view/tutorial/menu" ; driver . get ( url ) ; MrtWebElement e = ( MrtWebElement ) driver . findElement ( By . cssSelector ( ".wikimodel-freestanding" ) ) ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( "arguments[0].width=arguments[1]" , e , e . getRect ( ) . getWidth ( ) ) ; jse . executeScript ( "arguments[0].height=arguments[1]" , e , e . getRect ( ) . getHeight ( ) ) ; jse . executeScript ( "arguments[0].src=''" , e ) ; assertionView . assertView ( "tutorial13" , null , HIDE_ELEMENTS ) ; } </DOCUMENT>
<DOCUMENT_ID="bouqOfTheMonth_462/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/PackagedSubscription/NewPKGSubs_BouqOfMonth_SL_PP.java"> public void function ( ) throws Exception { List < WebElement > ls ; driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . enterPKGSubAfterRegist ( ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection1LearnMore ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection1Name ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . xpath ( PackageSubscriptionPage . Xpth_CollectionSize ) ) . size ( ) == 3 ) ; assertEquals ( PackageSubscriptionPage . Text_BuyButton , driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . getText ( ) ) ; driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_SendTo ) ) . isDisplayed ( ) ) ; Action . inputRelationshipOnPDP ( PackageSubscriptionPage . Text_RelationshipSister , PackageSubscriptionPage . Text_FirstName , PackageSubscriptionPage . Text_LastName , PackageSubscriptionPage . Text_Zip ) ; Action . datePickerOnSubPDP ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; Action . inputAddressOnPDP ( PackageSubscriptionPage . Data_Address , PackageSubscriptionPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertEquals ( SubscriptionCheckoutPage . Text_ServiceNote , driver . findElement ( By . xpath ( SubscriptionCheckoutPage . Xpth_ServiceNote ) ) . getText ( ) . trim ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( SubscriptionCheckoutPage . Xpth_20off ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( SubscriptionCheckoutPage . Xpth_10off ) ) . isDisplayed ( ) ) ; Action . payWithPPOnSubCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertEquals ( PackageSubscriptionPage . Text_Active , driver . findElement ( By . cssSelector ( PackageSubscriptionPage . Css_Active ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( Subscription . Xpth_SubList ) ) . click ( ) ; Thread . sleep ( 2000 ) ; ls = driver . findElements ( By . xpath ( Subscription . Xpth_SubItem ) ) ; assertTrue ( ls . size ( ) != 0 ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_FirstEditButton ) ) . click ( ) ; Thread . sleep ( 10000 ) ; assertTrue ( driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyBouqButton ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( PackageSubscriptionPage . Id_CancelButton ) ) . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAndUpdateIndex_469/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/IndexTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/admin/clear-index" ) ; StringBuffer sb = new StringBuffer ( "<pmdocument><submissions>" ) ; sb . append ( TestUtils . getTestSubmission ( 0 ) ) ; sb . append ( "</submissions></pmdocument>" ) ; String sourceLocation = BSInterfaceTestApplication . getInstance ( ) . getPreferences ( ) . getString ( "bs.studies.source-location" ) ; File file = new File ( sourceLocation , "temp-test-study.xml" ) ; FileUtils . writeStringToFile ( file , sb . toString ( ) ) ; driver . get ( baseUrl + "/admin/reload-xml/temp-test-study.xml" ) ; file . delete ( ) ; driver . get ( baseUrl + "/studies" ) ; assertEquals ( "1 ▁ result" , driver . findElements ( By . cssSelector ( ".ae-stats" ) ) . get ( 0 ) . getText ( ) ) ; file = new File ( sourceLocation , "temp-test-study.xml" ) ; FileUtils . writeStringToFile ( file , StringUtils . replaceOnce ( sb . toString ( ) , "<value>Test ▁ Document ▁ 0</value>" , "<value>Updated ▁ Test ▁ Document ▁ 0</value>" ) ) ; driver . get ( baseUrl + "/admin/reload-xml/temp-test-study.xml" ) ; file . delete ( ) ; driver . get ( baseUrl + "/studies/TEST-0" ) ; assertEquals ( "Updated ▁ Test ▁ Document ▁ 0" , driver . findElement ( By . cssSelector ( "#ae-detail-title" ) ) . getText ( ) ) ; driver . get ( baseUrl + "/admin/clear-index" ) ; driver . get ( baseUrl + "/admin/reload-xml/" ) ; } </DOCUMENT>
<DOCUMENT_ID="CreateMovieFail_465/tree/master/src/test/java/zolota/AddMovie.java"> public void function ( ) throws InterruptedException { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . xpath ( ". // *[@id='content']/section/nav/ul/li[1]/div/div/a" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "Òåñòîâûé ▁ Ôèëüì" ) ; driver . findElement ( By . name ( "aka" ) ) . sendKeys ( "òåñò" ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "60" ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "9" ) ; driver . findElement ( By . name ( "trailer" ) ) . sendKeys ( "https: // youtu.be/4Hau3QZh7FY" ) ; driver . findElement ( By . name ( "notes" ) ) . sendKeys ( "test ▁ notes" ) ; driver . findElement ( By . name ( "taglines" ) ) . sendKeys ( "taglines" ) ; driver . findElement ( By . name ( "plotoutline" ) ) . sendKeys ( "plotoutline" ) ; driver . findElement ( By . name ( "plots" ) ) . sendKeys ( "plots" ) ; driver . findElement ( By . name ( "languages" ) ) . sendKeys ( "languages" ) ; driver . findElement ( By . name ( "subtitles" ) ) . sendKeys ( "subtitles" ) ; driver . findElement ( By . name ( "audio" ) ) . sendKeys ( "audio" ) ; driver . findElement ( By . name ( "video" ) ) . sendKeys ( "video" ) ; driver . findElement ( By . name ( "country" ) ) . sendKeys ( "country" ) ; driver . findElement ( By . name ( "genres" ) ) . sendKeys ( "genres" ) ; driver . findElement ( By . name ( "director" ) ) . sendKeys ( "director" ) ; driver . findElement ( By . name ( "writer" ) ) . sendKeys ( "writer" ) ; driver . findElement ( By . name ( "producer" ) ) . sendKeys ( "producer" ) ; driver . findElement ( By . name ( "music" ) ) . sendKeys ( "music" ) ; driver . findElement ( By . name ( "cast" ) ) . sendKeys ( "cast" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; if ( driver . findElement ( By . name ( "submit" ) ) != null ) { System . out . println ( "CreateMovieFail:done" ) ; } else { System . out . println ( "CreateMovieFail:fail" ) ; } } </DOCUMENT>
<DOCUMENT_ID="testDeleteDocument_470/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/IndexTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/admin/clear-index" ) ; StringBuffer sb = new StringBuffer ( "<pmdocument><submissions>" ) ; sb . append ( TestUtils . getTestSubmission ( 0 ) ) ; sb . append ( "</submissions></pmdocument>" ) ; String sourceLocation = BSInterfaceTestApplication . getInstance ( ) . getPreferences ( ) . getString ( "bs.studies.source-location" ) ; File file = new File ( sourceLocation , "temp-test-study.xml" ) ; FileUtils . writeStringToFile ( file , sb . toString ( ) ) ; driver . get ( baseUrl + "/admin/reload-xml/temp-test-study.xml" ) ; file . delete ( ) ; driver . get ( baseUrl + "/admin/delete/TEST-0" ) ; driver . get ( baseUrl + "/studies" ) ; assertEquals ( "We’re ▁ sorry ▁ that ▁ we ▁ couldn’t ▁ find ▁ any ▁ matching ▁ studies" , driver . findElement ( By . cssSelector ( "h2.alert" ) ) . getText ( ) ) ; driver . get ( baseUrl + "/admin/clear-index" ) ; driver . get ( baseUrl + "/admin/reload-xml/" ) ; } </DOCUMENT>
<DOCUMENT_ID="testFileFilter_471/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/DetailTest.java"> public void function ( ) { driver . get ( baseUrl + "/studies/" ) ; new Select ( driver . findElement ( By . id ( "studies-browse-sorter" ) ) ) . selectByVisibleText ( "Files" ) ; driver . findElement ( By . cssSelector ( ".browse-study-title ▁ a" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 5 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "#file-list_filter ▁ input" ) ) ) ; driver . findElement ( By . cssSelector ( "#file-list_filter ▁ input" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#file-list_filter ▁ input" ) ) . sendKeys ( "pdf" ) ; assertEquals ( "Showing ▁ 1 ▁ to ▁ 4 ▁ of ▁ 4 ▁ entries ▁ (filtered ▁ from ▁ 35 ▁ total ▁ entries)" , driver . findElement ( By . cssSelector ( "#file-list_info" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageStats_472/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/SearchTest.java"> public void function ( ) { driver . get ( baseUrl + "/studies" ) ; String pages = driver . findElement ( By . cssSelector ( ".ae-stats" ) ) . getText ( ) ; assertTrue ( pages . startsWith ( "Showing ▁ 1" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAutoComplete_473/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/SearchTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/studies/" ) ; WebElement searchBox = driver . findElement ( By . id ( "local-searchbox" ) ) ; searchBox . click ( ) ; searchBox . sendKeys ( "dna" ) ; WebDriverWait wait = new WebDriverWait ( driver , 5 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( ".ac_inner" ) ) ) ; List < WebElement > we = driver . findElements ( By . cssSelector ( ".ac_inner ▁ li" ) ) ; assertTrue ( we . get ( 3 ) . getText ( ) . startsWith ( "DNA" ) ) ; } * / </DOCUMENT>
<DOCUMENT_ID="testClearIndex_474/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/SearchTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/admin/clear-index" ) ; driver . get ( baseUrl + "/studies/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 5 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "h2.alert" ) ) ) ; driver . get ( baseUrl + "/admin/reload-xml/" ) ; assertTrue ( true ) ; } </DOCUMENT>
<DOCUMENT_ID="the_header_should_read_476/tree/master/integration/src/test/java/nl/hsleiden/cucumber/Glue.java"> public void function ( String text ) throws Throwable { String url = baseUrl + page + "?" + queryString ; for ( WebDriver driver : driversManager . getDrivers ( ) ) { driver . get ( url ) ; Assert . assertEquals ( text , driver . findElement ( By . cssSelector ( "h1" ) ) . getText ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLargeIndex_475/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/SearchTest.java"> public void function ( ) throws Exception { int totalDocs = 100 ; driver . get ( baseUrl + "/admin/clear-index" ) ; StringBuffer sb = new StringBuffer ( "<pmdocument><submissions>" ) ; for ( int doc = 1 ; doc <= totalDocs ; doc ++ ) { sb . append ( TestUtils . getTestSubmission ( doc ) ) ; } sb . append ( "</submissions></pmdocument>" ) ; String sourceLocation = BSInterfaceTestApplication . getInstance ( ) . getPreferences ( ) . getString ( "bs.studies.source-location" ) ; File file = new File ( sourceLocation , "temp-test-study.xml" ) ; FileUtils . writeStringToFile ( file , sb . toString ( ) ) ; driver . get ( baseUrl + "/admin/reload-xml/temp-test-study.xml" ) ; file . delete ( ) ; driver . get ( baseUrl + "/studies/" ) ; String pages = driver . findElement ( By . cssSelector ( ".ae-stats" ) ) . getText ( ) ; assertTrue ( pages . endsWith ( "Showing ▁ 1 ▁ - ▁ 25 ▁ of ▁ " + ( totalDocs ) + " ▁ results" ) ) ; driver . get ( baseUrl + "/admin/clear-index" ) ; driver . get ( baseUrl + "/admin/reload-xml" ) ; } </DOCUMENT>
<DOCUMENT_ID="inspectAllPages_479/tree/master/project/PageInspector/src/com/sublerefal/pageinspector/selenium/core/SeleniumInspector.java"> private void function ( ) { urlQueue . push ( "" ) ; urlQueue . poll ( ) ; inspectPage ( ) ; String nextPath = urlQueue . poll ( ) ; while ( nextPath != null ) { driver . get ( baseUrl + nextPath ) ; inspectPage ( ) ; nextPath = urlQueue . poll ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithAbapBackend_477/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void function ( ) { System . out . println ( "Opening ▁ page ▁ " + serverUrl + applicationPath ) ; driver . get ( serverUrl + applicationPath ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage abapsettingsview = reviewsPage . navigateToSettings ( ) ; abapsettingsview . switchToAbapBackend ( ) ; abapsettingsview . pressOk ( ) ; abapsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( "Default ▁ category ▁ does ▁ not ▁ match" , "All ▁ Categories" , reviewsPage . getCategory ( ) ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } assertEquals ( "Default ▁ product ▁ does ▁ not ▁ match" , "10\" ▁ Portable ▁ DVD ▁ player" , reviewsPage . getProduct ( ) ) ; assertFalse ( "First ▁ reviewer ▁ name ▁ is ▁ empty" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( "First ▁ review ▁ comment ▁ is ▁ empty" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( "Speakers" ) ; try { Thread . sleep ( 4000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . selectProduct ( "Sound ▁ Booster" ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "review-comment-text-area-id" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( "Good ▁ performance ▁ (" + reviewId + ")" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( "James" ) ; reviewCreationPage . setLastName ( "Field" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( "James ▁ Field" , reviewsPage . getFirstReviewer ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCorrectLogin_481/tree/master/jetty-seed/src/it/java/org/arp/servlet/LoginServletIT.java"> public void function ( ) { driver . get ( baseUrl + "login" ) ; driver . findElement ( By . name ( "j_username" ) ) . sendKeys ( "john" ) ; driver . findElement ( By . name ( "j_password" ) ) . sendKeys ( "welcome1" ) ; driver . findElement ( By . tagName ( "form" ) ) . submit ( ) ; String currentUrl = driver . getCurrentUrl ( ) ; assertEquals ( baseUrl , currentUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testIncorrectLogin_482/tree/master/jetty-seed/src/it/java/org/arp/servlet/LoginServletIT.java"> public void function ( ) { driver . get ( baseUrl + "login" ) ; driver . findElement ( By . name ( "j_username" ) ) . sendKeys ( "john" ) ; driver . findElement ( By . name ( "j_password" ) ) . sendKeys ( "john" ) ; driver . findElement ( By . tagName ( "form" ) ) . submit ( ) ; int size = driver . findElements ( By . id ( "login-error" ) ) . size ( ) ; assertEquals ( 1 , size ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithCloudBackend_478/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void function ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage cloudsettingsview = reviewsPage . navigateToSettings ( ) ; cloudsettingsview . switchToHanaCloudRemote ( ) ; cloudsettingsview . pressOk ( ) ; cloudsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( "Default ▁ category ▁ does ▁ not ▁ match" , "All ▁ Categories" , reviewsPage . getCategory ( ) ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } assertEquals ( "Default ▁ product ▁ does ▁ not ▁ match" , "10\" ▁ Portable ▁ DVD ▁ player" , reviewsPage . getProduct ( ) ) ; assertFalse ( "First ▁ reviewer ▁ name ▁ is ▁ empty" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( "First ▁ review ▁ comment ▁ is ▁ empty" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( "Speakers" ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . selectProduct ( "Sound ▁ Booster" ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "review-comment-text-area-id" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( "Good ▁ performance ▁ (" + reviewId + ")" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( "James" ) ; reviewCreationPage . setLastName ( "Field" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( "James ▁ Field" , reviewsPage . getFirstReviewer ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="пользователь_находится_на_странице_483/tree/master/src/test/java/com/mycompany/selenium/factory/steps/StepDefs.java"> public void function ( String title , String url ) throws Throwable { Init . getDriver ( ) . navigate ( ) . to ( url ) ; Init . getPage ( title ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilm_480/tree/master/training/src/test/java/ru/st/selenium/AddFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "My ▁ First ▁ Film" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2014" ) ; driver . findElement ( By . name ( "duration" ) ) . clear ( ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "120" ) ; driver . findElement ( By . name ( "rating" ) ) . clear ( ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "120" ) ; driver . findElement ( By . id ( "own_no" ) ) . click ( ) ; driver . findElement ( By . id ( "seen_no" ) ) . click ( ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain_485/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain_484/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_488/tree/master/demos.telerik.com/src/com/example/fw/WebMailManager.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_487/tree/master/common/test/java/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="openLoginPage_489/tree/master/ride-exchange-tests-logic/src/com/tests/logic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_490/tree/master/ride-exchange-tests-logic/src/com/tests/logic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_491/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_492/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_494/tree/master/src/main/java/php4dvd/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_495/tree/master/src/main/java/php4dvd/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="LoginUkrNet_493/tree/master/src/framework/Driver.java"> public void function ( ) { driver . get ( baseUrlUkrNet ) ; driver . findElement ( By . id ( "login" ) ) . sendKeys ( "ate569@ukr.net" ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "US!pf.avg" ) ; driver . findElement ( By . xpath ( ". // *[@id='login-form']/div[3]/button" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_496/tree/master/core/src/main/java/com/crawljax/browser/WebDriverBackedEmbeddedBrowser.java"> public void function ( URL url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( "goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded" , e ) ; return ; } } </DOCUMENT>
<DOCUMENT_ID="testCookieIntegrity_486/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( "fish" , "cod" , "/common/animals" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testFilmSearch_498/tree/master/src/test/java/ru/st/selenium/FilmSearchTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . id ( "q" ) ) . clear ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "AAA" ) ; try { assertTrue ( isElementPresent ( By . cssSelector ( "img[alt=\"AAA\"]" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "q" ) ) . clear ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "CCC" ) ; try { assertTrue ( isElementPresent ( By . xpath ( " // *[@id='results']/div[1]" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="goToTargetHost_499/tree/master/src/main/java/com/automation/seletest/core/selenium/webAPI/WebDriverController.java"> public WebDriverController function ( String url ) { webDriver ( ) . get ( url ) ; return this ; } </DOCUMENT>
<DOCUMENT_ID="testSigninNotificador_501/tree/master/src/test/java/br/ifes/leds/sincap/web/test/SigninNotificador.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "111.111.111-11" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilm_497/tree/master/src/test/java/ru/st/selenium/AddFilmPositiveAndRemoveTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // *[@id='content']/section/nav/ul/li[1]/div // img" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . xpath ( " // *[@id='updateform']/table/tbody/tr[2]/td[2]/input" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "AAA" ) ; driver . findElement ( By . name ( "aka" ) ) . clear ( ) ; driver . findElement ( By . name ( "aka" ) ) . sendKeys ( "BBB" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2000" ) ; driver . findElement ( By . name ( "duration" ) ) . clear ( ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "120" ) ; driver . findElement ( By . name ( "rating" ) ) . clear ( ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "own_no" ) ) . click ( ) ; driver . findElement ( By . id ( "seen_no" ) ) . click ( ) ; driver . findElement ( By . id ( "loaned_yes" ) ) . click ( ) ; driver . findElement ( By . name ( "loanname" ) ) . clear ( ) ; driver . findElement ( By . name ( "loanname" ) ) . sendKeys ( "XXX" ) ; driver . findElement ( By . name ( "notes" ) ) . clear ( ) ; driver . findElement ( By . name ( "notes" ) ) . sendKeys ( "Very ▁ good!" ) ; driver . findElement ( By . name ( "taglines" ) ) . clear ( ) ; driver . findElement ( By . name ( "taglines" ) ) . sendKeys ( "AAA" ) ; driver . findElement ( By . name ( "plotoutline" ) ) . clear ( ) ; driver . findElement ( By . name ( "plotoutline" ) ) . sendKeys ( "AAA" ) ; driver . findElement ( By . name ( "plots" ) ) . clear ( ) ; driver . findElement ( By . name ( "plots" ) ) . sendKeys ( "AAA" ) ; driver . findElement ( By . id ( "text_languages_0" ) ) . clear ( ) ; driver . findElement ( By . id ( "text_languages_0" ) ) . sendKeys ( "Russian" ) ; driver . findElement ( By . name ( "subtitles" ) ) . clear ( ) ; driver . findElement ( By . name ( "subtitles" ) ) . sendKeys ( "No" ) ; driver . findElement ( By . name ( "audio" ) ) . clear ( ) ; driver . findElement ( By . name ( "audio" ) ) . sendKeys ( "MP3" ) ; driver . findElement ( By . name ( "video" ) ) . clear ( ) ; driver . findElement ( By . name ( "video" ) ) . sendKeys ( "MP4" ) ; driver . findElement ( By . name ( "country" ) ) . clear ( ) ; driver . findElement ( By . name ( "country" ) ) . sendKeys ( "Russia" ) ; driver . findElement ( By . name ( "genres" ) ) . clear ( ) ; driver . findElement ( By . name ( "genres" ) ) . sendKeys ( "AAA" ) ; driver . findElement ( By . name ( "director" ) ) . clear ( ) ; driver . findElement ( By . name ( "director" ) ) . sendKeys ( "XYZ" ) ; driver . findElement ( By . name ( "writer" ) ) . clear ( ) ; driver . findElement ( By . name ( "writer" ) ) . sendKeys ( "QWE" ) ; driver . findElement ( By . name ( "producer" ) ) . clear ( ) ; driver . findElement ( By . name ( "producer" ) ) . sendKeys ( "ASD" ) ; driver . findElement ( By . name ( "music" ) ) . clear ( ) ; driver . findElement ( By . name ( "music" ) ) . sendKeys ( "ZXC" ) ; driver . findElement ( By . name ( "cast" ) ) . clear ( ) ; driver . findElement ( By . name ( "cast" ) ) . sendKeys ( "RTY" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . xpath ( " // img[@alt='Remove']" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . xpath ( " // img[@alt='Remove']" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSigninNotificador_503/tree/master/src/test/java/br/ifes/leds/sincap/web/test/SigninCaptador.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "222.222.222-22" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCadastroAnalista_502/tree/master/src/test/java/br/ifes/leds/sincap/web/test/CadastroAnalista.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "333.333.333-33" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.settings.hidden-phone ▁ > ▁ a" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='dashboard-menu']/li[2]/a/span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4.aba-centralizada" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='analista-table_wrapper']/div/div/div[3]/a" ) ) . click ( ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( analista . getNome ( ) ) ; driver . findElement ( By . id ( "senha" ) ) . clear ( ) ; driver . findElement ( By . id ( "senha" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "confirmar-senha" ) ) . clear ( ) ; driver . findElement ( By . id ( "confirmar-senha" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "cpf" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpf" ) ) . sendKeys ( analista . getCpf ( ) ) ; driver . findElement ( By . id ( "documentoSocial-documento" ) ) . clear ( ) ; driver . findElement ( By . id ( "documentoSocial-documento" ) ) . sendKeys ( analista . getDocumentoSocial ( ) . getDocumento ( ) ) ; new Select ( driver . findElement ( By . id ( "documentoSocial-tipoDocumentoComFoto" ) ) ) . selectByVisibleText ( analista . getDocumentoSocial ( ) . getTipoDocumentoComFoto ( ) . name ( ) ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( analista . getEmail ( ) ) ; new Select ( driver . findElement ( By . name ( "admin" ) ) ) . selectByVisibleText ( "Não" ) ; new Select ( driver . findElement ( By . id ( "endereco-estado-id" ) ) ) . selectByVisibleText ( analista . getEndereco ( ) . getEstado ( ) . getNome ( ) ) ; new Select ( driver . findElement ( By . id ( "endereco-cidade-id" ) ) ) . selectByVisibleText ( analista . getEndereco ( ) . getCidade ( ) . getNome ( ) ) ; new Select ( driver . findElement ( By . id ( "endereco-bairro-id" ) ) ) . selectByVisibleText ( analista . getEndereco ( ) . getBairro ( ) . getNome ( ) ) ; driver . findElement ( By . id ( "endereco-logradouro" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-logradouro" ) ) . sendKeys ( analista . getEndereco ( ) . getLogradouro ( ) ) ; driver . findElement ( By . id ( "endereco-numero" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-numero" ) ) . sendKeys ( analista . getEndereco ( ) . getNumero ( ) ) ; driver . findElement ( By . id ( "endereco-complemento" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-complemento" ) ) . sendKeys ( analista . getEndereco ( ) . getComplemento ( ) ) ; driver . findElement ( By . id ( "endereco-cep" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-cep" ) ) . sendKeys ( analista . getEndereco ( ) . getCep ( ) ) ; driver . findElement ( By . id ( "telefone-numero" ) ) . sendKeys ( analista . getTelefone ( ) . getNumero ( ) ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testNotificacaoObito_500/tree/master/src/test/java/br/ifes/leds/sincap/web/test/NotificacaoObito.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "111.111.111-11" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='dashboard-menu']/li[2]/a/span" ) ) . click ( ) ; driver . findElement ( By . id ( "obito-tipoObito" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "obito-tipoObito" ) ) ) . selectByVisibleText ( "PCR" ) ; driver . findElement ( By . cssSelector ( "option[value=\"PCR\"]" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "obito-paciente-documentoSocial-tipoDocumentoComFoto" ) ) ) . selectByVisibleText ( "RG" ) ; driver . findElement ( By . id ( "obito-paciente-documentoSocial-documento" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-documentoSocial-documento" ) ) . sendKeys ( "3546545333" ) ; driver . findElement ( By . id ( "obito-paciente-nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-nome" ) ) . sendKeys ( "Notificacao ▁ de ▁ obito" ) ; driver . findElement ( By . id ( "obito-paciente-dataNascimento" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-dataNascimento" ) ) . sendKeys ( "12/04/1985" ) ; driver . findElement ( By . id ( "obito-paciente-dataInternacao" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-dataInternacao" ) ) . sendKeys ( "10/08/2015" ) ; driver . findElement ( By . cssSelector ( "span.checked" ) ) . click ( ) ; driver . findElement ( By . id ( "obito-paciente-sexo:0" ) ) . click ( ) ; driver . findElement ( By . id ( "obito-paciente-nomeMae" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-nomeMae" ) ) . sendKeys ( "Mae ▁ do ▁ obito" ) ; driver . findElement ( By . id ( "obito-paciente-numeroSUS" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-numeroSUS" ) ) . sendKeys ( "156234434345" ) ; driver . findElement ( By . id ( "obito-paciente-numeroProntuario" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-paciente-numeroProntuario" ) ) . sendKeys ( "2564554643" ) ; driver . findElement ( By . id ( "descricaoComentario" ) ) . clear ( ) ; driver . findElement ( By . id ( "descricaoComentario" ) ) . sendKeys ( "comentario ▁ 1" ) ; driver . findElement ( By . id ( "btn-next" ) ) . click ( ) ; driver . findElement ( By . id ( "obito-dataObito" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-dataObito" ) ) . sendKeys ( "13/08/2015" ) ; driver . findElement ( By . id ( "horarioObito" ) ) . clear ( ) ; driver . findElement ( By . id ( "horarioObito" ) ) . sendKeys ( "10:21" ) ; new Select ( driver . findElement ( By . id ( "obito-setor" ) ) ) . selectByVisibleText ( "CIRURGIA ▁ GERAL" ) ; new Select ( driver . findElement ( By . id ( "obito-corpoEncaminhamento" ) ) ) . selectByVisibleText ( "IML" ) ; driver . findElement ( By . xpath ( " // div[@id='uniform-obito-aptoDoacao:0']/span" ) ) . click ( ) ; driver . findElement ( By . id ( "obito-aptoDoacao:0" ) ) . click ( ) ; driver . findElement ( By . id ( "obito-primeiraCausaMortis" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-primeiraCausaMortis" ) ) . sendKeys ( "causa ▁ 1" ) ; driver . findElement ( By . id ( "obito-segundaCausaMortis" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-segundaCausaMortis" ) ) . sendKeys ( "causa ▁ 2" ) ; driver . findElement ( By . id ( "obito-terceiraCausaMortis" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-terceiraCausaMortis" ) ) . sendKeys ( "causa ▁ 3" ) ; driver . findElement ( By . id ( "obito-quartaCausaMortis" ) ) . clear ( ) ; driver . findElement ( By . id ( "obito-quartaCausaMortis" ) ) . sendKeys ( "causa ▁ 4" ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCadastroSetor_505/tree/master/src/test/java/br/ifes/leds/sincap/web/test/CadastroSetor.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "555.555.555-55" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='dashboard-menu']/li[3]/a/span" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@type='button']" ) ) . click ( ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( "cadastro ▁ de ▁ setor" ) ; driver . findElement ( By . cssSelector ( "button.btn-flat.default" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSigninNotificador_506/tree/master/src/test/java/br/ifes/leds/sincap/web/test/SigninAnalista.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "333.333.333-33" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCadastroCausaNaoDoacao_507/tree/master/src/test/java/br/ifes/leds/sincap/web/test/CadastroCausaNaoDoacao.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "555.555.555-55" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#dashboard-menu ▁ > ▁ li ▁ > ▁ a ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@type='button']" ) ) . click ( ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( "causa ▁ de ▁ nao ▁ doacao" ) ; new Select ( driver . findElement ( By . id ( "tipoNaoDoacao" ) ) ) . selectByVisibleText ( "PROBLEMAS_LOGISTICOS" ) ; driver . findElement ( By . cssSelector ( "button.btn-flat.default" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCadastroCaptador_504/tree/master/src/test/java/br/ifes/leds/sincap/web/test/CadastroCaptador.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "555.555.555-55" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.settings.hidden-phone ▁ > ▁ a" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='dashboard-menu']/li[2]/a/span" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='dashboard-menu']/li[2]/a/span" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='tabs']/li[3]/a/h4" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='captador-table_wrapper']/div/div/div[3]/a/i" ) ) . click ( ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( "cadastro ▁ captador4" ) ; driver . findElement ( By . id ( "senha" ) ) . clear ( ) ; driver . findElement ( By . id ( "senha" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "confirmar-senha" ) ) . clear ( ) ; driver . findElement ( By . id ( "confirmar-senha" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "cpf" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpf" ) ) . sendKeys ( "182.180.980-12" ) ; driver . findElement ( By . id ( "documentoSocial-documento" ) ) . clear ( ) ; driver . findElement ( By . id ( "documentoSocial-documento" ) ) . sendKeys ( "3248728342039" ) ; new Select ( driver . findElement ( By . id ( "documentoSocial-tipoDocumentoComFoto" ) ) ) . selectByVisibleText ( "RG" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "cadastro@captador.com" ) ; new Select ( driver . findElement ( By . id ( "endereco-estado-id" ) ) ) . selectByVisibleText ( "Espírito ▁ Santo" ) ; new Select ( driver . findElement ( By . id ( "endereco-cidade-id" ) ) ) . selectByVisibleText ( "Serra" ) ; new Select ( driver . findElement ( By . id ( "endereco-bairro-id" ) ) ) . selectByVisibleText ( "Chácara ▁ Parreiral" ) ; driver . findElement ( By . id ( "endereco-logradouro" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-logradouro" ) ) . sendKeys ( "rua" ) ; driver . findElement ( By . id ( "endereco-numero" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-numero" ) ) . sendKeys ( "84" ) ; driver . findElement ( By . id ( "endereco-complemento" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-complemento" ) ) . sendKeys ( "casa" ) ; driver . findElement ( By . id ( "endereco-cep" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-cep" ) ) . sendKeys ( "32498-20" ) ; driver . findElement ( By . id ( "telefone-numero" ) ) . sendKeys ( "(27)2717-8186" ) ; new Select ( driver . findElement ( By . id ( "bancoOlhos-id" ) ) ) . selectByVisibleText ( "BANCO ▁ DE ▁ OLHOS ▁ 1" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="noRedirectUriGiven_510/tree/master/coin-api-war/src/test/java/nl/surfnet/coin/selenium/Oauth20ImplicitGrantTestSelenium.java"> public void function ( ) { String url = getApiBaseUrl ( ) + "oauth2/authorize?client_id=someclient&response_type=token" ; getWebDriver ( ) . get ( url ) ; loginAtMujinaIfNeeded ( USER_ID ) ; giveUserConsentIfNeeded ( ) ; String pageSource = getWebDriver ( ) . getPageSource ( ) ; LOG . debug ( "Response ▁ body ▁ is: ▁ " + pageSource ) ; assertTrue ( "Page ▁ should ▁ contain ▁ correct ▁ error ▁ message" , pageSource . contains ( "does ▁ not ▁ match ▁ one ▁ of ▁ the ▁ registered ▁ values" ) ) ; assertFalse ( "Page ▁ should ▁ not ▁ be ▁ a ▁ 500" , pageSource . contains ( "500" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="implicitGrantWithDeny_509/tree/master/coin-api-war/src/test/java/nl/surfnet/coin/selenium/Oauth20ImplicitGrantTestSelenium.java"> public void function ( ) throws Exception { OAuthService service = new ServiceBuilder ( ) . provider ( OpenConextApi20Implicit . class ) . apiKey ( OAUTH_KEY . concat ( UUID . randomUUID ( ) . toString ( ) ) ) . apiSecret ( OAUTH_SECRET . concat ( "force_consent" ) ) . callback ( OAUTH_CALLBACK_URL ) . scope ( OAUTH_OPENCONEXT_API_READ_SCOPE ) . build ( ) ; String authUrl = service . getAuthorizationUrl ( null ) ; LOG . debug ( "Auth ▁ url: ▁ {}" , authUrl ) ; getWebDriver ( ) . get ( authUrl ) ; loginAtMujinaIfNeeded ( USER_ID ) ; WebElement authorizeButton = getWebDriver ( ) . findElement ( By . id ( "decline_terms_button" ) ) ; authorizeButton . click ( ) ; URI uri = URI . create ( getWebDriver ( ) . getCurrentUrl ( ) ) ; LOG . debug ( "URL ▁ is: ▁ " + uri . toString ( ) ) ; LOG . debug ( "Response ▁ body ▁ is: ▁ " + getWebDriver ( ) . getPageSource ( ) ) ; callbackRequestFragment = uri . getFragment ( ) ; assertNotNull ( "redirect ▁ URL ▁ should ▁ contain ▁ fragment." , callbackRequestFragment ) ; assertFalse ( "redirect ▁ URL ▁ fragment ▁ should ▁ not ▁ contain ▁ access ▁ token" , callbackRequestFragment . contains ( "access_token=" ) ) ; assertFalse ( "redirect ▁ URL ▁ fragment ▁ should ▁ contain ▁ access ▁ token" , callbackRequestFragment . contains ( "access_token=" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCadastroHospital_508/tree/master/src/test/java/br/ifes/leds/sincap/web/test/CadastroHospital.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "555.555.555-55" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='dashboard-menu']/li[4]/a/span" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='pad-wrapper']/div/div/a" ) ) . click ( ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( "cadastro ▁ de ▁ hospital" ) ; driver . findElement ( By . id ( "sigla" ) ) . clear ( ) ; driver . findElement ( By . id ( "sigla" ) ) . sendKeys ( "cdh" ) ; driver . findElement ( By . id ( "fantasia" ) ) . clear ( ) ; driver . findElement ( By . id ( "fantasia" ) ) . sendKeys ( "hospital ▁ teste" ) ; driver . findElement ( By . id ( "cnes" ) ) . clear ( ) ; driver . findElement ( By . id ( "cnes" ) ) . sendKeys ( "564432" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "hospital@teste.com" ) ; new Select ( driver . findElement ( By . id ( "bancoOlhos-id" ) ) ) . selectByVisibleText ( "BANCO ▁ DE ▁ OLHOS ▁ 1" ) ; new Select ( driver . findElement ( By . id ( "endereco-estado-id" ) ) ) . selectByVisibleText ( "Espírito ▁ Santo" ) ; new Select ( driver . findElement ( By . id ( "endereco-cidade-id" ) ) ) . selectByVisibleText ( "Vitória" ) ; new Select ( driver . findElement ( By . id ( "endereco-bairro-id" ) ) ) . selectByVisibleText ( "República" ) ; driver . findElement ( By . id ( "endereco-logradrouro" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-logradrouro" ) ) . sendKeys ( "rua" ) ; driver . findElement ( By . id ( "endereco-numero" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-numero" ) ) . sendKeys ( "45" ) ; driver . findElement ( By . id ( "endereco-complemento" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-complemento" ) ) . sendKeys ( "complemento" ) ; driver . findElement ( By . id ( "endereco-cep" ) ) . clear ( ) ; driver . findElement ( By . id ( "endereco-cep" ) ) . sendKeys ( "38198188" ) ; driver . findElement ( By . id ( "telefone-numero" ) ) . clear ( ) ; driver . findElement ( By . id ( "telefone-numero" ) ) . sendKeys ( "273217819" ) ; new Select ( driver . findElement ( By . id ( "lsetores" ) ) ) . selectByVisibleText ( "CLINICA ▁ MEDICA" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testWithWebDriver_513/tree/master/src/test/java/org/littleshoot/proxy/EndToEndStoppingTest.java"> public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = new DefaultHttpProxyServer ( port ) ; proxyServer . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( "localhost:%d" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = "http: // www.yahoo.com/" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_514/tree/master/prestashop-sample/src/test/java/ru/stqa/selenium/samples/prestashop/SampleTestNgTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_515/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_516/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testS141Test_512/tree/master/test/selenium-sanity/src/com/example/tests/CreatingReportsAndVerifying.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/customer/index" ) ; driver . findElement ( By . cssSelector ( "span" ) ) . click ( ) ; driver . findElement ( By . linkText ( "ADD ▁ NEW" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "accountTypeId" ) ) ) . selectByVisibleText ( "Direct ▁ Customer" ) ; driver . findElement ( By . linkText ( "SELECT" ) ) . click ( ) ; driver . findElement ( By . id ( "user.userName" ) ) . clear ( ) ; driver . findElement ( By . id ( "user.userName" ) ) . sendKeys ( "Test ▁ Customer1" ) ; driver . findElement ( By . linkText ( "SAVE ▁ CHANGES" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . linkText ( "Customers" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "td ▁ > ▁ a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; driver . findElement ( By . linkText ( "CREATE ▁ ORDER" ) ) . click ( ) ; driver . findElement ( By . id ( "ui-id-8" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "td ▁ > ▁ a.cell.double ▁ >strong" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#change--3-update-form ▁ > ▁ div.btn-box ▁ > ▁ a.submit.save ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . linkText ( "SAVE ▁ CHANGES" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Orders" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ >strong" ) ) . click ( ) ; driver . findElement ( By . linkText ( "GENERATE ▁ INVOICE" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Customers" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; driver . findElement ( By . linkText ( "MAKE ▁ PAYMENT" ) ) . click ( ) ; driver . findElement ( By . name ( "invoiceId" ) ) . click ( ) ; driver . findElement ( By . id ( "paymentMethod_0.processingOrder" ) ) . clear ( ) ; driver . findElement ( By . id ( "paymentMethod_0.processingOrder" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . xpath ( "( // input[@type='text'])[5]" ) ) . clear ( ) ; driver . findElement ( By . xpath ( "( // input[@type='text'])[5]" ) ) . sendKeys ( "Rahul" ) ; driver . findElement ( By . xpath ( "( // input[@type='text'])[6]" ) ) . clear ( ) ; driver . findElement ( By . xpath ( "( // input[@type='text'])[6]" ) ) . sendKeys ( "4111111111111152" ) ; driver . findElement ( By . xpath ( "( // input[@type='text'])[7]" ) ) . clear ( ) ; driver . findElement ( By . xpath ( "( // input[@type='text'])[7]" ) ) . sendKeys ( "12/2020" ) ; driver . findElement ( By . linkText ( "REVIEW ▁ PAYMENT" ) ) . click ( ) ; driver . findElement ( By . linkText ( "MAKE ▁ PAYMENT" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Payments" ) ) . click ( ) ; Assert . assertEquals ( driver . getPageSource ( ) . contains ( "Test ▁ Customer1" ) , true ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Reports" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // strong[text()='Invoice ▁ Reports']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // strong[text()='Total ▁ Amount ▁ Invoiced']" ) ) . click ( ) ; driver . findElement ( By . id ( "start_date" ) ) . clear ( ) ; driver . findElement ( By . id ( "start_date" ) ) . sendKeys ( "10/8/2015" ) ; driver . findElement ( By . id ( "end_date" ) ) . clear ( ) ; driver . findElement ( By . id ( "end_date" ) ) . sendKeys ( "10/8/2015" ) ; new Select ( driver . findElement ( By . id ( "period" ) ) ) . selectByVisibleText ( "Day" ) ; new Select ( driver . findElement ( By . id ( "format" ) ) ) . selectByVisibleText ( "View ▁ as ▁ HTML" ) ; driver . findElement ( By . linkText ( "RUN ▁ REPORT" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "format" ) ) ) . selectByVisibleText ( "Adobe ▁ PDF" ) ; driver . findElement ( By . linkText ( "RUN ▁ REPORT" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "format" ) ) ) . selectByVisibleText ( "Excel" ) ; driver . findElement ( By . linkText ( "RUN ▁ REPORT" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_517/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="prepareBrowserAndPage_518/tree/master/testwebdriver/src/test/java/org/mnowrot/quicklist/webdrivertests/IndexPageTest.java"> public void function ( String url , String browserName , String pageElementFinderName ) { browser = BrowserProvider . provideBrowserByName ( browserName ) ; finder = IndexPageElementFinderProvider . provideIndexPageElementFinderByName ( pageElementFinderName , browser ) ; wait = new FluentWait < WebDriver > ( browser ) . withTimeout ( 30 , TimeUnit . SECONDS ) . pollingEvery ( 1 , TimeUnit . SECONDS ) . ignoring ( StaleElementReferenceException . class ) ; browser . get ( url ) ; deleteAllItems ( ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutWithOutLink_520/tree/master/src/test/java/selenium/page/LoginPage.java"> public void function ( ) { logger . info ( "Selenium ▁ testing ▁ logout ▁ starting..." ) ; webDriver . get ( baseUrl + "/user/logout" ) ; logger . info ( "Selenium ▁ testing ▁ logout ▁ complete..." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWebServiceResponse_519/tree/master/src/test/java/selenium/test/WebServiceIT.java"> public void function ( ) throws Exception { logger . info ( "Starting ▁ web ▁ service ▁ response ▁ testing..." ) ; webDriver . manage ( ) . window ( ) . maximize ( ) ; webDriver . get ( baseUrl ) ; loginPage . logoutWithOutLink ( ) ; loginPage . login ( loginName0 , loginPassword0 , false ) ; StringBuilder urlTest1 = new StringBuilder ( baseUrl ) ; urlTest1 . append ( "/ajax" ) ; webDriver . get ( urlTest1 . toString ( ) ) ; JavascriptExecutor js = ( JavascriptExecutor ) webDriver ; js . executeScript ( "document.getElementById('ajaxGet').setAttribute('style', ▁ 'display: ▁ block');" ) ; webDriverWait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "ajaxGet" ) , "true" ) ) ; String response = webDriver . findElement ( By . id ( "ajaxGet" ) ) . getText ( ) ; Assert . assertEquals ( "true" , response ) ; Thread . sleep ( 2000 ) ; loginPage . logoutWithOutLink ( ) ; logger . info ( "testing ▁ web ▁ service ▁ complete..." ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_522/tree/master/src/main/java/lessonsSe/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_523/tree/master/src/main/java/lessonsSe/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="crawlUsenix_Simple_Page_521/tree/master/src/org/dblp/crawler/ViewAbstractExtractor.java"> private String function ( String url ) throws Exception { System . out . println ( "--->crawlUsenix_Simple_Page.............." ) ; driver . get ( url ) ; try { org . openqa . selenium . WebElement element = driver . findElement ( By . xpath ( " // body" ) ) ; String abs = "" ; String [ ] elements = element . getText ( ) . split ( " \n " ) ; int length = element . getText ( ) . split ( " \n " ) . length ; boolean flag = false ; for ( int i = 0 ; i < length ; i ++ ) { if ( "Abstract" . equals ( elements [ i ] . trim ( ) ) ) { flag = true ; } if ( elements [ i ] . trim ( ) . startsWith ( "Download ▁ the ▁ full ▁ text" ) ) { flag = false ; break ; } if ( flag ) { abs += elements [ i ] . trim ( ) ; } } if ( ! flag ) return "" . equals ( abs ) ? null : abs . replaceFirst ( "Abstract" , "" ) ; } catch ( NoSuchElementException e ) { throw new Exception ( "Abstract ▁ Not ▁ Found" ) ; } return null ; } </DOCUMENT>
<DOCUMENT_ID="addInSumFilmNot_525/tree/master/src/test/java/LessonsSe/AddInSumFilmNot.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String username = "username" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( "admin" ) ; String password = "password" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( ".button>div>a>img" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".required.error" ) ) ) ; driver . findElement ( By . cssSelector ( "input[name='name']" ) ) . clear ( ) ; driver . findElement ( By . cssSelector ( "input[name='year']" ) ) . clear ( ) ; driver . findElements ( By . cssSelector ( "input[type='submit']" ) ) . get ( 1 ) . click ( ) ; AssertJUnit . assertTrue ( "Поле ▁ год ▁ не ▁ заполнено" , driver . findElement ( By . cssSelector ( "label[for='year']" ) ) . getText ( ) . equals ( "This ▁ field ▁ is ▁ required" ) ) ; AssertJUnit . assertTrue ( "Поле ▁ название ▁ фильма ▁ не ▁ заполнено" , driver . findElement ( By . cssSelector ( "label[for='name']" ) ) . getText ( ) . equals ( "This ▁ field ▁ is ▁ required" ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="deletSumFilm_524/tree/master/src/test/java/LessonsSe/DeletSumFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String username = "username" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( "admin" ) ; String password = "password" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( ".center>nav>ul>li>a" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".movie_box" ) ) ) ; int kol = driver . findElements ( By . cssSelector ( ".title" ) ) . size ( ) ; String elmovi = driver . findElements ( By . cssSelector ( ".movie_box" ) ) . get ( 0 ) . getAttribute ( "id" ) ; driver . findElements ( By . cssSelector ( ".title" ) ) . get ( 0 ) . click ( ) ; driver . findElement ( By . linkText ( "Remove" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".movie_box" ) ) ) ; Assert . assertEquals ( kol - 1 , driver . findElements ( By . cssSelector ( ".title" ) ) . size ( ) ) ; AssertJUnit . assertFalse ( "Фильм ▁ удален" , driver . findElements ( By . cssSelector ( ".movie_box" ) ) . get ( 0 ) . getAttribute ( "id" ) . equals ( elmovi ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="addInSumFilmNotYear_526/tree/master/src/test/java/LessonsSe/AddInSumFilmNotYear.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String username = "username" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( "admin" ) ; String password = "password" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( ".button>div>a>img" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".required.error" ) ) ) ; driver . findElement ( By . cssSelector ( "input[name='name']" ) ) . sendKeys ( "NewFilm2" ) ; driver . findElement ( By . cssSelector ( "input[name='year']" ) ) . clear ( ) ; driver . findElements ( By . cssSelector ( "input[type='submit']" ) ) . get ( 1 ) . click ( ) ; AssertJUnit . assertTrue ( "Поле ▁ год ▁ не ▁ заполнено" , driver . findElement ( By . cssSelector ( "label[for='year']" ) ) . getText ( ) . equals ( "This ▁ field ▁ is ▁ required" ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_528/tree/master/src/main/java/lessonsSe/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_529/tree/master/src/main/java/lessonsSe/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="addInSumFilmNotTitle_527/tree/master/src/test/java/LessonsSe/AddInSumFilmNotTitle.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String username = "username" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( "admin" ) ; String password = "password" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( ".button>div>a>img" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".required.error" ) ) ) ; driver . findElement ( By . cssSelector ( "input[name='year']" ) ) . sendKeys ( "2010" ) ; driver . findElements ( By . cssSelector ( "input[type='submit']" ) ) . get ( 1 ) . click ( ) ; AssertJUnit . assertTrue ( "Поле ▁ название ▁ фильма ▁ не ▁ заполнено" , driver . findElement ( By . cssSelector ( "label[for='name']" ) ) . getText ( ) . equals ( "This ▁ field ▁ is ▁ required" ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_531/tree/master/src/test/java/LessonsSe/SampleTestNgTest.java"> public void function ( ) { driver . get ( baseUrl ) ; AssertJUnit . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testJbillingSanityTest_511/tree/master/test/functional/com/sapienter/jbilling/selenium/sanity/JBillingSanityTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/login/auth" ) ; driver . findElement ( By . id ( "j_username" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "j_password" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_password" ) ) . sendKeys ( "123qwe" ) ; WebElement selectCompany = driver . findElement ( By . id ( "j_client_id" ) ) ; List < WebElement > companies = selectCompany . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : companies ) { if ( "Prancing ▁ Pony" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . get ( baseUrl + "/product/editCategory?add=true" ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "Test ▁ Category" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.active ▁ > ▁ a ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "li.active ▁ > ▁ a ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.edit ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "New ▁ Test ▁ Category" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "#column2 ▁ > ▁ div.btn-box ▁ > ▁ a.submit.add ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . id ( "product.number" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.number" ) ) . sendKeys ( "Test ▁ Code" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( "img[alt='remove']" ) ) . click ( ) ; driver . findElement ( By . id ( "product.descriptions[0].content" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.descriptions[0].content" ) ) . sendKeys ( "Test ▁ Code ▁ Description" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "li.active ▁ > ▁ a ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "#column2 ▁ > ▁ div.btn-box ▁ > ▁ a.submit.add ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "img[alt='remove']" ) ) . click ( ) ; driver . findElement ( By . id ( "product.descriptions[0].content" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.descriptions[0].content" ) ) . sendKeys ( "Test ▁ Code ▁ Description ▁ 1" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( "product.number" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.number" ) ) . sendKeys ( "Test ▁ Code ▁ 1" + new Date ( ) . getSeconds ( ) ) ; WebElement select = driver . findElement ( By . id ( "model.0.type" ) ) ; List < WebElement > priceModelOptions = select . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : priceModelOptions ) { if ( "Metered" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( "model.0.rateAsDecimal" ) ) . clear ( ) ; driver . findElement ( By . id ( "model.0.rateAsDecimal" ) ) . sendKeys ( "12.00" ) ; WebElement currencyCode = driver . findElement ( By . id ( "model.0.currencyId" ) ) ; List < WebElement > currencyOptions = currencyCode . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : currencyOptions ) { if ( "United ▁ States ▁ Dollar" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Products" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#category-2400 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "#product-3200 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "#column2 ▁ > ▁ div.btn-box ▁ > ▁ a.submit.edit ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . id ( "product.number" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.number" ) ) . sendKeys ( "New ▁ Test ▁ Code" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( "product.descriptions[0].content" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.descriptions[0].content" ) ) . sendKeys ( "New ▁ Test ▁ Code ▁ Description ▁ " + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( "product.percentageAsDecimal" ) ) . clear ( ) ; driver . findElement ( By . id ( "product.percentageAsDecimal" ) ) . sendKeys ( "15" ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Customers" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a[href='/jbilling/customer/edit']" ) ) . click ( ) ; driver . findElement ( By . id ( "user.userName" ) ) . clear ( ) ; driver . findElement ( By . id ( "user.userName" ) ) . sendKeys ( "Ashish" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( "newPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "newPassword" ) ) . sendKeys ( "12345" ) ; driver . findElement ( By . id ( "verifiedPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "verifiedPassword" ) ) . sendKeys ( "12345" ) ; driver . findElement ( By . id ( "contact-2.email" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.email" ) ) . sendKeys ( "ashishs@360logica.com" ) ; WebElement countryCode = driver . findElement ( By . id ( "contact-2.countryCode" ) ) ; List < WebElement > countryCodeOptions = countryCode . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : countryCodeOptions ) { if ( "India" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.edit ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( "contact-2.email" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.email" ) ) . sendKeys ( "ashishs@gmail.com" ) ; driver . findElement ( By . id ( "contact-2.address1" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.address1" ) ) . sendKeys ( "Jaipur" ) ; driver . findElement ( By . id ( "contact-2.address2" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.address2" ) ) . sendKeys ( "Elements ▁ Mall" ) ; driver . findElement ( By . id ( "contact-2.stateProvince" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.stateProvince" ) ) . sendKeys ( "Rajasthan" ) ; driver . findElement ( By . id ( "contact-2.city" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.city" ) ) . sendKeys ( "Jaipur" ) ; driver . findElement ( By . id ( "contact-2.postalCode" ) ) . clear ( ) ; driver . findElement ( By . id ( "contact-2.postalCode" ) ) . sendKeys ( "302021" ) ; driver . findElement ( By . cssSelector ( "a.btn-open ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( "creditCard.name" ) ) . clear ( ) ; driver . findElement ( By . id ( "creditCard.name" ) ) . sendKeys ( "Ashish" ) ; driver . findElement ( By . id ( "creditCard.number" ) ) . clear ( ) ; driver . findElement ( By . id ( "creditCard.number" ) ) . sendKeys ( "4111111111111152" ) ; driver . findElement ( By . id ( "expiryMonth" ) ) . clear ( ) ; driver . findElement ( By . id ( "expiryMonth" ) ) . sendKeys ( "12" ) ; driver . findElement ( By . id ( "expiryYear" ) ) . clear ( ) ; driver . findElement ( By . id ( "expiryYear" ) ) . sendKeys ( "2020" ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.submit.order ▁ > ▁ span" ) ) . click ( ) ; WebElement selectOrder = driver . findElement ( By . id ( "period" ) ) ; List < WebElement > order = selectOrder . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : order ) { if ( "Monthly" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } WebElement selectTypeid = driver . findElement ( By . id ( "billingTypeId" ) ) ; List < WebElement > typeid = selectTypeid . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : typeid ) { if ( "pre ▁ paid" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } WebElement selectStatusid = driver . findElement ( By . id ( "statusId" ) ) ; List < WebElement > statusid = selectStatusid . findElements ( By . tagName ( "option" ) ) ; for ( WebElement option : statusid ) { if ( "Active" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } driver . findElement ( By . id ( "activeSince" ) ) . click ( ) ; driver . findElement ( By . id ( "activeSince" ) ) . clear ( ) ; driver . findElement ( By . id ( "activeSince" ) ) . sendKeys ( "01/01/2010" ) ; driver . findElement ( By . xpath ( " // form[@id='order-details-form']/div/div[4]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[contains(text(),'Products')]" ) ) . click ( ) ; driver . findElement ( By . id ( "filterBy" ) ) . clear ( ) ; driver . findElement ( By . id ( "filterBy" ) ) . sendKeys ( "New ▁ Test ▁ Code" ) ; driver . findElement ( By . cssSelector ( "strong" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.submit.save ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.submit.order ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.payment ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( "processNow" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "a.submit.payment ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.payment ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Unlink" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[2]" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.submit.delete ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[4]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Invoices" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( "a.submit.delete ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[4]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='navigation']/ul/li[8]/a/span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Orders" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( "a.submit.delete ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[2]" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Products" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "#category-2400 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( "#product-3200 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( "a.submit.delete ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[6]" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Customers" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( "a.cell.double ▁ > ▁ strong" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( "a.submit.delete ▁ > ▁ span" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[2]" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( "Logout" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; } </DOCUMENT>
<DOCUMENT_ID="searshFilmNull_532/tree/master/src/test/java/LessonsSe/SearshFilmNull.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String username = "username" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( "admin" ) ; String password = "password" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "sdflksdhgsd" ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( Keys . ENTER ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".content" ) ) ) ; Assert . assertTrue ( driver . findElement ( By . cssSelector ( ".content" ) ) . getText ( ) . equals ( "No ▁ movies ▁ where ▁ found." ) , "Нет ▁ такого ▁ фильма" ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="errorInNestedFrame_534/tree/master/src/test/java/net/jsourcerer/webdriver/jserrorcollector/SimpleTest.java"> public void function ( ) throws Exception { final List < JavaScriptError > expectedErrors = Arrays . asList ( errorWithNestedFrameHtml , errorSimpleHtml ) ; final WebDriver driver = buildFFDriver ( ) ; driver . get ( urlWithNestedFrameHtml ) ; final List < JavaScriptError > jsErrors = JavaScriptError . readErrors ( driver ) ; assertEquals ( expectedErrors . toString ( ) , jsErrors . toString ( ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="addInSumFilm_533/tree/master/src/test/java/LessonsSe/AddInSumFilm.java"> public void function ( ) throws Exception { app . getNavigationHelper ( ) . gotoAddFilmPage ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".required.error" ) ) ) ; driver . findElement ( By . cssSelector ( "input[name='name']" ) ) . sendKeys ( "FilmNew" ) ; driver . findElement ( By . cssSelector ( "input[name='year']" ) ) . sendKeys ( "2010" ) ; driver . findElements ( By . cssSelector ( "input[type='submit']" ) ) . get ( 1 ) . click ( ) ; String elurl = "movie_" + driver . getCurrentUrl ( ) . substring ( 39 ) ; driver . findElements ( By . cssSelector ( ".center>nav>ul>li>a" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".title" ) ) ) ; Assert . assertTrue ( driver . findElement ( By . id ( elurl ) ) . getAttribute ( "id" ) . equals ( elurl ) , "Нет ▁ такого ▁ идентифекатора ▁ фильма" ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="errorInPopup_535/tree/master/src/test/java/net/jsourcerer/webdriver/jserrorcollector/SimpleTest.java"> public void function ( ) throws Exception { final List < JavaScriptError > expectedErrors = Arrays . asList ( errorPopupHtml ) ; final WebDriver driver = buildFFDriver ( ) ; driver . get ( urlWithPopupHtml ) ; driver . findElement ( By . tagName ( "button" ) ) . click ( ) ; final List < JavaScriptError > jsErrors = JavaScriptError . readErrors ( driver ) ; assertEquals ( expectedErrors . toString ( ) , jsErrors . toString ( ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="errorInExternalJS_536/tree/master/src/test/java/net/jsourcerer/webdriver/jserrorcollector/SimpleTest.java"> public void function ( ) throws Exception { final List < JavaScriptError > expectedErrors = Arrays . asList ( errorExternalJs ) ; final WebDriver driver = buildFFDriver ( ) ; driver . get ( urlWithExternalJs ) ; final List < JavaScriptError > jsErrors = JavaScriptError . readErrors ( driver ) ; assertEquals ( expectedErrors . toString ( ) , jsErrors . toString ( ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="searshFilmOk_530/tree/master/src/test/java/LessonsSe/SearshFilmOk.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; String username = "username" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( "admin" ) ; String password = "password" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( ".button>div>a>img" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".required.error" ) ) ) ; driver . findElement ( By . cssSelector ( "input[name='name']" ) ) . sendKeys ( "FilmForSearsh" ) ; driver . findElement ( By . cssSelector ( "input[name='year']" ) ) . sendKeys ( "2016" ) ; driver . findElements ( By . cssSelector ( "input[type='submit']" ) ) . get ( 1 ) . click ( ) ; driver . findElements ( By . cssSelector ( ".center>nav>ul>li>a" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".movie_box" ) ) ) ; int kol = driver . findElements ( By . cssSelector ( ".title" ) ) . size ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "Film" ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( Keys . ENTER ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "results" ) ) ) ; if ( driver . findElements ( By . cssSelector ( ".title" ) ) . size ( ) < kol ) { Assert . assertTrue ( driver . findElement ( By . cssSelector ( ".title" ) ) . getText ( ) . equals ( "FilmForSearsh" ) , "Такого ▁ фильма ▁ нет" ) ; } else Assert . fail ( "Количество ▁ фильмов ▁ осталось ▁ прежним" ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_537/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_538/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_540/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_539/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_541/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_542/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_543/tree/master/java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_544/tree/master/java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_545/tree/master/java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_546/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_548/tree/master/java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_549/tree/master/java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_551/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_552/tree/master/java/client/test/org/openqa/selenium/qtwebkit/nativetests/VisibilityTest.java"> public void function ( ) { String url = "qtwidget: // TypingTestWidget" ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "result" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_547/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_553/tree/master/java/client/test/org/openqa/selenium/qtwebkit/nativetests/VisibilityTest.java"> public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = "qtwidget: // TypingTestWidget" ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "result" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_554/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_550/tree/master/java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_555/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="RedMineGUI_557/tree/master/src/main/java/com/eviltester/redmine/RedMineGUI.java"> public function ( String redmineUrl ) { this . redmineURL = redmineUrl ; aDriver = new FirefoxDriver ( ) ; aDriver . get ( redmineUrl ) ; wait = new WebDriverWait ( aDriver , 10 ) ; } </DOCUMENT>
<DOCUMENT_ID="goToMainPage_559/tree/master/eclipse-selenium-test-fom/src/com/example/tests/LoginTest.java"> private void function ( ) { driver . get ( baseUrl + "/php4dvd/" ) ; loginPage = PageFactory . initElements ( driver , LoginPage . class ) ; somePage = PageFactory . initElements ( driver , InternalPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="allocateUserToProjectAndRoles_558/tree/master/src/main/java/com/eviltester/redmine/RedMineGUI.java"> public void function ( User aUser , Project aProject , List < Role > roles ) { String urlForProjectMembership = redmineURL + String . format ( "/users/%d/edit?tab=memberships" , aUser . getId ( ) ) ; aDriver . get ( urlForProjectMembership ) ; WebElement addButton = wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "div#tab-content-memberships ▁ form ▁ input[type='submit']" ) ) ) ; Select projects = new Select ( aDriver . findElement ( By . id ( "membership_project_id" ) ) ) ; projects . selectByValue ( String . valueOf ( aProject . getId ( ) ) ) ; for ( Role aRole : roles ) { WebElement roleCheckBox = aDriver . findElement ( By . cssSelector ( "input#membership_role_ids_[value='" + aRole . getId ( ) + "']" ) ) ; if ( ! roleCheckBox . isSelected ( ) ) { roleCheckBox . click ( ) ; } } addButton . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_556/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testLogInOut_562/tree/master/idea-selenium-test-fom/src/LogInOut.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\s\\S]$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLogInOut_561/tree/master/SeleniumIDE_Autorecords/log in-out.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\s\\S]$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToMainPage_563/tree/master/eclipse-selenium-test-fom/src/com/example/tests/CreateNewUserTest.java"> private void function ( ) { driver . get ( baseUrl + "/php4dvd/" ) ; } </DOCUMENT>
<DOCUMENT_ID="goToMainPage_564/tree/master/eclipse-selenium-test-fom/src/com/example/tests/ChangeEmailTest.java"> private void function ( ) { driver . get ( baseUrl + "/php4dvd/" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCaptureTutorial13_565/tree/master/pitalium-sample/src/main/java/com/htmlhifive/pitalium/sample/PtlSampleTest.java"> public void function ( ) throws Exception { String url = "conts/web/view/tutorial/interacting-with-controllers" ; driver . get ( url ) ; assertionView . assertView ( "tutorial13" , null , HIDE_ELEMENTS ) ; } </DOCUMENT>
<DOCUMENT_ID="goToURL_567/tree/master/src/main/java/ui/PageTransporter.java"> private void function ( String url ) { driver . navigate ( ) . to ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testOpenSite_568/tree/master/src/test/java/org/mands/test/framework/BrowserTest.java"> public void function ( ) { browser . open ( sampleUrl ) ; verify ( mocked_webDriver ) . get ( sampleUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testCaptureTutorialTop_566/tree/master/pitalium-sample/src/main/java/com/htmlhifive/pitalium/sample/PtlSampleTest.java"> public void function ( ) throws Exception { String url = "conts/web/view/tutorial/menu" ; driver . get ( url ) ; PtlWebElement e = ( PtlWebElement ) driver . findElement ( By . cssSelector ( ".wikimodel-freestanding" ) ) ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( "arguments[0].width=arguments[1]" , e , e . getRect ( ) . getWidth ( ) ) ; jse . executeScript ( "arguments[0].height=arguments[1]" , e , e . getRect ( ) . getHeight ( ) ) ; jse . executeScript ( "arguments[0].src=''" , e ) ; assertionView . assertView ( "tutorial13" , null , HIDE_ELEMENTS ) ; } </DOCUMENT>
<DOCUMENT_ID="testRenameEmail_560/tree/master/SeleniumIDE_Autorecords/RenameEmail.java"> public void function ( ) throws Exception { package com . example . tests ; import java . util . regex . Pattern ; import java . util . concurrent . TimeUnit ; import org . junit . * ; import static org . junit . Assert . * ; import static org . hamcrest . CoreMatchers . * ; import org . openqa . selenium . * ; import org . openqa . selenium . firefox . FirefoxDriver ; import org . openqa . selenium . support . ui . Select ; public class RenameEmail { private WebDriver driver ; private String baseUrl ; private boolean acceptNextAlert = true ; private StringBuffer verificationErrors = new StringBuffer ( ) ; @ Before public void setUp ( ) throws Exception { driver = new FirefoxDriver ( ) ; baseUrl = "http: // localhost/" ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 30 , TimeUnit . SECONDS ) ; } @ Test public void testUntitled2 ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ profile" ) ) . click ( ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "admin@admin.ru" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . name ( "email" ) ) . clear ( ) ; driver . findElement ( By . name ( "email" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\s\\S]$" ) ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; } @ After public void tearDown ( ) throws Exception { driver . quit ( ) ; String verificationErrorString = verificationErrors . toString ( ) ; if ( ! "" . equals ( verificationErrorString ) ) { fail ( verificationErrorString ) ; } } private boolean isElementPresent ( By by ) { try { driver . findElement ( by ) ; return true ; } catch ( NoSuchElementException e ) { return false ; } } private boolean isAlertPresent ( ) { try { driver . switchTo ( ) . alert ( ) ; return true ; } catch ( NoAlertPresentException e ) { return false ; } } private String closeAlertAndGetItsText ( ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; String alertText = alert . getText ( ) ; if ( acceptNextAlert ) { alert . accept ( ) ; } else { alert . dismiss ( ) ; } return alertText ; } finally { acceptNextAlert = true ; } } } } </DOCUMENT>
<DOCUMENT_ID="testCenarioUm_569/tree/master/ExercicioCinco/test/Cenarios.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; assertTrue ( isElementPresent ( By . linkText ( "Conheça ▁ os ▁ Deputados" ) ) ) ; driver . findElement ( By . linkText ( "Conheça ▁ os ▁ Deputados" ) ) . click ( ) ; assertEquals ( "Pesquisa ▁ de ▁ Deputados" , driver . findElement ( By . xpath ( " // div[@id='content']/div/div[2]/h6" ) ) . getText ( ) ) ; assertEquals ( "Pesquisar" , driver . findElement ( By . id ( "Pesquisa2" ) ) . getAttribute ( "value" ) ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( "Tiririca" ) ; new Select ( driver . findElement ( By . id ( "uf" ) ) ) . selectByVisibleText ( "SP" ) ; driver . findElement ( By . id ( "Pesquisa2" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ civil: ▁ FRANCISCO ▁ EVERARDO ▁ OLIVEIRA ▁ SILVA" . equals ( driver . findElement ( By . cssSelector ( "ul.visualNoMarker ▁ > ▁ li" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "Projetos ▁ de ▁ sua ▁ autoria" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Data ▁ de ▁ apresentação: ▁ 7/6/2011 \n Ementa: ▁ Altera ▁ a ▁ Lei ▁ nº ▁ 10.753, ▁ de ▁ 30 ▁ de ▁ outubro ▁ de ▁ 2003, ▁ que ▁ institui ▁ a ▁ Política ▁ Nacional ▁ do ▁ Livro, ▁ para ▁ dispor ▁ sobre ▁ a ▁ criação ▁ do ▁ Vale-Livro." . equals ( driver . findElement ( By . xpath ( " // form[@id='frmListaProp']/table/tbody[21]/tr[2]/td[2]/p[2]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "próxima" ) ) . click ( ) ; assertTrue ( driver . getCurrentUrl ( ) . matches ( "^http: // www\\.camara\\.gov\\.br/internet/sileg/Prop_lista\\.asp[\\s\\S]Pagina=2&Autor=530193&Limite=N$" ) ) ; driver . navigate ( ) . back ( ) ; driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ civil: ▁ FRANCISCO ▁ EVERARDO ▁ OLIVEIRA ▁ SILVA" . equals ( driver . findElement ( By . cssSelector ( "ul.visualNoMarker ▁ > ▁ li" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "Discursos ▁ em ▁ plenário" ) ) . click ( ) ; try { assertEquals ( "Discursos ▁ e ▁ Notas ▁ Taquigráficas" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . linkText ( "Retorna ▁ a ▁ pesquisa." ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ civil: ▁ FRANCISCO ▁ EVERARDO ▁ OLIVEIRA ▁ SILVA" . equals ( driver . findElement ( By . cssSelector ( "ul.visualNoMarker ▁ > ▁ li" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "Biografia" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "SILVA, ▁ Francisco ▁ Everardo ▁ Oliveira ▁ (Co-autor). ▁ As ▁ Piadas ▁ fantárdigas ▁ do ▁ Tiririca. ▁ São ▁ Paulo: ▁ Matrix, ▁ 2006." . equals ( driver . findElement ( By . xpath ( " // div[@id='bioDeputado']/div[9]/div[2]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . cssSelector ( "a[title=\"Proposições ▁ Transformadas ▁ em ▁ Norma ▁ Jurídica\"] ▁ > ▁ b" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "PL ▁ 4682/2012" . equals ( driver . findElement ( By . cssSelector ( "span.nomeProposicao" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . xpath ( "( // a[contains(text(),'Atividade ▁ Legislativa')])[2]" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Agenda" . equals ( driver . findElement ( By . cssSelector ( "a[alt=\"Agenda\"]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Comissões" . equals ( driver . findElement ( By . cssSelector ( "a[alt=\"Comissões\"]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Conheça ▁ o ▁ Processo ▁ Legislativo" . equals ( driver . findElement ( By . cssSelector ( "a[alt=\"Conheça ▁ o ▁ Processo ▁ Legislativo\"]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_572/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="doFetchInvest_573/tree/master/src/SRFetcher.java"> public void function ( ) { this . driver . get ( urlInvest ) ; List < WebElement > totals = driver . findElements ( By . xpath ( tableInvestTotals ) ) ; List < WebElement > names = driver . findElements ( By . xpath ( tableInvestNames ) ) ; Hashtable < String , String > finalList = new Hashtable < String , String > ( ) ; for ( WebElement total : totals ) { for ( WebElement name : names ) { finalList . put ( name . getText ( ) , total . getText ( ) ) ; } } System . out . println ( "Now, ▁ the ▁ final ▁ act: ▁ " + Arrays . toString ( finalList . entrySet ( ) . toArray ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCenarioDois_570/tree/master/ExercicioCinco/test/Cenarios.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Conheça ▁ os ▁ Deputados" . equals ( driver . findElement ( By . linkText ( "Conheça ▁ os ▁ Deputados" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "Conheça ▁ os ▁ Deputados" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "TIRIRICA" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ TIRIRICA ▁ - ▁ PR/SP" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "JEAN ▁ WYLLYS" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ JEAN ▁ WYLLYS ▁ - ▁ PSOL/RJ" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "JOÃO ▁ ARRUDA" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ JOÃO ▁ ARRUDA ▁ - ▁ PMDB/PR" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ZOINHO" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ZOINHO ▁ - ▁ PR/RJ" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ANTHONY ▁ GAROTINHO" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ANTHONY ▁ GAROTINHO ▁ - ▁ PR/RJ" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ARIOSTO ▁ HOLANDA" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ARIOSTO ▁ HOLANDA ▁ - ▁ PROS/CE" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ARTUR ▁ BRUNO" ) ; driver . findElement ( By . id ( "rbDeputado6" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ARTUR ▁ BRUNO ▁ - ▁ PT/CE" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="getTitle_Time_Content_574/tree/master/src/cn/com/sina/crawler/search/XinhuaCrawlerWebdriver.java"> public List < String > function ( String url ) throws Exception { List < String > news = new ArrayList < String > ( ) ; this . webDriver . get ( url ) ; List < WebElement > listTitle1 = this . webDriver . findElements ( By . cssSelector ( "h1[id='title']" ) ) ; List < WebElement > listTitle2 = this . webDriver . findElements ( By . cssSelector ( "span[id='title']" ) ) ; if ( listTitle1 . size ( ) == 1 ) { this . title = listTitle1 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( listTitle2 . size ( ) == 1 ) { this . title = listTitle2 . get ( 0 ) . getText ( ) . trim ( ) ; } else { this . title = this . webDriver . getTitle ( ) ; } List < WebElement > listTime1 = this . webDriver . findElements ( By . cssSelector ( "span[id='pubtime']" ) ) ; List < WebElement > listTime2 = this . webDriver . findElements ( By . cssSelector ( "span[class='time']" ) ) ; List < WebElement > listTime3 = this . webDriver . findElements ( By . cssSelector ( "div[id='pubtimeandfrom']" ) ) ; List < WebElement > listTime4 = this . webDriver . findElements ( By . cssSelector ( "td[class='gray ▁ fs12']" ) ) ; if ( listTime1 . size ( ) == 1 ) { this . time = listTime1 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( listTime2 . size ( ) == 1 ) { this . time = listTime2 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( listTime3 . size ( ) == 1 ) { this . time = listTime3 . get ( 0 ) . getText ( ) . trim ( ) . substring ( 0 , 19 ) ; } else if ( listTime4 . size ( ) == 1 ) { this . time = listTime4 . get ( 0 ) . getText ( ) . trim ( ) . substring ( 0 , 20 ) ; } else { this . time = "null" ; } List < WebElement > list1 = this . webDriver . findElements ( By . cssSelector ( "div[id='content']" ) ) ; List < WebElement > list2 = this . webDriver . findElements ( By . cssSelector ( "div[id='Content']" ) ) ; List < WebElement > list3 = this . webDriver . findElements ( By . cssSelector ( "div[id='contentblock']" ) ) ; List < WebElement > list4 = this . webDriver . findElements ( By . cssSelector ( "div[class='article']" ) ) ; List < WebElement > list5 = this . webDriver . findElements ( By . cssSelector ( "span[id='content']" ) ) ; List < WebElement > list6 = this . webDriver . findElements ( By . cssSelector ( "div[class='bai14']" ) ) ; if ( list1 . size ( ) == 1 ) { this . content = list1 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list2 . size ( ) == 1 ) { this . content = list2 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list3 . size ( ) == 1 ) { this . content = list3 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list4 . size ( ) == 1 ) { this . content = list4 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list5 . size ( ) == 1 ) { this . content = list5 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list6 . size ( ) == 1 ) { this . content = list6 . get ( 0 ) . getText ( ) . trim ( ) ; } else { this . content = "null" ; } news . add ( this . title ) ; news . add ( this . time ) ; news . add ( this . content ) ; return news ; } </DOCUMENT>
<DOCUMENT_ID="testStudentListPage_576/tree/master/sli/dashboard/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"> public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select schoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; schoolSelect . selectByVisibleText ( "Illinois ▁ PS145" ) ; Select courseSelect = new Select ( driver . findElement ( By . id ( "courseSelect" ) ) ) ; courseSelect . selectByVisibleText ( "Algebra" ) ; Select sectionSelect = new Select ( driver . findElement ( By . id ( "sectionSelect" ) ) ) ; sectionSelect . selectByVisibleText ( "Section1" ) ; WebElement textDiv = driver . findElement ( By . id ( "studentDiv" ) ) ; String studentText = textDiv . getText ( ) ; assertTrue ( studentText . contains ( "Dawson ▁ Deborah" ) ) ; assertFalse ( studentText . contains ( "Random ▁ name" ) ) ; sectionSelect = new Select ( driver . findElement ( By . id ( "sectionSelect" ) ) ) ; sectionSelect . selectByVisibleText ( "Section2" ) ; WebElement temp = driver . findElement ( By . id ( "studentDiv" ) ) ; studentText = temp . getText ( ) ; assertTrue ( studentText . contains ( "Marks ▁ Hector" ) ) ; assertFalse ( studentText . contains ( "Dawson ▁ Deborah" ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="getIfengText_575/tree/master/src/cn/com/sina/crawler/specificwebsite/IfengHtmlCrawler.java"> public static List < List < String > > function ( List < String > source ) { List < List < String > > listIfengText = null ; listIfengText = new ArrayList < List < String > > ( ) ; String NBAUrl = "http: // 3g.ifeng.com/sports/nba/nbai?vt=5&mid=8Z5kpx" ; String zongheUrl = "http: // 3g.ifeng.com/sports/zonghetiyu/dir?vt=5&cid=148&mid=8Z5kpx" ; String pinglunUrl = "http: // 3g.ifeng.com/sports/titanpinglun/dir?vt=5&cid=150&mid=8Z5kpx" ; WebDriver webDriver = new FirefoxDriver ( ) ; List < WebElement > ulList = null ; List < WebElement > headline = null ; List < WebElement > time = null ; List < WebElement > comment = null ; for ( int i = 0 ; i < source . size ( ) ; i ++ ) { List < String > listUrls = null ; List < String > listText = null ; listUrls = new ArrayList < String > ( ) ; listText = new ArrayList < String > ( ) ; if ( source . get ( i ) . equals ( NBAUrl ) ) { webDriver . get ( source . get ( i ) ) ; ulList = webDriver . findElements ( By . cssSelector ( "ul[class='slLis']" ) ) ; listUrls . addAll ( getPartUrls ( ulList ) ) ; for ( String url : listUrls ) { StringBuffer sb = null ; sb = new StringBuffer ( ) ; webDriver . get ( url ) ; headline = webDriver . findElements ( By . cssSelector ( "div[class='acTxtTit']>h1" ) ) ; time = webDriver . findElements ( By . cssSelector ( "div[class='acTxtTit']>div>div" ) ) ; comment = webDriver . findElements ( By . cssSelector ( "div[class='acCmtAll']" ) ) ; if ( ( headline . size ( ) == 1 ) && ( time . size ( ) == 1 ) && ( comment . size ( ) == 1 ) ) { sb . append ( headline . get ( 0 ) . getText ( ) + "\t" ) . append ( time . get ( 0 ) . getText ( ) + "\t" ) . append ( comment . get ( 0 ) . getText ( ) ) ; listText . add ( sb . toString ( ) ) ; } } listIfengText . add ( listText ) ; } else if ( source . get ( i ) . equals ( pinglunUrl ) ) { webDriver . get ( source . get ( i ) ) ; List < WebElement > divList = webDriver . findElements ( By . cssSelector ( "div[class='nlist']" ) ) ; for ( int j = 0 ; j < divList . size ( ) ; j ++ ) { List < WebElement > list = divList . get ( j ) . findElements ( By . tagName ( "ul" ) ) . get ( 0 ) . findElements ( By . tagName ( "li" ) ) ; for ( int k = 0 ; k < list . size ( ) ; k ++ ) { listUrls . add ( list . get ( k ) . findElements ( By . tagName ( "a" ) ) . get ( 0 ) . getAttribute ( "href" ) ) ; } } for ( String url : listUrls ) { StringBuffer sb = null ; sb = new StringBuffer ( ) ; webDriver . get ( url ) ; headline = webDriver . findElements ( By . cssSelector ( "div[class='titpics']>p[class='titin']" ) ) ; time = webDriver . findElements ( By . cssSelector ( "div[class='titpics']>p[class='titcc']" ) ) ; comment = webDriver . findElements ( By . cssSelector ( "form[name='plForm']>div>a[href]" ) ) ; if ( ( headline . size ( ) == 1 ) && ( time . size ( ) == 1 ) && ( comment . size ( ) == 1 ) ) { sb . append ( headline . get ( 0 ) . getText ( ) + "\t" ) . append ( time . get ( 0 ) . getText ( ) + "\t" ) ; comment . get ( 0 ) . click ( ) ; List < WebElement > elements = webDriver . findElements ( By . cssSelector ( "div[class='pnpage']>span[class='font1']" ) ) ; if ( elements . size ( ) == 1 ) { sb . append ( elements . get ( 0 ) . getText ( ) ) ; } listText . add ( sb . toString ( ) ) ; } } listIfengText . add ( listText ) ; } else if ( source . get ( i ) . equals ( zongheUrl ) ) { webDriver . get ( source . get ( i ) ) ; List < WebElement > divList = webDriver . findElements ( By . cssSelector ( "div[class='nlist']" ) ) ; for ( int j = 0 ; j < divList . size ( ) ; j ++ ) { List < WebElement > list = divList . get ( j ) . findElements ( By . tagName ( "ul" ) ) . get ( 0 ) . findElements ( By . tagName ( "li" ) ) ; for ( int k = 0 ; k < list . size ( ) ; k ++ ) { listUrls . add ( list . get ( k ) . findElements ( By . tagName ( "a" ) ) . get ( 0 ) . getAttribute ( "href" ) ) ; } } for ( String url : listUrls ) { StringBuffer sb = null ; sb = new StringBuffer ( ) ; webDriver . get ( url ) ; headline = webDriver . findElements ( By . cssSelector ( "div[class='titpics']>p[class='titin']" ) ) ; time = webDriver . findElements ( By . cssSelector ( "div[class='titpics']>p[class='titcc']" ) ) ; comment = webDriver . findElements ( By . cssSelector ( "form[name='plForm']>div>a[href]" ) ) ; if ( ( headline . size ( ) == 1 ) && ( time . size ( ) == 1 ) && ( comment . size ( ) == 1 ) ) { sb . append ( headline . get ( 0 ) . getText ( ) + "\t" ) . append ( time . get ( 0 ) . getText ( ) + "\t" ) ; comment . get ( 0 ) . click ( ) ; List < WebElement > elements = webDriver . findElements ( By . cssSelector ( "div[class='pnpage']>span[class='font1']" ) ) ; if ( elements . size ( ) == 1 ) { sb . append ( elements . get ( 0 ) . getText ( ) ) ; } listText . add ( sb . toString ( ) ) ; } } listIfengText . add ( listText ) ; } else { webDriver . get ( source . get ( i ) ) ; ulList = webDriver . findElements ( By . cssSelector ( "ul[class='report_alive']>li>div" ) ) ; listText = getPartText ( ulList ) ; listIfengText . add ( listText ) ; } } webDriver . close ( ) ; return listIfengText ; } </DOCUMENT>
<DOCUMENT_ID="testCenarioTres_571/tree/master/ExercicioCinco/test/Cenarios.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Conheça ▁ os ▁ Deputados" . equals ( driver . findElement ( By . linkText ( "Conheça ▁ os ▁ Deputados" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "Conheça ▁ os ▁ Deputados" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "TIRIRICA" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ TIRIRICA ▁ - ▁ PR/SP" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Relatório ▁ de ▁ Votações ▁ em ▁ Plenário" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "JEAN ▁ WYLLYS" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ JEAN ▁ WYLLYS ▁ - ▁ PSOL/RJ" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Relatório ▁ de ▁ Votações ▁ em ▁ Plenário" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "JOÃO ▁ ARRUDA" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ JOÃO ▁ ARRUDA ▁ - ▁ PMDB/PR" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ZOINHO" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ZOINHO ▁ - ▁ PR/RJ" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Relatório ▁ de ▁ Votações ▁ em ▁ Plenário" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ANTHONY ▁ GAROTINHO" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ANTHONY ▁ GAROTINHO ▁ - ▁ PR/RJ" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Relatório ▁ de ▁ Votações ▁ em ▁ Plenário" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ARIOSTO ▁ HOLANDA" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ARIOSTO ▁ HOLANDA ▁ - ▁ PROS/CE" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Relatório ▁ de ▁ Votações ▁ em ▁ Plenário" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício" . equals ( driver . findElement ( By . cssSelector ( "h6.header" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Pesquisar" . equals ( driver . findElement ( By . id ( "Pesquisa" ) ) . getAttribute ( "value" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( "deputado" ) ) ) . selectByVisibleText ( "ARTUR ▁ BRUNO" ) ; driver . findElement ( By . id ( "rbDeputado5" ) ) . click ( ) ; driver . findElement ( By . id ( "Pesquisa" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Nome ▁ Parlamentar: ▁ ARTUR ▁ BRUNO ▁ - ▁ PT/CE" . equals ( driver . findElement ( By . cssSelector ( "#content ▁ > ▁ h3" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Relatório ▁ de ▁ Votações ▁ em ▁ Plenário" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testUsersHaveDiffLists_577/tree/master/sli/dashboard/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"> public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select userASchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userASchoolItem = userASchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; driver . get ( studentListUrl + usernameParamPrefix + userB ) ; Select userBSchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userBSchoolItem = userBSchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; assertFalse ( userBSchoolItem . equals ( userASchoolItem ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginPage_578/tree/master/sli/dashboard/src/integrationtest/java/org/slc/sli/selenium/controller/LoginSeleniumITest.java"> public void function ( ) { driver . get ( loginUrl ) ; WebElement username = driver . findElement ( By . name ( "username" ) ) ; username . sendKeys ( testBadUser ) ; WebElement errorMessage = driver . findElement ( By . name ( "errorMessage" ) ) ; assertTrue ( errorMessage . getCssValue ( "display" ) . equalsIgnoreCase ( "none" ) ) ; WebElement loginForm = driver . findElement ( By . name ( "loginForm" ) ) ; loginForm . submit ( ) ; errorMessage = driver . findElement ( By . name ( "errorMessage" ) ) ; assertTrue ( errorMessage . getCssValue ( "display" ) . equalsIgnoreCase ( "block" ) ) ; username = driver . findElement ( By . name ( "username" ) ) ; username . sendKeys ( testUser ) ; loginForm = driver . findElement ( By . name ( "loginForm" ) ) ; loginForm . submit ( ) ; WebElement body = driver . findElement ( By . tagName ( "body" ) ) ; String bodyText = body . getText ( ) ; assertTrue ( bodyText . contains ( "Select ▁ an ▁ application" ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="checkIfThereAreFields_580/tree/master/test/LogInTest.java"> public void function ( ) { FirefoxDriver driver = new FirefoxDriver ( ) ; driver . get ( baseUrl ) ; int numberOfInputs = 2 ; List < WebElement > inputs = driver . findElementsByCssSelector ( "input" ) ; WebElement button = driver . findElementByCssSelector ( "button" ) ; assertTrue ( inputs . size ( ) == numberOfInputs && button != null ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="parseAllEmail_579/tree/master/src/crawler/SinaMailCrawler.java"> private List < String > function ( HashSet < String > midSet ) { ArrayList < String > mailList = new ArrayList < > ( ) ; for ( String mid : midSet ) { String urlT = "http: // m0.mail.sina.com.cn/classic/readmail.php?webmail=1&fid=new&mid=" + mid ; driver . get ( urlT ) ; Document mailDoc = Jsoup . parseBodyFragment ( driver . getPageSource ( ) ) ; Element mailBody = mailDoc . body ( ) ; String mailContent = mailBody . text ( ) ; if ( filter == null || ! filter . filter ( mailContent ) ) { continue ; } mailList . add ( mailBody . text ( ) ) ; } return mailList ; } </DOCUMENT>
<DOCUMENT_ID="testLoginAction_581/tree/master/test/LogInTest.java"> public void function ( ) { FirefoxDriver driver = new FirefoxDriver ( ) ; driver . get ( baseUrl ) ; List < WebElement > inputs = driver . findElementsByCssSelector ( "input" ) ; WebElement roomInput = inputs . get ( 0 ) ; roomInput . sendKeys ( "13" ) ; WebElement loginInput = inputs . get ( 1 ) ; loginInput . sendKeys ( "test" ) ; driver . findElementByCssSelector ( "button" ) . click ( ) ; String url = driver . getCurrentUrl ( ) ; assertTrue ( url != baseUrl ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="createHiringPage_582/tree/master/src/main/java/com/softwaremill/janusz_backend/hiring/services/wiki_page/ConfluenceClicker.java"> public String function ( HiringPageData hiringPageData ) { PhantomJSDriver driver = createConfiguredDriver ( ) ; loginToConfluence ( driver ) ; driver . get ( confluenceUrl + CREATE_HIRING_PAGE_FROM_TEMPLATE_URL ) ; logger . info ( "At ▁ page ▁ " + driver . getCurrentUrl ( ) ) ; sleep ( 1000L ) ; driver . findElement ( By . name ( "title" ) ) . sendKeys ( hiringPageData . getFullName ( ) ) ; fillPageWithCandidateData ( driver , hiringPageData ) ; driver . findElement ( By . name ( "confirm" ) ) . click ( ) ; String newPageUrl = driver . getCurrentUrl ( ) ; logger . info ( "New ▁ page ▁ created ▁ at ▁ " + newPageUrl ) ; return newPageUrl ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_584/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_585/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_586/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="getContactData_583/tree/master/src/main/java/com/softwaremill/janusz_backend/hiring/services/wiki_page/ConfluenceClicker.java"> public List < ContactTableRow > function ( ) { PhantomJSDriver driver = createConfiguredDriver ( ) ; loginToConfluence ( driver ) ; driver . get ( confluenceUrl + CONTACTS_PAGE_URL ) ; logger . info ( "Extracting ▁ contacts ▁ data ▁ from ▁ " + driver . getCurrentUrl ( ) ) ; List < ContactTableRow > contacts = extractContactsData ( driver ) ; return contacts ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_587/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreationFilmWithoutYear_588/tree/master/src/test/java/ru/stqa/selenium/CreationFilmWithoutYear.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . clear ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "film" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input[class=\"required ▁ digits ▁ error\"]" ) ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmNotFound_589/tree/master/src/test/java/ru/stqa/selenium/SearchFilmNotFound.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input#imdbsearch" ) ) ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "ertretretretersdfdsfdsfds" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( "div.content" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( "div.content ▁ > ▁ div" ) ) . findElements ( By . tagName ( "tr" ) ) . size ( ) ; assertEquals ( count1 , 0 ) ; System . out . println ( "Íàéäåíî ▁ ôèëüìîâ ▁ -" + count1 + "øò" ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "abfdgfddfgfdgdf" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( "div.content" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( "div.content ▁ > ▁ div" ) ) . findElements ( By . tagName ( "tr" ) ) . size ( ) ; assertEquals ( count2 , 0 ) ; System . out . println ( "Íàéäåíî ▁ ôèëüìîâ ▁ -" + count2 + "øò" ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreationFilmSuccess_590/tree/master/src/test/java/ru/stqa/selenium/CreationFilmSuccess.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( "div#results" ) ) . findElements ( By . tagName ( "a" ) ) . size ( ) ; System . out . println ( "count1" + - count1 ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . clear ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "film222" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2015" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Edit\"]" ) ) ) ; driver . findElement ( By . linkText ( "Home" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( "div#results" ) ) . findElements ( By . tagName ( "a" ) ) . size ( ) ; System . out . println ( "count2" + - count2 ) ; int res = count2 - count1 ; System . out . println ( "res" + - res ) ; assertEquals ( res , 1 ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmFound_591/tree/master/src/test/java/ru/stqa/selenium/SearchFilmFound.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input#imdbsearch" ) ) ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "a" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( "table.imdbmovies" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( "table.imdbmovies" ) ) . findElements ( By . tagName ( "tr" ) ) . size ( ) ; assertNotEquals ( count1 , 0 ) ; System . out . println ( "Íàéäåíî ▁ ôèëüìîâ" + - count1 + "øò" ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "ab" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( "table.imdbmovies" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( "table.imdbmovies" ) ) . findElements ( By . tagName ( "tr" ) ) . size ( ) ; assertNotEquals ( count2 , 0 ) ; System . out . println ( "Íàéäåíî ▁ ôèëüìîâ" + - count2 + "øò" ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_594/tree/master/src/test/java/com/example/fw/WebMailManager.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_595/tree/master/WebDriver/src/TestFramework/Browser.java"> public static void function ( String url ) { webDriver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="whenEuAcessoAPaginaQueExibeInformacoesDoTestResult_596/tree/master/src/test/java/stories/ResultaDosTestesSteps.java"> public void function ( ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="whenDesejoObterInformacoesSobreEsseTestResult_597/tree/master/src/test/java/stories/ResultaDosTestesSteps.java"> public void function ( ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="whenEuEntroNaPaginaQueExibeInformacoesDoTestResult_598/tree/master/src/test/java/stories/consulta_de_resultados.java"> public void function ( ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_599/tree/master/src/test/java/ua/oit/selenium2/ZSampleTest.java"> public void function ( ) { driver . get ( baseUrl ) ; WebDriverWait wait = new WebDriverWait ( driver , 1 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( homepage . HEADER_LOCATOR ) ) ) ; wait . until ( ExpectedConditions . visibilityOf ( homepage . header ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( homepage . sameHeaderBy ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( homepage . sameHeader ) ) ; wait . until ( ExpectedConditions . elementToBeSelected ( homepage . sameHeaderBy ) ) ; wait . until ( ExpectedConditions . elementToBeSelected ( homepage . header ) ) ; wait . until ( ExpectedConditions . textToBePresentInElement ( homepage . header , "Header" ) ) ; wait . until ( ExpectedConditions . stalenessOf ( homepage . header ) ) ; wait . until ( ExpectedConditions . titleContains ( "Header" ) ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToPage_600/tree/master/src/main/java/org/spo/fw/web/Lib_KeyWordsCore.java"> public String function ( String url ) throws Exception { if ( SessionContext . isAuthoizationFailed ) { throw new AssertionError ( "*******AUTHORIZATION ▁ ISSUE ▁ *****DO ▁ NOT ▁ PROCEEED ▁ ***" ) ; } String url_postProcessed = Lib_Utils . alterGotoUrl ( url , user , password ) ; try { driver . get ( url_postProcessed ) ; } catch ( WebDriverException e ) { log . error ( "Encountered ▁ WebDriver ▁ Exception ▁ while ▁ goto ▁ - ▁ relaunching" + url ) ; throw new UnexpectedWebDriverException ( ) ; } String title = driver . getTitle ( ) ; log . trace ( url_postProcessed ) ; if ( title . contains ( "not ▁ authorized" ) ) { SessionContext . isAuthoizationFailed = true ; } return title ; } </DOCUMENT>
<DOCUMENT_ID="testCreationFilmWithNotValidNumber_593/tree/master/src/test/java/ru/stqa/selenium/CreationFilmWithNotValidNumber.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "dfd" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "dfdf" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input[class=\"required ▁ digits ▁ error\"]" ) ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateAndLoad_601/tree/master/src/spider/ReivewWebDriver.java"> private boolean function ( String url , int timeout ) { try { driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( timeout , TimeUnit . SECONDS ) ; driver . get ( url ) ; return true ; } catch ( TimeoutException e ) { return false ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( maxLoadTime , TimeUnit . SECONDS ) ; } } </DOCUMENT>
<DOCUMENT_ID="testDeleteFirstFilm_592/tree/master/src/test/java/ru/stqa/selenium/DeleteFirstFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . get ( baseUrl + "/php4dvd/?go=movie&id=40" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( "div#results" ) ) . findElements ( By . tagName ( "a" ) ) . size ( ) ; System . out . println ( "count1" + - count1 ) ; driver . findElement ( ( By . cssSelector ( "div.movie_cover" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( "div#results" ) ) . findElements ( By . tagName ( "a" ) ) . size ( ) ; System . out . println ( "count2" + - count2 ) ; int res = count1 - count2 ; System . out . println ( "res" + - res ) ; assertEquals ( res , 1 ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getProductPage_602/tree/master/src/spider/ReivewWebDriver.java"> public HashSet < ProductUrl > function ( String searchUrl ) { String productUrlReg = "http: // www.amazon.cn/. */ dp/.*" ; HashSet < ProductUrl > products = new HashSet < ProductUrl > ( ) ; HtmlUnitDriver driver = new HtmlUnitDriver ( ) ; driver . get ( searchUrl ) ; List < WebElement > link = driver . findElements ( By . cssSelector ( "[href]" ) ) ; for ( WebElement webElement : link ) { String href = webElement . getAttribute ( "href" ) ; if ( href . matches ( productUrlReg ) && products . add ( new ProductUrl ( href ) ) ) { System . out . println ( webElement . getText ( ) + '\t' + href ) ; } } System . out . println ( "get ▁ product ▁ url ▁ over=================================================================" ) ; System . out . println ( "product ▁ size: ▁ " + products . size ( ) ) ; driver . close ( ) ; return products ; } </DOCUMENT>
<DOCUMENT_ID="testPlayer1Win_603/tree/master/src/selenium/java/tictactoe/NerdirWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; try { assertEquals ( "Mylla" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "start-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "2" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "3" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "5" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "6" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "8" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "7" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "9" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; try { assertTrue ( isElementPresent ( By . id ( "replay-button" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testPlayer2Win_604/tree/master/src/selenium/java/tictactoe/NerdirWebTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; try { assertEquals ( "Mylla" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "start-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "2" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "3" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "5" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; driver . findElement ( By . id ( "move" ) ) . clear ( ) ; driver . findElement ( By . id ( "move" ) ) . sendKeys ( "8" ) ; driver . findElement ( By . id ( "play-button" ) ) . click ( ) ; try { assertTrue ( isElementPresent ( By . id ( "replay-button" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testChromeDriver_606/tree/master/some-tools/crawler/src/test/java/TestWebDriver.java"> public void function ( ) throws IOException { String pathChromeDrive = "chromedriver" ; File file = new File ( pathChromeDrive ) ; file . deleteOnExit ( ) ; try ( FileOutputStream o = new FileOutputStream ( file ) ) { ByteStreams . copy ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( pathChromeDrive ) , o ) ; } file . setExecutable ( true ) ; System . setProperty ( "webdriver.chrome.driver" , pathChromeDrive ) ; WebDriver driver = new ChromeDriver ( ) ; String url = "http: // haiivl.com/video/176200" ; driver . get ( url ) ; WebElement e = driver . findElement ( By . xpath ( " // article" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSomeFunctions_605/tree/master/some-tools/crawler/src/test/java/TestWebDriver.java"> public void function ( ) throws IOException { String pathFirefoxDrive = "firebug-1.8.1.xpi" ; File file = new File ( pathFirefoxDrive ) ; file . deleteOnExit ( ) ; try ( FileOutputStream o = new FileOutputStream ( file ) ) { ByteStreams . copy ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( pathFirefoxDrive ) , o ) ; } FirefoxProfile firefoxProfile = new FirefoxProfile ( ) ; firefoxProfile . addExtension ( file ) ; firefoxProfile . setPreference ( "extensions.firebug.currentVersion" , "1.8.1" ) ; WebDriver driver = new FirefoxDriver ( firefoxProfile ) ; String url = "http: // haiivl.com/video/176200" ; driver . get ( url ) ; WebElement e = driver . findElement ( By . xpath ( " // article // div[@class='video-frame ▁ mecloud']" ) ) ; String source = driver . getPageSource ( ) ; Pattern pattern = Pattern . compile ( "<div ▁ class=\\\"video-frame\\b[^>]*>(.*?)<\\/div>" ) ; Matcher matcher = pattern . matcher ( source ) ; if ( matcher . find ( ) ) { System . out . println ( matcher . group ( 1 ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="loadBaseURL_609/tree/master/src/TestCaseBasis.java"> public void function ( String baseUrl ) { driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( baseUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 30 , TimeUnit . SECONDS ) ; driver . manage ( ) . window ( ) . maximize ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_610/tree/master/src/main/java/kh/selenium/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_611/tree/master/src/main/java/kh/selenium/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="favArtistRun_608/tree/master/src/joy/JoyMain.java"> public void function ( String userId , int userNum ) { Thread th = new Thread ( ) ; String urlFirst = "https: // www.joysound.com/utasuki/userpage/myartist.htm?usr=" ; StringBuilder urlBuilder = new StringBuilder ( ) ; urlBuilder . append ( urlFirst ) ; urlBuilder . append ( userId ) ; String url = urlBuilder . toString ( ) ; ArrayList < WebElement > favArtistList ; ph . getDriver ( ) . get ( url ) ; try { th . sleep ( waitTime ) ; String favArtistStr = ph . getDriver ( ) . findElementByTagName ( "em" ) . getText ( ) ; String favArtistNum = favArtistStr . substring ( 0 , favArtistStr . length ( ) - 1 ) ; int favArtistInt = Integer . parseInt ( favArtistNum ) ; String artist ; WebElement ele ; int j = 0 ; int p = 0 ; for ( int i = 0 ; i < favArtistInt - 1 ; i ++ , j ++ ) { if ( i % 20 == 0 && i != 0 ) { p ++ ; System . out . println ( "マイアーティスト" + p + "ページ目読み込み終了" ) ; ph . getDriver ( ) . get ( url + "&startIndex=" + ( i + 1 ) + "&orderBy=0&sortOrder=desc" ) ; th . sleep ( waitTime ) ; j = 0 ; } favArtistList = ( ArrayList < WebElement > ) ph . getDriver ( ) . findElementsByXPath ( " // span[@class='usk-bold-txt ▁ usk-sbig-txt ▁ usk-break']" ) ; try { ele = favArtistList . get ( j ) ; } catch ( Exception e ) { break ; } artist = ele . getText ( ) ; if ( userNum == 1 ) { artistSet . add ( artist ) ; } else { if ( artistMap . containsKey ( artist ) ) { artistMap . put ( artist , artistMap . get ( artist ) + 10 ) ; } else { artistMap . put ( artist , 10 ) ; } } } System . out . println ( "マイアーティスト読み込み完了" ) ; } catch ( InterruptedException e1 ) { e1 . printStackTrace ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="emptyFieldsAddGroup_613/tree/master/src/test/java/ru/stqa/selenium/AddMovie.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement dynamicElement1 = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "username" ) ) ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . get ( baseUrl + "/php4dvd/#!/sort/name%20asc/" ) ; WebElement dynamicElement = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; isTextMatch ( ( By . xpath ( " // label" ) ) , ( "This ▁ field ▁ is ▁ required" ) ) ; isTextMatch ( ( By . xpath ( " // tr[4]/td[2]/label" ) ) , ( "This ▁ field ▁ is ▁ required" ) ) ; driver . findElement ( By . cssSelector ( "h1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\s\\S]$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToHomePage_614/tree/master/src/testFramework/SeleniumBase.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="positiveAddGroup_612/tree/master/src/test/java/ru/stqa/selenium/AddMovie.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . get ( baseUrl + "/php4dvd/#!/sort/name%20asc/" ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; WebElement dynamicElement = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "imdbsearch" ) ) ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "http: // www.imdb.com/title/tt1403865/?ref_=fn_al_tt_1" ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "True ▁ Grit" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year1" ) ) . sendKeys ( "2010" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; isTextMatch ( ( By . xpath ( " // h2" ) ) , ( "True ▁ Grit ▁ (2010)" ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; driver . get ( baseUrl + "/php4dvd/" ) ; WebElement dynamicElement1 = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( " // *[@id='results']/a" ) ) ) ; isTextMissing ( ( By . id ( "results" ) ) , ( "True ▁ Grit" ) ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\s\\S]$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="ApplyAsdaCC_615/tree/master/NikhilSelenium/src/com/SeleniumBasic/MyFirstTest.java"> public void function ( ) { WebDriver driver = null ; String strUrl = "https: // credit-cardapply.asda.com/apply/applyjourney.html?promotionalCode=&brandCode=asda&responseCode=ASD030&empty_guid=true" ; String strBrowserTitle = "" ; try { driver = new FirefoxDriver ( ) ; driver . get ( strUrl ) ; strBrowserTitle = driver . getTitle ( ) ; assertEquals ( "Title ▁ do ▁ not ▁ match ▁ with ▁ expected" , "Asda ▁ Apply ▁ Journey-Invalid" , strBrowserTitle ) ; Thread . sleep ( 4000 ) ; } catch ( Exception ex ) { System . out . println ( "Exception ▁ thrown:" + ex . getMessage ( ) ) ; } finally { driver . quit ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="DriverMethodsExample_616/tree/master/NikhilSelenium/src/com/SeleniumBasic/DriverMethodsTest.java"> public void function ( ) { WebDriver driver = null ; String strUrl = "http: // www.tesco.com/" ; try { driver = new FirefoxDriver ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 20 , TimeUnit . SECONDS ) ; driver . manage ( ) . window ( ) . maximize ( ) ; driver . navigate ( ) . to ( strUrl ) ; ( driver . findElement ( By . cssSelector ( "#searchBox" ) ) ) . sendKeys ( "Flower" ) ; Thread . sleep ( 3000 ) ; driver . navigate ( ) . refresh ( ) ; String htmlSource = driver . getPageSource ( ) ; System . out . println ( "Html ▁ : ▁ " + htmlSource ) ; Set < String > windowHandles = driver . getWindowHandles ( ) ; System . out . println ( "Window ▁ Handles ▁ Before ▁ clicking ▁ twitter ▁ image:" + windowHandles ) ; WebElement imgTwitter = driver . findElement ( By . cssSelector ( ".twitter" ) ) ; imgTwitter . click ( ) ; Thread . sleep ( 2000 ) ; windowHandles = driver . getWindowHandles ( ) ; Object windowHandlesArray [ ] = windowHandles . toArray ( ) ; String strPopUpWH = windowHandlesArray [ windowHandlesArray . length - 1 ] . toString ( ) ; driver . switchTo ( ) . window ( strPopUpWH ) ; String strCurrentUrl = driver . getCurrentUrl ( ) ; System . out . println ( "------------------------------------------" ) ; System . out . println ( "Twitter ▁ window ▁ url:" + strCurrentUrl ) ; WebElement txtFullName = driver . findElement ( By . cssSelector ( "input[name='user[name]']" ) ) ; Thread . sleep ( 2000 ) ; txtFullName . sendKeys ( "Harish ▁ Renukunta" ) ; Thread . sleep ( 3000 ) ; System . out . println ( "Window ▁ Handles:" + windowHandles ) ; driver . close ( ) ; Thread . sleep ( 3000 ) ; } catch ( Exception ex ) { System . out . println ( "Exception ▁ thrown:" + ex . getMessage ( ) ) ; } finally { driver . quit ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="verifyUIObjects_617/tree/master/NikhilSeleniumMavenTestNG/src/test/java/NikhilSelenium/NikhilSeleniumMavenTestNG/BasicAnnotationsTest.java"> public void function ( ) { try { driver . navigate ( ) . to ( "http: // www.google.com" ) ; driver . get ( strUrl ) ; WebElement txtItem = driver . findElement ( By . cssSelector ( "input[data-bind*='value:itemToAdd']" ) ) ; WebElement btnAdd = driver . findElement ( By . xpath ( " // button[text()='Add']" ) ) ; WebElement btnRemove = driver . findElement ( By . xpath ( " // button[text()='Remove']" ) ) ; WebElement btnSort = driver . findElement ( By . xpath ( " // button[text()='Sort']" ) ) ; WebElement lstItems = driver . findElement ( By . cssSelector ( "select[multiple='multiple'][data-bind*='selectedOptions:selectedItems']" ) ) ; List < String > mismatches = new ArrayList < String > ( ) ; if ( ! txtItem . isDisplayed ( ) ) { mismatches . add ( "Item ▁ textbox ▁ not ▁ displayed" ) ; } if ( ! btnAdd . isDisplayed ( ) ) { mismatches . add ( "Add ▁ button ▁ not ▁ displayed" ) ; } if ( ! btnRemove . isDisplayed ( ) ) { mismatches . add ( "Remove ▁ button ▁ not ▁ displayed" ) ; } if ( ! btnSort . isDisplayed ( ) ) { mismatches . add ( "Sort ▁ button ▁ not ▁ displayed" ) ; } if ( ! lstItems . isDisplayed ( ) ) { mismatches . add ( "Items ▁ listbox ▁ not ▁ displayed" ) ; } assertTrue ( mismatches . isEmpty ( ) , "Objects ▁ not ▁ displayed:" + mismatches ) ; } catch ( Exception ex ) { System . out . println ( "Exception: ▁ " + ex . getMessage ( ) ) ; fail ( "Exception ▁ : ▁ " + ex . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="doTestLoadingJQuery_618/tree/master/src/test/java/eu/tuxoo/test/JQueryLoadingTest.java"> public void function ( String jQueryVersion , String browserVersion ) throws Exception { String html = "<!DOCTYPE ▁ HTML><html><head><title>foo</title>" + getJqueryScript ( jQueryVersion ) + "<script> \n " + "alert(window.jQuery ▁ !== ▁ undefined); \n " + "</script></head><body> \n " + "</body></html>" ; String initialUrl = "http: // localhost:8080/myDummyApp/index.html" ; CollectingAlertHandler alertHandler = new CollectingAlertHandler ( ) ; HtmlUnitDriver driver = createDriver ( alertHandler , browserVersion , new StringWebResponse ( html , new URL ( initialUrl ) ) ) ; driver . get ( initialUrl ) ; assertThat ( "jQuery ▁ did ▁ not ▁ load ▁ succesfully." , alertHandler . getCollectedAlerts ( ) . get ( 0 ) , containsString ( "true" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="favMusicRun_607/tree/master/src/joy/JoyMain.java"> public void function ( String userId , int userNum ) { Thread th = new Thread ( ) ; String urlFirst = "https: // www.joysound.com/utasuki/userpage/mysong.htm?usr=" ; StringBuilder urlBuilder = new StringBuilder ( ) ; urlBuilder . append ( urlFirst ) ; urlBuilder . append ( userId ) ; String url = urlBuilder . toString ( ) ; ArrayList < WebElement > favMusicList ; ph . getDriver ( ) . get ( url ) ; try { th . sleep ( waitTime ) ; String favMusicStr = ph . getDriver ( ) . findElementByTagName ( "em" ) . getText ( ) ; String favMusicNum = favMusicStr . substring ( 0 , favMusicStr . length ( ) - 1 ) ; int favMusicInt = Integer . parseInt ( favMusicNum ) ; String songUrl , id , songwordstitle , name , artist , relation ; Vector < Music > v ; ArrayList < String > musicURL = new ArrayList < String > ( ) ; Music m ; int j = 0 ; int p = 0 ; favMusicList = ( ArrayList < WebElement > ) ph . getDriver ( ) . findElementsByClassName ( "usk-block-link" ) ; for ( WebElement e : favMusicList ) { musicURL . add ( e . getAttribute ( "href" ) ) ; } for ( int i = 0 ; i < favMusicInt - 1 ; i ++ , j ++ ) { if ( i % 20 == 0 && i != 0 ) { p ++ ; System . out . println ( "マイうた" + p + "ページ目読み込み終了" ) ; ph . getDriver ( ) . get ( url + "&startIndex=" + ( i + 1 ) + "&orderBy=0&sortOrder=desc" ) ; th . sleep ( waitTime ) ; favMusicList = ( ArrayList < WebElement > ) ph . getDriver ( ) . findElementsByClassName ( "usk-block-link" ) ; musicURL . clear ( ) ; for ( WebElement e : favMusicList ) { musicURL . add ( e . getAttribute ( "href" ) ) ; } j = 0 ; } songUrl = musicURL . get ( j ) ; id = songUrl . substring ( 41 , songUrl . indexOf ( "?" ) ) ; v = JoyDAO . getInstance ( ) . select ( id ) ; if ( ! v . isEmpty ( ) ) { m = v . get ( 0 ) ; if ( userNum == 1 ) { nameSet . add ( m . getName ( ) + " ▁ // ▁ " + m . getArtist ( ) ) ; artistSet . add ( m . getArtist ( ) ) ; if ( ! m . getRelation ( ) . equals ( "" ) ) { relationSet . add ( m . getRelation ( ) ) ; } } else { if ( nameMap . containsKey ( m . getName ( ) + " ▁ // ▁ " + m . getArtist ( ) ) ) { nameMap . put ( m . getName ( ) + " ▁ // ▁ " + m . getArtist ( ) , nameMap . get ( m . getName ( ) + " ▁ // ▁ " + m . getArtist ( ) ) + 5 ) ; } else { nameMap . put ( m . getName ( ) + " ▁ // ▁ " + m . getArtist ( ) , 5 ) ; } if ( artistMap . containsKey ( m . getArtist ( ) ) ) { artistMap . put ( m . getArtist ( ) , artistMap . get ( m . getArtist ( ) ) + 2 ) ; } else { artistMap . put ( m . getArtist ( ) , 2 ) ; } if ( ! m . getRelation ( ) . equals ( "" ) ) { if ( relationMap . containsKey ( m . getRelation ( ) ) ) { relationMap . put ( m . getRelation ( ) , relationMap . get ( m . getRelation ( ) ) + 3 ) ; } else { relationMap . put ( m . getRelation ( ) , 3 ) ; } } } } else { ph . getDriver ( ) . get ( songUrl ) ; th . sleep ( waitTime ) ; try { songwordstitle = ph . getDriver ( ) . findElementByXPath ( " // div[@class='jp-cmp-song-words-title ▁ ng-binding']" ) . getText ( ) ; } catch ( Exception e ) { ph . getDriver ( ) . navigate ( ) . back ( ) ; th . sleep ( waitTime ) ; continue ; } name = songwordstitle . substring ( 0 , songwordstitle . length ( ) - 3 ) ; name = name . substring ( 1 , name . length ( ) - 1 ) ; artist = ph . getDriver ( ) . findElementByClassName ( "jp-cmp-table-column-001" ) . getText ( ) ; try { relation = ph . getDriver ( ) . findElementByXPath ( " // div[@data-ng-repeat='tieup ▁ in ▁ detail.tieupList']" ) . getText ( ) ; } catch ( Exception e1 ) { relation = "" ; } JoyDAO . getInstance ( ) . insert ( id , name , artist , relation ) ; if ( userNum == 1 ) { nameSet . add ( name + " ▁ // ▁ " + artist ) ; artistSet . add ( artist ) ; if ( ! relation . equals ( "" ) ) { relationSet . add ( relation ) ; } } else { if ( nameMap . containsKey ( name + " ▁ // ▁ " + artist ) ) { nameMap . put ( name + " ▁ // ▁ " + artist , nameMap . get ( name + " ▁ // ▁ " + artist ) + 5 ) ; } else { nameMap . put ( name + " ▁ // ▁ " + artist , 5 ) ; } if ( artistMap . containsKey ( artist ) ) { artistMap . put ( artist , artistMap . get ( artist ) + 2 ) ; } else { artistMap . put ( artist , 2 ) ; } if ( ! relation . equals ( "" ) ) { if ( relationMap . containsKey ( relation ) ) { relationMap . put ( relation , relationMap . get ( relation ) + 3 ) ; } else { relationMap . put ( relation , 3 ) ; } } } } } System . out . println ( "マイうた読み込み完了" ) ; } catch ( InterruptedException e1 ) { e1 . printStackTrace ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testManagementChangePassword_619/tree/master/tests/Selenium/Tests/ManagementChangePasswordResetTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . cssSelector ( "button.headerbutton" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "hbakker" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . id ( "login_button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Management/Home\"']" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Change ▁ Password" ) ) . click ( ) ; driver . findElement ( By . name ( "old_password" ) ) . clear ( ) ; driver . findElement ( By . name ( "old_password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . name ( "new_password" ) ) . clear ( ) ; driver . findElement ( By . name ( "new_password" ) ) . sendKeys ( "password" ) ; driver . findElement ( By . name ( "rep_new_password" ) ) . clear ( ) ; driver . findElement ( By . name ( "rep_new_password" ) ) . sendKeys ( "password" ) ; WebElement dragElement = driver . findElement ( By . className ( "clippy" ) ) ; Actions builder = new Actions ( driver ) ; builder . dragAndDropBy ( dragElement , 100 , 0 ) . build ( ) . perform ( ) ; driver . findElement ( By . id ( "management_save" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Account/Logout\"']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testManagementEditAccount_621/tree/master/tests/Selenium/Tests/ManagementEditAccountTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . cssSelector ( "button.headerbutton" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "hbakker" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . id ( "login_button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Management/Home\"']" ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ Account" ) ) . click ( ) ; driver . findElement ( By . name ( "addition" ) ) . clear ( ) ; driver . findElement ( By . name ( "addition" ) ) . sendKeys ( "a" ) ; WebElement dragElement = driver . findElement ( By . className ( "clippy" ) ) ; Actions builder = new Actions ( driver ) ; builder . dragAndDropBy ( dragElement , 100 , 0 ) . build ( ) . perform ( ) ; driver . findElement ( By . id ( "management_save" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Account/Logout\"']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testManagementAcceptancePending_620/tree/master/tests/Selenium/Tests/ManagementAcceptancePendingTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . cssSelector ( "button.headerbutton" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "hbakker" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . id ( "login_button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Management/Home\"']" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_pending\"]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#with_selected_confirm ▁ > ▁ p" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Reviews" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_pending\"]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='with_selected_confirm']/img[2]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Projects" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_pending\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "with_selected_confirm" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Account/Logout\"']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testManagementAcceptanceDeclined_622/tree/master/tests/Selenium/Tests/ManagementAcceptanceDeclinedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . cssSelector ( "button.headerbutton" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "hbakker" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . id ( "login_button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Management/Home\"']" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_declined\"]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#with_selected_confirm ▁ > ▁ p" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Reviews" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_declined\"]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='with_selected_confirm']/img[2]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Projects" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_declined\"]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#with_selected_confirm ▁ > ▁ p" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Account/Logout\"']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testManagementChangePassword_623/tree/master/tests/Selenium/Tests/ManagementChangePasswordTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . cssSelector ( "button.headerbutton" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "hbakker" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password" ) ; driver . findElement ( By . id ( "login_button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Management/Home\"']" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Change ▁ Password" ) ) . click ( ) ; driver . findElement ( By . name ( "old_password" ) ) . clear ( ) ; driver . findElement ( By . name ( "old_password" ) ) . sendKeys ( "password" ) ; driver . findElement ( By . name ( "new_password" ) ) . clear ( ) ; driver . findElement ( By . name ( "new_password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . name ( "rep_new_password" ) ) . clear ( ) ; driver . findElement ( By . name ( "rep_new_password" ) ) . sendKeys ( "p@ssword" ) ; WebElement dragElement = driver . findElement ( By . className ( "clippy" ) ) ; Actions builder = new Actions ( driver ) ; builder . dragAndDropBy ( dragElement , 100 , 0 ) . build ( ) . perform ( ) ; driver . findElement ( By . id ( "management_save" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Account/Logout\"']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_626/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_627/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_628/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_625/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="stupidGameLogin_629/tree/master/MavenSeleniumTest/src/test/java/org/krohm/test/selenium/StupidGameBotTest.java"> private void function ( WebDriver driver ) throws Exception { LOGGER . debug ( "Getting ▁ login ▁ URL ▁ ..." ) ; String loginUrl = STUPID_GAME_LOGIN_URL ; LOGGER . debug ( "Login ▁ URL ▁ is: ▁ <" + loginUrl + ">" ) ; driver . get ( loginUrl ) ; LOGGER . debug ( "Login ▁ Page ▁ loaded, ▁ title ▁ is: ▁ " + driver . getTitle ( ) ) ; WebElement loginElement = driver . findElement ( By . name ( "username" ) ) ; WebElement passwordElement = driver . findElement ( By . name ( "password" ) ) ; WebElement loginButton = driver . findElement ( By . className ( "button-ok" ) ) ; loginElement . sendKeys ( LOGIN ) ; passwordElement . sendKeys ( PASSWORD ) ; loginButton . click ( ) ; LOGGER . debug ( "Post ▁ Login ▁ Page ▁ loaded, ▁ title ▁ is: ▁ " + driver . getTitle ( ) ) ; Utils . readRessource ( "/StupidGameHelpers.js" ) ; driver . get ( STUPID_GAME_HARVEST_URL ) ; } </DOCUMENT>
<DOCUMENT_ID="testManagementAcceptanceApproved_624/tree/master/tests/Selenium/Tests/ManagementAcceptanceApprovedTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . cssSelector ( "button.headerbutton" ) ) . click ( ) ; driver . findElement ( By . name ( "username" ) ) . clear ( ) ; driver . findElement ( By . name ( "username" ) ) . sendKeys ( "hbakker" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "p@ssword" ) ; driver . findElement ( By . id ( "login_button" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Management/Home\"']" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_approved\"]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#with_selected_confirm ▁ > ▁ p" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Reviews" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_approved\"]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@id='with_selected_confirm']/img[2]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Projects" ) ) . click ( ) ; driver . findElement ( By . id ( "checkall" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "apply_to_all" ) ) ) . selectByVisibleText ( "With ▁ Selected:" ) ; driver . findElement ( By . cssSelector ( "option[value=\"status_approved\"]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#with_selected_confirm ▁ > ▁ p" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@onclick='location.href ▁ = ▁ \"/Account/Logout\"']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openMultipleBrowserWindows_630/tree/master/src/test/java/com/lithium/mineraloil/selenium/elements/DriverManagerTest.java"> public void function ( ) { DriverManager . INSTANCE . startDriver ( ) ; DriverManager . INSTANCE . get ( testUrl ) ; Assertions . assertThat ( DriverManager . INSTANCE . getTitle ( ) ) . isEqualTo ( "Test" ) ; DriverManager . INSTANCE . get ( GOOGLE_URL ) ; Assertions . assertThat ( DriverManager . INSTANCE . getCurrentUrl ( ) ) . contains ( GOOGLE_URL ) ; Assertions . assertThat ( DriverManager . INSTANCE . getNumberOfDrivers ( ) ) . isEqualTo ( 2 ) ; DriverManager . INSTANCE . stopDriver ( ) ; Assertions . assertThat ( DriverManager . INSTANCE . getNumberOfDrivers ( ) ) . isEqualTo ( 1 ) ; Assertions . assertThat ( DriverManager . INSTANCE . getCurrentUrl ( ) ) . isEqualTo ( testUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testDeletePlaylist_631/tree/master/PicmonicAutomation/src/com/picmonic/selenium/tests/PlayList.java"> public void function ( ) throws Exception { driver . findElement ( By . xpath ( " // a[@href='/library']/div[@class='nav-item']" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . id ( "playlist-dropdown-button" ) ) . click ( ) ; driver . findElement ( By . id ( "create-set-item" ) ) . click ( ) ; driver . findElement ( By . id ( "set_name" ) ) . clear ( ) ; driver . findElement ( By . id ( "set_name" ) ) . sendKeys ( "ashish" ) ; driver . findElement ( By . id ( "save_playlist" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . id ( "delete-set" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button // i[@class='icon-bars']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testDragandDropplaylist_632/tree/master/PicmonicAutomation/src/com/picmonic/selenium/tests/PlayList.java"> public void function ( ) throws Exception { driver . findElement ( By . xpath ( " // a[@href='/library']/div[@class='nav-item']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button // i[@class='icon-bars']" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testMySubscriptionForMCAT_633/tree/master/PicmonicAutomation/src/com/picmonic/selenium/tests/MySubscription.java"> public void function ( ) throws Exception { driver . findElement ( By . xpath ( " // button // i[@class='icon-bars']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@class='nav-item'][contains(text(),'My ▁ Subscriptions')]" ) ) . click ( ) ; assertEquals ( "MCAT ▁ Biology" , driver . findElement ( By . xpath ( " // div[@id='purchase-container'] // td[contains(text(),'MCAT ▁ Biology')]" ) ) . getText ( ) ) ; assertEquals ( "INACTIVE" , driver . findElement ( By . xpath ( " // descendant::span[@class ▁ = ▁ 'status'][2]" ) ) . getText ( ) ) ; assertTrue ( isElementPresent ( By . xpath ( "( // a[contains(text(),'SUBSCRIBE')])[2]" ) ) ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'SUBSCRIBE')])[2]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getBaseURL_635/tree/master/eGov/bolzano/src/eu/testingmachine/SeleniumTests.java"> public void function ( ) { try { driver . get ( baseUrl ) ; } catch ( UnreachableBrowserException e ) { System . out . println ( "driver.get() ▁ threw ▁ an ▁ exception." ) ; e . printStackTrace ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testMySubscriptionForMedicine_634/tree/master/PicmonicAutomation/src/com/picmonic/selenium/tests/MySubscription.java"> public void function ( ) throws Exception { driver . findElement ( By . xpath ( " // button // i[@class='icon-bars']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@class='nav-item'][contains(text(),'My ▁ Subscriptions')]" ) ) . click ( ) ; try { assertEquals ( "Picmonic ▁ for ▁ Medicine" , driver . findElement ( By . xpath ( " // div[@id='purchase-container'] // td[contains(text(),'Picmonic ▁ for ▁ Medicine')]" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( "( // a[contains(text(),'SUBSCRIBE')])[2]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldOpenBusiness_637/tree/master/SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"> public void function ( ) { webDriver . get ( baseUrl + "/businesses" ) ; final Optional < WebElement > correctRow = findRowInTableRowsWithField ( BUSINESS_ROWS_LOCATOR , BUSINESS_ROW_NAME_LOCATOR , EXISTING_BUSINESS_NAME ) ; if ( correctRow . isPresent ( ) ) { correctRow . get ( ) . findElement ( By . className ( "business-show-link" ) ) . click ( ) ; String fullBusinessId = findElementByLocator ( By . className ( "business-id" ) ) . getText ( ) ; assertThat ( "Business ▁ Id ▁ contains ▁ correct ▁ ID" , fullBusinessId . contains ( "#1" ) , is ( true ) ) ; } else { fail ( "Business ▁ named ▁ Business ▁ 1 ▁ wasn't ▁ found" ) ; } } </DOCUMENT>
<DOCUMENT_ID="itShouldReturnBusinesses_636/tree/master/SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"> public void function ( ) { webDriver . get ( baseUrl + "/businesses" ) ; final Optional < WebElement > correctRow = findRowInTableRowsWithField ( BUSINESS_ROWS_LOCATOR , BUSINESS_ROW_NAME_LOCATOR , EXISTING_BUSINESS_NAME ) ; assertThat ( "There ▁ is ▁ a ▁ business ▁ named ▁ Business ▁ 1" , correctRow . isPresent ( ) , is ( true ) ) ; final List < String > businessNames = allFieldValuesInTable ( BUSINESS_ROWS_LOCATOR , BUSINESS_ROW_NAME_LOCATOR ) ; checkIfNamesAreSorted ( businessNames ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotAddExistingBusiness_639/tree/master/SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"> public void function ( ) { webDriver . get ( baseUrl + "/businesses" ) ; findElementByLocator ( By . className ( "business-name-field" ) ) . sendKeys ( "Exists" ) ; findElementByLocator ( By . className ( "business-add-button" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( "alert" ) ) ; assertThat ( "Validation ▁ problem ▁ alert ▁ is ▁ displayed" , alertElement . getText ( ) . contains ( "name ▁ already ▁ exists" ) , is ( true ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldAddBusiness_638/tree/master/SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"> public void function ( ) { webDriver . get ( baseUrl + "/businesses" ) ; findElementByLocator ( By . className ( "business-name-field" ) ) . sendKeys ( "New ▁ name" ) ; findElementByLocator ( By . className ( "business-add-button" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( "alert" ) ) ; assertThat ( "Business ▁ Id ▁ contains ▁ correct ▁ ID" , alertElement . getText ( ) . contains ( "Business ▁ added ▁ successfully" ) , is ( true ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldRemoveBusiness_640/tree/master/SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"> public void function ( ) { webDriver . get ( baseUrl + "/businesses/2" ) ; findElementByLocator ( By . className ( "business-delete-button" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( "alert" ) ) ; assertThat ( "Business ▁ removed ▁ message ▁ present" , alertElement . getText ( ) . contains ( "removed" ) , is ( true ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPhastaPStampede_641/tree/master/src/test/java/org/apache/airavata/pga/tests/PhastaPStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "PhastaP-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Phasta_P" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Parasolid-Geometric-Model" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT1 ) ; driver . findElement ( By . id ( "Problem-Definition" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT2 ) ; driver . findElement ( By . id ( "Mesh-Description-File" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT3 ) ; driver . findElement ( By . id ( "Solver-Input-Parameters" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT4 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAutoDockBR2_642/tree/master/src/test/java/org/apache/airavata/pga/tests/AutoDockBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AutoDock-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "AutoDock" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Input-File-DPF" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File-DAT" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "HSG1-Maps-FLD" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "cpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGamessStampede_643/tree/master/src/test/java/org/apache/airavata/pga/tests/GamessStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gamess-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gamess_Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Version" ) ) . clear ( ) ; driver . findElement ( By . id ( "Version" ) ) . sendKeys ( "00" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "PPN" ) ) . clear ( ) ; driver . findElement ( By . id ( "PPN" ) ) . sendKeys ( "4" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "development" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGamessKarst_644/tree/master/src/test/java/org/apache/airavata/pga/tests/GamessKarst.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gamess-Karst" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gamess" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Version" ) ) . clear ( ) ; driver . findElement ( By . id ( "Version" ) ) . sendKeys ( "01" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "PPN" ) ) . clear ( ) ; driver . findElement ( By . id ( "PPN" ) ) . sendKeys ( "4" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "karst.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "batch" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testDFTBStampede_645/tree/master/src/test/java/org/apache/airavata/pga/tests/DFTBStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "DFTB-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "DFTB+" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "DFTB-Input" ) ) . sendKeys ( ExpFileReadUtils . DFTB_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testNwChemComet_646/tree/master/src/test/java/org/apache/airavata/pga/tests/NwChemComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "NwChem-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "NWChem" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Water-Molecule-Input" ) ) . sendKeys ( ExpFileReadUtils . NWCHEM_INPUT1 ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAutoDockVinaStampede_647/tree/master/src/test/java/org/apache/airavata/pga/tests/AutoDockVinaStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AutoDockVina-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "AutoDock_Vina" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Receptor-File" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Ligand-File" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Config-File" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testLammpsBR2_650/tree/master/src/test/java/org/apache/airavata/pga/tests/LammpsBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Lammps-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Lammps_BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Friction-Simulation-Input" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "gpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testGaussianKarst_648/tree/master/src/test/java/org/apache/airavata/pga/tests/GaussianKarst.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gaussian-Karst" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gaussian" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "karst.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "batch" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testGromacsComet_649/tree/master/src/test/java/org/apache/airavata/pga/tests/GromacsComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gromacs-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gromacs" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Portable-Input-Binary-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Coordinate-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testGaussianBridges_651/tree/master/src/test/java/org/apache/airavata/pga/tests/GaussianBridges.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gaussian-Bridges" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gaussian" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bridges.psc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "RM" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateModifySearchProject_653/tree/master/src/test/java/org/apache/airavata/pga/tests/CreateModifySearchProject.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Project" ) ) . click ( ) ; driver . findElement ( By . id ( "create" ) ) . click ( ) ; driver . findElement ( By . id ( "project-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "project-name" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "project-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "project-description" ) ) . sendKeys ( projectDescription ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "save" ) ) . click ( ) ; waitTime ( 750 ) ; driver . findElement ( By . cssSelector ( "span.glyphicon.glyphicon-pencil" ) ) . click ( ) ; driver . findElement ( By . id ( "project-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "project-description" ) ) . sendKeys ( projectDescription + "_MODIFIED_2016" ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "save" ) ) . click ( ) ; waitTime ( 500 ) ; driver . findElement ( By . linkText ( "Project" ) ) . click ( ) ; driver . findElement ( By . id ( "browse" ) ) . click ( ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "search-value" ) ) . clear ( ) ; driver . findElement ( By . id ( "search-value" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "search" ) ) . click ( ) ; driver . findElement ( By . linkText ( "View" ) ) . click ( ) ; waitTime ( 500 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAbaqusComet_652/tree/master/src/test/java/org/apache/airavata/pga/tests/AbaqusComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Abacus-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Abaqus" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Abacus-INP-File" ) ) . sendKeys ( ExpFileReadUtils . ABAQUS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "ABQ_JOB" ) ) . clear ( ) ; driver . findElement ( By . id ( "ABQ_JOB" ) ) . sendKeys ( "$abq_job" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Scratch" ) ) . clear ( ) ; driver . findElement ( By . id ( "Scratch" ) ) . sendKeys ( "$PWD" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "CPUs" ) ) . clear ( ) ; driver . findElement ( By . id ( "CPUs" ) ) . sendKeys ( "4" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Memory" ) ) . clear ( ) ; driver . findElement ( By . id ( "Memory" ) ) . sendKeys ( "80%" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "MP_MODE" ) ) . clear ( ) ; driver . findElement ( By . id ( "MP_MODE" ) ) . sendKeys ( "threads" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Interactive" ) ) . clear ( ) ; driver . findElement ( By . id ( "Interactive" ) ) . sendKeys ( "interactive" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "User_Sub_Option" ) ) . clear ( ) ; driver . findElement ( By . id ( "User_Sub_Option" ) ) . sendKeys ( "' ▁ '" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Restart_Option" ) ) . clear ( ) ; driver . findElement ( By . id ( "Restart_Option" ) ) . sendKeys ( "' ▁ '" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Datach" ) ) . clear ( ) ; driver . findElement ( By . id ( "Datach" ) ) . sendKeys ( "' ▁ '" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Double" ) ) . clear ( ) ; driver . findElement ( By . id ( "Double" ) ) . sendKeys ( "double" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testCP2KComet_654/tree/master/src/test/java/org/apache/airavata/pga/tests/CP2KComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "CP2K-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "CP2K" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File-INP" ) ) . sendKeys ( ExpFileReadUtils . CP2K_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "compute" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGamessGordon_655/tree/master/src/test/java/org/apache/airavata/pga/tests/GamessGordon.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gamess-Gordon" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gamess" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Version" ) ) . clear ( ) ; driver . findElement ( By . id ( "Version" ) ) . sendKeys ( "00" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "PPN" ) ) . clear ( ) ; driver . findElement ( By . id ( "PPN" ) ) . sendKeys ( "4" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "gordon.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGaussianBR2_656/tree/master/src/test/java/org/apache/airavata/pga/tests/GaussianBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gaussian-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gaussian" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "cpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testQuantumEspressoBridges_657/tree/master/src/test/java/org/apache/airavata/pga/tests/QuantumEspressoBridges.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "QEspresso-Bridges" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Quantum_Espresso" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "AI-Pseudopotential-File" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "AI-Primitive-Cell" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bridges.psc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "RM" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAmberSanderComet_658/tree/master/src/test/java/org/apache/airavata/pga/tests/AmberSanderComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AmberSander-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Amber_Sander" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Heat-Restart-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Production-Control-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Parameter-Topology-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testQChemComet_659/tree/master/src/test/java/org/apache/airavata/pga/tests/QChemComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "QChem-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Qchem" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "IN-Input-File" ) ) . sendKeys ( ExpFileReadUtils . QCHEM_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "compute" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAmberSanderBR2_660/tree/master/src/test/java/org/apache/airavata/pga/tests/AmberSanderBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AmberSander-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Amber_Sander" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Heat-Restart-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Production-Control-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Parameter-Topology-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "cpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGamessComet_661/tree/master/src/test/java/org/apache/airavata/pga/tests/GamessComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gamess-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gamess" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Version" ) ) . clear ( ) ; driver . findElement ( By . id ( "Version" ) ) . sendKeys ( "00" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "PPN" ) ) . clear ( ) ; driver . findElement ( By . id ( "PPN" ) ) . sendKeys ( "4" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGromacsBR2_662/tree/master/src/test/java/org/apache/airavata/pga/tests/GromacsBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gromacs-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gromacs" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Portable-Input-Binary-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Coordinate-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "cpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testGaussianComet_664/tree/master/src/test/java/org/apache/airavata/pga/tests/GaussianComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gaussian-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gaussian" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "60" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testLammpsKarst_663/tree/master/src/test/java/org/apache/airavata/pga/tests/LammpsKarst.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Lammps-Karst" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Lammps" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Friction-Simulation-Input" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "karst.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "batch" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAbinitBR2_665/tree/master/src/test/java/org/apache/airavata/pga/tests/AbinitBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Abinit-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Abinit" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Tbase-Input-File-1" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Tbase-Input-File-2" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Pspgth-Input-File" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "cpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testLammpsGordon_666/tree/master/src/test/java/org/apache/airavata/pga/tests/LammpsGordon.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Lammps-Gordon" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Lammps" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Friction-Simulation-Input" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "gordon.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testDDSCatComet_667/tree/master/src/test/java/org/apache/airavata/pga/tests/DDSCatComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "DDSCat-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "DDSCat" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "PAR-Input-File" ) ) . sendKeys ( ExpFileReadUtils . DDSCAT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "TAB-Input-File" ) ) . sendKeys ( ExpFileReadUtils . DDSCAT_INPUT2 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "compute" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "24" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "180" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testQuantumEspressoStampede_668/tree/master/src/test/java/org/apache/airavata/pga/tests/QuantumEspressoStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "QEspresso-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Quantum_Espresso" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "AI-Pseudopotential-File" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "AI-Primitive-Cell" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testMolcasStampede_670/tree/master/src/test/java/org/apache/airavata/pga/tests/MolcasStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Molcas-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Molcas" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Molcas-Input" ) ) . sendKeys ( ExpFileReadUtils . MOLCAS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "development" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "4" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "10" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAutoDockKarst_669/tree/master/src/test/java/org/apache/airavata/pga/tests/AutoDockKarst.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AutoDock-Karst" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "AutoDock" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Input-File-DPF" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File-DAT" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "HSG1-Maps-FLD" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "karst.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "batch" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGromacsStampede_673/tree/master/src/test/java/org/apache/airavata/pga/tests/GromacsStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gromacs-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gromacs" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Portable-Input-Binary-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Coordinate-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGamessBR2_672/tree/master/src/test/java/org/apache/airavata/pga/tests/GamessBR2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gamess-BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gamess_BR2" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Version" ) ) . clear ( ) ; driver . findElement ( By . id ( "Version" ) ) . sendKeys ( "01" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Processes-Per-Job" ) ) . clear ( ) ; driver . findElement ( By . id ( "Processes-Per-Job" ) ) . sendKeys ( "16" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "PPN" ) ) . clear ( ) ; driver . findElement ( By . id ( "PPN" ) ) . sendKeys ( "16" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bigred2.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "cpu" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testCP2KStampede_671/tree/master/src/test/java/org/apache/airavata/pga/tests/CP2KStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "CP2K-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "CP2K" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File-INP" ) ) . sendKeys ( ExpFileReadUtils . CP2K_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAbinitBridges_674/tree/master/src/test/java/org/apache/airavata/pga/tests/AbinitBridges.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Abinit-Bridges" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Abinit" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Tbase-Input-File-1" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Tbase-Input-File-2" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Pspgth-Input-File" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "bridges.psc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "RM" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAmberSanderStampede_676/tree/master/src/test/java/org/apache/airavata/pga/tests/AmberSanderStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AmberSander-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Amber_Sander" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Heat-Restart-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Production-Control-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Parameter-Topology-File" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testLammpsStampede_675/tree/master/src/test/java/org/apache/airavata/pga/tests/LammpsStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Lammps-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Lammps" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Friction-Simulation-Input" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testQuantumEspressoComet_677/tree/master/src/test/java/org/apache/airavata/pga/tests/QuantumEspressoComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "QEspresso-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Quantum_Espresso" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "AI-Pseudopotential-File" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "AI-Primitive-Cell" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGromacsKarst_678/tree/master/src/test/java/org/apache/airavata/pga/tests/GromacsKarst.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gromacs-Karst" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gromacs" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Portable-Input-Binary-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Coordinate-File" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "karst.uits.iu.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "batch" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testNwChemStampede_679/tree/master/src/test/java/org/apache/airavata/pga/tests/NwChemStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "NwChem-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "NWChem" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Water-Molecule-Input" ) ) . sendKeys ( ExpFileReadUtils . NWCHEM_INPUT1 ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 500 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testLammpsComet_680/tree/master/src/test/java/org/apache/airavata/pga/tests/LammpsComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Lammps-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Lammps" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Friction-Simulation-Input" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "shared" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateUserLogin_682/tree/master/src/test/java/org/apache/airavata/pga/tests/CreateUserLogin.java"> public void function ( ) throws Exception { String username = null ; String password = null ; try { username = ExpFileReadUtils . readProperty ( "new.pga.username" ) ; password = ExpFileReadUtils . readProperty ( "new.pga.password" ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } if ( username == null || username . trim ( ) . equals ( "" ) || password == null || password . trim ( ) . equals ( "" ) ) throw new RuntimeException ( "PGS ▁ user ▁ name ▁ or ▁ password ▁ in ▁ exp.properties ▁ file ▁ is ▁ invalid ▁ !" ) ; username = username . trim ( ) ; password = password . trim ( ) ; driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "Create ▁ account" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( username ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( password ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "confirm_password" ) ) . sendKeys ( password ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "pgauser@gmail.com" ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "first_name" ) ) . sendKeys ( "PGA" ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "last_name" ) ) . sendKeys ( "User" ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "Submit" ) ) . click ( ) ; waitTime ( 5000 ) ; } </DOCUMENT>
<DOCUMENT_ID="testTinkerMonteStampede_681/tree/master/src/test/java/org/apache/airavata/pga/tests/TinkerMonteStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "TinkerMonte-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Tinker_Monte" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "xyzf" ) ) . sendKeys ( ExpFileReadUtils . TINKER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "keyf" ) ) . sendKeys ( ExpFileReadUtils . TINKER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "stps" ) ) . clear ( ) ; driver . findElement ( By . id ( "stps" ) ) . sendKeys ( "20000" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Ctc" ) ) . clear ( ) ; driver . findElement ( By . id ( "Ctc" ) ) . sendKeys ( "C" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "stpsZ" ) ) . clear ( ) ; driver . findElement ( By . id ( "stpsZ" ) ) . sendKeys ( "3.0" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "temp" ) ) . clear ( ) ; driver . findElement ( By . id ( "temp" ) ) . sendKeys ( "298" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Rconv" ) ) . clear ( ) ; driver . findElement ( By . id ( "Rconv" ) ) . sendKeys ( "0.01" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testCPMDComet_683/tree/master/src/test/java/org/apache/airavata/pga/tests/CPMDComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "CPMD-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "CPMD" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "INP-Input-File" ) ) . sendKeys ( ExpFileReadUtils . CPMD_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "compute" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testVinaMultipleStampede_684/tree/master/src/test/java/org/apache/airavata/pga/tests/VinaMultipleStampede.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "VinaMultiple-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Vina_Multiple" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Receptor-File" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Multi-Ligand-Zip-File" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Config-File" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGaussianGordon_685/tree/master/src/test/java/org/apache/airavata/pga/tests/GaussianGordon.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Gaussian-Gordon" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Gaussian" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Input-File" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT2 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "gordon.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="testAbinitComet_687/tree/master/src/test/java/org/apache/airavata/pga/tests/AbinitComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "Abinit-Comet" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Abinit" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Tbase-Input-File-1" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Tbase-Input-File-2" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Pspgth-Input-File" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "compute" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_689/tree/master/src/main/java/com/byclosure/webcat/stepdefinitions/BrowsingSteps.java"> private void function ( String url ) { driver . get ( url ) ; seleniumInteractions . takeScreenshot ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testVinaMultipleComet_686/tree/master/src/test/java/org/apache/airavata/pga/tests/VinaMultipleComet.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; driver . findElement ( By . id ( "experiment-name" ) ) . clear ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "VinaMultiple-Comet" ) ; driver . findElement ( By . id ( "experiment-description" ) ) . clear ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "Vina_Multiple" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Receptor-File" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Multi-Ligand-Zip-File" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Config-File" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "comet.sdsc.edu" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "compute" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="buscaSimplesPorDarf_688/tree/master/src/test/java/br/gov/servicos/frontend/BuscaUITest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Página ▁ Inicial" ) ) ; driver . findElement ( By . id ( "buscar" ) ) . sendKeys ( "darf" ) ; driver . findElement ( By . className ( "searchButton" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ darf" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li" ) ) . size ( ) , is ( 20 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li ▁ h3" ) ) . get ( 0 ) . getText ( ) , is ( "Documento ▁ de ▁ Arrecadação ▁ de ▁ Receitas ▁ Federais ▁ (Darf)" ) ) ; assertThat ( driver . findElement ( By . id ( "buscar" ) ) . getAttribute ( "value" ) , is ( "darf" ) ) ; driver . findElement ( By . id ( "buscar" ) ) . clear ( ) ; driver . findElement ( By . id ( "buscar" ) ) . sendKeys ( "prouni" ) ; driver . findElement ( By . className ( "searchButton" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ prouni" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li" ) ) . size ( ) , is ( 20 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li ▁ h3" ) ) . get ( 0 ) . getText ( ) , is ( "ProUni ▁ — ▁ Programa ▁ Universidade ▁ para ▁ Todos" ) ) ; driver . findElement ( By . cssSelector ( "#resultados-busca ▁ li ▁ a" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ ProUni ▁ — ▁ Programa ▁ Universidade ▁ para ▁ Todos" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="DoLoginTest_691/tree/master/src/test/java/ru/greg3d/DoLogin.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement userNameElement = driver . findElement ( By . id ( "username" ) ) ; userNameElement . clear ( ) ; userNameElement . sendKeys ( "admin" ) ; WebElement passwordElement = driver . findElement ( By . name ( "password" ) ) ; passwordElement . clear ( ) ; passwordElement . sendKeys ( "admin" ) ; } </DOCUMENT>
<DOCUMENT_ID="getGoogleAccessToken_690/tree/master/tests/appengine-tck-oauth/src/test/java/com/google/appengine/tck/oauth/ClientSideWebAppFlowTest.java"> private String function ( String email , String pw , String client_id , String redirect_uri , String scope ) { Property staticToken = property ( "authToken" ) ; if ( staticToken . exists ( ) ) { return staticToken . getPropertyValue ( ) ; } String requestTokenUrl = String . format ( "%s?response_type=token&client_id=%s&redirect_uri=%s&scope=%s" , GOOGLE_OAUTH2_REQUEST_TOKEN_URL , client_id , redirect_uri , scope ) ; String cacheKey = email + ":" + requestTokenUrl ; if ( tokenCache . containsKey ( cacheKey ) ) { return tokenCache . get ( cacheKey ) ; } driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( requestTokenUrl ) ; try { driver . findElement ( By . id ( "Email" ) ) . sendKeys ( email ) ; driver . findElement ( By . id ( "Passwd" ) ) . sendKeys ( pw ) ; driver . findElement ( By . id ( "signIn" ) ) . submit ( ) ; } catch ( NoSuchElementException nsee ) { String errMsg = driver . getCurrentUrl ( ) + " ▁ ----- ▁ " + driver . getPageSource ( ) ; throw new NoSuchElementException ( nsee . toString ( ) + " ▁ ----- ▁ " + errMsg ) ; } try { WebElement button = driver . findElement ( By . id ( "submit_approve_access" ) ) ; Graphene . waitModel ( driver ) . withTimeout ( 5 , TimeUnit . SECONDS ) . until ( ) . element ( button ) . is ( ) . enabled ( ) ; button . click ( ) ; } catch ( NoSuchElementException e ) { } String redirectUrlWithToken = driver . getCurrentUrl ( ) . replace ( "#access_token=" , "?access_token=" ) ; List < NameValuePair > params ; try { params = URLEncodedUtils . parse ( new URI ( redirectUrlWithToken ) , "UTF-8" ) ; } catch ( URISyntaxException urise ) { throw new IllegalStateException ( urise ) ; } String accessToken = null ; for ( NameValuePair param : params ) { if ( param . getName ( ) . equals ( "access_token" ) ) { accessToken = param . getValue ( ) ; } } assertNotNull ( "Token ▁ is ▁ null:" + driver . getCurrentUrl ( ) + " ▁ ----- ▁ " + driver . getPageSource ( ) , accessToken ) ; tokenCache . put ( cacheKey , accessToken ) ; return accessToken ; } </DOCUMENT>
<DOCUMENT_ID="iClickOnTheTopRowInInvoices_694/tree/master/test/selenium/com/litle/magento/selenium/BaseTestCase.java"> void function ( ) { String url = driver . findElement ( By . xpath ( "/html/body/div[2]/div[3]/div/div/div[2]/div/div[3]/div[2]/div/div/div/table/tbody/tr" ) ) . getAttribute ( "title" ) ; driver . get ( url ) ; waitFor ( By . id ( "comments_block" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="the_User_navigates_to_695/tree/master/src/test/java/com/andremanuelbarbosa/imageuploader/steps/ImageUploaderSteps.java"> public void function ( String url ) throws Throwable { webDriver . get ( BASE_URL + url ) ; waitAndTakeScreenshot ( 10000 ) ; } </DOCUMENT>
<DOCUMENT_ID="transactionDetailHasLinksToLitle_692/tree/master/test/selenium/com/litle/magento/selenium/TransactionDetailTests.java"> public void function ( ) throws Exception { iAmDoingLitleAuth ( ) ; iAmLoggedInAsWithThePassword ( "abc@gmail.com" , "password" ) ; iHaveInMyCart ( "vault" ) ; iCheckOutWith ( "Visa" , "4100000000000001" ) ; iLogOutAsUser ( ) ; iAmLoggedInAsAnAdministrator ( ) ; iView ( "Sales" , "Orders" ) ; iClickOnTheTopRowInOrders ( ) ; iPressInvoice ( ) ; iSelectNameFromSelect ( "Capture ▁ Online" , "invoice[capture_case]" ) ; iPressSubmitInvoice ( "The ▁ invoice ▁ has ▁ been ▁ created." , null ) ; iView ( "Sales" , "Transactions" ) ; WebElement table = driver . findElement ( By . id ( "order_transactions_table" ) ) ; List < WebElement > rows = table . findElement ( By . tagName ( "tbody" ) ) . findElements ( By . tagName ( "tr" ) ) ; assertEquals ( 2 , rows . size ( ) ) ; WebElement firstRow = rows . get ( 0 ) ; firstRow . click ( ) ; String parentUrl = verifyTransactionDetailTable ( "capture" ) ; driver . get ( parentUrl ) ; verifyTransactionDetailTable ( "authorization" ) ; iLogOutAsAdministrator ( ) ; } </DOCUMENT>
<DOCUMENT_ID="iClickOnTheCustomerWithEmail_693/tree/master/test/selenium/com/litle/magento/selenium/BaseTestCase.java"> void function ( String email ) { if ( "New ▁ Order ▁ / ▁ Orders ▁ / ▁ Sales ▁ / ▁ Magento ▁ Admin" . equals ( driver . getTitle ( ) ) ) { WebElement e = driver . findElement ( By . id ( "sales_order_create_customer_grid_table" ) ) ; e = e . findElement ( By . tagName ( "tbody" ) ) ; List < WebElement > rows = e . findElements ( By . tagName ( "tr" ) ) ; WebElement rowToClick = null ; for ( WebElement row : rows ) { WebElement emailCol = row . findElements ( By . tagName ( "td" ) ) . get ( 2 ) ; String colValue = emailCol . getText ( ) . trim ( ) ; if ( colValue . equals ( email ) ) { rowToClick = row ; } } assertNotNull ( "Couldn't ▁ find ▁ customer ▁ with ▁ email ▁ " + email , rowToClick ) ; rowToClick . click ( ) ; waitFor ( By . id ( "submit_order_top_button" ) ) ; } else { WebElement e = driver . findElement ( By . id ( "customerGrid_table" ) ) ; e = e . findElement ( By . tagName ( "tbody" ) ) ; List < WebElement > rows = e . findElements ( By . tagName ( "tr" ) ) ; String url = null ; for ( WebElement row : rows ) { WebElement emailCol = row . findElements ( By . tagName ( "td" ) ) . get ( 3 ) ; String colName = emailCol . getText ( ) . trim ( ) ; if ( colName . equals ( email ) ) { url = row . getAttribute ( "title" ) ; } } assertNotNull ( "Couldn't ▁ find ▁ customer ▁ with ▁ email ▁ " + email , url ) ; driver . get ( url ) ; waitFor ( By . id ( "customer_info_tabs" ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="que_el_usuario_ingreso_a_696/tree/master/src/test/java/ar/com/proautomation/specs/glue/GoogleSearchStepDefinition.java"> public void function ( String url ) throws Throwable { driver = new FirefoxDriver ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginAsAdmin_699/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint5/LoginAsAdmin.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "Admin" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testDeleteLocations_697/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/DeleteLocations.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( "Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)" ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( "Multnomah ▁ Falls ▁ (Testing)" ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( "Santiam ▁ State ▁ Forest ▁ (Testing)" ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( "Silver ▁ Falls ▁ State ▁ Park ▁ (Testing)" ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( "Zion ▁ National ▁ Park ▁ (Testing)" ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddReviews_701/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/CreateReviews.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "asenner" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)" ) ) . click ( ) ; driver . findElement ( By . linkText ( "first" ) ) . click ( ) ; driver . findElement ( By . id ( "Rating" ) ) . click ( ) ; driver . findElement ( By . id ( "Comment" ) ) . clear ( ) ; driver . findElement ( By . id ( "Comment" ) ) . sendKeys ( "This ▁ is ▁ a ▁ nice ▁ canyon." ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jgarcia2" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Write ▁ New ▁ Review" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@id='Rating'])[2]" ) ) . click ( ) ; driver . findElement ( By . id ( "Comment" ) ) . clear ( ) ; driver . findElement ( By . id ( "Comment" ) ) . sendKeys ( "I ▁ don't ▁ like ▁ canyons." ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "acarson" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Write ▁ New ▁ Review" ) ) . click ( ) ; driver . findElement ( By . id ( "Rating" ) ) . click ( ) ; driver . findElement ( By . id ( "Comment" ) ) . clear ( ) ; driver . findElement ( By . id ( "Comment" ) ) . sendKeys ( "I ▁ go ▁ here ▁ every ▁ year ▁ with ▁ my ▁ parents." ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jpetersen" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Write ▁ New ▁ Review" ) ) . click ( ) ; driver . findElement ( By . id ( "Rating" ) ) . click ( ) ; driver . findElement ( By . id ( "Comment" ) ) . clear ( ) ; driver . findElement ( By . id ( "Comment" ) ) . sendKeys ( "Sometimes ▁ I ▁ wish ▁ we'd ▁ all ▁ just ▁ get ▁ along." ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateLocations_698/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/CreateLocations.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)" ) ; driver . findElement ( By . id ( "Latitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Latitude" ) ) . sendKeys ( "36.0553" ) ; driver . findElement ( By . id ( "Longitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Longitude" ) ) . sendKeys ( "-112.1218" ) ; driver . findElement ( By . id ( "Description" ) ) . clear ( ) ; driver . findElement ( By . id ( "Description" ) ) . sendKeys ( "The ▁ Grand ▁ Canyon ▁ is ▁ a ▁ steep-sided ▁ canyon ▁ carved ▁ by ▁ the ▁ Colorado ▁ River ▁ in ▁ the ▁ state ▁ of ▁ Arizona ▁ in ▁ the ▁ United ▁ States." ) ; new Select ( driver . findElement ( By . id ( "Difficulty" ) ) ) . selectByVisibleText ( "Easy" ) ; driver . findElement ( By . id ( "RecOptions_0__IsChecked" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "Multnomah ▁ Falls ▁ (Testing)" ) ; driver . findElement ( By . id ( "Latitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Latitude" ) ) . sendKeys ( "45.5760" ) ; driver . findElement ( By . id ( "Longitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Longitude" ) ) . sendKeys ( "-122.1154" ) ; driver . findElement ( By . id ( "Description" ) ) . clear ( ) ; driver . findElement ( By . id ( "Description" ) ) . sendKeys ( "Multnomah ▁ Falls ▁ is ▁ a ▁ waterfall ▁ on ▁ the ▁ Oregon ▁ side ▁ of ▁ the ▁ Columbia ▁ River ▁ Gorge, ▁ located ▁ east ▁ of ▁ Troutdale, ▁ between ▁ Corbett ▁ and ▁ Dodson, ▁ along ▁ the ▁ Historic ▁ Columbia ▁ River ▁ Highway." ) ; driver . findElement ( By . id ( "RecOptions_0__IsChecked" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "Difficulty" ) ) ) . selectByVisibleText ( "Medium" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "Santiam ▁ State ▁ Forest ▁ (Testing)" ) ; driver . findElement ( By . id ( "Latitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Latitude" ) ) . sendKeys ( "44.7165" ) ; driver . findElement ( By . id ( "Description" ) ) . clear ( ) ; driver . findElement ( By . id ( "Description" ) ) . sendKeys ( "Santiam ▁ State ▁ Forest ▁ is ▁ one ▁ of ▁ six ▁ state ▁ forests ▁ managed ▁ by ▁ the ▁ Oregon ▁ Department ▁ of ▁ Forestry. ▁ The ▁ forest ▁ is ▁ located ▁ approximately ▁ 25 ▁ miles ▁ (40 ▁ km) ▁ southeast ▁ of ▁ Salem, ▁ Oregon, ▁ and ▁ includes ▁ 47,871 ▁ acres ▁ (193.73 ▁ km2)." ) ; new Select ( driver . findElement ( By . id ( "Difficulty" ) ) ) . selectByVisibleText ( "Hard" ) ; driver . findElement ( By . id ( "RecOptions_0__IsChecked" ) ) . click ( ) ; driver . findElement ( By . id ( "RecOptions_1__IsChecked" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "Silver ▁ Falls ▁ State ▁ Park ▁ (Testing)" ) ; driver . findElement ( By . id ( "Latitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Latitude" ) ) . sendKeys ( "44.8512" ) ; driver . findElement ( By . id ( "Longitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Longitude" ) ) . sendKeys ( "-122.6462" ) ; driver . findElement ( By . id ( "Description" ) ) . clear ( ) ; driver . findElement ( By . id ( "Description" ) ) . sendKeys ( "Silver ▁ Falls ▁ State ▁ Park ▁ is ▁ a ▁ state ▁ park ▁ in ▁ the ▁ U.S. ▁ state ▁ of ▁ Oregon, ▁ located ▁ near ▁ Silverton, ▁ about ▁ 20 ▁ miles ▁ (32 ▁ km) ▁ east-southeast ▁ of ▁ Salem. ▁ It ▁ is ▁ the ▁ largest ▁ state ▁ park ▁ in ▁ Oregon ▁ with ▁ an ▁ area ▁ of ▁ more ▁ than ▁ 9,000 ▁ acres ▁ (36 ▁ km2)." ) ; new Select ( driver . findElement ( By . id ( "Difficulty" ) ) ) . selectByVisibleText ( "Varies" ) ; driver . findElement ( By . id ( "RecOptions_1__IsChecked" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "Zion ▁ National ▁ Park ▁ (Testing)" ) ; driver . findElement ( By . id ( "Latitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Latitude" ) ) . sendKeys ( "37.2026" ) ; driver . findElement ( By . id ( "Longitude" ) ) . clear ( ) ; driver . findElement ( By . id ( "Longitude" ) ) . sendKeys ( "-112.9878" ) ; driver . findElement ( By . id ( "Description" ) ) . clear ( ) ; driver . findElement ( By . id ( "Description" ) ) . sendKeys ( "Zion ▁ National ▁ Park ▁ is ▁ located ▁ in ▁ the ▁ Southwestern ▁ United ▁ States, ▁ near ▁ Springdale, ▁ Utah. ▁ A ▁ prominent ▁ feature ▁ of ▁ the ▁ 229-square-mile ▁ (590 ▁ km2) ▁ park ▁ is ▁ Zion ▁ Canyon, ▁ which ▁ is ▁ 15 ▁ miles ▁ (24 ▁ km) ▁ long ▁ and ▁ up ▁ to ▁ half ▁ a ▁ mile ▁ (800 ▁ m) ▁ deep." ) ; new Select ( driver . findElement ( By . id ( "Difficulty" ) ) ) . selectByVisibleText ( "NA" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="assertPageTitleContainsSearchQuery_703/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/UserStory130.java"> public void function ( String title ) { driver . get ( baseUrl + "/Location" ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . id ( "dropdownMenu1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "All" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( title ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; if ( ! driver . getTitle ( ) . contains ( title ) ) { fail ( "title ▁ of ▁ page ▁ must ▁ contain ▁ " + title ) ; } } </DOCUMENT>
<DOCUMENT_ID="testCreateUsers_700/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/CreateUsers.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "registerLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "asenner" ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "asenner@fake.com" ) ; driver . findElement ( By . id ( "FirstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "FirstName" ) ) . sendKeys ( "April" ) ; driver . findElement ( By . id ( "LastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "LastName" ) ) . sendKeys ( "Senner" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "Private" ) ) . click ( ) ; driver . findElement ( By . id ( "RecOptions_0__IsChecked" ) ) . click ( ) ; driver . findElement ( By . id ( "RecOptions_1__IsChecked" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "registerLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "acarson" ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "acarson@fake.com" ) ; driver . findElement ( By . id ( "FirstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "FirstName" ) ) . sendKeys ( "Aaron" ) ; driver . findElement ( By . id ( "LastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "LastName" ) ) . sendKeys ( "Carson" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "RecOptions_0__IsChecked" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "registerLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jpetersen" ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "jpetersen@fake.com" ) ; driver . findElement ( By . id ( "FirstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "FirstName" ) ) . sendKeys ( "Jared" ) ; driver . findElement ( By . id ( "LastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "LastName" ) ) . sendKeys ( "Petersen" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "RecOptions_1__IsChecked" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "registerLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jgarcia" ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "jgarcia@fake.com" ) ; driver . findElement ( By . id ( "FirstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "FirstName" ) ) . sendKeys ( "J.J." ) ; driver . findElement ( By . id ( "LastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "LastName" ) ) . sendKeys ( "Garcia" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "Private" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jgarcia2" ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "jgarcia2@fake.com" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "ConfirmPassword" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="fromWebDriver_705/tree/master/src/main/java/com/alexnederlof/rendered/FetchTask.java"> private String function ( String nextUrl ) { driver . navigate ( ) . to ( nextUrl ) ; try { Thread . sleep ( TimeUnit . SECONDS . toMillis ( BROWSER_TIME_OUT ) ) ; } catch ( InterruptedException e ) { log . error ( "Interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ browser ▁ to ▁ render" ) ; Thread . currentThread ( ) . interrupt ( ) ; } return driver . getPageSource ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_706/tree/master/src/main/resources/archetype-resources/src/test/java/SampleJUnitTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testRemoveReviews_702/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/DeleteReviews.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "asenner" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Hello ▁ asenner!" ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ Reviews" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jgarcia2" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Hello ▁ jgarcia2!" ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ Reviews" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "acarson" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Hello ▁ acarson!" ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ Reviews" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "jpetersen" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Hello ▁ jpetersen!" ) ) . click ( ) ; driver . findElement ( By . linkText ( "My ▁ Reviews" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Log ▁ off" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="mayBeLogin_708/tree/master/src/test/java/ru/stqa/selenium/Helpers/Helpers.java"> public static void function ( WebDriver driver ) throws Exception { try { driver . findElement ( By . xpath ( " // nav" ) ) ; } catch ( Exception e ) { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testMergeLocations_704/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint5/MergeLocations.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "loginLink" ) ) . click ( ) ; driver . findElement ( By . id ( "UserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "UserName" ) ) . sendKeys ( "Admin" ) ; driver . findElement ( By . id ( "Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Password" ) ) . sendKeys ( "Password1!" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "TempLocation" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add ▁ New" ) ) . click ( ) ; driver . findElement ( By . id ( "Label" ) ) . clear ( ) ; driver . findElement ( By . id ( "Label" ) ) . sendKeys ( "MergedLocation" ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Hello ▁ Admin!" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Join ▁ Locations" ) ) . click ( ) ; driver . findElement ( By . id ( "SearchStringA" ) ) . clear ( ) ; driver . findElement ( By . id ( "SearchStringA" ) ) . sendKeys ( "TempLocation" ) ; driver . findElement ( By . cssSelector ( "div ▁ > ▁ p ▁ > ▁ input[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . id ( "SearchStringB" ) ) . clear ( ) ; driver . findElement ( By . id ( "SearchStringB" ) ) . sendKeys ( "MergedLocation" ) ; driver . findElement ( By . xpath ( " // input[@value='Search ▁ Location ▁ B']" ) ) . click ( ) ; assertEquals ( "TempLocation" , driver . findElement ( By . xpath ( " // td[2]" ) ) . getText ( ) ) ; assertEquals ( "MergedLocation" , driver . findElement ( By . xpath ( " // div[2]/table/tbody/tr[2]/td[2]" ) ) . getText ( ) ) ; driver . findElement ( By . name ( "LocationA" ) ) . click ( ) ; driver . findElement ( By . name ( "LocationB" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "MergedLocation ▁ - ▁ tents ▁ n ▁ trails" , driver . getTitle ( ) ) ; assertEquals ( "Location ▁ A ▁ has ▁ been ▁ merged ▁ into ▁ Location ▁ B." , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'Delete')])[3]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.btn.btn-default" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_709/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_710/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testDeleteFilm_707/tree/master/src/test/java/ru/st/selenium/DeleteFilm.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "q" ) ) . clear ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "Sunshine" ) ; driver . findElement ( By . cssSelector ( "input#q" ) ) . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( "div#container ▁ a[href='./?go=movie&id=12']" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . cssSelector ( "div.title" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; driver . findElement ( By . id ( "q" ) ) . clear ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "Sunshine" ) ; driver . findElement ( By . cssSelector ( "input#q" ) ) . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( "div#container ▁ a[href='./?go=movie&id=12']" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_712/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_713/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_715/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( TestUtilities . isFirefox ( driver ) && TestUtilities . isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_716/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_717/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_714/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_718/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="openMainPage_720/tree/master/src/main/java/selenium_cherkasov/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_721/tree/master/src/main/java/selenium_cherkasov/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_719/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="startAndStop_722/tree/master/src/test/java/de/lgohlke/selenium/webdriver/phantomjs/PhantomJSDriverServiceFactoryIT.java"> public void function ( ) throws IOException { PhantomJSDriverService driverService = factory . createService ( ) ; driverService . start ( ) ; try { WebDriver webDriver = factory . createWebDriver ( driverService ) ; String url = "http: // localhost:" + httpServer . getAddress ( ) . getPort ( ) + "/webdriverTest" ; webDriver . get ( url ) ; String currentUrl = webDriver . getCurrentUrl ( ) ; assertThat ( currentUrl ) . isEqualTo ( url ) ; } finally { driverService . stop ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="startAndStop_723/tree/master/src/test/java/de/lgohlke/selenium/webdriver/chrome/ChromeDriverServiceFactoryIT.java"> public void function ( ) throws IOException { ChromeDriverService driverService = factory . createService ( ) ; driverService . start ( ) ; WebDriver webDriver = factory . createWebDriver ( driverService ) ; String url = "http: // localhost:" + httpServer . getAddress ( ) . getPort ( ) + "/webdriverTest" ; webDriver . get ( url ) ; String currentUrl = webDriver . getCurrentUrl ( ) ; assertThat ( currentUrl ) . isEqualTo ( url ) ; driverService . stop ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testUsingCustomUserprofile_724/tree/master/src/test/java/de/lgohlke/selenium/webdriver/chrome/ChromeDriverServiceFactoryIT.java"> public void function ( ) throws IOException { ChromeDriverConfiguration driverConfiguration = new ChromeDriverConfiguration ( ) ; ChromeDriverServiceFactory factory = new ChromeDriverServiceFactory ( driverConfiguration ) ; driverConfiguration . setUserDir ( temporaryFolder . newFolder ( ) . getAbsolutePath ( ) ) ; driverService = factory . createService ( ) ; driverService . start ( ) ; String url = "chrome: // version" ; By selector = By . id ( "profile_path" ) ; WebDriver driver1 = factory . createWebDriver ( driverService ) ; driver1 . get ( url ) ; String profilePath1 = driver1 . findElement ( selector ) . getText ( ) ; driverService . stop ( ) ; driverService . start ( ) ; WebDriver driver2 = factory . createWebDriver ( driverService ) ; driver2 . get ( url ) ; String profilePath2 = driver2 . findElement ( selector ) . getText ( ) ; assertThat ( profilePath1 ) . isEqualTo ( profilePath2 ) ; } </DOCUMENT>
<DOCUMENT_ID="canAddProduct_725/tree/master/src/test/java/org/jboss/community/trts/test/ui/ProductUITest.java"> public void function ( ) { driver . get ( applicationUrl ) ; driver . findElement ( By . partialLinkText ( "Product" ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( "Create ▁ new ▁ product" ) ) . click ( ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "JBoss ▁ Developer ▁ Studio" ) ; driver . findElement ( By . cssSelector ( "input[value='Save']" ) ) . click ( ) ; assertTrue ( "Product ▁ should ▁ be ▁ created!" , driver . findElement ( By . className ( "alert_success" ) ) != null ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddMovie_711/tree/master/src/test/java/ru/st/selenium/AddMovie.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "Le ▁ jouet" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "1976" ) ; driver . findElement ( By . name ( "duration" ) ) . clear ( ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "120" ) ; driver . findElement ( By . name ( "rating" ) ) . clear ( ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "5" ) ; driver . findElement ( By . name ( "trailer" ) ) . clear ( ) ; driver . findElement ( By . name ( "trailer" ) ) . sendKeys ( "http: // www.kinopoisk.ru/film/57004/video/124770/" ) ; driver . findElement ( By . name ( "notes" ) ) . clear ( ) ; driver . findElement ( By . name ( "notes" ) ) . sendKeys ( "Pierre ▁ Richar" ) ; driver . findElement ( By . name ( "plotoutline" ) ) . clear ( ) ; driver . findElement ( By . name ( "plotoutline" ) ) . sendKeys ( "Comedy" ) ; driver . findElement ( By . id ( "text_languages_0" ) ) . clear ( ) ; driver . findElement ( By . id ( "text_languages_0" ) ) . sendKeys ( "French" ) ; driver . findElement ( By . name ( "subtitles" ) ) . clear ( ) ; driver . findElement ( By . name ( "subtitles" ) ) . sendKeys ( "NO" ) ; driver . findElement ( By . name ( "country" ) ) . clear ( ) ; driver . findElement ( By . name ( "country" ) ) . sendKeys ( "France" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Home" ) ) . click ( ) ; driver . get ( baseUrl + "/php4dvd/#!/sort/name%20asc/" ) ; driver . findElement ( By . cssSelector ( "div.title" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="deletePageTest_727/tree/master/src/test/java/org/craftercms/web/editing/DeleteContentTests.java"> public void function ( ) throws InterruptedException { logger . info ( "Login ▁ as ▁ admin" ) ; CStudioSeleniumUtil . tryLogin ( driver , seleniumProperties . getProperty ( "craftercms.admin.username" ) , seleniumProperties . getProperty ( "craftercms.admin.password" ) , true ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; long time = System . currentTimeMillis ( ) ; String url = "selenium" + time ; String content = "Article ▁ main ▁ content ▁ " + time ; String articlePath = "/site/website/" + url + "/index.xml" ; logger . info ( "Create ▁ article" ) ; createArticle ( url , content , url ) ; logger . info ( "Check ▁ content ▁ exists" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + articlePath , content ) ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Select ▁ new ▁ article" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "MyRecentActivity-" + articlePath ) ) ; logger . info ( "Click ▁ Delete ▁ option" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( " // a[text()='Delete']" ) ) ; logger . info ( "Confirm ▁ deletion" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "input.do-delete" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "#acnVersionWrapper ▁ input[value=\"OK\"]" ) ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ content ▁ does ▁ not ▁ exist ▁ anymore" ) ; File contentFile = new File ( seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + articlePath ) ; new FluentWait < File > ( contentFile ) . withTimeout ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) . until ( new Predicate < File > ( ) { @ Override public boolean apply ( File file ) { return ! file . exists ( ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="changeTemplateToArticleTest_726/tree/master/src/test/java/org/craftercms/web/editing/ChangeTemplateTests.java"> public void function ( ) throws InterruptedException { login ( ) ; long time = System . currentTimeMillis ( ) ; String articleUrl = "selenium" + time ; String articleTitle = "Selenium ▁ Article" + time ; String articleContent = "This ▁ is ▁ a ▁ testing ▁ article ▁ content. ▁ " + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( "Wait ▁ for ▁ item ▁ to ▁ be ▁ deployed" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; String articleFilePath = seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + "/site/website/" + articleUrl + "/index.xml" ; String contentTypeTag = "<content-type>" + seleniumProperties . getProperty ( "craftercms.page.content.type" ) + "</content-type>" ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , contentTypeTag ) ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , articleContent ) ) ; String newContentType = seleniumProperties . getProperty ( "craftercms.change.template.content.type" ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Choose ▁ 'Change ▁ Template' ▁ in ▁ pages ▁ tree ▁ context ▁ menu" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement articleElement = CStudioSeleniumUtil . findItemWithName ( driver , articleTitle ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "Change&nbsp;Template" , articleElement ) ; logger . info ( "Confirm ▁ change ▁ template" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "acceptCTChange" ) ) ; logger . info ( "Choose ▁ '" + newContentType + "' ▁ as ▁ new ▁ content ▁ type" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "option[value=\"" + newContentType + "\"]" ) ) ; logger . info ( "Confirm ▁ operation" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "submitWCMPopup" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( "Save ▁ and ▁ close" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "cstudioSaveAndClose" ) ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; logger . info ( "Wait ▁ for ▁ item ▁ to ▁ be ▁ deployed" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; String newContentTypeTag = "<content-type>" + newContentType + "</content-type>" ; logger . info ( "Check ▁ item ▁ has ▁ been ▁ updated" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , articleTitle ) ) ; assertFalse ( CStudioSeleniumUtil . readFileContents ( articleFilePath , contentTypeTag ) ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , newContentTypeTag ) ) ; } </DOCUMENT>
<DOCUMENT_ID="copyPastePageTest_730/tree/master/src/test/java/org/craftercms/web/editing/CopyCutPasteTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Create ▁ article" ) ; long time = System . currentTimeMillis ( ) ; String articleTitle = "Article ▁ to ▁ copy/paste ▁ " + time ; String articleContent = "This ▁ is ▁ the ▁ content ▁ of ▁ the ▁ article ▁ to ▁ be ▁ copied/pasted." + time ; String articleUrl = "to_copy_paste_" + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( "Copy ▁ and ▁ paste ▁ page" ) ; pageOptionAndPaste ( articleTitle , articleUrl , articleContent , "Copy" ) ; logger . info ( "Check ▁ original ▁ article ▁ still ▁ exists" ) ; checkPageFileExists ( "" , articleUrl , true ) ; } </DOCUMENT>
<DOCUMENT_ID="rejectWorkflowTest_729/tree/master/src/test/java/org/craftercms/web/basic/WorkflowTests.java"> public void function ( ) throws InterruptedException { final String updatedTitle = schedulePage ( ) ; logout ( ) ; useAdminUser ( ) ; login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ Go ▁ Live ▁ Queue ▁ widget" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "GoLiveQueue-body" ) ) . getText ( ) . contains ( updatedTitle ) ; } } ) ; logger . info ( "Check ▁ item" ) ; By checkInputBy = By . xpath ( " // div[@id='GoLiveQueue'] // input[@id='" + seleniumProperties . getProperty ( "craftercms.page.to.edit" ) + "']" ) ; CStudioSeleniumUtil . clickOn ( driver , checkInputBy ) ; logger . info ( "Select ▁ Reject" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( " // a[text()='Reject']" ) ) ; logger . info ( "Confirm ▁ Rejection" ) ; By goLiveSubmitBy = By . id ( "golivesubmitButton" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , goLiveSubmitBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , goLiveSubmitBy ) ; By okBy = By . id ( "acnOKButton" ) ; logger . info ( "Waiting ▁ for ▁ rejection ▁ to ▁ complete..." ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , okBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , okBy ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; logger . info ( "Open ▁ file ▁ in ▁ live ▁ folder ▁ and ▁ check ▁ content ▁ was ▁ not ▁ updated" ) ; String filePath = seleniumProperties . getProperty ( "craftercms.live.deployer.path" ) + seleniumProperties . getProperty ( "craftercms.page.to.edit" ) ; assertFalse ( CStudioSeleniumUtil . readFileContents ( filePath , updatedTitle ) ) ; } </DOCUMENT>
<DOCUMENT_ID="cutPastePageTest_731/tree/master/src/test/java/org/craftercms/web/editing/CopyCutPasteTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Create ▁ article" ) ; long time = System . currentTimeMillis ( ) ; String articleTitle = "Article ▁ to ▁ cut/paste ▁ " + time ; String articleContent = "This ▁ is ▁ the ▁ content ▁ of ▁ the ▁ article ▁ to ▁ be ▁ copied/pasted." + time ; String articleUrl = "to_cut_paste_" + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( "Cut ▁ and ▁ paste ▁ page" ) ; pageOptionAndPaste ( articleTitle , articleUrl , articleContent , "Cut" ) ; logger . info ( "Check ▁ original ▁ article ▁ no ▁ longer ▁ exists" ) ; checkPageFileExists ( "" , articleUrl , false ) ; } </DOCUMENT>
<DOCUMENT_ID="acceptWorkflowTest_728/tree/master/src/test/java/org/craftercms/web/basic/WorkflowTests.java"> public void function ( ) throws InterruptedException { final String updatedTitle = schedulePage ( ) ; logout ( ) ; useAdminUser ( ) ; login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ Go ▁ Live ▁ Queue ▁ widget" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "GoLiveQueue-body" ) ) . getText ( ) . contains ( updatedTitle ) ; } } ) ; logger . info ( "Check ▁ item" ) ; By checkInputBy = By . xpath ( " // div[@id='GoLiveQueue'] // input[@id='" + seleniumProperties . getProperty ( "craftercms.page.to.edit" ) + "']" ) ; CStudioSeleniumUtil . clickOn ( driver , checkInputBy ) ; logger . info ( "Select ▁ Go ▁ Live ▁ Now" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( " // a[text()='Go ▁ Live ▁ Now']" ) ) ; By setToNowBy = By . id ( "globalSetToNow" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , setToNowBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , setToNowBy ) ; logger . info ( "Confirm ▁ Go ▁ Live ▁ Now" ) ; By goLiveSubmitBy = By . id ( "golivesubmitButton" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , goLiveSubmitBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , goLiveSubmitBy ) ; By okBy = By . id ( "acnOKButton" ) ; logger . info ( "Waiting ▁ for ▁ item ▁ to ▁ go-live..." ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , okBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , okBy ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Waiting ▁ for ▁ item ▁ to ▁ deploy" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; logger . info ( "Open ▁ file ▁ in ▁ live ▁ folder ▁ and ▁ check ▁ content ▁ was ▁ updated" ) ; String filePath = seleniumProperties . getProperty ( "craftercms.live.deployer.path" ) + seleniumProperties . getProperty ( "craftercms.page.to.edit" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( filePath , updatedTitle ) ) ; } </DOCUMENT>
<DOCUMENT_ID="copyPasteComponentTest_732/tree/master/src/test/java/org/craftercms/web/editing/CopyCutPasteTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Create ▁ Tout" ) ; long time = System . currentTimeMillis ( ) ; String toutName = "seleniumTout" + time ; String headline = "Selenium ▁ tout ▁ headline ▁ " + time ; String internalName = "Selenium ▁ Tout ▁ " + time ; createTout ( toutName , headline , internalName ) ; logger . info ( "Copy ▁ and ▁ paste ▁ component" ) ; componentOptionAndPaste ( internalName , toutName , headline , "Copy" ) ; logger . info ( "Check ▁ original ▁ article ▁ still ▁ exists" ) ; checkComponentFileExists ( "touts" , toutName , true ) ; } </DOCUMENT>
<DOCUMENT_ID="cutPasteComponentTest_733/tree/master/src/test/java/org/craftercms/web/editing/CopyCutPasteTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Create ▁ Tout" ) ; long time = System . currentTimeMillis ( ) ; String toutName = "seleniumTout" + time ; String headline = "Selenium ▁ tout ▁ headline ▁ " + time ; String internalName = "Selenium ▁ Tout ▁ " + time ; createTout ( toutName , headline , internalName ) ; logger . info ( "Cut ▁ and ▁ paste ▁ component" ) ; componentOptionAndPaste ( internalName , toutName , headline , "Cut" ) ; logger . info ( "Check ▁ original ▁ article ▁ no ▁ longer ▁ exists" ) ; checkComponentFileExists ( "touts" , toutName , false ) ; } </DOCUMENT>
<DOCUMENT_ID="pageOptionAndPaste_734/tree/master/src/test/java/org/craftercms/web/editing/CopyCutPasteTests.java"> private void function ( String itemTitle , String itemUrl , String itemContent , String option ) throws InterruptedException { logger . info ( "Create ▁ a ▁ folder ▁ to ▁ contain ▁ copy" ) ; String folderName = createPageFolder ( ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Open ▁ context ▁ menu ▁ and ▁ click ▁ " + option + " ▁ for ▁ new ▁ article" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , option , CStudioSeleniumUtil . findItemWithName ( driver , itemTitle ) ) ; logger . info ( "Open ▁ context ▁ menu ▁ and ▁ click ▁ 'Paste' ▁ for ▁ new ▁ folder" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "Paste" , CStudioSeleniumUtil . findItemWithName ( driver , folderName ) ) ; checkPageFileExists ( folderName , itemUrl , true ) ; } </DOCUMENT>
<DOCUMENT_ID="componentOptionAndPaste_735/tree/master/src/test/java/org/craftercms/web/editing/CopyCutPasteTests.java"> private void function ( String itemTitle , String itemUrl , String itemContent , String option ) throws InterruptedException { logger . info ( "Create ▁ a ▁ folder ▁ to ▁ contain ▁ copy" ) ; String folderName = createComponentFolder ( ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Open ▁ context ▁ menu ▁ and ▁ click ▁ " + option + " ▁ for ▁ new ▁ article" ) ; CStudioSeleniumUtil . ensureComponentsTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , option , CStudioSeleniumUtil . findItemWithName ( driver , itemTitle ) ) ; logger . info ( "Open ▁ context ▁ menu ▁ and ▁ click ▁ 'Paste' ▁ for ▁ new ▁ folder" ) ; CStudioSeleniumUtil . ensureComponentsTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "Paste" , CStudioSeleniumUtil . findItemWithName ( driver , folderName ) ) ; checkComponentFileExists ( folderName , itemUrl , true ) ; } </DOCUMENT>
<DOCUMENT_ID="UploadJSFileTest_738/tree/master/src/test/java/org/craftercms/web/UploadFilesTests.java"> public void function ( ) throws Exception { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Get ▁ file ▁ local ▁ path" ) ; File file = new File ( CStudioSeleniumUtil . class . getClassLoader ( ) . getResource ( "uploadFiles/javascript.js" ) . toURI ( ) ) ; CStudioSeleniumUtil . ensureStaticAssetsTreeIsExpanded ( driver ) ; WebElement jsElement = CStudioSeleniumUtil . findItemWithName ( driver , "js" ) ; CStudioSeleniumUtil . uploadFile ( driver , file , jsElement ) ; String deployedFilePath = seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + "/static-assets/js/" + file . getName ( ) ; logger . info ( "Check ▁ file ▁ contents ▁ in ▁ preview ▁ deployer ▁ path" ) ; String contentToCheck = " /* ▁ This ▁ is ▁ an ▁ empty ▁ javascript ▁ file ▁ */ " ; assertTrue ( CStudioSeleniumUtil . readFileContents ( deployedFilePath , contentToCheck ) ) ; } </DOCUMENT>
<DOCUMENT_ID="inContextEditTemplateTest_739/tree/master/src/test/java/org/craftercms/web/editing/ContextEditingTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String baseUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) ; final String pageToEditUrl = seleniumProperties . getProperty ( "craftercms.page.to.edit.url" ) ; logger . info ( "Navigate ▁ to ▁ '" + pageToEditUrl + "'" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; openTemplateEditor ( ) ; String pageTitle = driver . getTitle ( ) ; By titleBy = By . xpath ( " // div[@id='editor-container'] // pre[text()='" + pageTitle + "'][1]" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleBy ) ; WebElement title = driver . findElement ( titleBy ) ; String sequence = "" ; for ( int i = 0 ; i < 8 ; i ++ ) { sequence += Keys . LEFT ; } for ( int i = 0 ; i < pageTitle . length ( ) ; i ++ ) { sequence += Keys . BACK_SPACE ; } final String newTitle = "Global ▁ Integrity ▁ " + System . currentTimeMillis ( ) ; sequence += newTitle ; logger . info ( "Update ▁ page ▁ title" ) ; new Actions ( driver ) . click ( title ) . sendKeys ( sequence ) . perform ( ) ; logger . info ( "Click ▁ 'Update' ▁ button" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "template-editor-update-button" ) ) ; logger . info ( "Wait ▁ for ▁ title ▁ to ▁ update" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_DEPLOY ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver driver ) { driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; return newTitle . equals ( driver . getTitle ( ) ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="editAndScheduleItem_737/tree/master/src/test/java/org/craftercms/web/basic/SchedulingTests.java"> private void function ( String item , final String updateString ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( "Login ▁ using ▁ admin ▁ credentials" ) ; login ( ) ; logger . info ( "navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , item , updateString ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ my-recent ▁ activity ▁ widget" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "MyRecentActivity-body" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; logger . info ( "Check ▁ item ▁ and ▁ push ▁ it ▁ to ▁ schedule" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "MyRecentActivity-" + item ) ) ; Thread . sleep ( 1000 ) ; logger . info ( "Select ▁ Schedule" ) ; driver . manage ( ) . window ( ) . maximize ( ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( " // a[text()='Schedule']" ) ) ; Thread . sleep ( 1000 ) ; logger . info ( "Setting ▁ date ▁ and ▁ time ▁ fields" ) ; WebElement element = driver . findElement ( By . id ( "schedulingSelectionDatepickerOverlay" ) ) ; element . click ( ) ; Thread . sleep ( 1000 ) ; By todayBy = By . cssSelector ( "#calendarWrapper ▁ .today ▁ a" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , todayBy ) ; WebElement today = driver . findElement ( todayBy ) ; today . click ( ) ; element = driver . findElement ( By . id ( "timepicker" ) ) ; element . clear ( ) ; element . sendKeys ( "11:59:59 ▁ p.m. \n " ) ; Thread . sleep ( 1000 ) ; logger . info ( "Confirm ▁ Schedule" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "golivesubmitButton" ) ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "acnOKButton" ) ) ; logger . info ( "Waiting ▁ for ▁ item ▁ to ▁ get ▁ scheduled..." ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; logger . info ( "refresh ▁ dashboard" ) ; logout ( ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ approvedScheduledItems ▁ activity ▁ widget" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "approvedScheduledItems-body" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="viewPageTest_741/tree/master/src/test/java/org/craftercms/web/basic/ViewPageTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String updatedTitle = "About ▁ Page ▁ workflow ▁ " + System . currentTimeMillis ( ) ; String pageToSchedule = seleniumProperties . getProperty ( "craftercms.page.to.edit" ) ; logger . info ( "Edit ▁ page, ▁ updating ▁ title ▁ to ▁ '" + updatedTitle + "'" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , pageToSchedule , updatedTitle ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Selecting ▁ 'View' ▁ option ▁ in ▁ page ▁ tree ▁ under ▁ 'Site ▁ Content'" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement pageElement = CStudioSeleniumUtil . findItemWithName ( driver , updatedTitle ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "View" , pageElement ) ; logger . info ( "Switch ▁ to ▁ 'View' ▁ window" ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( "Checking ▁ item ▁ name ▁ has ▁ been ▁ updated" ) ; By internalNameBy = By . cssSelector ( "#internal-name ▁ input.datum" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , internalNameBy ) ; WebElement internalName = driver . findElement ( internalNameBy ) ; assertTrue ( internalName . getAttribute ( "value" ) . equals ( updatedTitle ) ) ; logger . info ( "Check ▁ input ▁ elements ▁ are ▁ disabled" ) ; List < WebElement > inputs = driver . findElements ( By . cssSelector ( "input" ) ) ; for ( WebElement input : inputs ) { if ( input . isDisplayed ( ) && ! input . getAttribute ( "type" ) . equals ( "button" ) ) assertFalse ( input . isEnabled ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="editPageIcePencilTest_740/tree/master/src/test/java/org/craftercms/web/editing/ContextEditingTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String baseUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) ; final String pageToEditUrl = seleniumProperties . getProperty ( "craftercms.page.to.edit.url" ) ; logger . info ( "Navigate ▁ to ▁ '" + pageToEditUrl + "'" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; openPreviewTools ( ) ; logger . info ( "Turn ▁ on ▁ In-Context ▁ Edit" ) ; By titlePencilBy = By . cssSelector ( "#title ▁ img" ) ; List < WebElement > titlePencilList = driver . findElements ( titlePencilBy ) ; boolean pencilVisible = false ; if ( titlePencilList . size ( ) > 0 ) { pencilVisible = titlePencilList . get ( 0 ) . isDisplayed ( ) ; } if ( ! pencilVisible ) { By toggleIceBy = By . xpath ( " // div[@id='preview-tools-panel-container'] // span[contains(.,'In-Context ▁ Edit')]/preceding-sibling::*[1]" ) ; CStudioSeleniumUtil . clickOn ( driver , toggleIceBy ) ; } logger . info ( "Click ▁ on ▁ title ▁ ice ▁ pencil" ) ; CStudioSeleniumUtil . clickOn ( driver , titlePencilBy ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . tagName ( "iframe" ) ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . frame ( "in-context-edit-editor" ) ; logger . info ( "Update ▁ title" ) ; String newTitle = "Big ▁ Data ▁ for ▁ Risk ▁ Reduction ▁ " + System . currentTimeMillis ( ) ; By titleInputBy = By . cssSelector ( "#title ▁ input.datum" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleInputBy ) ; CStudioSeleniumUtil . waitForItemToBeEnabled ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleInputBy ) ; WebElement titleInput = driver . findElement ( titleInputBy ) ; titleInput . clear ( ) ; titleInput . sendKeys ( newTitle ) ; Thread . sleep ( 1000 ) ; logger . info ( "Save ▁ And ▁ Close" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "cstudioSaveAndClose" ) ) ; logger . info ( "Check ▁ title ▁ has ▁ been ▁ updated" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . xpath ( " // *[contains(., ▁ '" + newTitle + "')]" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testContextNav_742/tree/master/src/test/java/org/craftercms/web/basic/DashboardTestsBase.java"> public void function ( ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Wait ▁ for ▁ context ▁ navigation ▁ header ▁ to ▁ show" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . id ( "authoringContextNavHeader" ) ) ; logger . info ( "Wait ▁ for ▁ logo ▁ link ▁ to ▁ show" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . id ( "acn-wcm-logo-link" ) ) ; logger . info ( "Wait ▁ for ▁ dropdown ▁ toggler ▁ to ▁ show" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . id ( "acn-dropdown-toggler" ) ) ; WebElement element = driver . findElement ( By . id ( "acn-dropdown-toggler" ) ) ; assertTrue ( element . getText ( ) . equals ( "Site ▁ Content" ) ) ; element . click ( ) ; logger . info ( "Ensure ▁ dropdown ▁ displays ▁ when ▁ toggler ▁ is ▁ clicked" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "acn-dropdown-menu-wrapper" ) ) . isDisplayed ( ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="testSiteDashboardTitle_743/tree/master/src/test/java/org/craftercms/web/basic/DashboardTestsBase.java"> public void function ( ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ if ▁ title ▁ exists ▁ and ▁ match ▁ title ▁ with ▁ correct ▁ site ▁ value" ) ; WebElement element = driver . findElement ( By . id ( "pageTitle" ) ) ; assertTrue ( element . getText ( ) . contains ( seleniumProperties . getProperty ( "craftercms.sitetitle" ) ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="scheduleToBeDeletedTest_736/tree/master/src/test/java/org/craftercms/web/basic/ScheduleToBeDeletedTests.java"> public void function ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; String pageToUpdate = seleniumProperties . getProperty ( "craftercms.page.to.schedule.to.delete" ) ; String updateString = "Resources ▁ " + System . currentTimeMillis ( ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , pageToUpdate , updateString ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement articleItem = CStudioSeleniumUtil . findItemWithName ( driver , updateString ) ; logger . info ( "Choose ▁ delete ▁ in ▁ pages ▁ tree ▁ context ▁ menu" ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "Delete" , articleItem ) ; logger . info ( "Schedule ▁ item ▁ and ▁ dependencies" ) ; By datepickerBy = By . cssSelector ( "#datepicker.date-picker" ) ; By timepickerBy = By . cssSelector ( "input.time-picker" ) ; By scheduleTimeLinksBy = By . cssSelector ( "#acnVersionWrapper ▁ a[checkid]" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , scheduleTimeLinksBy ) ; List < WebElement > scheduleTimeLinks = driver . findElements ( scheduleTimeLinksBy ) ; for ( WebElement scheduleTimeLink : scheduleTimeLinks ) { scheduleTimeLink . click ( ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , datepickerBy ) ; WebElement datepicker = driver . findElement ( datepickerBy ) ; datepicker . clear ( ) ; datepicker . sendKeys ( "1/01/3001" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , timepickerBy ) ; WebElement timepicker = driver . findElement ( timepickerBy ) ; timepicker . sendKeys ( "12:00:01 ▁ a.m." ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( " // div[@id='acnVersionWrapper'] // a[text()='Done']" ) ) ; } logger . info ( "Click ▁ 'Delete' ▁ button" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "#acnVersionWrapper ▁ input.do-delete[type='submit']" ) ) ; logger . info ( "Wait ▁ for ▁ item ▁ to ▁ be ▁ scheduled" ) ; Thread . sleep ( 2000 ) ; String baseUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) ; String pageToEditUrl = seleniumProperties . getProperty ( "craftercms.page.to.schedule.to.delete.url" ) ; logger . info ( "Navigate ▁ to ▁ '" + pageToEditUrl + "'" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; logger . info ( "Check ▁ item ▁ was ▁ scheduled ▁ to ▁ be ▁ deleted" ) ; By statusIconBy = By . cssSelector ( "#acn-active-content ▁ div.status-icon.deleted" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , statusIconBy ) ; WebElement statusIcon = driver . findElement ( statusIconBy ) ; assertTrue ( statusIcon . getText ( ) . contains ( "Deleted" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testMyRecentActivity_744/tree/master/src/test/java/org/craftercms/web/basic/DashboardTestsBase.java"> public void function ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Edit ▁ and ▁ save ▁ page" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , getUpdateString ( ) ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Check ▁ my-recent-activity ▁ widget ▁ for ▁ edited ▁ page" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "MyRecentActivity-body" ) ) . getText ( ) . contains ( getUpdateString ( ) ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToUrl_746/tree/master/src/test/java/org/craftercms/web/util/CStudioSeleniumUtil.java"> public static void function ( WebDriver driver , String siteName , String url ) { driver . navigate ( ) . to ( url ) ; assertTrue ( driver . getCurrentUrl ( ) . equals ( String . format ( seleniumProperties . getProperty ( "craftercms.site.dashboard.url" ) , siteName ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testIconGuide_745/tree/master/src/test/java/org/craftercms/web/basic/DashboardTestsBase.java"> public void function ( ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; WebElement element = driver . findElement ( By . id ( "icon-guide" ) ) ; logger . info ( "Scroll ▁ down ▁ to ▁ reach ▁ icon-guide" ) ; driver . manage ( ) . window ( ) . setPosition ( new Point ( 0 , driver . manage ( ) . window ( ) . getSize ( ) . height ) ) ; logger . info ( "Check ▁ icon-guide ▁ is ▁ displayed" ) ; assertTrue ( element . isDisplayed ( ) ) ; logger . info ( "Check ▁ icon-guide ▁ text" ) ; assertTrue ( element . getText ( ) . contains ( "Icon ▁ Guide" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="createSeleniumContent_749/tree/master/src/test/java/org/craftercms/web/ContentTypeTests.java"> private String function ( String url ) { logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . createContentJS ( driver , "/site/website" , siteName ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "option[value=\"/page/selenium\"]" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "submitWCMPopup" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; String contentText = "Selenium ▁ content ▁ type ▁ article ▁ main ▁ content ▁ " + url ; logger . info ( "Set ▁ values ▁ to ▁ fields" ) ; setField ( "div#file-name ▁ .datum" , url ) ; setField ( "div#internal-name ▁ .datum" , url ) ; setField ( "div#seleniumContent ▁ .datum" , contentText ) ; logger . info ( "Save ▁ & ▁ Close" ) ; driver . findElement ( By . id ( "cstudioSaveAndClose" ) ) . click ( ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; CrafterContent content = new CrafterContent ( ) ; content . path = "/site/website/" + url ; content . uri = "/site/website/" + url + "/index.xml" ; content . browserUri = "/" + url ; getCreatedContent ( ) . add ( content ) ; return contentText ; } </DOCUMENT>
<DOCUMENT_ID="navigateToAndWaitForPageToLoad_747/tree/master/src/test/java/org/craftercms/web/util/CStudioSeleniumUtil.java"> public static void function ( WebDriver webDriver , String url ) { webDriver . navigate ( ) . to ( url ) ; waitForCurrentPageToLoad ( webDriver ) ; } </DOCUMENT>
<DOCUMENT_ID="editContentTypeFieldTitle_748/tree/master/src/test/java/org/craftercms/web/ContentTypeTests.java"> public void function ( ) { login ( ) ; String contentType = "/page/article" ; openContentType ( contentType ) ; logger . info ( "Update ▁ content ▁ type ▁ title ▁ field" ) ; String newTitle = "Title ▁ " + System . currentTimeMillis ( ) ; By titleVariableBy = By . xpath ( " // div[@id='content-type-canvas'] // div[contains(@class,'content-type-visual-field-container')] // span[contains(@class,'content-field-variable') ▁ and ▁ text()='title']" ) ; CStudioSeleniumUtil . clickOn ( driver , titleVariableBy ) ; By titleBy = By . xpath ( " // div[@id='properties-container'] // div[contains(@class, ▁ 'property-wrapper')]/div[@class='property-label' ▁ and ▁ text()='Title']/following-sibling::input" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleBy ) ; WebElement titleInput = driver . findElement ( titleBy ) ; titleInput . clear ( ) ; titleInput . sendKeys ( newTitle ) ; logger . info ( "Click ▁ 'Save'" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "#cstudio-admin-console-command-bar ▁ input.cstudio-button[value='Save']" ) ) ; logger . info ( "Wait ▁ for ▁ content ▁ type ▁ to ▁ be ▁ saved" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_SAVE ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver webDriver ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . createContentJS ( driver , "/site/website" , siteName ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "option[value=\"/page/article\"]" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "submitWCMPopup" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; By titleLabelBy = By . cssSelector ( "#title ▁ span.label.cstudio-form-field-title" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleLabelBy ) ; WebElement titleLabelElement = driver . findElement ( titleLabelBy ) ; assertEquals ( newTitle , titleLabelElement . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageEditSaveAndClose_751/tree/master/src/test/java/org/craftercms/web/basic/PageEditTests.java"> public void function ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( "Login ▁ as ▁ admin" ) ; login ( ) ; logger . info ( "Navigate ▁ to ▁ Dashboard ▁ page" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editContentJS ( driver , seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , seleniumProperties . getProperty ( "craftercms.page.content.type" ) , siteName ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( "Find ▁ internal-name ▁ field ▁ and ▁ edit" ) ; driver . findElement ( By . cssSelector ( "#internal-name ▁ .datum" ) ) . clear ( ) ; driver . findElement ( By . cssSelector ( "#internal-name ▁ .datum" ) ) . sendKeys ( updateString ) ; logger . info ( "Click ▁ Save&Close ▁ button ▁ and ▁ wait ▁ for ▁ change ▁ to ▁ complete" ) ; driver . findElement ( By . id ( "cstudioSaveAndClose" ) ) . click ( ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; logger . info ( "Navigate ▁ back ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; assertTrue ( driver . getTitle ( ) . equals ( "Crafter ▁ Studio" ) ) ; logger . info ( "Check ▁ my-recent-activity ▁ widget" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "MyRecentActivity-body" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="verifyAllServices_753/tree/master/tm-example/eGov/ant-testng-selenium/src/eu/testingmachine/TMTest.java"> public void function ( ) { driver . get ( baseUrl ) ; String expectedTitle = "Dienste ▁ A-Z ▁ | ▁ Südtiroler ▁ Bürgernetz" ; String actualTitle = driver . getTitle ( ) ; Assert . assertEquals ( actualTitle , expectedTitle ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail_754/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; homePage . typePassword ( "any ▁ password" ) ; homePage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToAccessToOtherPagesWithoutSignin_755/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; try { homePage . goToAccountPageViaMenu ( ) . goToAppPageViaMenu ( ) ; Assert . fail ( ) ; } catch ( IllegalStateException ex ) { } } * / </DOCUMENT>
<DOCUMENT_ID="openContentType_750/tree/master/src/test/java/org/craftercms/web/ContentTypeTests.java"> private void function ( String contentType ) { logger . info ( "Navigate ▁ to ▁ admin ▁ console" ) ; driver . navigate ( ) . to ( adminConsoleUrl ) ; logger . info ( "Click ▁ 'Content ▁ Types'" ) ; By contentTypesBy = By . xpath ( " // div[contains(@class,'cstudio-admin-console-item') ▁ and ▁ text()='Content ▁ Types']" ) ; CStudioSeleniumUtil . clickOn ( driver , contentTypesBy ) ; logger . info ( "Click ▁ 'Open ▁ Existing ▁ Type'" ) ; By openTypeBy = By . xpath ( " // div[@id='acn-bar'] // div[@class='acn-link']/a[text()='Open ▁ Existing ▁ Type']" ) ; CStudioSeleniumUtil . clickOn ( driver , openTypeBy ) ; logger . info ( "Choose ▁ article ▁ content ▁ type" ) ; By articleContentTypeBy = By . cssSelector ( "#wcm-content-types-dropdown ▁ option[value='" + contentType + "']" ) ; CStudioSeleniumUtil . clickOn ( driver , articleContentTypeBy ) ; logger . info ( "Confirm" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "submitWCMPopup" ) ) ; logger . info ( "Wait ▁ for ▁ content ▁ type ▁ to ▁ load" ) ; By contentTypeContainerBy = By . cssSelector ( "#content-type-canvas ▁ .content-type-visual-container" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , contentTypeContainerBy ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAnAccountWithoutFillForm_756/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAnAcocuntWithWeakPassword_757/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Random rand = new Random ( ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; newAccountPage . typeEmailAddress ( "john" + rand . nextInt ( ) + "@test.com" ) ; newAccountPage . typeFirstName ( "John" ) ; newAccountPage . typeLastName ( "Doe" ) ; newAccountPage . typePassword ( "pass" ) ; newAccountPage . typePasswordConfirmation ( "pass" ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAnAcocuntWithDifferentPassword_758/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Random localrand = new Random ( ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; newAccountPage . typeEmailAddress ( "john" + localrand . nextInt ( ) + "@test.com" ) ; newAccountPage . typeFirstName ( "John" ) ; newAccountPage . typeLastName ( "Doe" ) ; newAccountPage . typePassword ( "P4ssw0rd" ) ; newAccountPage . typePasswordConfirmation ( "D1ff3r3n7" ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage_759/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToRegisterANewAppWithoutSpecifiedAName_761/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; RegisterNewAppPage newAppPage = firstPage . goToNewAppPage ( ) ; newAppPage . typeAppName ( "" ) ; newAppPage . typeAppDescription ( "app ▁ description" ) ; Assert . assertTrue ( newAppPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageEditSaveAndPreview_752/tree/master/src/test/java/org/craftercms/web/basic/PageEditTests.java"> public void function ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( "Login ▁ as ▁ admin" ) ; login ( ) ; String mainWindowHandle = driver . getWindowHandle ( ) ; logger . info ( "Navigate ▁ to ▁ Dashboard ▁ page" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editContentJS ( driver , seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , seleniumProperties . getProperty ( "craftercms.page.content.type" ) , siteName ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; String editWindowHandle = driver . getWindowHandle ( ) ; logger . info ( "Edit ▁ internal-name ▁ field" ) ; WebElement internalNameElement = driver . findElement ( By . cssSelector ( "#internal-name ▁ .datum" ) ) ; internalNameElement . clear ( ) ; internalNameElement . sendKeys ( updateString ) ; Thread . sleep ( 1000 ) ; logger . info ( "Click ▁ Save&Preview ▁ button ▁ and ▁ wait ▁ for ▁ change ▁ to ▁ complete" ) ; driver . findElement ( By . id ( "cstudioSaveAndPreview" ) ) . click ( ) ; logger . info ( "Switch ▁ back ▁ to ▁ first ▁ window" ) ; driver . switchTo ( ) . window ( mainWindowHandle ) ; logger . info ( "Wait ▁ for ▁ preview ▁ to ▁ load" ) ; new WebDriverWait ( driver , 30 ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver webDriver ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } ) ; String pageUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) + seleniumProperties . getProperty ( "craftercms.page.to.edit.url" ) ; logger . info ( "Check ▁ url ▁ match ▁ edited ▁ page ▁ url" ) ; assertTrue ( driver . getCurrentUrl ( ) . equals ( pageUrl ) ) ; logger . info ( "Check ▁ item ▁ content ▁ has ▁ changed" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , updateString ) ) ; logger . info ( "Go ▁ back ▁ and ▁ close ▁ edit ▁ window ▁ so ▁ item ▁ is ▁ not ▁ locked" ) ; driver . switchTo ( ) . window ( editWindowHandle ) ; driver . findElement ( By . cssSelector ( "input[value=\"Cancel\"]" ) ) . click ( ) ; List < WebElement > buttonConfirm = driver . findElements ( By . xpath ( " // button[text()='Yes']" ) ) ; if ( buttonConfirm . size ( ) > 0 ) buttonConfirm . get ( 0 ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldBePossibleToLogout_762/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; firstPage . logout ( ) ; } </DOCUMENT>
<DOCUMENT_ID="goToUrl_764/tree/master/core/src/main/java/com/crawljax/browser/WebDriverBackedEmbeddedBrowser.java"> public void function ( URL url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( "goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded" , e ) ; return ; } } </DOCUMENT>
<DOCUMENT_ID="editAccountWithoutSpecifyNewPasswordShouldNotChangePassword_763/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; AccountPage accountPage = firstPage . goToAccountPageViaMenu ( ) ; accountPage . submitForm ( ) ; homePage = accountPage . goToAppPageViaMenu ( ) . logout ( ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldBePossibleToRegisterANewApp_760/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; RegisterNewAppPage newAppPage = firstPage . goToNewAppPage ( ) ; newAppPage . typeAppName ( "RandomName" ) ; newAppPage . typeAppDescription ( "app ▁ description" ) ; Assert . assertFalse ( newAppPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="Film_is_not_found_767/tree/master/src/test/java/ru/st/selenium/FindFilmTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement userNameField = driver . findElement ( By . id ( "username" ) ) ; userNameField . clear ( ) ; userNameField . sendKeys ( "admin" ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "q" ) ) ) ; WebElement search_field = driver . findElement ( By . id ( "q" ) ) ; search_field . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; search_field . sendKeys ( Keys . DELETE ) ; search_field . sendKeys ( "Rob" ) ; search_field . sendKeys ( Keys . ENTER ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "results" ) ) ) ; String title = driver . findElement ( By . className ( "content" ) ) . getText ( ) ; Assert . assertEquals ( title , "No ▁ movies ▁ where ▁ found." ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testDataSetGenerator_766/tree/master/src/test/java/org/diversify/sgh/test/TestDataSetGenerator.java"> public void function ( ) throws Exception { System . out . println ( "Test" ) ; DataSetGeneration . driver . get ( baseUrl + "/" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "" . equals ( DataSetGeneration . driver . findElement ( By . id ( "foot" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Least ▁ Noisy" . equals ( DataSetGeneration . driver . findElement ( By . cssSelector ( "option[value=\"least_noisy\"]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( DataSetGeneration . driver . findElement ( By . id ( "weightingSelect" ) ) ) . selectByVisibleText ( pathType ) ; DataSetGeneration . driver . findElement ( By . id ( vehicle ) ) . click ( ) ; DataSetGeneration . driver . findElement ( By . id ( "fromInput" ) ) . click ( ) ; DataSetGeneration . driver . findElement ( By . id ( "fromInput" ) ) . clear ( ) ; DataSetGeneration . driver . findElement ( By . id ( "fromInput" ) ) . sendKeys ( from ) ; DataSetGeneration . driver . findElement ( By . id ( "toInput" ) ) . clear ( ) ; DataSetGeneration . driver . findElement ( By . id ( "toInput" ) ) . sendKeys ( to ) ; DataSetGeneration . driver . findElement ( By . id ( "searchButton" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( ! "Search ▁ Route ▁ ..." . equals ( DataSetGeneration . driver . findElement ( By . cssSelector ( "#info ▁ > ▁ div" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } double distance = new Double ( DataSetGeneration . driver . findElement ( By . cssSelector ( "#info ▁ > ▁ div" ) ) . getText ( ) . split ( "km" ) [ 0 ] ) ; Collection < WebElement > webElements = DataSetGeneration . driver . findElements ( By . className ( "instr_title" ) ) ; Random rand = new Random ( ) ; int randomNum = rand . nextInt ( webElements . size ( ) ) ; int i = 0 ; String intermediatePoint = "" ; for ( WebElement we : webElements ) { if ( i == randomNum ) { intermediatePoint = we . getText ( ) ; } i ++ ; } DataSetGeneration . appendToOutput ( from + "; ▁ " + to + "; ▁ " + distance + "; ▁ " + intermediatePoint + "; ▁ " + vehicle + "; ▁ " + pathType + " \n " ) ; } </DOCUMENT>
<DOCUMENT_ID="testRemoveFilm_768/tree/master/src/test/java/ru/st/selenium/RemoveFilm.java"> public void function ( ) throws Exception { WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . get ( baseUrl + "/php4dvd/" ) ; WebElement userNameField = driver . findElement ( By . id ( "username" ) ) ; userNameField . clear ( ) ; userNameField . sendKeys ( "admin" ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( " // a[4]/div/div[2]" ) ) ) ; driver . findElement ( By . xpath ( " // a[4]/div/div[2]" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( " // img[contains(@src,'delete.png')]" ) ) ) ; driver . findElement ( By . xpath ( " // img[contains(@src,'delete.png')]" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( " // div[@id='results']" ) ) ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_770/tree/master/src/main/java/kugushina/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_771/tree/master/src/main/java/kugushina/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_772/tree/master/src/main/java/kugushina/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_773/tree/master/src/main/java/kugushina/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="duplicateUsernameTest_774/tree/master/registration/src/test/java/org/jboss/migration/registration/test/RegistrationFunctionalTest.java"> public void function ( ) { submitRegistrationForm ( "johny" , "John ▁ Doe" , "secretPassword" ) ; browser . navigate ( ) . to ( deploymentUrl ) ; submitRegistrationForm ( "johny" , "John ▁ Doe TABSYMBOL " , "secretPassword" ) ; assertEquals ( "Register ▁ New ▁ User" , browser . getTitle ( ) ) ; assertTrue ( "Error ▁ message ▁ did ▁ not ▁ appear" , browser . getPageSource ( ) . contains ( "messages" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilm_769/tree/master/src/test/java/ru/st/selenium/AddFilm.java"> public void function ( ) throws Exception { WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . get ( baseUrl + "/php4dvd/" ) ; WebElement userNameField = driver . findElement ( By . id ( "username" ) ) ; userNameField . clear ( ) ; userNameField . sendKeys ( "admin" ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[contains(@href,\"./?go=add\")]" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "name" ) ) ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "My ▁ First ▁ Film" ) ; driver . findElement ( By . name ( "aka" ) ) . sendKeys ( "hfffg" ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2015" ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "1000" ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "10" ) ; driver . findElement ( By . id ( "own_no" ) ) . click ( ) ; driver . findElement ( By . id ( "seen_no" ) ) . click ( ) ; driver . findElement ( By . id ( "loaned_no" ) ) . click ( ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "movie" ) ) ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; } </DOCUMENT>
<DOCUMENT_ID="Login_Test_1_775/tree/master/src/test/java/alesia/isachenko/Login_Test_1.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testParameterizedPath_765/tree/master/src/test/java/org/diversify/sgh/test/TestParameterizedPath.java"> public void function ( ) throws Exception { AllTests . driver . get ( baseUrl + "/" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "" . equals ( AllTests . driver . findElement ( By . id ( "foot" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "Least ▁ Noisy" . equals ( AllTests . driver . findElement ( By . cssSelector ( "option[value=\"least_noisy\"]" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( AllTests . driver . findElement ( By . id ( "weightingSelect" ) ) ) . selectByVisibleText ( pathType ) ; AllTests . driver . findElement ( By . id ( vehicle ) ) . click ( ) ; AllTests . driver . findElement ( By . id ( "fromInput" ) ) . click ( ) ; AllTests . driver . findElement ( By . id ( "fromInput" ) ) . clear ( ) ; AllTests . driver . findElement ( By . id ( "fromInput" ) ) . sendKeys ( from ) ; AllTests . driver . findElement ( By . id ( "toInput" ) ) . clear ( ) ; AllTests . driver . findElement ( By . id ( "toInput" ) ) . sendKeys ( to ) ; AllTests . driver . findElement ( By . id ( "searchButton" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( ! "Search ▁ Route ▁ ..." . equals ( AllTests . driver . findElement ( By . cssSelector ( "#info ▁ > ▁ div" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } double distance = new Double ( AllTests . driver . findElement ( By . cssSelector ( "#info ▁ > ▁ div" ) ) . getText ( ) . split ( "km" ) [ 0 ] ) ; double minDistance = expectedDistance - ( expectedDistance * AllTests . distanceTolerance ) ; double maxDistance = expectedDistance + ( expectedDistance * AllTests . distanceTolerance ) ; Assert . assertTrue ( "Distance ▁ check ▁ between ▁ " + minDistance + " ▁ and ▁ " + maxDistance , ( minDistance <= distance && distance <= maxDistance ) ) ; if ( AllTests . checkPathChackpoint ) { boolean foundIntermediatePoint = false ; for ( WebElement we : AllTests . driver . findElements ( By . className ( "instr_title" ) ) ) { if ( we . getText ( ) . contains ( expectedIntermediatePoint ) ) { foundIntermediatePoint = true ; break ; } } Assert . assertTrue ( "Intermediate ▁ path ▁ checkpoint ▁ to ▁ " + expectedIntermediatePoint , foundIntermediatePoint ) ; } } </DOCUMENT>
<DOCUMENT_ID="canNotLogInWithInvalidEmail_778/tree/master/ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePwd ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testDosMasDosGoogle_776/tree/master/src/test/java/ejemplo/SumaEnGoogleWebDriver.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "gbqfq" ) ) . clear ( ) ; driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( "2+2" ) ; try { assertEquals ( "2+2" , driver . findElement ( By . id ( "gbqfq" ) ) . getAttribute ( "value" ) ) ; driver . findElement ( By . id ( "gbqfq" ) ) . submit ( ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( "" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "2 ▁ + ▁ 2 ▁ =" . equals ( driver . findElement ( By . id ( "cwles" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "4" . equals ( driver . findElement ( By . id ( "cwos" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="test22EnGoogle_777/tree/master/src/test/java/ejemplo/SumaEnGoogleRemoteControl2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "gbqfq" ) ) . clear ( ) ; driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( "2+2" ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( " \n " ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "4" . equals ( driver . findElement ( By . id ( "cwos" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="aUserCanLoginWithValidEmail_779/tree/master/ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( "toto@contoso.com" ) ; loginPage . typePwd ( "12345" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_782/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserShouldBeAbleToVisitAllPagesAfterLogin_780/tree/master/ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"> public void function ( ) throws InterruptedException { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( "toto@contoso.com" ) ; loginPage . typePwd ( "12345" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToAccountViaMenu ( ) . goToAppPageViaMenu ( ) ; Thread . sleep ( 2000 ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_783/tree/master/src/main/java/ru/st/selenium/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="DoLoginTest_781/tree/master/src/test/java/ru/greg3d/Lesson2TestComplect.java"> public void function ( ) throws Exception { String startUrl = baseUrl + "/php4dvd/" ; driver . get ( startUrl ) ; WebElement userNameElement = driver . findElement ( By . id ( "username" ) ) ; userNameElement . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; userNameElement . sendKeys ( Keys . DELETE ) ; userNameElement . sendKeys ( "admin" ) ; WebElement passwordElement = driver . findElement ( By . name ( "password" ) ) ; passwordElement . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; passwordElement . sendKeys ( Keys . DELETE ) ; passwordElement . sendKeys ( "admin" ) ; WebElement submitElement = driver . findElement ( By . name ( "submit" ) ) ; submitElement . click ( ) ; Assert . assertTrue ( driver . getCurrentUrl ( ) . contains ( startUrl + "#!" ) , "Login ▁ wasn't" ) ; initFilmFields ( ) ; } </DOCUMENT>
<DOCUMENT_ID="DoLoginTest_784/tree/master/src/test/java/ru/greg3d/Lesson2TestComplect.java"> public void function ( ) throws Exception { String startUrl = baseUrl + "/php4dvd/" ; driver . get ( startUrl ) ; WebElement userNameElement = driver . findElement ( By . id ( "username" ) ) ; userNameElement . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; userNameElement . sendKeys ( Keys . DELETE ) ; userNameElement . sendKeys ( "admin" ) ; WebElement passwordElement = driver . findElement ( By . name ( "password" ) ) ; passwordElement . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; passwordElement . sendKeys ( Keys . DELETE ) ; passwordElement . sendKeys ( "admin" ) ; WebElement submitElement = driver . findElement ( By . name ( "submit" ) ) ; submitElement . click ( ) ; Assert . assertTrue ( driver . getCurrentUrl ( ) . contains ( startUrl + "#!" ) , "Login ▁ wasn't" ) ; initFilmFields ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openHomePage_785/tree/master/src/test/java/ru/st/selenium/SmokeTest.java"> public void function ( ) { wait = new WebDriverWait ( driver , 10 ) ; driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldCorrectlyCreateAccount_787/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; LoginPage loginPage = ( LoginPage ) registrationPage . submitForm ( LoginPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutLName_789/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud2@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutFName_788/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud1@heig-vd.ch" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutEmail_790/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccount2DifferentPasswords_791/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud3@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "1234" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutPassword_792/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud4@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail_794/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePassword ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage_795/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithExistantEmail_793/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPageTmp = new RegistrationPage ( driver ) ; registrationPageTmp . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPageTmp . typeFName ( "Mario" ) ; registrationPageTmp . typeLName ( "Ferreira" ) ; registrationPageTmp . typeRPassword ( "1234" ) ; registrationPageTmp . typePassword ( "1234" ) ; driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnzeigenAnlegen_786/tree/master/BeispielDocker-IntegrationTest/src/test/java/de/fh_dortmund/kekru001/projektarbeit/beispieldocker_web/jsf/AddAnzeigeSeleniumIntegrationTest.java"> public void function ( ) throws Exception { String host = System . getProperty ( "seleniumhost" ) ; String port = System . getProperty ( "seleniumport" ) ; String webserverHost = System . getProperty ( "wildfly.http.host" ) ; String webserverPort = System . getProperty ( "wildfly.http.port" ) ; if ( host == null || host . trim ( ) . isEmpty ( ) || port == null || port . trim ( ) . isEmpty ( ) ) { fail ( "Property ▁ not ▁ set: ▁ seleniumhost: ▁ " + host + ", ▁ seleniumport: ▁ " + port ) ; } final String hub = "http: // " + host + ":" + port + "/wd/hub" ; log . info ( "Selenium ▁ connect ▁ to: ▁ " + hub ) ; WebDriver driver = new RemoteWebDriver ( new URL ( hub ) , DesiredCapabilities . firefox ( ) ) ; final String url = "http: // " + webserverHost + ":" + webserverPort + "/BeispielDocker-web/index.jsf" ; log . info ( "GET ▁ " + url ) ; driver . get ( url ) ; val headline = driver . findElement ( By . id ( "headline" ) ) ; assertEquals ( "Überschrift ▁ 'Kleinanzeigen' ▁ nicht ▁ gefunden ▁ " , "Kleinanzeigen" , headline . getText ( ) ) ; List < WebElement > anzeigen = driver . findElements ( By . id ( "anzeige0" ) ) ; assertTrue ( "anzeige0 ▁ bereits ▁ vorhanden" , anzeigen . isEmpty ( ) ) ; driver . findElement ( By . className ( "titelinput" ) ) . sendKeys ( "Sony ▁ Bravia ▁ 50 ▁ Zoll" ) ; driver . findElement ( By . className ( "beschreibunginput" ) ) . sendKeys ( "Sony ▁ TV, ▁ sehr ▁ gut ▁ erhalten" ) ; driver . findElement ( By . className ( "preisinput" ) ) . sendKeys ( "20000" ) ; driver . findElement ( By . className ( "nameinput" ) ) . sendKeys ( "Max ▁ Mustermann" ) ; driver . findElement ( By . className ( "emailinput" ) ) . sendKeys ( "max@mustermann.net" ) ; driver . findElement ( By . className ( "passwortinput" ) ) . sendKeys ( "geheim" ) ; driver . findElement ( By . className ( "sendbutton" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 15 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "anzeige0" ) ) ) ; log . info ( "GET ▁ " + url ) ; driver . get ( url ) ; anzeigen = driver . findElements ( By . id ( "anzeige0" ) ) ; assertEquals ( "anzeige0 ▁ wurde ▁ nicht ▁ gespeichert ▁ oder ▁ zu ▁ viele" , 1 , anzeigen . size ( ) ) ; WebElement anzeige = anzeigen . get ( 0 ) ; assertEquals ( "Sony ▁ Bravia ▁ 50 ▁ Zoll" , anzeige . findElement ( By . className ( "titelanzeige" ) ) . getText ( ) ) ; assertEquals ( "Sony ▁ TV, ▁ sehr ▁ gut ▁ erhalten" , anzeige . findElement ( By . className ( "textanzeige" ) ) . getText ( ) ) ; assertEquals ( "Preis: ▁ 200.0€" , anzeige . findElement ( By . className ( "preisanzeige" ) ) . getText ( ) ) ; assertEquals ( "Verkäufer: ▁ Max ▁ Mustermann" , anzeige . findElement ( By . className ( "verkaeuferanzeige" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldModifyProfile_796/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "editProfile" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( "Mario" ) ; editProfilePage . typeLName ( "Ferreira" ) ; editProfilePage . typeRPassword ( "5678" ) ; editProfilePage . typePassword ( "5678" ) ; HomePage homePage = ( HomePage ) editProfilePage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccount2DifferentPasswords_797/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "editProfile" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( "Mario" ) ; editProfilePage . typeLName ( "Ferreira" ) ; editProfilePage . typeRPassword ( "5678" ) ; editProfilePage . typePassword ( "8765" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccountWithoutLName_799/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "editProfile" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( "Mario" ) ; editProfilePage . typeRPassword ( "5678" ) ; editProfilePage . typePassword ( "5678" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccountWithoutFName_798/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "editProfile" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeLName ( "Ferreira" ) ; editProfilePage . typeRPassword ( "5678" ) ; editProfilePage . typePassword ( "5678" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldCreateApp_801/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "addApp" ) ; CreateAppPage createAppPage = new CreateAppPage ( driver ) ; createAppPage . typeDescription ( "Test ▁ Description" ) ; createAppPage . typeName ( "Test ▁ Name" ) ; HomePage homePage = ( HomePage ) createAppPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldModifyApp_803/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "editApp" ) ; EditAppPage editAppPage = new EditAppPage ( driver ) ; editAppPage . typeDescription ( "Test ▁ Description" ) ; editAppPage . typeName ( "Test ▁ Name" ) ; HomePage homePage = ( HomePage ) editAppPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAppWithoutName_802/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "addApp" ) ; CreateAppPage createAppPage = new CreateAppPage ( driver ) ; createAppPage . typeDescription ( "Test ▁ Description" ) ; CreateAppPage createAppPageF = ( CreateAppPage ) createAppPage . submitForm ( CreateAppPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccountWithoutPassword_800/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "editProfile" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( "Mario" ) ; editProfilePage . typeLName ( "Ferreira" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAppWithoutName_804/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "addApp" ) ; EditAppPage editAppPage = new EditAppPage ( driver ) ; editAppPage . typeDescription ( "Test ▁ Description" ) ; EditAppPage editAppPageF = ( EditAppPage ) editAppPage . submitForm ( EditAppPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="the_client_navigates_to_807/tree/master/src/test/java/com/andremanuelbarbosa/euromillions/predictor/steps/EuroMillionsPredictorSteps.java"> public void function ( String url ) throws Throwable { webDriver . get ( BASE_URL + url ) ; waitAndTakeScreenshot ( 10000 ) ; } </DOCUMENT>
<DOCUMENT_ID="testEmptyPath_808/tree/master/test/ch/hasselba/servlet/DominoStatelessTokenServletTest.java"> public void function ( ) throws Exception { } </DOCUMENT>
<DOCUMENT_ID="itShouldDisplayListUsers_806/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "home" ) ; HomePage homePage = new HomePage ( driver ) ; ListUsersPage listUsersPage = ( ListUsersPage ) homePage . submitListUsers ( ListUsersPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateNoParams_809/tree/master/test/ch/hasselba/servlet/DominoStatelessTokenServletTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/create/" ) ; assertEquals ( "Error ▁ 400: ▁ Error ▁ reported: ▁ 400" , driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldLogout_805/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void function ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; loginPage . typePassword ( "1234" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + "home" ) ; HomePage homePage = new HomePage ( driver ) ; LoginPage loginPageC = ( LoginPage ) homePage . submitLogout ( LoginPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="testKerevalPresentation_811/tree/master/TLS_XmlRpc_server--test_misc/tests/TestJeuDeDonnees.java"> public void function ( String test , Check check ) throws Exception { driver . get ( baseUrl + "/" ) ; try { check . check ( test , isElementPresent ( By . xpath ( " // img[@alt='pictogramme_automobile_200x181']" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="DoLoginTest_810/tree/master/src/test/java/ru/greg3d/Lesson2TestComplect.java"> public void function ( ) throws Exception { String startUrl = baseUrl + "/php4dvd/" ; driver . get ( startUrl ) ; WebElement userNameElement = driver . findElement ( By . id ( "username" ) ) ; userNameElement . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; userNameElement . sendKeys ( Keys . DELETE ) ; userNameElement . sendKeys ( "admin" ) ; WebElement passwordElement = driver . findElement ( By . name ( "password" ) ) ; passwordElement . sendKeys ( Keys . CONTROL + "a" ) ; Thread . sleep ( 200 ) ; passwordElement . sendKeys ( Keys . DELETE ) ; passwordElement . sendKeys ( "admin" ) ; WebElement submitElement = driver . findElement ( By . name ( "submit" ) ) ; submitElement . click ( ) ; Assert . assertTrue ( driver . getCurrentUrl ( ) . contains ( startUrl + "#!" ) , "Login ▁ wasn't" ) ; initFilmFields ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getLinkFromOnclickElement_813/tree/master/src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Deprecated/Entry_Scraper2.java"> private static void function ( WebDriver driver , String searchUrl , String baseUrl , String key ) { String url = searchUrl + pageNum ; driver . get ( url ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( "a" ) ) ; for ( WebElement link : links ) { String onclick = null ; try { onclick = link . getAttribute ( "onclick" ) ; if ( onclick . startsWith ( "snap_to_marker" ) ) { String title = link . getAttribute ( "title" ) ; sleep ( ) ; link . click ( ) ; String [ ] tmpArray = { convertToUrl ( baseUrl , title ) . toLowerCase ( ) , title . toLowerCase ( ) } ; initialUrls . add ( tmpArray ) ; } } catch ( Exception e ) { } } for ( String [ ] curEntry : initialUrls ) { String pulledUrl = pullCompanyUrl ( driver , curEntry , key ) ; if ( pulledUrl != null ) { urls . add ( pulledUrl ) ; System . out . println ( pulledUrl ) ; persistEntry ( pulledUrl ) ; } } } </DOCUMENT>
<DOCUMENT_ID="getInitialJavascriptLinksAddToPageQueue_812/tree/master/src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Core/PageRetrieverThreadManagerScraper.java"> public Queue function ( String intialPageUrl , String javascriptLinkIdentifier , String customAttributeLabel ) { driver . get ( intialPageUrl ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( "a" ) ) ; Queue < String [ ] > queue = new ConcurrentLinkedQueue < String [ ] > ( ) ; for ( WebElement link : links ) { String customAttribute = null ; try { customAttribute = link . getAttribute ( customAttributeLabel ) ; if ( customAttribute . contains ( javascriptLinkIdentifier ) ) { customAttribute = customLogic ( customAttribute ) ; String [ ] testEntry = new String [ sizeOfStringArrayEnum ] ; testEntry [ ThreadCommunicationBase . PageQueueEntries . BASE_URL . ordinal ( ) ] = intialPageUrl ; testEntry [ ThreadCommunicationBase . PageQueueEntries . CUSTOM_PARAM . ordinal ( ) ] = customAttribute ; queue . add ( testEntry ) ; } } catch ( Exception e ) { } } return queue ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_815/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_816/tree/master/src/main/java/ru/st/selenium/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail_817/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePassword ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getLinksFromOnclick_814/tree/master/src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Object/ScraperBaseJavascript.java"> public void function ( String searchUrl , String baseUrl , String key ) { String url = searchUrl + pageNum ; driver . get ( url ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( "a" ) ) ; for ( WebElement link : links ) { getLinkFromOnclickElementInner_One ( link , baseUrl , initialUrls ) ; } for ( String [ ] curEntry : initialUrls ) { String pulledUrl = pullCompanyUrl ( curEntry , key ) ; if ( pulledUrl != null ) { urls . add ( pulledUrl ) ; System . out . println ( pulledUrl ) ; PersistenceImpl_WriteToFile . appendToFile ( fileOutput , pulledUrl + " \n " ) ; } } } </DOCUMENT>
<DOCUMENT_ID="aUserTryingToGetToAboutPageShouldBeRedirectedThereAfterSignin_819/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void function ( ) { driver . get ( baseUrl + "/pages/about" ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; AboutPage aboutPage = ( AboutPage ) loginPage . submitForm ( AboutPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage_818/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserShouldBeAbleToGetDetailsInformationAboutACompany_821/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToCorporateInformationPageViaMenu ( ) . clickOnFirstCompanyLinkInCompaniesTable ( ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserShouldBeAbleToVisitAllPagesAfterSignin_820/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToBeersPageViaMenu ( ) . goToBeersPageViaMenu ( ) . goToAJAXPageViaMenu ( ) . goToGenerateTestDataPageViaMenu ( ) . goToCorporateInformationPageViaMenu ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail_823/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePassword ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage_824/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; YourAppPage yourapppage = ( YourAppPage ) loginPage . submitForm ( YourAppPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="ClickCreateAccountButtonShouldBringUserToAccountRegistrationPage_825/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; AccountRegistrationPage accountregistrationpage = ( AccountRegistrationPage ) loginPage . submitForm ( AccountRegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulCreatAccountShouldBringUserToyourAppPage_826/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void function ( ) { driver . get ( baseUrl + "/pages/yourApps" ) ; AccountRegistrationPage creatAccountPage = new AccountRegistrationPage ( driver ) ; creatAccountPage . typeEmailAddress ( "a@a.com" ) ; creatAccountPage . typeFirstname ( "any ▁ firstname" ) ; creatAccountPage . typeLastname ( "any ▁ lastname" ) ; creatAccountPage . typeLastname ( "any ▁ lastname" ) ; creatAccountPage . typePassword ( "any ▁ password" ) ; creatAccountPage . typeConfirmPassword ( "any ▁ password" ) ; YourAppPage yourapppage = ( YourAppPage ) creatAccountPage . submitForm ( YourAppPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="gotoSubPage_827/tree/master/netarchivesuite-integration-test/src/test/java/dk/netarkivet/systemtest/page/PageHelper.java"> public static void function ( String subURL ) { checkInitialization ( ) ; TestEventManager . getInstance ( ) . addStimuli ( "Loading ▁ " + subURL ) ; driver . get ( baseUrl + "/" + subURL ) ; } </DOCUMENT>
<DOCUMENT_ID="reloadSubPage_828/tree/master/netarchivesuite-integration-test/src/test/java/dk/netarkivet/systemtest/page/PageHelper.java"> public static void function ( String subURL ) { checkInitialization ( ) ; driver . get ( baseUrl + "/" + subURL ) ; } </DOCUMENT>
<DOCUMENT_ID="testDeleteMovie_829/tree/master/src/test/java/slenium_java_training_ymbelyakova/DeleteMovie.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . cssSelector ( "div[class=\"title\"]" ) ) . click ( ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "Comedy" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . linkText ( "Remove" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="checkIfSendsData_822/tree/master/src/test/java/de/fu_berlin/imp/apiua/server/java_ee/integration/APIUAclt/web/WebDataCollectionTest.java"> public void function ( ) throws Exception { String authUrl = UrlUtils . getAuthUrl ( url , "GET" ) . toExternalForm ( ) ; Dimension innerSize = new Dimension ( 800 , 600 ) ; SeleniumUtils . setInnerSize ( driver , innerSize ) ; driver . get ( authUrl ) ; DoclogRecordBuilder builder = new DoclogRecordBuilder ( ) . setUrl ( authUrl ) . setBounds ( new Rectangle ( 0 , 0 , innerSize . width , innerSize . height ) ) ; Fingerprint newFingerprint = waitForFingerprint ( ) ; testReadyLog ( newFingerprint , builder ) ; testScrollVertically ( newFingerprint , builder ) ; testResize ( newFingerprint , builder ) ; for ( WebElement input : driver . findElements ( By . tagName ( "input" ) ) ) { if ( ! Arrays . asList ( "text" , "search" ) . contains ( input . getAttribute ( "type" ) ) ) continue ; testTyping ( newFingerprint , builder , input , "a€" ) ; } for ( WebElement input : driver . findElements ( By . tagName ( "textarea" ) ) ) { testTyping ( newFingerprint , builder , input , "a€ ▁  \n ABC" ) ; } testBlur ( newFingerprint , builder ) ; List < WebElement > links = driver . findElements ( By . tagName ( "a" ) ) ; assertTrue ( "The ▁ page ▁ does ▁ not ▁ contain ▁ any ▁ links. ▁ At ▁ least ▁ one ▁ link ▁ is ▁ needed ▁ to ▁ test ▁ the ▁ " + DoclogAction . LINK + " ▁ event" , links . size ( ) > 0 ) ; WebElement randomLink = links . get ( ( int ) ( Math . random ( ) * ( links . size ( ) ) ) ) ; LOGGER . info ( "Following ▁ link ▁ " + randomLink . getAttribute ( "href" ) ) ; testLink ( newFingerprint , builder , randomLink ) ; testUnknown ( newFingerprint , builder ) ; } </DOCUMENT>
<DOCUMENT_ID="testDeleteMovie_832/tree/master/src/test/java/slenium_java_training_ymbelyakova/DeleteMovie2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.title" ) ) ) ; int countorig = driver . findElements ( By . cssSelector ( "div.title" ) ) . size ( ) ; driver . findElement ( By . cssSelector ( "div[class=\"title\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) ) ; acceptNextAlert = false ; driver . findElement ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Remove\"]" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\s\\S]$" ) ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.title" ) ) ) ; int countres = driver . findElements ( By . cssSelector ( "div.title" ) ) . size ( ) ; System . out . println ( countorig ) ; System . out . println ( countres ) ; if ( countres != countorig - 1 ) System . out . println ( "Something ▁ is ▁ wrong" ) ; else System . out . println ( "All ▁ is ▁ OK" ) ; } </DOCUMENT>
<DOCUMENT_ID="testFindAndAdd2_830/tree/master/src/test/java/slenium_java_training_ymbelyakova/FindAndAdd2.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( "label[for=\"imdbsearch\"][class=\"error\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "<script>alert(\"hi\");</script>" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; WebElement note = driver . findElement ( By . cssSelector ( "div.content" ) ) ; try { assertTrue ( note . getAttribute ( "innerText" ) . matches ( "No ▁ movies ▁ where ▁ found." ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } Thread . sleep ( 500 ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "American ▁ Crime ▁ Story" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "cover" ) ) . clear ( ) ; driver . findElement ( By . id ( "cover" ) ) . sendKeys ( "C:\\GitHub\\images\\american_crime_story.jpg" ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Save\"]" ) ) . click ( ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( "label[for=\"name\"][class=\"error\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertTrue ( driver . findElement ( By . cssSelector ( "label[for=\"year\"][class=\"error\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "American ▁ Crime ▁ Story" ) ; driver . findElement ( By . name ( "aka" ) ) . clear ( ) ; driver . findElement ( By . name ( "aka" ) ) . sendKeys ( "American ▁ Crime ▁ Story" ) ; try { assertFalse ( driver . findElement ( By . cssSelector ( "label[for=\"name\"][class=\"error\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2016" ) ; try { assertFalse ( driver . findElement ( By . cssSelector ( "label[for=\"year\"][class=\"error\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . cssSelector ( "img[alt=\"Save\"]" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testPositiveSearch_834/tree/master/src/test/java/slenium_java_training_ymbelyakova/PositiveSearch.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "q" ) ) ) ; driver . findElement ( By . id ( "q" ) ) . clear ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "q" ) ) ) ; WebElement nftd = driver . findElement ( By . cssSelector ( "div.content" ) ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "test" + Keys . RETURN ) ; wait . until ( ExpectedConditions . stalenessOf ( nftd ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "div.title" ) ) ) ; WebElement note = driver . findElement ( By . cssSelector ( "div.title" ) ) ; Thread . sleep ( 500 ) ; try { assertTrue ( note . getAttribute ( "innerText" ) . matches ( "Test" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testComplexSearch_831/tree/master/src/test/java/slenium_java_training_ymbelyakova/ComplexSearch.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "q" ) ) ) ; WebElement search = driver . findElement ( By . id ( "q" ) ) ; search . clear ( ) ; search . sendKeys ( "somenotfoundmovie" + Keys . RETURN ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( "div.title" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "div.content" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "div.content" ) , "No ▁ movies ▁ where ▁ found." ) ) ; try { assertEquals ( "No ▁ movies ▁ where ▁ found." , driver . findElement ( By . cssSelector ( "div.content" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "q" ) ) ) ; search . clear ( ) ; WebElement nftd = driver . findElement ( By . cssSelector ( "div.content" ) ) ; search . sendKeys ( "test" + Keys . RETURN ) ; wait . until ( ExpectedConditions . stalenessOf ( nftd ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "div.title" ) ) ) ; WebElement title = driver . findElement ( By . cssSelector ( "div.title" ) ) ; try { assertTrue ( title . getAttribute ( "innerText" ) . matches ( "Test" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "category-button" ) ) . click ( ) ; driver . findElement ( By . id ( "category-menu" ) ) . findElement ( By . linkText ( "Animation" ) ) . click ( ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( "div.title" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "div.content" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "div.content" ) , "No ▁ movies ▁ where ▁ found." ) ) ; try { assertEquals ( "No ▁ movies ▁ where ▁ found." , driver . findElement ( By . cssSelector ( "div.content" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "category-button" ) ) . click ( ) ; driver . findElement ( By . id ( "category-menu" ) ) . findElement ( By . linkText ( "Comedy" ) ) . click ( ) ; wait . until ( ExpectedConditions . stalenessOf ( nftd ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "div.title" ) ) ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( "div.title" ) ) . getAttribute ( "innerText" ) . matches ( "Test" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } Thread . sleep ( 500 ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginTestHTML_835/tree/master/src/test/java/slenium_java_training_ymbelyakova/LoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement userField = driver . findElement ( By . id ( "username" ) ) ; userField . clear ( ) ; userField . sendKeys ( "admin" ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginTestHTML_836/tree/master/src/test/java/selenium_java_training/LoginTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement userField = driver . findElement ( By . id ( "username" ) ) ; userField . clear ( ) ; userField . sendKeys ( "admin" ) ; WebElement passwordField = driver . findElement ( By . name ( "password" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testNegativeSearch_837/tree/master/src/test/java/slenium_java_training_ymbelyakova/NegativeSearch.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "q" ) ) ) ; driver . findElement ( By . id ( "q" ) ) . clear ( ) ; driver . findElement ( By . id ( "q" ) ) . sendKeys ( "somenotfoundmovie" + Keys . RETURN ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( "div.title" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "div.content" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "div.content" ) , "No ▁ movies ▁ where ▁ found." ) ) ; try { assertEquals ( "No ▁ movies ▁ where ▁ found." , driver . findElement ( By . cssSelector ( "div.content" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testDelTopicTc1_839/tree/master/test/DelTopicTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure[\\s\\S]$" ) ) ; assertTrue ( driver . findElements ( By . linkText ( "DelTopic" ) ) . isEmpty ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateTopicTC1_840/tree/master/test/CreateTopicTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user1" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . id ( "formNewTopic:createNewTopic" ) ) . click ( ) ; driver . findElement ( By . id ( "CreateTopic:Title" ) ) . clear ( ) ; driver . findElement ( By . id ( "CreateTopic:Title" ) ) . sendKeys ( "MyTopic" ) ; driver . findElement ( By . id ( "CreateTopic:Content" ) ) . clear ( ) ; driver . findElement ( By . id ( "CreateTopic:Content" ) ) . sendKeys ( "MyContent" ) ; driver . findElement ( By . id ( "CreateTopic:Create" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . linkText ( "user1" ) ) . size ( ) > 0 ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpTc2_841/tree/master/test/SignUpTc2Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user3" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; driver . findElement ( By . id ( "signup:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:username" ) ) . sendKeys ( "user3" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignInTc3_842/tree/master/test/SignInTc3Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; assertTrue ( "The ▁ Username ▁ field ▁ is ▁ required." . equals ( driver . findElement ( By . id ( "secondMessagePanel" ) ) . findElement ( By . tagName ( "td" ) ) . getText ( ) . trim ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddPostTc1_843/tree/master/test/AddPostTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user1" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "TestAddTopic1" ) ) . click ( ) ; driver . findElement ( By . id ( "formPost:content" ) ) . clear ( ) ; driver . findElement ( By . id ( "formPost:content" ) ) . sendKeys ( "Message1" ) ; assertTrue ( driver . findElements ( By . linkText ( "Post" ) ) . size ( ) > 0 ) ; } </DOCUMENT>
<DOCUMENT_ID="testFindAndAdd_838/tree/master/src/test/java/slenium_java_training_ymbelyakova/FindAndAdd.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.title" ) ) ) ; int countorig = driver . findElements ( By . cssSelector ( "div.title" ) ) . size ( ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "input[type=\"submit\"]" ) ) ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . className ( "title" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . linkText ( "Test" ) ) ) ; driver . get ( baseUrl + "/php4dvd/?go=add&imdbid=2407380" ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . name ( "name" ) ) ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "Test ▁ ymbelyakova" ) ; driver . findElement ( By . name ( "aka" ) ) . clear ( ) ; driver . findElement ( By . name ( "aka" ) ) . sendKeys ( "Test ▁ ymbelyakova" ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "Test" ) ; driver . findElement ( By . id ( "cover" ) ) . clear ( ) ; File file = new File ( "src/test/resource/images/test_cover.jpg" ) ; driver . findElement ( By . id ( "cover" ) ) . sendKeys ( file . getAbsolutePath ( ) ) ; driver . findElement ( By . name ( "notes" ) ) . clear ( ) ; driver . findElement ( By . name ( "notes" ) ) . sendKeys ( "Personal ▁ notes ▁ test" ) ; driver . findElement ( By . name ( "taglines" ) ) . clear ( ) ; driver . findElement ( By . name ( "taglines" ) ) . sendKeys ( "Taglines ▁ test" ) ; driver . findElement ( By . name ( "subtitles" ) ) . clear ( ) ; driver . findElement ( By . name ( "subtitles" ) ) . sendKeys ( "Subtitles ▁ test" ) ; driver . findElement ( By . name ( "country" ) ) . clear ( ) ; driver . findElement ( By . name ( "country" ) ) . sendKeys ( "UK" ) ; driver . findElement ( By . name ( "genres" ) ) . clear ( ) ; driver . findElement ( By . name ( "genres" ) ) . sendKeys ( "Comedy" ) ; driver . findElement ( By . name ( "director" ) ) . clear ( ) ; driver . findElement ( By . name ( "director" ) ) . sendKeys ( "Director ▁ test" ) ; driver . findElement ( By . name ( "writer" ) ) . clear ( ) ; driver . findElement ( By . name ( "writer" ) ) . sendKeys ( "Writer ▁ test" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "submit" ) ) ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "h1" ) ) ) ; driver . findElement ( By . cssSelector ( "h1" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.title" ) ) ) ; int countres = driver . findElements ( By . cssSelector ( "div.title" ) ) . size ( ) ; System . out . println ( countorig ) ; System . out . println ( countres ) ; if ( countres != countorig + 1 ) System . out . println ( "Something ▁ is ▁ wrong" ) ; else System . out . println ( "All ▁ is ▁ OK" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateTopicTc2_844/tree/master/test/CreateTopicTc2Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user1" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . id ( "formNewTopic:createNewTopic" ) ) . click ( ) ; driver . findElement ( By . id ( "CreateTopic:Content" ) ) . clear ( ) ; driver . findElement ( By . id ( "CreateTopic:Content" ) ) . sendKeys ( "Test" ) ; driver . findElement ( By . id ( "CreateTopic:Create" ) ) . click ( ) ; assertTrue ( "The ▁ Title ▁ field ▁ is ▁ required." . equals ( driver . findElement ( By . id ( "secondMessagePanel" ) ) . findElement ( By . tagName ( "td" ) ) . getText ( ) . trim ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="aWrongLoginStaysToHomePage_846/tree/master/project/GoomY/src/test/java/ch/heigvd/amt/goomy/selenium/GOOMYTest.java"> public void function ( ) throws InterruptedException { Thread . sleep ( 2000 ) ; driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; Thread . sleep ( 2000 ) ; homePage . typeIncorrectCreditentials ( ) ; Thread . sleep ( 5000 ) ; if ( ! "GoomY" . equals ( driver . getTitle ( ) ) ) { throw new IllegalStateException ( "This ▁ is ▁ not ▁ the ▁ correct ▁ page" ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSignUpTc3_845/tree/master/test/SignUpTc3Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; driver . findElement ( By . id ( "signup:email" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:email" ) ) . sendKeys ( "user4@user4.com" ) ; driver . findElement ( By . id ( "signup:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:username" ) ) . sendKeys ( "user4" ) ; driver . findElement ( By . id ( "signup:btnSignup" ) ) . click ( ) ; WebElement web = driver . findElement ( By . id ( "signup:messageUsername" ) ) ; String t = web . getText ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testNewMovie_833/tree/master/src/test/java/slenium_java_training_ymbelyakova/NewMovie.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.title" ) ) ) ; int countorig = driver . findElements ( By . cssSelector ( "div.title" ) ) . size ( ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . clear ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . sendKeys ( "9999999" ) ; driver . findElement ( By . name ( "name" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "label[for=\"name\"]" ) ) ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( "label[for=\"name\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "This ▁ field ▁ is ▁ required" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "New ▁ Movie" ) ; driver . findElement ( By . name ( "aka" ) ) . clear ( ) ; driver . findElement ( By . name ( "aka" ) ) . sendKeys ( "New ▁ Movie ▁ by ▁ Yulia ▁ Belyakova" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( "label[for=\"name\"]" ) ) ) ; try { assertFalse ( driver . findElement ( By . cssSelector ( "label[for=\"name\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "label[for=\"year\"]" ) ) ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( "label[for=\"year\"]" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertTrue ( driver . findElement ( By . cssSelector ( "BODY" ) ) . getText ( ) . matches ( "This ▁ field ▁ is ▁ required" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "2016" ) ; driver . findElement ( By . name ( "duration" ) ) . clear ( ) ; driver . findElement ( By . name ( "duration" ) ) . sendKeys ( "20" ) ; driver . findElement ( By . name ( "rating" ) ) . clear ( ) ; driver . findElement ( By . name ( "rating" ) ) . sendKeys ( "10" ) ; driver . findElement ( By . id ( "own_no" ) ) . click ( ) ; driver . findElement ( By . id ( "seen_no" ) ) . click ( ) ; driver . findElement ( By . id ( "loaned_yes" ) ) . click ( ) ; driver . findElement ( By . name ( "loanname" ) ) . clear ( ) ; driver . findElement ( By . name ( "loanname" ) ) . sendKeys ( "2016-03-29" ) ; driver . findElement ( By . id ( "cover" ) ) . clear ( ) ; File file = new File ( "src/test/resource/images/new_movie.jpg" ) ; driver . findElement ( By . id ( "cover" ) ) . sendKeys ( file . getAbsolutePath ( ) ) ; driver . findElement ( By . name ( "trailer" ) ) . clear ( ) ; driver . findElement ( By . name ( "trailer" ) ) . sendKeys ( "https: // www.youtube.com/watch?v=ap_avaJApm8" ) ; driver . findElement ( By . name ( "notes" ) ) . clear ( ) ; driver . findElement ( By . name ( "notes" ) ) . sendKeys ( "Personal ▁ notes ▁ test" ) ; driver . findElement ( By . name ( "taglines" ) ) . clear ( ) ; driver . findElement ( By . name ( "taglines" ) ) . sendKeys ( "Taglines ▁ test" ) ; driver . findElement ( By . name ( "plotoutline" ) ) . clear ( ) ; driver . findElement ( By . name ( "plotoutline" ) ) . sendKeys ( "Plot ▁ outline ▁ test" ) ; driver . findElement ( By . name ( "plots" ) ) . clear ( ) ; driver . findElement ( By . name ( "plots" ) ) . sendKeys ( "Plots ▁ test" ) ; driver . findElement ( By . id ( "text_languages_0" ) ) . clear ( ) ; driver . findElement ( By . id ( "text_languages_0" ) ) . sendKeys ( "EN, ▁ RU" ) ; driver . findElement ( By . name ( "subtitles" ) ) . clear ( ) ; driver . findElement ( By . name ( "subtitles" ) ) . sendKeys ( "Subtitles ▁ test" ) ; driver . findElement ( By . name ( "audio" ) ) . clear ( ) ; driver . findElement ( By . name ( "audio" ) ) . sendKeys ( "Audio ▁ test" ) ; driver . findElement ( By . name ( "video" ) ) . clear ( ) ; driver . findElement ( By . name ( "video" ) ) . sendKeys ( "Video ▁ test" ) ; driver . findElement ( By . name ( "country" ) ) . clear ( ) ; driver . findElement ( By . name ( "country" ) ) . sendKeys ( "RU" ) ; driver . findElement ( By . name ( "genres" ) ) . clear ( ) ; driver . findElement ( By . name ( "genres" ) ) . sendKeys ( "Comedy" ) ; driver . findElement ( By . name ( "director" ) ) . clear ( ) ; driver . findElement ( By . name ( "director" ) ) . sendKeys ( "Director ▁ test" ) ; driver . findElement ( By . name ( "writer" ) ) . clear ( ) ; driver . findElement ( By . name ( "writer" ) ) . sendKeys ( "Writer ▁ test" ) ; driver . findElement ( By . name ( "producer" ) ) . clear ( ) ; driver . findElement ( By . name ( "producer" ) ) . sendKeys ( "Producer ▁ test" ) ; driver . findElement ( By . name ( "music" ) ) . clear ( ) ; driver . findElement ( By . name ( "music" ) ) . sendKeys ( "Music ▁ test" ) ; driver . findElement ( By . name ( "cast" ) ) . clear ( ) ; driver . findElement ( By . name ( "cast" ) ) . sendKeys ( "Cast ▁ test" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( "submit" ) ) ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "h2" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( "h1" ) ) ) ; driver . findElement ( By . cssSelector ( "h1" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.title" ) ) ) ; int countres = driver . findElements ( By . cssSelector ( "div.title" ) ) . size ( ) ; System . out . println ( countorig ) ; System . out . println ( countres ) ; if ( countres != countorig + 1 ) System . out . println ( "Something ▁ is ▁ wrong" ) ; else System . out . println ( "All ▁ is ▁ OK" ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_848/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="gotoTestCourse_847/tree/master/opaque-api/src/test/java/com/googlecode/ounit/test/moodle19/HomePage.java"> public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_850/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_849/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="gotoTestCourse_852/tree/master/opaque-api/src/test/java/com/googlecode/ounit/test/moodle21/HomePage.java"> public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_854/tree/master/common/test/java/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_851/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates_853/tree/master/firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="openTestURL_855/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates_857/tree/master/firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_858/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_859/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UsernamePasswordCredentials user = new UsernamePasswordCredentials ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="writeLogFile_860/tree/master/src/test/java/com/github/exkazuu/diff_based_web_tester/diff_generator/WebScraper.java"> private void function ( String url , int sleepTime ) { driver . get ( url ) ; sleep ( sleepTime ) ; writeLogFile ( ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_861/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/ues/ui/integration/util/UESUIIntegrationTest.java"> public static void function ( UESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . cssSelector ( ".right ▁ > ▁ a" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestURL_862/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetAndCheckText_864/tree/master/answer/test/java/introwork/IntroWork7Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork7.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement total = driver . findElement ( By . id ( "total" ) ) ; assertThat ( total . getText ( ) , is ( "9000" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testClickOKButton_865/tree/master/answer/test/java/introwork/IntroWork2Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork2.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement okButton = driver . findElement ( By . id ( "ok_button" ) ) ; okButton . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_863/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testClickOKButton_866/tree/master/answer/test/java/introwork/IntroWork8Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork8.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; Actions actions = new Actions ( driver ) ; WebElement lastButton = driver . findElement ( By . id ( "last_button" ) ) ; actions . moveToElement ( lastButton ) ; actions . perform ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testWSO2FormatTestCase_856/tree/master/src/main/resources/WSO2FormatTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/design" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "pass" ) ) . clear ( ) ; driver . findElement ( By . id ( "pass" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "loginButton" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( "timeout" ) ; } try { if ( isElementPresent ( By . linkText ( "All ▁ Statistics" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "All ▁ Statistics" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( "timeout" ) ; } try { if ( isElementPresent ( By . linkText ( "API ▁ Response ▁ Times" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( "API ▁ Response ▁ Times" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Usage ▁ by ▁ Resource ▁ Path" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Usage ▁ by ▁ User" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Browse" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Subscriptions" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Statistics" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Subscriptions" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Usage" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Response ▁ Times" ) ) . click ( ) ; driver . findElement ( By . linkText ( "API ▁ Last ▁ Access ▁ Times" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Browse" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Browse" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testClickCheckbox_868/tree/master/answer/test/java/introwork/IntroWork5Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork5.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement allowedCheck = driver . findElement ( By . id ( "allowed_check" ) ) ; if ( ! allowedCheck . isSelected ( ) ) { allowedCheck . click ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_869/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnElementFoundInADifferentFrameViaJsShouldHaveSameId_870/tree/master/java/client/test/org/openqa/selenium/ElementEqualityTest.java"> public void function ( ) { String url = appServer . whereIs ( "missedJsReference.html" ) ; driver . get ( url ) ; driver . switchTo ( ) . frame ( "inner" ) ; WebElement first = driver . findElement ( By . id ( "oneline" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement element = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( "return ▁ frames[0].document.getElementById('oneline');" ) ; driver . switchTo ( ) . frame ( "inner" ) ; WebElement second = driver . findElement ( By . id ( "oneline" ) ) ; checkIdEqualityIfRemote ( first , element ) ; checkIdEqualityIfRemote ( second , element ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_872/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_873/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = waitFor ( alertToBePresent ( driver ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testClickOKButton_867/tree/master/answer/test/java/introwork/IntroWork9Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork9.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement okButton = driver . findElement ( By . id ( "ok_button" ) ) ; okButton . click ( ) ; Wait < WebDriver > wait = new WebDriverWait ( driver , 10 ) ; WebElement clickedText = driver . findElement ( By . id ( "clicked_text" ) ) ; try { wait . until ( ExpectedConditions . visibilityOf ( clickedText ) ) ; } finally { assertThat ( clickedText . getText ( ) , is ( "「OK」ボタンがクリックされました!" ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAnElementFoundInADifferentFrameViaJsCanBeUsed_871/tree/master/java/client/test/org/openqa/selenium/ElementFindingTest.java"> public void function ( ) { String url = appServer . whereIs ( "missedJsReference.html" ) ; driver . get ( url ) ; try { driver . switchTo ( ) . frame ( "inner" ) ; WebElement first = driver . findElement ( By . id ( "oneline" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement element = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( "return ▁ frames[0].document.getElementById('oneline');" ) ; driver . switchTo ( ) . frame ( "inner" ) ; WebElement second = driver . findElement ( By . id ( "oneline" ) ) ; assertEquals ( first , element ) ; assertEquals ( second , element ) ; } finally { driver . switchTo ( ) . defaultContent ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_875/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreBookmarkTestCase_874/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) ) ; String bookmarkedAsset = driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) . getText ( ) ; driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "btn-add-gadget" ) ) ) ; driver . findElement ( By . id ( "btn-add-gadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "btn-add-gadget" ) , "Bookmarked" ) ) ; assertEquals ( "Bookmarked" , driver . findElement ( By . id ( "btn-add-gadget" ) ) . getText ( ) , "Bookmarking ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testGadgetPage_876/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( "Gadget" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . getText ( ) , "Gadget ▁ Menu ▁ missing" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( " // a[contains(text()," + "'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . getText ( ) , "Gadgets ▁ missing" ) ; firstAsset = driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ; assertEquals ( "Recently ▁ Added" , driver . findElement ( By . xpath ( " // div[@id='container-assets']/div/div[2]/div[1]/div/h4" ) ) . getText ( ) , "Recently ▁ Added ▁ section ▁ missing" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . getText ( ) , "Recently ▁ added ▁ Gadgets ▁ missing" ) ; assertEquals ( "Tags" , driver . findElement ( By . xpath ( " // div[@id='container-assets']/div/div[2]/div[2]/div/h4" ) ) . getText ( ) , "Tags ▁ section ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "charts" ) ) , "Tags ▁ missing ▁ (charts ▁ tag)" ) ; assertEquals ( "All ▁ Categories" , driver . findElement ( By . cssSelector ( "div.breadcrumb-head" ) ) . getText ( ) , "Category ▁ drop ▁ down ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "i.icon-star" ) ) , "Popularity ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "i.icon-sort-alphabetical" ) ) , "Alphabetical ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "i.icon-calendar" ) ) , "Recent ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . id ( "search" ) ) , "Search ▁ tray ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testLinksFromPage_877/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( firstAsset , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Gadget ▁ list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[contains(text(),'Line ▁ Chart')]" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Recently ▁ added ▁ list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . click ( ) ; WebElement element = driver . findElement ( By . xpath ( " // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) ; driver . findElement ( By . linkText ( "pie" ) ) . click ( ) ; wait . until ( ExpectedConditions . stalenessOf ( element ) ) ; assertEquals ( 1 , driver . findElements ( By . cssSelector ( "div.span3.asset" ) ) . size ( ) , "Tags ▁ not ▁ working" ) ; assertEquals ( "Pie ▁ Chart" , driver . findElement ( By . xpath ( " // h4[contains(.,'Pie ▁ Chart')]" ) ) . getText ( ) , "Tags ▁ are ▁ not ▁ working" ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldHaveTokenAssociatedAfterOAuth_879/tree/master/tests/src/test/java/org/kontinuity/catapult/test/GitHubResourceIT.java"> public void function ( ) throws IOException { final String authUrl = deploymentUrl . toExternalForm ( ) + PATH_AUTHORIZE_WITH_REDIRECT ; log . info ( "Starting ▁ URL: ▁ " + authUrl ) ; driver . navigate ( ) . to ( authUrl ) ; performGitHubOAuth ( driver ) ; final String finalContent = driver . getPageSource ( ) ; String expected = "{\"session_has_github_access_token\":true}" ; log . info ( "Response ▁ from ▁ verification ▁ after ▁ OAuth: ▁ " + finalContent ) ; Assert . assertTrue ( finalContent . contains ( expected ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testClearAndSendKeys_880/tree/master/answer/test/java/introwork/IntroWork3Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork3.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement subject = driver . findElement ( By . id ( "subject" ) ) ; subject . clear ( ) ; subject . sendKeys ( "Selenium" ) ; } </DOCUMENT>
<DOCUMENT_ID="testReserveWith9Members_881/tree/master/answer/test/java/practicework/work1/PracticeWork1Test.java"> public void function ( ) { File html = new File ( "reserveApp/index.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; driver . findElement ( By . id ( "reserve_year" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_year" ) ) . sendKeys ( "2013" ) ; driver . findElement ( By . id ( "reserve_month" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_month" ) ) . sendKeys ( "12" ) ; driver . findElement ( By . id ( "reserve_day" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_day" ) ) . sendKeys ( "7" ) ; driver . findElement ( By . id ( "reserve_term" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_term" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "headcount" ) ) . clear ( ) ; driver . findElement ( By . id ( "headcount" ) ) . sendKeys ( "9" ) ; driver . findElement ( By . id ( "breakfast_on" ) ) . click ( ) ; WebElement planA = driver . findElement ( By . id ( "plan_a" ) ) ; if ( ! planA . isSelected ( ) ) { planA . click ( ) ; } WebElement planB = driver . findElement ( By . id ( "plan_b" ) ) ; if ( ! planB . isSelected ( ) ) { planB . click ( ) ; } driver . findElement ( By . id ( "guestname" ) ) . clear ( ) ; driver . findElement ( By . id ( "guestname" ) ) . sendKeys ( "a" ) ; driver . findElement ( By . id ( "goto_next" ) ) . click ( ) ; assertThat ( driver . findElement ( By . id ( "price" ) ) . getText ( ) , is ( "105750" ) ) ; assertThat ( driver . findElement ( By . id ( "datefrom" ) ) . getText ( ) , is ( "2013年12月7日" ) ) ; assertThat ( driver . findElement ( By . id ( "dateto" ) ) . getText ( ) , is ( "2013年12月8日" ) ) ; assertThat ( driver . findElement ( By . id ( "dayscount" ) ) . getText ( ) , is ( "1" ) ) ; assertThat ( driver . findElement ( By . id ( "hc" ) ) . getText ( ) , is ( "9" ) ) ; assertThat ( driver . findElement ( By . id ( "bf_order" ) ) . getText ( ) , is ( "あり" ) ) ; assertThat ( driver . findElement ( By . id ( "plan_a_order" ) ) . getText ( ) , is ( "昼からチェックインプラン" ) ) ; assertThat ( driver . findElement ( By . id ( "plan_b_order" ) ) . getText ( ) , is ( "お得な観光プラン" ) ) ; assertThat ( driver . findElement ( By . id ( "gname" ) ) . getText ( ) , is ( "a" ) ) ; driver . findElement ( By . id ( "commit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testClickRadioButton_883/tree/master/answer/test/java/introwork/IntroWork4Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork4.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement onRadio = driver . findElement ( By . id ( "on_radio" ) ) ; onRadio . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testReserveWith9MembersUsingCalendarUtility_882/tree/master/answer/test/java/practicework/work1/PracticeWork1Test.java"> public void function ( ) { File html = new File ( "reserveApp/index.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; Calendar immediateSaturday = CalendarUtility . getImmediateDayOfWeek ( Calendar . getInstance ( ) , Calendar . SATURDAY ) ; int reserveYear = immediateSaturday . get ( Calendar . YEAR ) ; int reserveMonth = immediateSaturday . get ( Calendar . MONTH ) + 1 ; int reserveDay = immediateSaturday . get ( Calendar . DAY_OF_MONTH ) ; driver . findElement ( By . id ( "reserve_year" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_year" ) ) . sendKeys ( Integer . toString ( reserveYear ) ) ; driver . findElement ( By . id ( "reserve_month" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_month" ) ) . sendKeys ( Integer . toString ( reserveMonth ) ) ; driver . findElement ( By . id ( "reserve_day" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_day" ) ) . sendKeys ( Integer . toString ( reserveDay ) ) ; driver . findElement ( By . id ( "reserve_term" ) ) . clear ( ) ; driver . findElement ( By . id ( "reserve_term" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "headcount" ) ) . clear ( ) ; driver . findElement ( By . id ( "headcount" ) ) . sendKeys ( "9" ) ; driver . findElement ( By . id ( "breakfast_on" ) ) . click ( ) ; WebElement planA = driver . findElement ( By . id ( "plan_a" ) ) ; if ( ! planA . isSelected ( ) ) { planA . click ( ) ; } WebElement planB = driver . findElement ( By . id ( "plan_b" ) ) ; if ( ! planB . isSelected ( ) ) { planB . click ( ) ; } driver . findElement ( By . id ( "guestname" ) ) . clear ( ) ; driver . findElement ( By . id ( "guestname" ) ) . sendKeys ( "a" ) ; driver . findElement ( By . id ( "goto_next" ) ) . click ( ) ; Calendar checkoutSunday = ( Calendar ) immediateSaturday . clone ( ) ; checkoutSunday . add ( Calendar . DAY_OF_MONTH , 1 ) ; int checkoutYear = checkoutSunday . get ( Calendar . YEAR ) ; int checkoutMonth = checkoutSunday . get ( Calendar . MONTH ) + 1 ; int checkoutDay = checkoutSunday . get ( Calendar . DAY_OF_MONTH ) ; assertThat ( driver . findElement ( By . id ( "price" ) ) . getText ( ) , is ( "105750" ) ) ; assertThat ( driver . findElement ( By . id ( "datefrom" ) ) . getText ( ) , is ( reserveYear + "年" + reserveMonth + "月" + reserveDay + "日" ) ) ; assertThat ( driver . findElement ( By . id ( "dateto" ) ) . getText ( ) , is ( checkoutYear + "年" + checkoutMonth + "月" + checkoutDay + "日" ) ) ; assertThat ( driver . findElement ( By . id ( "dayscount" ) ) . getText ( ) , is ( "1" ) ) ; assertThat ( driver . findElement ( By . id ( "hc" ) ) . getText ( ) , is ( "9" ) ) ; assertThat ( driver . findElement ( By . id ( "bf_order" ) ) . getText ( ) , is ( "あり" ) ) ; assertThat ( driver . findElement ( By . id ( "plan_a_order" ) ) . getText ( ) , is ( "昼からチェックインプラン" ) ) ; assertThat ( driver . findElement ( By . id ( "plan_b_order" ) ) . getText ( ) , is ( "お得な観光プラン" ) ) ; assertThat ( driver . findElement ( By . id ( "gname" ) ) . getText ( ) , is ( "a" ) ) ; driver . findElement ( By . id ( "commit" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="addNewAsset_878/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/AssetUtil.java"> public static void function ( WebDriver driver , String baseUrl , String assetType , String assetName , String version , String category , String url , String description ) { driver . get ( baseUrl + "/publisher/assets/" + assetType + "/list" ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Add" + assetType ) ) ) ; driver . findElement ( By . id ( "Add" + assetType ) ) . click ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( version ) ; if ( ! category . equals ( "" ) ) { new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( category ) ; } driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( url ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( description ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Add" + assetType ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelectOptionByValue_884/tree/master/answer/test/java/introwork/IntroWork6Test.java"> public void function ( ) throws Exception { File html = new File ( "introwork/introWork6.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement headCount = driver . findElement ( By . id ( "head_count" ) ) ; Select select = new Select ( headCount ) ; select . selectByValue ( "5" ) ; } </DOCUMENT>
<DOCUMENT_ID="testPostConnectivityDataTenTimes_885/tree/master/tvb/tests/ui_tests/functional_tests/src/main/java/org/tvb/tests/ConnectivityTest.java"> public void function ( ) throws Exception { loginAdmin ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { postConnectivityData ( ) ; webDriver . get ( baseUrl + USER_PROFILE_URL_SUFFIX ) ; WebElement logout = findElement ( By . name ( "logout" ) ) ; assertEquals ( "button" , logout . getTagName ( ) ) ; assertEquals ( "submit" , logout . getAttribute ( "type" ) ) ; } logout ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_887/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase_888/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreLogin_889/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "My ▁ Items" ) ) , "My ▁ Items ▁ link ▁ missing" ) ; assertTrue ( isElementPresent ( By . linkText ( currentUserName ) ) , "Logged ▁ in ▁ user ▁ not ▁ shown" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreLogout_890/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . linkText ( currentUserName ) ) . click ( ) ; driver . findElement ( By . linkText ( "Sign ▁ out" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "Sign ▁ in" ) ) , "Sign ▁ in ▁ link ▁ missing" ) ; assertEquals ( "Register" , driver . findElement ( By . id ( "btn-register" ) ) . getText ( ) , "Register ▁ button ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase_891/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore_886/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void function ( ) throws Exception { driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( userInfo . getUserName ( ) ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( ASSET_NAME ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( ASSET_CREATED_TIME ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . findElement ( By . cssSelector ( "a.btn" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; driver . get ( baseUrl + STORE_URL ) ; driver . findElementPoll ( By . xpath ( " // a[contains(.,'" + ASSET_NAME + "')]" ) , 5 ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "div.asset-author-category ▁ > ▁ ul ▁ > ▁ li" ) ) . click ( ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( ASSET_DESCRIPTION , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnPopularity_892/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-star" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , popularAsset1 ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , popularAsset1 , "Popularity ▁ Sort ▁ failed" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[2]/div/div/a/h4" ) ) . getText ( ) , popularAsset2 , "Popularity ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnAlphabeticalOrder_893/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-sort-alphabetical" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . xpath ( " // div[@id='assets-container']/div/div[3]/div/div/a/h4" ) , BUBBLE_CHART ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; assertEquals ( BAR_CHART , driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[2]/div/div/a/h4" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryGoogle_895/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Google" ) ) . click ( ) ; assertEquals ( GOOGLE_COUNT , driver . findElements ( By . cssSelector ( "div.asset-details" ) ) . size ( ) , "Google ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnCreatedTime_894/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-calendar" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , assetName ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Recent ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryWSO2_896/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "WSO2" ) ) . click ( ) ; assertEquals ( WSO2_COUNT , driver . findElements ( By . cssSelector ( "div.asset-details" ) ) . size ( ) , "WSO2 ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryMenu_898/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Templates" ) ) . click ( ) ; assertEquals ( "Templates" , driver . findElement ( By . cssSelector ( "div.breadcrumb-head" ) ) . getText ( ) , "Category ▁ drop ▁ down ▁ not ▁ showing ▁ selected ▁ category ▁ " ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryTemplate_897/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-caret-down" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Templates" ) ) . click ( ) ; assertEquals ( TEMPLATE_COUNT , driver . findElements ( By . cssSelector ( "div.span3.asset" ) ) . size ( ) , "Templates ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase_900/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideRendererTestCase.java"> public void function ( ) throws Exception { driver . get ( lifecycleUrl ) ; assertTrue ( isElementPresent ( By . id ( "assetLifecyclePartial" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetLifecyclePartial" ) ) . getText ( ) , "Asset ▁ Overridden ▁ Lifecycle ▁ through ▁ renderer" ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginToPublisher_899/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertEquals ( "Asset ▁ | ▁ WSO2 ▁ Enterprise ▁ Store ▁ back-office" , driver . getTitle ( ) ) ; assertTrue ( isElementPresent ( By . linkText ( currentUserName ) ) , "Logged ▁ in ▁ user ▁ not ▁ shown" ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_903/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/ESUtil.java"> public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( "Sign-out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreBeforeAddRatings_902/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( "socialIfr" ) ) ) ; assertEquals ( "Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review" , driver . findElement ( By . cssSelector ( "div.com-guest" ) ) . getText ( ) ) ; assertEquals ( "Be ▁ the ▁ first ▁ one ▁ to ▁ review!" , driver . findElement ( By . cssSelector ( "p.com-first-review" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testListPageSortByName_904/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . partialLinkText ( "NAME" ) ) . click ( ) ; assertEquals ( NAME_SORT_ASSET_1 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[1]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; assertEquals ( NAME_SORT_ASSET_2 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[14]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testWithWebDriver_906/tree/master/src/test/java/org/littleshoot/proxy/EndToEndStoppingTest.java"> public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( port ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( "localhost:%d" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = "http: // www.yahoo.com/" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase_901/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_908/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_907/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_909/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_905/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSearchGadgetListTestCase.java"> public void function ( ) throws Exception { ESUtil . login ( driver , baseUrl , "publisher" , userInfo . getUserName ( ) , userInfo . getPassword ( ) ) ; driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( assetAuthor ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( assetCategory ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( assetURL ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( assetDescription ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { String alert = closeAlertAndGetItsText ( ) ; log . warn ( alert + ": ▁ modal ▁ box ▁ appeared" ) ; } driver . findElementPoll ( By . linkText ( assetName ) , 10 ) ; driver . findElement ( By . cssSelector ( "a.btn" ) ) . click ( ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , assetName ) ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "div.pull-left" ) , "Lifecycle ▁ - ▁ " + assetName ) ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "commentModalLabel" ) , "Add ▁ a ▁ comment" ) ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( "ok" ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "state" ) , "IN-REVIEW" ) ) ; assertEquals ( driver . findElement ( By . id ( "state" ) ) . getText ( ) , "IN-REVIEW" , "Not ▁ Promoted ▁ to ▁ In-Review" ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "commentModalLabel" ) , "Add ▁ a ▁ comment" ) ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( "ok" ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "state" ) , "PUBLISHED" ) ) ; assertEquals ( driver . findElement ( By . id ( "state" ) ) . getText ( ) , "PUBLISHED" , "Not ▁ Promoted ▁ to ▁ Published" ) ; } </DOCUMENT>
<DOCUMENT_ID="goToDashboard_912/tree/master/functional-test/src/main/java/org/zanata/workflow/AbstractWebWorkFlow.java"> public DashboardBasePage function ( ) { return WebDriverFactory . INSTANCE . ignoringDswid ( ( ) -> { driver . get ( hostUrl + "dashboard" ) ; return new DashboardBasePage ( driver ) ; } ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_910/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="goToHome_911/tree/master/functional-test/src/main/java/org/zanata/workflow/AbstractWebWorkFlow.java"> public HomePage function ( ) { return WebDriverFactory . INSTANCE . ignoringDswid ( ( ) -> { driver . get ( hostUrl ) ; new BasePage ( driver ) . waitForAMoment ( ) . until ( ( Predicate < WebDriver > ) input -> new HomePage ( driver ) . isPageValid ( ) ) ; return new HomePage ( driver ) ; } ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase_915/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testJsonDataLoaded_913/tree/master/selenium/src/test/java/PagesPaymentTest.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( " // select[@id='displayed-currency']/option[@value='" + defaultCurrency + "']" ) ) ; List < WebElement > options = driver . findElements ( By . xpath ( " // select[@id='displayed-currency']/option" ) ) ; assertTrue ( options . size ( ) == currencies . size ( ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase_917/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testChangeCurrency_914/tree/master/selenium/src/test/java/PagesPaymentTest.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( " // select[@id='displayed-currency']/option[@value='" + defaultCurrency + "']" ) ) ; for ( Entry < String , Map < String , String > > entry : membershipData . entrySet ( ) ) { String currency = entry . getKey ( ) ; Map < String , String > values = entry . getValue ( ) ; WebElement elt = driver . findElement ( By . xpath ( " // select[@id='displayed-currency']/option[@value='" + currency + "']" ) ) ; elt . click ( ) ; for ( Entry < String , String > value : values . entrySet ( ) ) { String klass = "msg-" + value . getKey ( ) ; if ( displayClasses . contains ( klass ) ) { String amount = value . getValue ( ) ; WebElement span = driver . findElement ( By . className ( klass ) ) ; assertTrue ( span . getText ( ) . equals ( amount ) ) ; } } } driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_916/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , providerName , assetName , ASSET_VERSION , CREATED_TIME ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testGadgetPage_918/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( "Gadget" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . getText ( ) , "Gadget ▁ Menu ▁ missing" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( " // a[contains(text()," + "'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . getText ( ) , "Gadgets ▁ missing" ) ; firstAsset = driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ; assertEquals ( "Recently ▁ Added" , driver . findElement ( By . xpath ( " // div[@id='container-assets']/div/div[2]/div[1]/div/h4" ) ) . getText ( ) , "Recently ▁ Added ▁ section ▁ missing" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . getText ( ) , "Recently ▁ added ▁ Gadgets ▁ missing" ) ; assertEquals ( "Tags" , driver . findElement ( By . xpath ( " // div[@id='container-assets']/div/div[2]/div[2]/div/h4" ) ) . getText ( ) , "Tags ▁ section ▁ missing" ) ; assertTrue ( isElementPresent ( By . linkText ( "charts" ) ) , "Tags ▁ missing ▁ (charts ▁ tag)" ) ; assertEquals ( "All ▁ Categories" , driver . findElement ( By . cssSelector ( "div.breadcrumb-head" ) ) . getText ( ) , "Category ▁ drop ▁ down ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "i.icon-star" ) ) , "Popularity ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "i.icon-sort-alphabetical" ) ) , "Alphabetical ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "i.icon-calendar" ) ) , "Recent ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( By . id ( "search" ) ) , "Search ▁ tray ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testLinksFromPage_919/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( firstAsset , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , "Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Gadget ▁ list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[contains(text(),'Line ▁ Chart')]" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Recently ▁ added ▁ list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . click ( ) ; driver . findElement ( By . linkText ( "pie" ) ) . click ( ) ; assertEquals ( 1 , driver . findElements ( By . cssSelector ( "div.span3.asset" ) ) . size ( ) , "Tags ▁ not ▁ working" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase_922/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void function ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( By . id ( "assetOverriddenListingH1" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetOverriddenListingH1" ) ) . getText ( ) , "New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_920/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( providerName ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( ASSET_CREATED_TIME ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase_924/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_921/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( "Overview" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]" ) ) . getText ( ) , providerName , "Incorrect ▁ provider" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]" ) ) . getText ( ) , assetName , "Incorrect ▁ asset ▁ name" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]" ) ) . getText ( ) , ASSET_VERSION , "Incorrect ▁ version" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]" ) ) . getText ( ) , "WSO2" , "Incorrect ▁ Category" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]" ) ) . getText ( ) , ASSET_URL_2 , "Incorrect ▁ URL" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]" ) ) . getText ( ) , ASSET_DESCRIPTION_2 , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase_925/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; driver . findElementPoll ( By . id ( "assetListingPageH1" ) , POLL_COUNT ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreBookmarkTestCase_923/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_TOP_ASSETS_PAGE ) ; driver . findElement ( By . xpath ( " // i[@class='icon-cog']" ) ) . click ( ) ; String bookmarkedAsset = driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[1]/div/div/a/h4" ) ) . getText ( ) ; driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[1]/div/div/a/h4" ) ) . click ( ) ; if ( isElementPresent ( By . linkText ( "Sign ▁ in" ) ) ) { driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; } driver . findElement ( By . id ( "btn-add-gadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "btn-add-gadget" ) , "Bookmarked" ) ) ; assertEquals ( "Bookmarked" , driver . findElement ( By . id ( "btn-add-gadget" ) ) . getText ( ) , "Bookmarking ▁ failed" ) ; driver . findElement ( By . linkText ( "My ▁ Items" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "strong" ) ) ) ; assertEquals ( bookmarkedAsset , driver . findElement ( By . cssSelector ( "strong" ) ) . getText ( ) , "Bookmarked ▁ asset ▁ not ▁ shown ▁ in ▁ My ▁ Items ▁ page" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a/li" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "My ▁ Assets" ) ) , "My ▁ Assets ▁ section ▁ missing" ) ; driver . findElement ( By . cssSelector ( "i.icon-angle-down.pull-right" ) ) . click ( ) ; assertEquals ( bookmarkedAsset , driver . findElement ( By . cssSelector ( "strong ▁ > ▁ a" ) ) . getText ( ) , "Bookmarked ▁ asset ▁ not ▁ shown ▁ in ▁ My ▁ Assets ▁ section" ) ; driver . findElement ( By . linkText ( "View ▁ all" ) ) . click ( ) ; assertEquals ( "My ▁ Assets" , driver . findElement ( By . cssSelector ( "h3.asset-title-separator.asset-type-gadget" ) ) . getText ( ) , "View ▁ all ▁ not ▁ directing ▁ to ▁ My ▁ Items ▁ page" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase_926/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( "My ▁ Items" ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; assertTrue ( isElementPresent ( By . linkText ( NEW_USER_NAME ) ) , "Login ▁ failed ▁ for ▁ Store" ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( By . linkText ( NEW_USER_NAME ) ) , "Login ▁ failed ▁ for ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonNavigationLinks_929/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . cssSelector ( "a.brand" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Recent ▁ Gadgets" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . xpath ( " // h4[contains(.,'" + LINE_CHART + "')]" ) ) . getText ( ) , "Recent ▁ Gadgets ▁ link ▁ not ▁ working" ) ; driver . findElement ( By . cssSelector ( "a.brand" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Recent ▁ Sites" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( " // h4[contains(.,'" + AMAZON + "')]" ) ) . getText ( ) , "Recent ▁ Sites ▁ link ▁ not ▁ working" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonNavigationTop_928/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[1]/li" ) ) . click ( ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( " // h4[contains(.," + LINE_PLUS_BAR_CHART + "')]" ) ) . getText ( ) , "Gadgets ▁ Menu ▁ not ▁ working" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[2]/li" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( " // h4[contains(.," + AMAZON + "')]" ) ) . getText ( ) , "Sites ▁ Menu ▁ not ▁ working" ) ; driver . findElement ( By . cssSelector ( "a.brand" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonHomePage_927/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; assertTrue ( isElementPresent ( By . cssSelector ( "a.brand" ) ) , "Home ▁ Page ▁ error: ▁ Logo ▁ missing" ) ; assertEquals ( "Sign ▁ in" , driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Sign ▁ in ▁ button ▁ missing" ) ; assertTrue ( isElementPresent ( By . id ( "btn-register" ) ) , "Home ▁ Page ▁ error: ▁ Register ▁ button ▁ missing" ) ; assertEquals ( "Gadget" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[1]/li" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Gadget ▁ menu ▁ missing" ) ; assertEquals ( "Site" , driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[2]/li" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Site ▁ menu ▁ missing" ) ; assertEquals ( "Recent ▁ Gadgets" , driver . findElement ( By . linkText ( "Recent ▁ Gadgets" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Recent ▁ Gadgets ▁ links ▁ missing" ) ; assertEquals ( "Recent ▁ Sites" , driver . findElement ( By . linkText ( "Recent ▁ Sites" ) ) . getText ( ) , "Home ▁ Page ▁ error: ▁ Recent ▁ Sites ▁ links ▁ missing" ) ; assertTrue ( isElementPresent ( By . id ( "search" ) ) , "Home ▁ Page ▁ error: ▁ Search ▁ missing" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "div.span3.store-right ▁ > ▁ div.row ▁ > ▁ div.span3" ) ) , "Home ▁ Page ▁ error: ▁ Recent ▁ Added ▁ side ▁ list ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase_932/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_930/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( "Add" ) ) . click ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_provider" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_createdtime" ) ) . sendKeys ( ASSET_CREATED_TIME ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase_933/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_935/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase_936/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddPostTc2_937/tree/master/test/AddPostTc2Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user1" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "TestAddTopic1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Post" ) ) . click ( ) ; assertTrue ( "The ▁ Content ▁ field ▁ is ▁ required." . equals ( driver . findElement ( By . id ( "secondMessagePanel" ) ) . findElement ( By . tagName ( "td" ) ) . getText ( ) . trim ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testDelPostTc1_938/tree/master/test/DelPostTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "TestDelPost" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Delete" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( "^Are ▁ you ▁ sure[\\s\\S]$" ) ) ; assertTrue ( driver . findElements ( By . linkText ( "Delete" ) ) . isEmpty ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_931/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( "Overview" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]" ) ) . getText ( ) , "Incorrect ▁ provider" ) ; assertEquals ( assetName , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]" ) ) . getText ( ) , "Incorrect ▁ asset ▁ name" ) ; assertEquals ( ASSET_VERSION , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]" ) ) . getText ( ) , "Incorrect ▁ Category" ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . xpath ( " // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_934/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , currentUserName , assetName , ASSET_VERSION , CREATED_TIME ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + "/carbon/" ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ " + "tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignInTc1_940/tree/master/test/SignInTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user1" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( "currentUsername" ) ) . getText ( ) . trim ( ) . equals ( "USER1" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditPostTc1_939/tree/master/test/EditPostTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "moderator" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "TestEditPost" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; driver . findElement ( By . id ( "form:btnEdit" ) ) . clear ( ) ; driver . findElement ( By . id ( "form:btnEdit" ) ) . sendKeys ( "PostChanged" ) ; driver . findElement ( By . linkText ( "Save" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Edit" ) ) . click ( ) ; assertTrue ( "PostChanged" . equals ( driver . findElement ( By . id ( "form:btnEdit" ) ) . getText ( ) . trim ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignInTc2_941/tree/master/test/SignInTc2Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "user1" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; assertTrue ( "The ▁ Password ▁ field ▁ is ▁ required." . equals ( driver . findElement ( By . id ( "secondMessagePanel" ) ) . findElement ( By . tagName ( "td" ) ) . getText ( ) . trim ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPinTopicTc1_943/tree/master/test/PinTopicTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "moderator" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Pin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Unpin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Pin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpTc1_942/tree/master/test/SignUpTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; driver . findElement ( By . id ( "signup:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:username" ) ) . sendKeys ( "user2" ) ; driver . findElement ( By . id ( "signup:email" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:email" ) ) . sendKeys ( "user2@user2.com" ) ; driver . findElement ( By . id ( "signup:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signup:confirm" ) ) . clear ( ) ; driver . findElement ( By . id ( "signup:confirm" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . name ( "signup:btnSignup" ) ) . click ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 5 , TimeUnit . SECONDS ) ; assertTrue ( "User ▁ was ▁ successfully ▁ created." . equals ( driver . findElement ( By . id ( "messagePanel" ) ) . findElement ( By . tagName ( "td" ) ) . getText ( ) . trim ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="OpenTargetURL_945/tree/master/UPT_AUTO/src/test/java/com/jd/libra/BPT_Auto/PageFactory/CommonPageModel.java"> public void function ( WebDriver driver , String url ) { driver . get ( url ) ; System . out . println ( "Start ▁ to ▁ open ▁ the ▁ url ▁ : ▁ " + url ) ; } </DOCUMENT>
<DOCUMENT_ID="testPinTopicTc1_944/tree/master/test/UnPinTopicTc1Test.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "Login" ) ) . click ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:username" ) ) . sendKeys ( "moderator" ) ; driver . findElement ( By . id ( "signin:password" ) ) . clear ( ) ; driver . findElement ( By . id ( "signin:password" ) ) . sendKeys ( "123456" ) ; driver . findElement ( By . id ( "signin:btnSignin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Categorie1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Unpin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_946/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_948/tree/master/common/test/java/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain_949/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testInitialLogin_947/tree/master/enme-war/web-app/selenium-test/src/test/java/org/encuestame/selenium/InitialHomeTestIT.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; final SetupPage setup = new SetupPage ( driver ) ; setup . initStep1 ( ) ; setup . initStep2 ( ) ; setup . initStep3 ( ) ; setup . initStep4 ( "test_user" , "demo@encuestame.org" , "demo@encuestame.org" , "12345678" , "12345678" ) ; setup . initStep5 ( ) ; setup . initStep6 ( ) ; assertEquals ( true , true ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain_950/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="the_home_page_url_952/tree/master/taskstrategy/task-cucumber/src/test/java/com/taskstrategy/WebSteps.java"> public void function ( ) { driver = new HtmlUnitDriver ( ) ; driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="testForSignin1_953/tree/master/taskstrategy/task-cucumber/src/test/java/com/taskstrategy/WebSteps.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . id ( "signin" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_954/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_955/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_957/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_956/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_VERSION , "" , "" , "" ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . get ( baseUrl + "/carbon/" ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ " + "tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testCookieIntegrity_951/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( "fish" , "cod" , "/common/animals" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testNCIHomeFooter_960/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( "NCI ▁ Home" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } </DOCUMENT>
<DOCUMENT_ID="testPoliciesFooter_961/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( "Policies" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } </DOCUMENT>
<DOCUMENT_ID="testBaseURLExternalLinks_959/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void function ( ) throws Exception { try { driver . get ( baseUrl ) ; java . util . List < WebElement > links = driver . findElements ( By . tagName ( "a" ) ) ; HashSet hset = new HashSet ( ) ; int lcv = 0 ; for ( int i = 0 ; i < links . size ( ) ; i ++ ) { String href = links . get ( i ) . getAttribute ( "href" ) ; if ( href != null && href . length ( ) > 0 ) { if ( ! hset . contains ( href ) ) { hset . add ( href ) ; } } } Iterator it = hset . iterator ( ) ; while ( it . hasNext ( ) ) { String href = ( String ) it . next ( ) ; if ( ! href . startsWith ( baseUrl ) ) { lcv ++ ; int responseCode = getHTTPResponseCode ( href ) ; System . out . println ( "(" + lcv + ") ▁ " + href + " ▁ (response ▁ code: ▁ " + responseCode + ")" ) ; assertTrue ( responseCode == 200 ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; assertTrue ( false ) ; } assertTrue ( true ) ; } </DOCUMENT>
<DOCUMENT_ID="testFOIAFooter_963/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( "FOIA" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } </DOCUMENT>
<DOCUMENT_ID="testAccessibilityFooter_962/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( "Accessibility" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore_958/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void function ( ) throws Exception { driver . findElement ( By . linkText ( "Add ▁ " + ASSET_TYPE ) ) . click ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( ASSET_NAME ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . clear ( ) ; driver . findElement ( By . id ( "commentModalText" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( "commentModalSave" ) ) . click ( ) ; driver . get ( baseUrl + STORE_URL ) ; driver . findElementPoll ( By . xpath ( " // a[contains(.,'" + ASSET_NAME + "')]" ) , 5 ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( "div.asset-author-category ▁ > ▁ ul ▁ > ▁ li" ) ) . click ( ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( ASSET_DESCRIPTION , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testContactUsFooter_964/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( "Contact ▁ Us" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } </DOCUMENT>
<DOCUMENT_ID="getHtmlPage_967/tree/master/src/plugin/lib-selenium/src/java/org/apache/nutch/protocol/selenium/HttpWebClient.java"> public static String function ( String url , Configuration conf ) { WebDriver driver = null ; try { driver = new FirefoxDriver ( ) ; driver . get ( url ) ; new WebDriverWait ( driver , 3 ) ; String innerHtml = driver . findElement ( By . tagName ( "body" ) ) . getAttribute ( "innerHTML" ) ; return innerHtml ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { if ( driver != null ) try { driver . quit ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } </DOCUMENT>
<DOCUMENT_ID="openTestURL_968/tree/master/uitest/src/test/java/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + StringUtils . join ( parameters , "&" ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_969/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_966/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java"> static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( "Firefox ▁ version ▁ " + firefoxVersion + " ▁ detected" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + "/firebug/" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + "firebug.xpi" ; final String firepathPath = tempPath + "firepath.xpi" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( "browser.download.folderList" , 2 ) ; profile . setPreference ( "browser.download.dir" , downLoadsDir ) ; profile . setPreference ( "browser.helperApps.alwaysAsk.force" , false ) ; profile . setPreference ( "browser.download.manager.showWhenStarting" , false ) ; profile . setPreference ( "browser.download.manager.showAlertOnComplete" , false ) ; profile . setPreference ( "browser.download.manager.closeWhenDone" , true ) ; profile . setPreference ( "app.update.auto" , false ) ; profile . setPreference ( "app.update.enabled" , false ) ; profile . setPreference ( "dom.max_script_run_time" , 0 ) ; profile . setPreference ( "dom.max_chrome_script_run_time" , 0 ) ; profile . setPreference ( "browser.helperApps.neverAsk.saveToDisk" , "application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain" ) ; profile . setPreference ( "network.proxy.type" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_971/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_970/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="printWindowUtils_965/tree/master/software/junit-test/src/gov/nih/nci/evs/testUtil/BaseUITestGenerator.java"> public static void function ( PrintWriter out ) { out . println ( " \n " ) ; out . println ( " TABSYMBOL public ▁ void ▁ popUpWindow(String ▁ wndLabel) ▁ throws ▁ Exception ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.findElement(By.linkText(wndLabel)).click();" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(8000);" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ windowTitle= ▁ getCurrentWindowTitle();" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(1000);" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ mainWindow ▁ = ▁ getMainWindowHandle(driver);" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(1000);" ) ; out . println ( " TABSYMBOL TABSYMBOL closeAllOtherWindows(mainWindow);" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ String ▁ getMainWindowHandle(WebDriver ▁ driver) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL return ▁ driver.getWindowHandle();" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ String ▁ getCurrentWindowTitle() ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ windowTitle ▁ = ▁ driver.getTitle();" ) ; out . println ( " TABSYMBOL TABSYMBOL return ▁ windowTitle;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ boolean ▁ closeAllOtherWindows(String ▁ openWindowHandle) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL Set<String> ▁ allWindowHandles ▁ = ▁ driver.getWindowHandles();" ) ; out . println ( " TABSYMBOL TABSYMBOL for ▁ (String ▁ currentWindowHandle ▁ : ▁ allWindowHandles) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL if ▁ (!currentWindowHandle.equals(openWindowHandle)) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL TABSYMBOL driver.switchTo().window(currentWindowHandle);" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL TABSYMBOL driver.close();" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL }" ) ; out . println ( " TABSYMBOL TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.switchTo().window(openWindowHandle);" ) ; out . println ( " TABSYMBOL TABSYMBOL if ▁ (driver.getWindowHandles().size() ▁ == ▁ 1)" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL return ▁ true;" ) ; out . println ( " TABSYMBOL TABSYMBOL else" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL return ▁ false;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " ▁ ▁ ▁ ▁ public ▁ String ▁ getPopupWindowBodyText(WebDriver ▁ driver) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ parentWindowHandler ▁ = ▁ driver.getWindowHandle();" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ subWindowHandler ▁ = ▁ null;" ) ; out . println ( " TABSYMBOL TABSYMBOL Set<String> ▁ handles ▁ = ▁ driver.getWindowHandles();" ) ; out . println ( " TABSYMBOL TABSYMBOL Iterator<String> ▁ iterator ▁ = ▁ handles.iterator();" ) ; out . println ( " TABSYMBOL TABSYMBOL while ▁ (iterator.hasNext()){" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL subWindowHandler ▁ = ▁ iterator.next();" ) ; out . println ( " TABSYMBOL TABSYMBOL }" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.switchTo().window(subWindowHandler);" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ bodyText ▁ = ▁ driver.findElement(By.tagName(\"body\")).getText();" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.switchTo().window(parentWindowHandler);" ) ; out . println ( " TABSYMBOL TABSYMBOL return ▁ bodyText;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ boolean ▁ containsText(String ▁ text) ▁ {" ) ; out . println ( " TABSYMBOL ▁ ▁ ▁ ▁ try ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ if ▁ (driver.findElement(By.xpath(\" // *[contains(.,'\" ▁ + ▁ text ▁ + ▁ \"')]\")) ▁ != ▁ null) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ return ▁ true;" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ }" ) ; out . println ( " TABSYMBOL TABSYMBOL } ▁ catch ▁ (Exception ▁ e) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ return ▁ false;" ) ; out . println ( " TABSYMBOL ▁ ▁ ▁ ▁ }" ) ; out . println ( " TABSYMBOL ▁ ▁ ▁ ▁ return ▁ false;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " ▁ ▁ ▁ ▁ public ▁ void ▁ goBack() ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.navigate().back();" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ void ▁ navigateTo(String ▁ url) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.get(url);" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( "" ) ; out . println ( " ▁ ▁ ▁ ▁ public ▁ void ▁ maximizeWindow() ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.manage().window().maximize();" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_973/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_974/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_975/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_977/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testFirstDemo_978/tree/master/chapter8/SeleniumDesktop/src/FirstDemo.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "kw" ) ) . click ( ) ; driver . findElement ( By . id ( "kw" ) ) . clear ( ) ; driver . findElement ( By . id ( "kw" ) ) . sendKeys ( "selenium" ) ; driver . findElement ( By . id ( "su" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="getPageSource_976/tree/master/src/main/java/com/asimihsan/handytrowel/network/HTMLFetcher.java"> public String function ( final String url ) throws TimeoutException { phantomJsLogger . setLevel ( Level . OFF ) ; DesiredCapabilities desiredCapabilities = DesiredCapabilities . phantomjs ( ) ; desiredCapabilities . setCapability ( PhantomJSDriverService . PHANTOMJS_CLI_ARGS , new String [ ] { "--ignore-ssl-errors=yes" , "--load-images=no" , "--disk-cache=true" , "--max-disk-cache-size=size=51200" } ) ; final WebDriver driver = new PhantomJSDriver ( desiredCapabilities ) ; try { Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { driver . get ( url ) ; } } ) ; t . start ( ) ; try { t . join ( timeoutMillis ) ; } catch ( InterruptedException e ) { } if ( t . isAlive ( ) ) { System . out . println ( "Timeout ▁ for ▁ HTTP ▁ GET ▁ to: ▁ " + url ) ; t . interrupt ( ) ; throw new TimeoutException ( ) ; } String pageSource = driver . getPageSource ( ) ; return pageSource ; } finally { driver . quit ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_972/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testFirstDemo_979/tree/master/chapter8/FirstDemo.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "kw" ) ) . click ( ) ; driver . findElement ( By . id ( "kw" ) ) . clear ( ) ; driver . findElement ( By . id ( "kw" ) ) . sendKeys ( "selenium" ) ; driver . findElement ( By . id ( "su" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testFirstDemo_980/tree/master/chapter8/SeleniumAndroid/src/FirstDemo.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "kw" ) ) . click ( ) ; driver . findElement ( By . id ( "kw" ) ) . clear ( ) ; driver . findElement ( By . id ( "kw" ) ) . sendKeys ( "selenium" ) ; driver . findElement ( By . id ( "su" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="goToMainPage_981/tree/master/workshop-selenium-project/src/com/lohika/example/tests/BookFlightTest.java"> private void function ( ) { driver . get ( baseUrl + "/WebTours/" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_983/tree/master/common/test/java/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="goToURL_986/tree/master/src/main/java/ui/PageTransporter.java"> private void function ( String url ) { driver . navigate ( ) . to ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldFlingViaCatapultConsoleButton_982/tree/master/tests/src/test/java/org/kontinuity/catapult/test/CatapultConsoleIT.java"> public void function ( ) throws IOException { final String consoleUrl = this . getDeploymentUrl ( ) . toExternalForm ( ) ; log . info ( "Request ▁ URL: ▁ " + consoleUrl ) ; driver . navigate ( ) . to ( consoleUrl ) ; final File scrFile1 = ( ( TakesScreenshot ) driver ) . getScreenshotAs ( OutputType . FILE ) ; FileUtils . copyFile ( scrFile1 , new File ( "target/" + this . getClass ( ) . getSimpleName ( ) + "-1-consoleBeforeSubmission.png" ) ) ; final WebElement select = driver . findElement ( By . id ( "flingSourceRepo" ) ) ; final List < WebElement > options = select . findElements ( By . tagName ( "option" ) ) ; for ( final WebElement option : options ) { if ( option . getAttribute ( "value" ) . equals ( this . getSourceRepo ( ) ) ) { option . click ( ) ; break ; } } final WebElement submit = driver . findElement ( By . id ( "flingSubmitButton" ) ) ; submit . click ( ) ; GitHubResourceIT . performGitHubOAuth ( driver ) ; final File scrFile2 = ( ( TakesScreenshot ) driver ) . getScreenshotAs ( OutputType . FILE ) ; FileUtils . copyFile ( scrFile2 , new File ( "target/" + this . getClass ( ) . getSimpleName ( ) + "-2-consoleAfterSubmission.png" ) ) ; this . assertLanding ( driver ) ; } </DOCUMENT>
<DOCUMENT_ID="buscaSimplesPorDarf_987/tree/master/src/test/java/br/gov/servicos/frontend/BuscaUITest.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Página ▁ Inicial" ) ) ; driver . findElement ( By . id ( "buscar" ) ) . sendKeys ( "darf" ) ; driver . findElement ( By . className ( "searchButton" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ darf" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li" ) ) . size ( ) , is ( 20 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li ▁ h3" ) ) . get ( 0 ) . getText ( ) , is ( "Departamento ▁ de ▁ Polícia ▁ Rodoviária ▁ Federal ▁ (DPRF)" ) ) ; assertThat ( driver . findElement ( By . id ( "buscar" ) ) . getAttribute ( "value" ) , is ( "darf" ) ) ; driver . findElement ( By . id ( "buscar" ) ) . clear ( ) ; driver . findElement ( By . id ( "buscar" ) ) . sendKeys ( "prouni" ) ; driver . findElement ( By . className ( "searchButton" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ prouni" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li" ) ) . size ( ) , is ( 10 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( "#resultados-busca ▁ li ▁ h3" ) ) . get ( 0 ) . getText ( ) , is ( "Unidade ▁ de ▁ Pronto ▁ Atendimento ▁ (UPA ▁ 24h)" ) ) ; driver . findElement ( By . cssSelector ( "#resultados-busca ▁ li ▁ a" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( "Portal ▁ de ▁ Serviços ▁ - ▁ Unidade ▁ de ▁ Pronto ▁ Atendimento ▁ (UPA ▁ 24h)" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateEventJUnit4_984/tree/master/eventize/src/test/TestCreateEvent_JUnit4.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "inputLogin ▁ using ▁ your ▁ gmail ▁ account" ) ) . click ( ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "harshithachidanand" ) ; driver . findElement ( By . id ( "next" ) ) . click ( ) ; driver . findElement ( By . id ( "Passwd" ) ) . clear ( ) ; driver . findElement ( By . id ( "Passwd" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "next" ) ) . click ( ) ; driver . findElement ( By . id ( "eventName" ) ) . clear ( ) ; driver . findElement ( By . id ( "eventName" ) ) . sendKeys ( "New ▁ events" ) ; driver . findElement ( By . id ( "eventTagline" ) ) . clear ( ) ; driver . findElement ( By . id ( "eventTagline" ) ) . sendKeys ( "New ▁ is ▁ awesome" ) ; driver . findElement ( By . xpath ( " // table[@id='eventDate_table']/tbody/tr[3]/td[6]/div" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "button.btn-flat.picker__close" ) ) . click ( ) ; driver . findElement ( By . id ( "eventTime" ) ) . clear ( ) ; driver . findElement ( By . id ( "eventTime" ) ) . sendKeys ( "9:00AM" ) ; driver . findElement ( By . id ( "duration" ) ) . clear ( ) ; driver . findElement ( By . id ( "duration" ) ) . sendKeys ( "2 ▁ hours" ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#select-options-815bcc23-dabb-d8e7-0c54-cc604715e2d4 ▁ > ▁ li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#select-options-091efa9b-6d5f-ef96-ae17-69722f5ba9b7 ▁ > ▁ li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#select-options-7ed503fc-e8cb-c3b8-0752-c157b27088ea ▁ > ▁ li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . id ( "capacity" ) ) . clear ( ) ; driver . findElement ( By . id ( "capacity" ) ) . sendKeys ( "90" ) ; driver . findElement ( By . id ( "location" ) ) . clear ( ) ; driver . findElement ( By . id ( "location" ) ) . sendKeys ( "HFH" ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "yep! ▁ come ▁ n ▁ see ▁ what ▁ new" ) ; driver . findElement ( By . id ( "createrName" ) ) . clear ( ) ; driver . findElement ( By . id ( "createrName" ) ) . sendKeys ( "Harshitha" ) ; driver . findElement ( By . id ( "createrEmail" ) ) . clear ( ) ; driver . findElement ( By . id ( "createrEmail" ) ) . sendKeys ( "har@gmail.com" ) ; driver . findElement ( By . name ( "action" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='nav-mobile']/li[3]/a" ) ) . click ( ) ; driver . findElement ( By . linkText ( "call_madeSignout" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testInitialEnme_985/tree/master/src/test/java/org/encuestame/selenium/EnmeInitialPageTestIT.java"> public void function ( ) { System . out . println ( " ▁ ****** ▁ ▁ GETTING ▁ BASE ▁ URL ▁ ******" ) ; driver . get ( baseUrl ) ; HomePage enmeHomePage = new HomePage ( driver ) ; enmeHomePage . navHomeMenuLinks ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Navigation ▁ Home ▁ Links ▁ ******" ) ; enmeHomePage . verifyEnmeLogoLink ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Enme ▁ Logo ▁ Link ▁ ******" ) ; enmeHomePage . VerifiyElementsOnHomeItems ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Verify ▁ Elements ▁ on ▁ Home ▁ Items ▁ ******" ) ; enmeHomePage . homeQuickSearch ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Home ▁ Quick ▁ Search ▁ ******" ) ; enmeHomePage . verifyElementsOnPopularHashtagsBlock ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Verify ▁ Elements ▁ on ▁ Popular ▁ Hashtag ▁ Block ▁ ******" ) ; enmeHomePage . verifiyElementsOnRatedUsersBlock ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Verify ▁ Elements ▁ on ▁ Rated ▁ Users ▁ Block ▁ ******" ) ; System . out . println ( " ▁ ****** ▁ ▁ GETTING ▁ BASE ▁ URL ▁ ******" ) ; driver . get ( baseUrl ) ; LoginPage enmeLoginPage = new LoginPage ( driver ) ; enmeLoginPage . recoverPassword ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Recovering ▁ Password ▁ ▁ ******" ) ; System . out . println ( " ▁ ****** ▁ ▁ GETTING ▁ BASE ▁ URL ▁ ******" ) ; driver . get ( baseUrl ) ; enmeLoginPage . createAccount ( ) ; System . out . println ( " ▁ ****** ▁ Sign-up ▁ Create ▁ Account ▁ ******" ) ; enmeLoginPage . loginToEncuestame ( ) ; System . out . println ( " ▁ ****** ▁ Login ▁ To ▁ Encuestame ▁ ******" ) ; TeamPage enmeTeamPage = new TeamPage ( driver ) ; enmeTeamPage . membersAdministrator ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Verify ▁ Members ▁ Administration ▁ Menu ▁ ******" ) ; enmeTeamPage . addUserDirectly ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Add ▁ New ▁ User ▁ by ▁ Send ▁ Request ▁ ▁ ******" ) ; enmeTeamPage . inviteUser ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Add ▁ new ▁ User ▁ by ▁ Invitation ▁ email ▁ ******" ) ; enmeTeamPage . membersTablePagination ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Verify ▁ Members ▁ table ▁ Pagination ▁ ******" ) ; enmeTeamPage . editUserPermissions ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Edit ▁ User ▁ Permissions ▁ ******" ) ; enmeTeamPage . editUserPictureProfile ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Edit ▁ User ▁ Picture ▁ profile ▁ ******" ) ; DashboardPage boardPage = new DashboardPage ( driver ) ; boardPage . addGadgetToDashboard ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Add ▁ Gadget ▁ to ▁ Dashboard ▁ ******" ) ; boardPage . changeToLayoutA ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ A ▁ ******" ) ; boardPage . changeToLayoutAA ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ AA ▁ ******" ) ; boardPage . changeToLayoutAB ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ AB ▁ ******" ) ; boardPage . changeToLayoutBA ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ BA ▁ ******" ) ; boardPage . createDashboard ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Create ▁ new ▁ Dashboard ▁ ▁ ******" ) ; boardPage . notification ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Edit ▁ User ▁ Picture ▁ profile ▁ ******" ) ; Profile profilePage = new Profile ( driver ) ; profilePage . settingsAccountConfiguration ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Profile ▁ Settings ▁ Configuration ▁ ******" ) ; profilePage . uploadGravatarImage ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Upload ▁ profile ▁ gravatar ▁ Image ▁ ******" ) ; profilePage . uploadImage ( ) ; System . out . println ( " ▁ ****** ▁ ▁ Upload ▁ Profile ▁ image ▁ ******" ) ; } </DOCUMENT>
<DOCUMENT_ID="testRootPage_991/tree/master/src/test/java/example/selenium/SimpleTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_992/tree/master/src/main/resources/archetype-resources/src/test/java/SampleTestNgTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testUserLogout_989/tree/master/src/test/java/org/apache/airavata/pga/tests/UserLogout.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Log ▁ out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchProjectExp_990/tree/master/src/test/java/org/apache/airavata/pga/tests/SearchProjectExp.java"> public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Project" ) ) . click ( ) ; driver . findElement ( By . id ( "browse" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "search-key" ) ) ) . selectByVisibleText ( "Project ▁ Name" ) ; driver . findElement ( By . id ( "search-value" ) ) . clear ( ) ; driver . findElement ( By . id ( "search-value" ) ) . sendKeys ( projectName ) ; driver . findElement ( By . name ( "search" ) ) . click ( ) ; try { assertTrue ( isElementPresent ( By . cssSelector ( "td" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertEquals ( projectName , driver . findElement ( By . cssSelector ( "td" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . linkText ( "View" ) ) . click ( ) ; waitTime ( 30000 ) ; } </DOCUMENT>
<DOCUMENT_ID="testUploadReview_993/tree/master/src/test/java/browserTest/BrowserTest.java"> public void function ( ) throws Exception { int successCounter = 0 ; try { driver . get ( baseUrl + "/" ) ; successCounter ++ ; driver . findElement ( By . id ( "login" ) ) . click ( ) ; driver . findElement ( By . id ( "login_field" ) ) . clear ( ) ; driver . findElement ( By . id ( "login_field" ) ) . sendKeys ( testUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( testUserPass ) ; driver . findElement ( By . name ( "commit" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . id ( "showWriterBtn" ) ) . click ( ) ; driver . findElement ( By . linkText ( "pdf-reviewer" ) ) . click ( ) ; driver . findElement ( By . linkText ( "testing-review-pdf" ) ) . click ( ) ; driver . findElement ( By . linkText ( "test.pdf" ) ) . click ( ) ; driver . findElement ( By . linkText ( "(Myself) ▁ - ▁ pdf-reviewer" ) ) . click ( ) ; driver . findElement ( By . id ( "customTags" ) ) . clear ( ) ; driver . findElement ( By . id ( "customTags" ) ) . sendKeys ( "[Selenium]" ) ; driver . findElement ( By . id ( "submitReview" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . cssSelector ( "button.close" ) ) . click ( ) ; driver . findElement ( By . id ( "showStatusBtn" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . linkText ( "Review ▁ Now" ) ) . click ( ) ; File file = new File ( "strangeAnnotations.pdf" ) ; driver . findElement ( By . id ( "pdf-file" ) ) . sendKeys ( file . getAbsolutePath ( ) ) ; driver . findElement ( By . id ( "upload" ) ) . click ( ) ; driver . findElement ( By . linkText ( "here" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . cssSelector ( "a.js-selected-navigation-item.sunken-menu-item ▁ > ▁ span.octicon.octicon-issue-opened" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Selenium" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.js-check-all" ) ) . click ( ) ; successCounter ++ ; } catch ( Exception e ) { e . printStackTrace ( ) ; } reportSuccesses ( successCounter ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_995/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_996/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="openMainPage_998/tree/master/Homework #5/src/main/java/selenium_training/applogic1/NavigationHelper1.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_999/tree/master/Homework #5/src/main/java/selenium_training/applogic1/NavigationHelper1.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="openMainPage_1000/tree/master/Homework 5_1/src/main/java/selenium_training/applogic2/NavigationHelper2.java"> public void function ( ) { driver . get ( baseUrl ) ; } </DOCUMENT>
<DOCUMENT_ID="openRelativeUrl_1001/tree/master/Homework 5_1/src/main/java/selenium_training/applogic2/NavigationHelper2.java"> public void function ( String url ) { driver . get ( baseUrl + url ) ; } </DOCUMENT>
<DOCUMENT_ID="testInitialLogin_997/tree/master/it-selenium/src/test/java/org/apache/roller/selenium/InitialLoginTestIT.java"> public void function ( ) throws Exception { driver . get ( baseUrl ) ; SetupPage sp = new SetupPage ( driver ) ; RegisterPage rp = sp . createNewUser ( ) ; WelcomePage wp = rp . submitUserRegistration ( "bsmith" , "Bob ▁ Smith" , "bsmith@email.com" , "roller123" ) ; LoginPage lp = wp . doRollerLogin ( ) ; MainMenuPage mmp = lp . loginToRoller ( "bsmith" , "roller123" ) ; CreateWeblogPage cwp = mmp . createWeblog ( ) ; mmp = cwp . createWeblog ( "Bob's ▁ Blog" , "bobsblog" , "bsmith@email.com" ) ; driver . get ( baseUrl ) ; BlogHomePage bhp = sp . chooseFrontPageBlog ( ) ; String blogEntryTitle = "My ▁ First ▁ Blog ▁ Entry" ; String blogEntryContent = "Welcome ▁ to ▁ my ▁ blog!" ; EntryAddPage eap = bhp . createNewBlogEntry ( ) ; eap . setTitle ( blogEntryTitle ) ; eap . setText ( blogEntryContent ) ; EntryEditPage eep = eap . postBlogEntry ( ) ; SingleBlogEntryPage sbep = eep . viewBlogEntry ( ) ; System . out . println ( "title/text: ▁ " + sbep . getBlogTitle ( ) + " ▁ / ▁ " + sbep . getBlogText ( ) ) ; assertEquals ( blogEntryTitle , sbep . getBlogTitle ( ) ) ; assertEquals ( blogEntryContent , sbep . getBlogText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain_1002/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain_1003/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1005/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCookieIntegrity_1004/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( "fish" , "cod" , "/common/animals" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1006/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1007/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="printWindowUtils_988/tree/master/software/junit-test/src/gov/nih/nci/evs/testUtil/BaseUITestGenerator.java"> public static void function ( PrintWriter out ) { out . println ( " \n " ) ; out . println ( " TABSYMBOL public ▁ void ▁ popUpWindow(String ▁ wndLabel) ▁ throws ▁ Exception ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.findElement(By.linkText(wndLabel)).click();" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(8000);" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ windowTitle= ▁ getCurrentWindowTitle();" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(1000);" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ mainWindow ▁ = ▁ getMainWindowHandle(driver);" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(1000);" ) ; out . println ( " TABSYMBOL TABSYMBOL closeAllOtherWindows(mainWindow);" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " ▁ ▁ ▁ ▁ public ▁ String ▁ getPopupWindowBodyText(WebDriver ▁ driver) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ parentWindowHandler ▁ = ▁ driver.getWindowHandle();" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ subWindowHandler ▁ = ▁ null;" ) ; out . println ( " TABSYMBOL TABSYMBOL Set<String> ▁ handles ▁ = ▁ driver.getWindowHandles();" ) ; out . println ( " TABSYMBOL TABSYMBOL Iterator<String> ▁ iterator ▁ = ▁ handles.iterator();" ) ; out . println ( " TABSYMBOL TABSYMBOL while ▁ (iterator.hasNext()){" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL subWindowHandler ▁ = ▁ iterator.next();" ) ; out . println ( " TABSYMBOL TABSYMBOL }" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.switchTo().window(subWindowHandler);" ) ; out . println ( " TABSYMBOL TABSYMBOL Thread.sleep(4000);" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ bodyText ▁ = ▁ driver.findElement(By.tagName(\"body\")).getText();" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.switchTo().window(parentWindowHandler);" ) ; out . println ( " TABSYMBOL TABSYMBOL return ▁ bodyText;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ String ▁ getMainWindowHandle(WebDriver ▁ driver) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL return ▁ driver.getWindowHandle();" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ String ▁ getCurrentWindowTitle() ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL String ▁ windowTitle ▁ = ▁ driver.getTitle();" ) ; out . println ( " TABSYMBOL TABSYMBOL return ▁ windowTitle;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ boolean ▁ closeAllOtherWindows(String ▁ openWindowHandle) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL Set<String> ▁ allWindowHandles ▁ = ▁ driver.getWindowHandles();" ) ; out . println ( " TABSYMBOL TABSYMBOL for ▁ (String ▁ currentWindowHandle ▁ : ▁ allWindowHandles) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL if ▁ (!currentWindowHandle.equals(openWindowHandle)) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL TABSYMBOL driver.switchTo().window(currentWindowHandle);" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL TABSYMBOL driver.close();" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL }" ) ; out . println ( " TABSYMBOL TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.switchTo().window(openWindowHandle);" ) ; out . println ( " TABSYMBOL TABSYMBOL if ▁ (driver.getWindowHandles().size() ▁ == ▁ 1)" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL return ▁ true;" ) ; out . println ( " TABSYMBOL TABSYMBOL else" ) ; out . println ( " TABSYMBOL TABSYMBOL TABSYMBOL return ▁ false;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ boolean ▁ containsText(String ▁ text) ▁ {" ) ; out . println ( " TABSYMBOL ▁ ▁ ▁ ▁ try ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ if ▁ (driver.findElement(By.xpath(\" // *[contains(.,'\" ▁ + ▁ text ▁ + ▁ \"')]\")) ▁ != ▁ null) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ return ▁ true;" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ }" ) ; out . println ( " TABSYMBOL TABSYMBOL } ▁ catch ▁ (Exception ▁ e) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL ▁ ▁ ▁ ▁ return ▁ false;" ) ; out . println ( " TABSYMBOL ▁ ▁ ▁ ▁ }" ) ; out . println ( " TABSYMBOL ▁ ▁ ▁ ▁ return ▁ false;" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " ▁ ▁ ▁ ▁ public ▁ void ▁ goBack() ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.navigate().back();" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( " TABSYMBOL public ▁ void ▁ navigateTo(String ▁ url) ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.get(url);" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; out . println ( "" ) ; out . println ( " ▁ ▁ ▁ ▁ public ▁ void ▁ maximizeWindow() ▁ {" ) ; out . println ( " TABSYMBOL TABSYMBOL driver.manage().window().maximize();" ) ; out . println ( " TABSYMBOL }" ) ; out . println ( "" ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_994/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1008/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1009/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1011/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1012/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1013/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1010/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1014/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1015/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_1016/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; WebElement element = wait . until ( presenceOfElementLocated ( By . tagName ( "h1" ) ) ) ; assertEquals ( "authorized" , element . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testFacebookSharing_1017/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; WebElement element = driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/facebook.png']" ) ) ; String facebookLink = element . findElement ( By . xpath ( ".." ) ) . getAttribute ( "href" ) ; assertTrue ( matchUrl ( correctFacebookLink , facebookLink ) , "Facebook ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testGPlusSharing_1018/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; WebElement element = driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/google.png']" ) ) ; String gplusLink = element . findElement ( By . xpath ( ".." ) ) . getAttribute ( "href" ) ; gplusLink = URLDecoder . decode ( gplusLink , "UTF-8" ) ; assertTrue ( matchUrl ( correctGplusLink , gplusLink ) , "GPlus ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_1022/tree/master/common/test/java/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToService_1023/tree/master/components/fabric8-selenium/src/main/java/io/fabric8/selenium/WebDriverFacade.java"> public String function ( String serviceName ) { String url = getServiceUrl ( serviceName ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; return url ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_1021/tree/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; assertAdminEvents . assertEvent ( realmId , OperationType . ACTION , AdminEventPaths . userResetPasswordPath ( userId ) ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertTrue ( driver . getTitle ( ) . contains ( "Account ▁ Management" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testDiggSharing_1020/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/diggit.png']" ) ) . click ( ) ; switchWindow ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , "UTF-8" ) ; assertTrue ( matchUrl ( correctDiggLink , diggLink ) , "Digg ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1024/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase_1027/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="test_calculate_two_values_1025/tree/master/src/test/java/org/sayem/webdriver/basics/webdriver/datadriven/BasicDataDrivenTest.java"> public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( "number1" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( "number2" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( "function" ) ) ; functionList . findElement ( By . cssSelector ( "option[value='" + this . function + "']" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( "calculate" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "answer" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase_1028/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideRendererTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/lifecycle" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase_1029/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_1026/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase_1030/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "servicexNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testNotFoundNoAlert_1031/tree/master/tests/selenium/java_package/src/selenium_package/tests/second_page/TestSecondPage.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "not_found" ) ; assertFalse ( isAlertPresent ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testNotFoundNoAlert_1033/tree/master/tests/selenium/java_package/src/selenium_package/tests/TestStaff.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "not_found" ) ; assertFalse ( isAlertPresent ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testFailedElementPresent_1032/tree/master/tests/selenium/java_package/src/selenium_package/tests/second_page/TestSecondPage.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "not_found" ) ; assertTrue ( isElementPresent ( By . id ( "page-title" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase_1035/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverridePartialTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/update" ) ; } </DOCUMENT>
<DOCUMENT_ID="testFailedElementPresent_1034/tree/master/tests/selenium/java_package/src/selenium_package/tests/TestStaff.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "not_found" ) ; assertTrue ( isElementPresent ( By . id ( "page-title" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase_1036/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase_1037/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetCaramelPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase_1040/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1041/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="getHtmlPage_1039/tree/master/lib-selenium/src/java/org/apache/nutch/protocol/selenium/HttpWebClient.java"> public static String function ( String url , Configuration conf ) { WebDriver driver = null ; try { driver = new FirefoxDriver ( ) ; driver . get ( url ) ; new WebDriverWait ( driver , 3 ) ; String innerHtml = driver . findElement ( By . tagName ( "body" ) ) . getAttribute ( "innerHTML" ) ; return innerHtml ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { if ( driver != null ) try { driver . quit ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1042/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testWithWebDriver_1038/tree/master/src/test/java/org/littleshoot/proxy/EndToEndStoppingTest.java"> public void function ( ) throws Exception { HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( 0 ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( "localhost:%d" , proxyServer . getListenAddress ( ) . getPort ( ) ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = "http: // www.yahoo.com/" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertThat ( source . length ( ) , greaterThan ( 100 ) ) ; driver . close ( ) ; proxyServer . stop ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1044/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1043/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1045/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1046/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testTwitterSharing_1019/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/twitter.png']" ) ) . click ( ) ; switchWindow ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , "UTF-8" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1048/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1050/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1051/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1049/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWithWebDriver_1047/tree/master/src/test/java/org/littleshoot/proxy/EndToEndStoppingTest.java"> public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( port ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( "localhost:%d" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = "http: // www.yahoo.com/" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testFacebookSharing_1052/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; WebElement element = driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/facebook.png']" ) ) ; String facebookLink = element . findElement ( By . xpath ( ".." ) ) . getAttribute ( "href" ) ; assertTrue ( matchUrl ( correctFacebookLink , facebookLink ) , "Facebook ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testGPlusSharing_1053/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; WebElement element = driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/google.png']" ) ) ; String gplusLink = element . findElement ( By . xpath ( ".." ) ) . getAttribute ( "href" ) ; gplusLink = URLDecoder . decode ( gplusLink , "UTF-8" ) ; assertTrue ( matchUrl ( correctGplusLink , gplusLink ) , "GPlus ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testTwitterSharing_1054/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/twitter.png']" ) ) . click ( ) ; switchWindow ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , "UTF-8" ) ; System . out . println ( twitterLink ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testDiggSharing_1055/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/diggit.png']" ) ) . click ( ) ; switchWindow ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , "UTF-8" ) ; assertTrue ( matchUrl ( correctDiggLink , diggLink ) , "Digg ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1056/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1057/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1058/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1059/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1060/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1061/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1062/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1064/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1063/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="findElementPoll_1067/tree/master/integration/test-ui-integration/src/test/java/org/wso2/developerstudio/codenvy/ui/integration/test/utils/DevSWebDriver.java"> public void function ( By by , int pollCount ) { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1065/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1066/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToURL_1068/tree/master/uiscanner/org.testeditor.ui.uiscanner/src/main/java/org/testeditor/ui/uiscanner/webscanner/Scanner.java"> public void function ( String url ) throws UnreachableBrowserException { if ( url . toLowerCase ( ) . startsWith ( "http: // " ) || url . toLowerCase ( ) . startsWith ( "https: // " ) || url . toLowerCase ( ) . startsWith ( "file:" ) ) { webDriver . get ( url ) ; } else { webDriver . get ( "http: // " + url ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1071/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="test_calculate_two_values_1070/tree/master/src/test/java/org/sayem/webdriver/basics/webdriver/datadriven/CsvDataDrivenTest.java"> public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( "number1" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( "number2" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( "function" ) ) ; functionList . findElement ( By . cssSelector ( "option[value='" + this . function + "']" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( "calculate" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "answer" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1074/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1069/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1072/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_1076/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1075/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1077/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1078/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1080/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1079/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1073/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java"> public static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( "Firefox ▁ version ▁ " + firefoxVersion + " ▁ detected" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + "/firebug/" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + "firebug.xpi" ; final String firepathPath = tempPath + "firepath.xpi" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( "browser.download.folderList" , 2 ) ; profile . setPreference ( "browser.download.dir" , downLoadsDir ) ; profile . setPreference ( "browser.helperApps.alwaysAsk.force" , false ) ; profile . setPreference ( "browser.download.manager.showWhenStarting" , false ) ; profile . setPreference ( "browser.download.manager.showAlertOnComplete" , false ) ; profile . setPreference ( "browser.download.manager.closeWhenDone" , true ) ; profile . setPreference ( "app.update.auto" , false ) ; profile . setPreference ( "app.update.enabled" , false ) ; profile . setPreference ( "dom.max_script_run_time" , 0 ) ; profile . setPreference ( "dom.max_chrome_script_run_time" , 0 ) ; profile . setPreference ( "browser.helperApps.neverAsk.saveToDisk" , "application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain" ) ; profile . setPreference ( "network.proxy.type" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ " , e ) ; } } String url ; if ( System . getenv ( "url" ) != null ) { url = System . getenv ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ " , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_1082/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_1081/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertEquals ( "Keycloak ▁ Account ▁ Management" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_1085/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1084/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="displaysPolicyUrlInLoginPage_1083/tree/master/Client/src/test/java/org/xdi/oxauth/interop/DisplaysPolicyUriInLoginPage.java"> public void function ( final String redirectUris , final String redirectUri ) throws Exception { showTitle ( "OC5:FeatureTest-Displays ▁ Policy ▁ in ▁ Login ▁ Page" ) ; List < ResponseType > responseTypes = Arrays . asList ( ResponseType . CODE ) ; String policyUri = "http: // www.gluu.org/policy" ; RegisterRequest registerRequest = new RegisterRequest ( ApplicationType . WEB , "oxAuth ▁ test ▁ app" , StringUtils . spaceSeparatedToList ( redirectUris ) ) ; registerRequest . setResponseTypes ( responseTypes ) ; registerRequest . setPolicyUri ( policyUri ) ; RegisterClient registerClient = new RegisterClient ( registrationEndpoint ) ; registerClient . setRequest ( registerRequest ) ; RegisterResponse registerResponse = registerClient . exec ( ) ; showClient ( registerClient ) ; assertEquals ( registerResponse . getStatus ( ) , 200 , "Unexpected ▁ response ▁ code: ▁ " + registerResponse . getEntity ( ) ) ; assertNotNull ( registerResponse . getClientId ( ) ) ; assertNotNull ( registerResponse . getClientSecret ( ) ) ; assertNotNull ( registerResponse . getRegistrationAccessToken ( ) ) ; assertNotNull ( registerResponse . getClientIdIssuedAt ( ) ) ; assertNotNull ( registerResponse . getClientSecretExpiresAt ( ) ) ; String clientId = registerResponse . getClientId ( ) ; List < String > scopes = Arrays . asList ( "openid" , "profile" , "address" , "email" ) ; String state = UUID . randomUUID ( ) . toString ( ) ; AuthorizationRequest authorizationRequest = new AuthorizationRequest ( responseTypes , clientId , scopes , redirectUri , null ) ; authorizationRequest . setState ( state ) ; String authorizationRequestUrl = getAuthorizationEndpoint ( ) + "?" + authorizationRequest . getQueryString ( ) ; AuthorizeClient authorizeClient = new AuthorizeClient ( getAuthorizationEndpoint ( ) ) ; authorizeClient . setRequest ( authorizationRequest ) ; try { startSelenium ( ) ; driver . navigate ( ) . to ( authorizationRequestUrl ) ; WebElement policy = driver . findElement ( By . xpath ( " // a[@href='" + policyUri + "']" ) ) ; assertNotNull ( policy ) ; } catch ( NoSuchElementException ex ) { fail ( "Policy ▁ not ▁ found" ) ; } finally { stopSelenium ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1087/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1088/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1090/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1089/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1091/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1093/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1092/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="displaysLogoInLoginPage_1086/tree/master/Client/src/test/java/org/xdi/oxauth/interop/DisplaysLogoInLoginPage.java"> public void function ( final String redirectUris , final String redirectUri ) throws Exception { showTitle ( "OC5:FeatureTest-Displays ▁ Logo ▁ in ▁ Login ▁ Page" ) ; List < ResponseType > responseTypes = Arrays . asList ( ResponseType . CODE ) ; String logoUri = "http: // www.gluu.org/wp-content/themes/gluursn/images/logo.png" ; RegisterRequest registerRequest = new RegisterRequest ( ApplicationType . WEB , "oxAuth ▁ test ▁ app" , StringUtils . spaceSeparatedToList ( redirectUris ) ) ; registerRequest . setResponseTypes ( responseTypes ) ; registerRequest . setLogoUri ( logoUri ) ; RegisterClient registerClient = new RegisterClient ( registrationEndpoint ) ; registerClient . setRequest ( registerRequest ) ; RegisterResponse registerResponse = registerClient . exec ( ) ; showClient ( registerClient ) ; assertEquals ( registerResponse . getStatus ( ) , 200 , "Unexpected ▁ response ▁ code: ▁ " + registerResponse . getEntity ( ) ) ; assertNotNull ( registerResponse . getClientId ( ) ) ; assertNotNull ( registerResponse . getClientSecret ( ) ) ; assertNotNull ( registerResponse . getRegistrationAccessToken ( ) ) ; assertNotNull ( registerResponse . getClientIdIssuedAt ( ) ) ; assertNotNull ( registerResponse . getClientSecretExpiresAt ( ) ) ; String clientId = registerResponse . getClientId ( ) ; List < String > scopes = Arrays . asList ( "openid" , "profile" , "address" , "email" ) ; String state = UUID . randomUUID ( ) . toString ( ) ; AuthorizationRequest authorizationRequest = new AuthorizationRequest ( responseTypes , clientId , scopes , redirectUri , null ) ; authorizationRequest . setState ( state ) ; String authorizationRequestUrl = getAuthorizationEndpoint ( ) + "?" + authorizationRequest . getQueryString ( ) ; AuthorizeClient authorizeClient = new AuthorizeClient ( getAuthorizationEndpoint ( ) ) ; authorizeClient . setRequest ( authorizationRequest ) ; try { startSelenium ( ) ; driver . navigate ( ) . to ( authorizationRequestUrl ) ; WebElement logo = driver . findElement ( By . xpath ( " // img[@src='" + logoUri + "']" ) ) ; assertNotNull ( logo ) ; } catch ( NoSuchElementException ex ) { fail ( "Logo ▁ not ▁ found" ) ; } finally { stopSelenium ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1095/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1096/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1099/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1098/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1100/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1097/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1094/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testFacebookSharing_1102/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; WebElement element = driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/facebook.png']" ) ) ; String facebookLink = element . findElement ( By . xpath ( ".." ) ) . getAttribute ( "href" ) ; assertTrue ( matchUrl ( correctFacebookLink , facebookLink ) , "Facebook ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testGPlusSharing_1103/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; WebElement element = driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/google.png']" ) ) ; String gplusLink = element . findElement ( By . xpath ( ".." ) ) . getAttribute ( "href" ) ; gplusLink = URLDecoder . decode ( gplusLink , "UTF-8" ) ; assertTrue ( matchUrl ( correctGplusLink , gplusLink ) , "GPlus ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testPasswordRecoveryEmail_1101/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPasswordRecovery.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-signin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Forgot ▁ your ▁ password?" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( USER ) ; driver . findElement ( By . id ( "validationSubmit" ) ) . click ( ) ; String resourceLocation = getResourceLocation ( ) ; smtpPropertyLocation = resourceLocation + SMTP_PROPERTY_FILE ; Thread . sleep ( 10000 ) ; String message = ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , RESET_MAIL_TITLE ) ; String resetUrl = message . split ( "" ) [ 5 ] . trim ( ) . substring ( "https: // localhost:10343" . length ( ) ) ; driver . get ( baseUrl + resetUrl ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( "password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "password2" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( "resetPassword" ) ) . click ( ) ; ESUtil . login ( driver , baseUrl , STORE_APP , USER , NEW_PASSWORD ) ; } </DOCUMENT>
<DOCUMENT_ID="testDiggSharing_1105/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/diggit.png']" ) ) . click ( ) ; switchWindow ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , "UTF-8" ) ; assertTrue ( matchUrl ( correctDiggLink , diggLink ) , "Digg ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase_1106/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void function ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOverriddenListingH1" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetOverriddenListingH1" ) ) . getText ( ) , "New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_1108/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestURL_1107/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1110/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testTwitterSharing_1104/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSocialSharingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( "Share" ) ) . getText ( ) , "Share" ) ; driver . findElement ( By . linkText ( "Share" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( " // h4[contains(.,'Social ▁ Sites')]" ) ) . getText ( ) , "Social ▁ Sites" ) ; driver . findElement ( By . xpath ( " // img[@src='/store/themes/store/img/twitter.png']" ) ) . click ( ) ; switchWindow ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , "UTF-8" ) ; System . out . println ( twitterLink ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , "Twitter ▁ sharing ▁ is ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1109/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1111/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1112/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1114/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1115/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1116/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1118/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1119/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1121/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1120/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPasswordRecoveryEmail_1117/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPasswordRecovery.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-signin" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Forgot ▁ your ▁ password?" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( USER ) ; driver . findElement ( By . id ( "validationSubmit" ) ) . click ( ) ; String resourceLocation = getResourceLocation ( ) ; smtpPropertyLocation = resourceLocation + SMTP_PROPERTY_FILE ; Thread . sleep ( 10000 ) ; String message = ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , RESET_MAIL_TITLE ) ; String resetUrl = message . split ( "" ) [ 5 ] . trim ( ) . substring ( "https: // localhost:9443" . length ( ) ) ; driver . get ( baseUrl + resetUrl ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( "password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "password2" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( "resetPassword" ) ) . click ( ) ; ESUtil . login ( driver , baseUrl , STORE_APP , USER , NEW_PASSWORD ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1122/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader_1125/tree/master/src/test/java/ru/stqa/selenium/SampleTestNgTest.java"> public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1123/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestUrl_1126/tree/master/rice-tools-test/src/main/java/org/kuali/rice/testtools/selenium/WebDriverUtils.java"> public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , "ff" ) . equals ( "opera" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , "Open ▁ URL" , false , "Open ▁ " + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToService_1128/tree/master/components/fabric8-selenium/src/main/java/io/fabric8/selenium/WebDriverFacade.java"> public String function ( String serviceName ) { String url = getServiceUrl ( serviceName ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; return url ; } </DOCUMENT>
<DOCUMENT_ID="openTestURL_1127/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1124/tree/master/zeppelin-server/src/test/java/com/nflabs/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Start" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="openTestUrl_1129/tree/master/rice-tools-test/src/main/java/org/kuali/rice/testtools/selenium/WebDriverUtils.java"> public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , "ff" ) . equals ( "opera" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , "Open ▁ URL" , false , "Open ▁ " + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1130/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestUrl_1131/tree/master/rice-tools-test/src/main/java/org/kuali/rice/testtools/selenium/WebDriverUtils.java"> public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , "ff" ) . equals ( "opera" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , "Open ▁ URL" , false , "Open ▁ " + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_1132/tree/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertEquals ( "Keycloak ▁ Account ▁ Management" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1134/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1135/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1113/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1136/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1139/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1140/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_1141/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1137/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Start" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1142/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToService_1143/tree/master/components/fabric8-selenium/src/main/java/io/fabric8/selenium/WebDriverFacade.java"> public String function ( String serviceName ) { String url = getServiceUrl ( serviceName ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; return url ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1133/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1138/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java"> static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( "Firefox ▁ version ▁ " + firefoxVersion + " ▁ detected" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + "/firebug/" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + "firebug.xpi" ; final String firepathPath = tempPath + "firepath.xpi" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( "browser.download.folderList" , 2 ) ; profile . setPreference ( "browser.download.dir" , downLoadsDir ) ; profile . setPreference ( "browser.helperApps.alwaysAsk.force" , false ) ; profile . setPreference ( "browser.download.manager.showWhenStarting" , false ) ; profile . setPreference ( "browser.download.manager.showAlertOnComplete" , false ) ; profile . setPreference ( "browser.download.manager.closeWhenDone" , true ) ; profile . setPreference ( "app.update.auto" , false ) ; profile . setPreference ( "app.update.enabled" , false ) ; profile . setPreference ( "dom.max_script_run_time" , 0 ) ; profile . setPreference ( "dom.max_chrome_script_run_time" , 0 ) ; profile . setPreference ( "browser.helperApps.neverAsk.saveToDisk" , "application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain" ) ; profile . setPreference ( "network.proxy.type" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ " , e ) ; } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ " , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1145/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1144/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1146/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1147/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1148/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1149/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1150/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1153/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1152/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1154/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1151/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1155/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1156/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1157/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1159/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1160/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestURL_1161/tree/master/uitest/src/com/vaadin/tests/tb3/AbstractTB3Test.java"> private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( "debug" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( "restartApplication" ) ; } if ( parameters . size ( ) > 0 ) { url += "?" + Joiner . on ( "&" ) . join ( parameters ) ; } driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testWithWebDriver_1158/tree/master/src/test/java/org/littleshoot/proxy/EndToEndStoppingTest.java"> public void function ( ) throws Exception { HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( 0 ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( "localhost:%d" , proxyServer . getListenAddress ( ) . getPort ( ) ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = "http: // www.yahoo.com/" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertThat ( source . length ( ) , greaterThan ( 100 ) ) ; driver . close ( ) ; proxyServer . abort ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testJsonDataLoaded_1162/tree/master/selenium/src/test/java/PagesPaymentTest.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( " // select[@id='displayed-currency']/option[@value='" + defaultCurrency + "']" ) ) ; List < WebElement > options = driver . findElements ( By . xpath ( " // select[@id='displayed-currency']/option" ) ) ; assertTrue ( options . size ( ) == currencies . size ( ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl_1164/tree/master/support/test/java/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1165/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testChangeCurrency_1163/tree/master/selenium/src/test/java/PagesPaymentTest.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( " // select[@id='displayed-currency']/option[@value='" + defaultCurrency + "']" ) ) ; for ( Entry < String , Map < String , String > > entry : membershipData . entrySet ( ) ) { String currency = entry . getKey ( ) ; Map < String , String > values = entry . getValue ( ) ; WebElement elt = driver . findElement ( By . xpath ( " // select[@id='displayed-currency']/option[@value='" + currency + "']" ) ) ; elt . click ( ) ; for ( Entry < String , String > value : values . entrySet ( ) ) { String klass = "msg-" + value . getKey ( ) ; if ( displayClasses . contains ( klass ) ) { String amount = value . getValue ( ) ; WebElement span = driver . findElement ( By . className ( klass ) ) ; assertTrue ( span . getText ( ) . equals ( amount ) ) ; } } } driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl_1168/tree/master/support/test/java/org/openqa/selenium/lift/TestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1166/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1167/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="LoginAspectTest_1169/tree/master/brjs-sdk/apps/it-app/default-aspect/test-integration/webdriver/LoginAspectTest.java"> public function ( ) throws Exception { driver = new FirefoxDriver ( ) ; driver . get ( baseUrl + "/login" ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1170/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase_1173/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void function ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOverriddenListingH1" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetOverriddenListingH1" ) ) . getText ( ) , "New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1172/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_1171/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertEquals ( "Keycloak ▁ Account ▁ Management" , driver . getTitle ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1175/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideListAssetBodyPartialTestCase_1174/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; assertTrue ( isElementPresent ( driver , By . className ( "assetOverriddenListingElement" ) ) ) ; assertEquals ( driver . findElement ( By . className ( "assetOverriddenListingElement" ) ) . getText ( ) , "New ▁ Asset ▁ List ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1176/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="fakeTypeURL_1179/tree/master/server/src/main/java/org/uiautomation/ios/command/web/GetHandler.java"> private void function ( String url ) { getWebDriver ( ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate_1180/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void function ( ) { } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1177/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1181/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void function ( ) { } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_1182/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="testUpdateNotification_1183/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherNotificationTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , "Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:" + currentUserName ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1178/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testBannerLoaded_1187/tree/master/selenium/src/test/java/JournalLandingPageTests.java"> public void function ( ) throws Exception { String pageUrl = baseUrl + goodPage ; driver . get ( pageUrl ) ; sleepMS ( pageLoadWait ) ; assertTrue ( xpathsPresent ( bannerParaXpaths ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testJsonDataLoaded_1185/tree/master/selenium/src/test/java/PagesMembershipOverviewTest.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + membershipOverviewPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( " // select[@id='displayed-currency']/option[@value='" + defaultCurrency + "']" ) ) ; List < WebElement > options = driver . findElements ( By . xpath ( " // select[@id='displayed-currency']/option" ) ) ; assertTrue ( options . size ( ) == currencies . size ( ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testBrowseButtons_1188/tree/master/selenium/src/test/java/JournalLandingPageTests.java"> public void function ( ) throws Exception { String pageUrl = baseUrl + goodPage ; driver . get ( pageUrl ) ; for ( int i = buttonMin ; i <= buttonMax ; ++ i ) { driver . findElement ( By . xpath ( String . format ( tabButtonFmt , i ) ) ) . click ( ) ; sleepMS ( clickWait ) ; assertTrue ( driver . findElement ( By . xpath ( String . format ( tabDivFmt , i ) ) ) . isDisplayed ( ) ) ; } driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testChangeCurrency_1184/tree/master/selenium/src/test/java/PagesPaymentPlanComparisonTool.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( plans ) ) ; String pageUrl = baseUrl + paymentPlanComparisonToolPage ; driver . get ( pageUrl ) ; WebElement btnCalculate = driver . findElement ( By . xpath ( calculateButtonXpath ) ) ; for ( PageResult r : pageResults ) { WebElement apy = driver . findElement ( By . xpath ( apyXpath ) ) ; apy . clear ( ) ; apy . sendKeys ( r . articlesPerYear ) ; WebElement pwd = driver . findElement ( By . xpath ( pwdXpath ) ) ; pwd . clear ( ) ; pwd . sendKeys ( r . percentageWithDeposits ) ; WebElement radio = null ; if ( r . under10m ) { radio = driver . findElement ( By . xpath ( under10mXpath ) ) ; } else { radio = driver . findElement ( By . xpath ( over10mXpath ) ) ; } radio . click ( ) ; btnCalculate . click ( ) ; sleepMS ( postClickSleepMS ) ; for ( int i = 0 ; i < plans . size ( ) ; ++ i ) { for ( int j = 0 ; j < columns . size ( ) ; ++ j ) { if ( r . error ) { assertTrue ( xpathsPresent ( r . errorXpaths ) ) ; } else { String xp = " // tr[@id='" + plans . get ( i ) + "']/td[@class='" + columns . get ( j ) + "']" ; WebElement cell = driver . findElement ( By . xpath ( xp ) ) ; String expected = r . table . get ( i ) . get ( j ) ; String got = cell . getText ( ) ; String msg = "Table ▁ value ▁ for ▁ " + xp + " ▁ expected ▁ '" + expected + "' ▁ got ▁ '" + got + "'" ; assertTrue ( msg , got . equals ( expected ) ) ; } } } btnCalculate . click ( ) ; } driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testChangeCurrency_1186/tree/master/selenium/src/test/java/PagesMembershipOverviewTest.java"> public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + membershipOverviewPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( " // select[@id='displayed-currency']/option[@value='" + defaultCurrency + "']" ) ) ; for ( Entry < String , Map < String , String > > entry : membershipData . entrySet ( ) ) { String currency = entry . getKey ( ) ; Map < String , String > values = entry . getValue ( ) ; WebElement elt = driver . findElement ( By . xpath ( " // select[@id='displayed-currency']/option[@value='" + currency + "']" ) ) ; elt . click ( ) ; for ( Entry < String , String > value : values . entrySet ( ) ) { String klass = value . getKey ( ) ; String amount = value . getValue ( ) ; WebElement span = driver . findElement ( By . className ( klass ) ) ; assertTrue ( span . getText ( ) . equals ( amount ) ) ; } } driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="logoutFromAdminConsole_1190/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/ESUtil.java"> public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( "Sign-out" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchForm_1189/tree/master/selenium/src/test/java/JournalLandingPageTests.java"> public void function ( ) throws Exception { String pageUrl = baseUrl + goodPage ; driver . get ( pageUrl ) ; sleepMS ( pageLoadWait ) ; WebElement form = driver . findElement ( By . xpath ( searchFormXpath ) ) ; WebElement input = driver . findElement ( By . xpath ( searchInputXpath ) ) ; assertTrue ( input . isDisplayed ( ) ) ; input . sendKeys ( searchText ) ; form . submit ( ) ; assertTrue ( driver . getTitle ( ) . equals ( searchResultsPageTitle ) ) ; String expectedUrlBasePath = baseUrl + searchUrlPath ; String actualUrlAll = driver . getCurrentUrl ( ) ; assertTrue ( actualUrlAll . length ( ) >= expectedUrlBasePath . length ( ) ) ; assertTrue ( actualUrlAll . substring ( 0 , expectedUrlBasePath . length ( ) ) . equals ( expectedUrlBasePath ) ) ; driver . close ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1192/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageLoad_1191/tree/master/selenium/src/test/java/PagesAllStaticPages.java"> public void function ( ) throws Exception { for ( String p : pageNames200 ) { String url = baseUrl + pageRoot + p ; driver . get ( url ) ; sleepMS ( loadSleep ) ; WebElement pnfDiv = null ; try { pnfDiv = driver . findElement ( By . id ( pageNotFoundId ) ) ; } catch ( NoSuchElementException e ) { } assertTrue ( "Not-found ▁ div ▁ found ▁ in ▁ page" , pnfDiv == null ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLinksFromPage_1194/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( "WSO2 ▁ Carbon ▁ Commits ▁ List ▁ Discussion" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "Gadget ▁ Details" , "Cannot ▁ reach ▁ asset ▁ details ▁ page ▁ from ▁ gadget ▁ list ▁ page" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1195/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1196/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1198/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGadgetPage_1193/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreGadgetPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( "Gadgets" ) ) ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "Gadgets" ) ) , "Gadgets ▁ heading ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( LINE_PLUS_BAR_CHART ) ) , LINE_PLUS_BAR_CHART + " ▁ Gadgets ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( LINE_CHART ) ) , LINE_CHART + " ▁ Gadgets ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "span.advanced-search-text" ) ) , "Advanced ▁ search ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "#sortDropdown ▁ > ▁ img" ) ) , "Sorting ▁ dropdown ▁ missing" ) ; assertEquals ( driver . findElement ( By . cssSelector ( "span.sort-asset-info" ) ) . getText ( ) , "( ▁ Date/Time ▁ Created ▁ )" ) ; driver . findElement ( By . cssSelector ( "#sortDropdown ▁ > ▁ img" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "POPULAR" ) ) , "Popular ▁ sort ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "NAME" ) ) , "Sort ▁ by ▁ name ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( "DATE/TIME ▁ CREATED" ) ) , "Sort ▁ by ▁ created ▁ date/time ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1197/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1199/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1200/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_1202/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1201/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreBookmarkTestCase_1204/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) ) ; String bookmarkedAsset = driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) . getText ( ) ; driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "btn-add-gadget" ) ) ) ; driver . findElement ( By . id ( "btn-add-gadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "main-bookmark" ) , "Bookmarked" ) ) ; assertEquals ( "Bookmarked" , driver . findElement ( By . id ( "main-bookmark" ) ) . getText ( ) , "Bookmarking ▁ failed" ) ; driver . findElement ( By . cssSelector ( ".bookmark-link-text" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.ast-title ▁ a.ast-name" ) ) ) ; assertEquals ( bookmarkedAsset , driver . findElement ( By . cssSelector ( "div.ast-title ▁ a.ast-name" ) ) . getText ( ) , "Bookmarked ▁ asset ▁ not ▁ shown ▁ in ▁ My ▁ Items ▁ page" ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictAddAssetAsReviewer_1207/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; assertTrue ( ! isElementPresent ( driver , By . id ( "Addgadget" ) ) , "User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ add ▁ " + "asset." ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_1205/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_VERSION , "" , "" , "" ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . get ( baseUrl + "/carbon/" ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( "NAME" ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( "NAME" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ " + "tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictEditAssetAsReviewer_1208/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "h3.ast-name" ) ) . click ( ) ; assertTrue ( ! isElementPresent ( driver , By . id ( "Edit" ) ) , "User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ edit ▁ " + "asset." ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictVersionAssetAsReviewer_1209/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "h3.ast-name" ) ) . click ( ) ; assertTrue ( ! isElementPresent ( driver , By . id ( "Version" ) ) , "User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ version" + "asset." ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictLoginToStoreAsReviewer_1210/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_TOP_ASSETS_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "btn-signin" ) ) ) ; driver . findElement ( By . id ( "btn-signin" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "You ▁ do ▁ not ▁ have ▁ permission ▁ to ▁ login ▁ to ▁ this" + " ▁ application.Please ▁ contact ▁ your ▁ administrator ▁ and ▁ request ▁ permission." ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase_1203/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . name ( "reg-email" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-email" ) ) . sendKeys ( NEW_USER_EMAIL ) ; driver . findElement ( By . name ( "reg-first-name" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-first-name" ) ) . sendKeys ( NEW_USER_FNAME ) ; driver . findElement ( By . name ( "reg-last-name" ) ) . clear ( ) ; driver . findElement ( By . name ( "reg-last-name" ) ) . sendKeys ( NEW_USER_LNAME ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . id ( "regFormSuc" ) ) , "User ▁ creation ▁ failed." ) ; driver . findElement ( By . id ( "signInLink" ) ) . click ( ) ; driver . findElementPoll ( By . id ( "username" ) , MAX_POLL_COUNT ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; WebElement userNameElement = driver . findElement ( By . id ( "logedInUser" ) ) ; assertEquals ( userNameElement . getText ( ) . trim ( ) , NEW_USER_NAME ) ; driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . id ( "txtUserName" ) ) . clear ( ) ; driver . findElement ( By . id ( "txtUserName" ) ) . sendKeys ( adminUserName ) ; driver . findElement ( By . id ( "txtPassword" ) ) . clear ( ) ; driver . findElement ( By . id ( "txtPassword" ) ) . sendKeys ( adminUserPwd ) ; driver . findElement ( By . cssSelector ( "input.button" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Users ▁ and ▁ Roles" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Users" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#userTable ▁ tbody ▁ tr:last-child ▁ td:nth-child(2) ▁ a:nth-child(5)" ) ) . click ( ) ; driver . findElement ( By . linkText ( "default" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( ".styledLeft ▁ tr:nth-child(7) ▁ input" ) ) . getAttribute ( "value" ) , NEW_USER_EMAIL , "Claims ▁ are ▁ not ▁ working ▁ properly." ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictLoginToPublisherAsStoreOnlyUser_1213/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsStoreUserTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "You ▁ do ▁ not ▁ have ▁ permission ▁ to ▁ login ▁ to ▁ this" + " ▁ application.Please ▁ contact ▁ your ▁ administrator ▁ and ▁ request ▁ permission." ) ; } </DOCUMENT>
<DOCUMENT_ID="addNewAsset_1206/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/AssetUtil.java"> public static void function ( WebDriver driver , String baseUrl , String assetType , String assetName , String version , String category , String url , String description ) { driver . get ( baseUrl + "/publisher/assets/" + assetType + "/list" ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Add" + assetType ) ) ) ; driver . findElement ( By . id ( "Add" + assetType ) ) . click ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( version ) ; if ( ! category . equals ( "" ) ) { new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( category ) ; } driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( url ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( description ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Add" + assetType ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1212/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="loginLoginHint_1214/tree/master/testsuite/integration/src/test/java/org/keycloak/testsuite/forms/LoginTest.java"> public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + "&login_hint=login-test" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( "login-test" , loginPage . getUsername ( ) ) ; loginPage . login ( "password" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , "login-test" ) . assertEvent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore_1211/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void function ( ) throws Exception { driver . findElement ( By . id ( "Add" + ASSET_TYPE ) ) . click ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( ASSET_NAME ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; driver . findElement ( By . id ( "LifeCycle" ) ) . click ( ) ; driver . findElement ( By . id ( "lcActionPromote" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( "lcActionPromote" ) ) . click ( ) ; driver . get ( baseUrl + STORE_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase_1216/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="resetUserPassword_1217/tree/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java"> public void function ( ) { String userId = createUser ( "user1" , "user1@localhost" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( "password" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; assertAdminEvents . assertEvent ( realmId , OperationType . ACTION , AdminEventPaths . userResetPasswordPath ( userId ) ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( "Log ▁ in ▁ to ▁ admin-client-test" , driver . getTitle ( ) ) ; loginPage . login ( "user1" , "password" ) ; assertTrue ( driver . getTitle ( ) . contains ( "Account ▁ Management" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_1219/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Edit" ) ) ) ; driver . findElement ( By . id ( "Edit" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_category" ) ) ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_1218/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherTenantAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElement ( By . id ( "Addgadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_name" ) ) ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(3) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_1220/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElement ( By . id ( "Addgadget" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_name" ) ) ) ; driver . findElement ( By . name ( "overview_name" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_name" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( "overview_version" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_version" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( "images_thumbnail" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/thumbnail.jpg" ) ; driver . findElement ( By . name ( "images_banner" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + "/../src/test/resources/images/banner.jpg" ) ; driver . findElement ( By . id ( "btn-create-asset" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Addgadget" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , "Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(3) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ version" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase_1222/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/assets/servicex/details" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOveriddenDetailsPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginToPublisher_1223/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; assertEquals ( "Asset ▁ | ▁ WSO2 ▁ Enterprise ▁ Store ▁ Publisher" , driver . getTitle ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( "/html/body/div/div[1]/header/div/div[2]/div/a/div/span" ) ) . getText ( ) , "Logged ▁ in ▁ user ▁ not ▁ shown" ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1215/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java"> public static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( "Firefox ▁ version ▁ " + firefoxVersion + " ▁ detected" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + "/firebug/" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + "firebug.xpi" ; final String firepathPath = tempPath + "firepath.xpi" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( "browser.download.folderList" , 2 ) ; profile . setPreference ( "browser.download.dir" , downLoadsDir ) ; profile . setPreference ( "browser.helperApps.alwaysAsk.force" , false ) ; profile . setPreference ( "browser.download.manager.showWhenStarting" , false ) ; profile . setPreference ( "browser.download.manager.showAlertOnComplete" , false ) ; profile . setPreference ( "browser.download.manager.closeWhenDone" , true ) ; profile . setPreference ( "app.update.auto" , false ) ; profile . setPreference ( "app.update.enabled" , false ) ; profile . setPreference ( "dom.max_script_run_time" , 0 ) ; profile . setPreference ( "dom.max_chrome_script_run_time" , 0 ) ; profile . setPreference ( "browser.helperApps.neverAsk.saveToDisk" , "application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain" ) ; profile . setPreference ( "network.proxy.type" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ " , e ) ; } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ " , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="testEditAsset_1221/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherAddEditAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "Edit" ) ) ) ; driver . findElement ( By . id ( "Edit" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( "overview_category" ) ) ) ; new Select ( driver . findElement ( By . name ( "overview_category" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( "overview_url" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_url" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( "overview_description" ) ) . clear ( ) ; driver . findElement ( By . name ( "overview_description" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( "editAssetButton" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ URL" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . cssSelector ( "#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)" ) ) . getText ( ) , "Incorrect ▁ description" ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageDisplay_1225/tree/master/selenium/src/test/java/HomePageTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; assertEquals ( "Dryad ▁ Digital ▁ Repository ▁ - ▁ Dryad" , driver . getTitle ( ) ) ; assertTrue ( "recently ▁ published ▁ list" , isElementPresent ( By . cssSelector ( "li.ds-artifact-item.even" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1228/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1226/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1229/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_1230/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase_1224/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/assets/servicex/new_caramel_page" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; assertTrue ( isElementPresent ( driver , By . id ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( driver , By . id ( "Edit" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testJournalMetadataImport_1227/tree/master/selenium/src/test/java/SubmissionTest.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "login-item" ) ) . click ( ) ; driver . findElement ( By . id ( "aspect_eperson_PasswordLogin_field_login_email" ) ) . clear ( ) ; driver . findElement ( By . id ( "aspect_eperson_PasswordLogin_field_login_email" ) ) . sendKeys ( "seleniumtest@datadryad.org" ) ; driver . findElement ( By . id ( "aspect_eperson_PasswordLogin_field_login_password" ) ) . clear ( ) ; driver . findElement ( By . id ( "aspect_eperson_PasswordLogin_field_login_password" ) ) . sendKeys ( "seleniumtest" ) ; WebElement loginBox = driver . findElement ( By . id ( "aspect_eperson_PasswordLogin_div_login" ) ) ; loginBox . findElement ( By . id ( "aspect_eperson_PasswordLogin_field_submit" ) ) . click ( ) ; driver . get ( baseUrl + "/handle/10255/3/submit?journalID=MolEcol&manu=test-accept" ) ; driver . findElement ( By . name ( "license_accept" ) ) . click ( ) ; driver . findElement ( By . id ( "aspect_submission_StepTransformer_field_submit_next" ) ) . click ( ) ; assertEquals ( "Dryad ▁ Submission ▁ - ▁ Dryad" , driver . getTitle ( ) ) ; assertTrue ( "imported ▁ keywords ▁ contain ▁ Nummulites" , idContains ( "aspect_submission_StepTransformer_div_submit-describe-publication" , "Nummulites" ) ) ; driver . findElement ( By . id ( "aspect_submission_StepTransformer_field_submit_cancel" ) ) . click ( ) ; driver . findElement ( By . id ( "aspect_submission_submit_SaveOrRemoveStep_field_submit_remove" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="openTestUrl_1231/tree/master/rice-tools-test/src/main/java/org/kuali/rice/testtools/selenium/WebDriverUtils.java"> public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , "ff" ) . equals ( "opera" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , "Open ▁ URL" , false , "Open ▁ " + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase_1232/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1235/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase_1237/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1238/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1236/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreLogout_1234/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "logedInUser" ) ) ) ; driver . findElement ( By . id ( "logedInUser" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( ".dropdown-account ▁ a" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "ul.navbar-right ▁ li:first-child ▁ span.ro-text" ) ) ) ; assertEquals ( "sign ▁ in" , driver . findElement ( By . cssSelector ( "ul.navbar-right ▁ li:first-child ▁ span.ro-text" ) ) . getText ( ) . toLowerCase ( ) , "Sign ▁ in ▁ link ▁ missing" ) ; assertEquals ( "register" , driver . findElement ( By . cssSelector ( "a#btn-register ▁ span.ro-text" ) ) . getText ( ) . toLowerCase ( ) , "Register ▁ button ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1239/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1241/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreLogin_1233/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreLoginLogoutTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( "ul.navbar-right ▁ li:first-child ▁ a" ) ) ) ; driver . findElement ( By . cssSelector ( "ul.navbar-right ▁ li:first-child ▁ a" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "username" ) ) ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "logedInUser" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1242/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1243/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1240/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase_1247/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAssetListingPage_1248/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreCarbonSuperUserTUHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "div.app-logo ▁ a" ) ) , "Asset ▁ listing ▁ page ▁ error: ▁ Logo ▁ missing" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelfSignUpForm_1246/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESSelfSignUpTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Configure')]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Claim ▁ Management" ) ) . click ( ) ; driver . findElement ( By . linkText ( "http: // wso2.org/claims" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Country')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[@href='update-claim.jsp?dialect=http: // wso2.org/claims&claimUri=http: // wso2.org/claims/country']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // input[@id='required']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // input[@value='Update']" ) ) . click ( ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( driver , By . name ( "reg-country" ) ) , "New ▁ claim ▁ is ▁ not ▁ shown ▁ up ▁ in ▁ sign ▁ up ▁ form" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSubscriptionCreation_1245/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/notifications/ESPublisherTenantSubscriptionTestCase.java"> public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_VERSION , "" , "" , "" ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . linkText ( "Gadgets" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( "#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ tr.tableOddRow ▁ > ▁ td" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( " // table[@id='subscriptionsTable']/tbody/tr[3]/td" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase_1249/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase_1251/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase_1244/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideRendererTestCase.java"> public void function ( ) throws Exception { driver . get ( lifecycleUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetLifecyclePartial" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetLifecyclePartial" ) ) . getText ( ) , "Asset ▁ Overridden ▁ Lifecycle ▁ through ▁ renderer" ) ; } </DOCUMENT>
<DOCUMENT_ID="testListPageSortByName_1250/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . cssSelector ( "#dropdownMenu1 ▁ > ▁ img" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Name" ) ) . click ( ) ; assertEquals ( NAME_SORT_ASSET_1 , driver . findElement ( By . xpath ( "/html/body/div/div[3]/div/div[3]/div/div[1]/div/div/a/h3" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; assertEquals ( NAME_SORT_ASSET_2 , driver . findElement ( By . xpath ( "/html/body/div/div[3]/div/div[3]/div/div[2]/div/div/a/h3" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase_1252/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/service/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase_1254/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverridePartialTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/update" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAsset_1253/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreSearchGadgetListTestCase.java"> public void function ( ) throws Exception { ESUtil . login ( driver , baseUrl , "publisher" , userInfo . getUserName ( ) , userInfo . getPassword ( ) ) ; AssetUtil . addNewAsset ( driver , baseUrl , assetType , assetName , assetVersion , assetCategory , assetURL , assetDescription ) ; driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; driver . findElementPoll ( By . linkText ( assetName ) , 10 ) ; AssetUtil . publishAssetToStore ( driver , assetName ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase_1255/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetCaramelPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnPopularity_1256/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "i.icon-star" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( "h4" ) , popularAsset1 ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h4" ) ) . getText ( ) , popularAsset1 , "Popularity ▁ Sort ▁ failed" ) ; assertEquals ( driver . findElement ( By . xpath ( " // div[@id='assets-container']/div/div[2]/div/div/a/h4" ) ) . getText ( ) , popularAsset2 , "Popularity ▁ Sort ▁ failed" ) ; } * / </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnCreatedTime_1258/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnAlphabeticalOrder_1257/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "sortDropdown" ) ) ) ; driver . findElement ( By . cssSelector ( "#sortDropdown ▁ > ▁ img" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#ul-sort-assets ▁ li:nth-child(2) ▁ a" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; assertEquals ( WSO2_JIRA , driver . findElement ( By . cssSelector ( ".assets-container ▁ section ▁ div.ctrl-wr-asset:nth-child(2) ▁ a.ast-name" ) ) . getText ( ) , "Alphabetical ▁ Sort ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase_1262/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideRendererTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/lifecycle" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryGoogle_1259/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "advanced-search-btn" ) ) ) ; driver . findElement ( By . id ( "advanced-search-btn" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "search-button2" ) ) ) ; driver . findElement ( By . id ( "search-button2" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.ctrl-wr-asset" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "div.ctrl-wr-asset" ) ) , "Google ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryWSO2_1260/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "advanced-search-btn" ) ) ) ; driver . findElement ( By . id ( "advanced-search-btn" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "search-button2" ) ) ) ; new Select ( driver . findElement ( By . id ( "overview_category" ) ) ) . selectByVisibleText ( "WSO2" ) ; driver . findElement ( By . id ( "search-button2" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.ctrl-wr-asset" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "div.ctrl-wr-asset" ) ) , "WSO2 ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase_1264/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "servicexNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase_1263/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( "popoverExampleTwo" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( ASSET_TYPE ) ) . getText ( ) , ASSET_TYPE ) ; driver . findElement ( By . linkText ( ASSET_TYPE ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . linkText ( ASSET_TYPE_PLURAL ) ) ) ; assertTrue ( isElementPresent ( driver , By . xpath ( " // h2[@class='app-title']" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCategoryTemplate_1261/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "advanced-search-btn" ) ) ) ; driver . findElement ( By . id ( "advanced-search-btn" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( "search-button2" ) ) ) ; new Select ( driver . findElement ( By . id ( "overview_category" ) ) ) . selectByVisibleText ( "Templates" ) ; driver . findElement ( By . id ( "search-button2" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( "div.ctrl-wr-asset" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( "div.ctrl-wr-asset" ) ) , "WSO2 ▁ Category ▁ wrong" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase_1265/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/list" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase_1267/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetOverrideExistingPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1266/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase_1268/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase_1270/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonAssetListingPage_1271/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonTenantHomePageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".ctrl-wr-asset" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( ".app-logo" ) ) , "Home ▁ Page ▁ error: ▁ Logo ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( ".ctrl-wr-asset" ) ) , "Home ▁ Page ▁ error: ▁ Gadgets ▁ list ▁ is ▁ not ▁ populated" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreBeforeAddRatings_1269/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( "socialIfr" ) ) ) ; assertEquals ( "Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review" , driver . findElement ( By . cssSelector ( "div.com-guest" ) ) . getText ( ) ) ; assertEquals ( "Be ▁ the ▁ first ▁ one ▁ to ▁ review!" , driver . findElement ( By . cssSelector ( "p.com-first-review" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_1274/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = waitFor ( alertToBePresent ( driver ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="performImplicitGrant_1275/tree/master/apis-authorization-server-war/src/test/java/org/surfnet/oaaas/selenium/ImplicitGrantTestIT.java"> private void function ( boolean needConsent ) { WebDriver webdriver = getWebDriver ( ) ; String responseType = "token" ; String clientId = "it-test-client-grant" ; String redirectUri = "http: // localhost:8080/fourOhFour" ; String url = String . format ( "%s/oauth2/authorize?response_type=%s&client_id=%s&redirect_uri=%s" , baseUrl ( ) , responseType , clientId , redirectUri ) ; webdriver . get ( url ) ; login ( webdriver , needConsent ) ; URI responseURI = URI . create ( webdriver . getCurrentUrl ( ) ) ; assertThat ( responseURI . getFragment ( ) , containsString ( "access_token=" ) ) ; assertThat ( responseURI . getPath ( ) , equalTo ( "/fourOhFour" ) ) ; assertThat ( responseURI . getHost ( ) , equalTo ( "localhost" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1272/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl_1278/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="findElementPoll_1277/tree/master/modules/integration/tests-ui-integration/ui-test-utils/src/main/java/org/wso2/es/ui/integration/util/ESWebDriver.java"> public void function ( By by , int pollCount ) throws InterruptedException { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { Thread . sleep ( POLL_SLEEP_INTERVAL ) ; String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl_1279/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1276/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1280/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1282/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1283/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase_1284/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1285/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1281/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1287/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1286/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="ResetPasswordPage_1289/tree/master/src/integration/java/org/mamute/integration/pages/ResetPasswordPage.java"> public function ( WebDriver driver , String url ) { super ( driver ) ; driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1288/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase_1290/tree/master/modules/integration/selenium/generated/store/extensions/app/ESStoreNewGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase_1291/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherOverridenGlobalPageTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1292/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase_1293/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAddedAssetTestCase.java"> public void function ( ) throws Exception { driver . get ( baseUrl + "/publisher/" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1295/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1294/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1296/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1297/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_1299/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; WebElement element = wait . until ( presenceOfElementLocated ( By . tagName ( "h1" ) ) ) ; assertEquals ( "authorized" , element . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1298/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1273/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1300/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1302/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1301/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1304/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1305/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1306/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1303/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetInfoFromSecurityContext_1307/tree/master/uberfire-workbench/uberfire-workbench-client-tests/src/test/java/org/uberfire/wbtest/selenium/UserCookieTest.java"> public void function ( ) throws Exception { User user = makeTestUser ( ) ; String jsonUser = UserCookieEncoder . toCookieValue ( user ) ; driver . get ( baseUrl + "blank.html" ) ; driver . manage ( ) . addCookie ( new Cookie ( UserCookieEncoder . USER_COOKIE_NAME , jsonUser , "/" , new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 24 ) ) ) ; driver . get ( baseUrl ) ; waitForDefaultPerspective ( ) ; driver . get ( baseUrl + "#" + SecurityContextInfoScreen . class . getName ( ) ) ; WebElement userLabel = driver . findElement ( By . id ( "gwt-debug-SecurityStatusScreen-userLabel" ) ) ; assertEquals ( user . getIdentifier ( ) , userLabel . getText ( ) ) ; WebElement rolesLabel = driver . findElement ( By . id ( "gwt-debug-SecurityStatusScreen-rolesLabel" ) ) ; assertEquals ( user . getRoles ( ) . toString ( ) , rolesLabel . getText ( ) ) ; WebElement groupsLabel = driver . findElement ( By . id ( "gwt-debug-SecurityStatusScreen-groupsLabel" ) ) ; assertEquals ( user . getGroups ( ) . toString ( ) , groupsLabel . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetInfoFromInjectedUser_1308/tree/master/uberfire-workbench/uberfire-workbench-client-tests/src/test/java/org/uberfire/wbtest/selenium/UserCookieTest.java"> public void function ( ) throws Exception { User user = makeTestUser ( ) ; String jsonUser = UserCookieEncoder . toCookieValue ( user ) ; driver . get ( baseUrl + "blank.html" ) ; driver . manage ( ) . addCookie ( new Cookie ( UserCookieEncoder . USER_COOKIE_NAME , jsonUser , "/" , new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 24 ) ) ) ; driver . get ( baseUrl ) ; waitForDefaultPerspective ( ) ; driver . get ( baseUrl + "#" + InjectedUserScreen . class . getName ( ) ) ; WebElement userLabel = driver . findElement ( By . id ( "gwt-debug-SecurityStatusScreen-userLabel" ) ) ; assertEquals ( user . getIdentifier ( ) , userLabel . getText ( ) ) ; WebElement rolesLabel = driver . findElement ( By . id ( "gwt-debug-SecurityStatusScreen-rolesLabel" ) ) ; assertEquals ( user . getRoles ( ) . toString ( ) , rolesLabel . getText ( ) ) ; WebElement groupsLabel = driver . findElement ( By . id ( "gwt-debug-SecurityStatusScreen-groupsLabel" ) ) ; assertEquals ( user . getGroups ( ) . toString ( ) , groupsLabel . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1311/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1313/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="requestsProcessedByProxy_1310/tree/master/test/java/src/test/java/ghostdriver/RuntimeProxySetupTest.java"> public void function ( ) { proxy . newHar ( url . toString ( ) ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; JsonObject har = proxy . har ( ) ; assertNotNull ( har ) ; String firstUrlLoaded = har . getAsJsonObject ( "log" ) . getAsJsonArray ( "entries" ) . get ( 0 ) . getAsJsonObject ( ) . getAsJsonObject ( "request" ) . getAsJsonPrimitive ( "url" ) . getAsString ( ) ; assertEquals ( url . toString ( ) , firstUrlLoaded ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1314/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1312/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1309/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="getUIs_1316/tree/master/uitest/src/com/vaadin/tests/integration/JSPIntegrationTest.java"> private List < UIData > function ( ) { List < UIData > uis = new ArrayList < UIData > ( ) ; getDriver ( ) . get ( jspUrl ) ; List < WebElement > rows = getDriver ( ) . findElements ( By . xpath ( " // tr[@class='uirow']" ) ) ; for ( WebElement row : rows ) { UIData data = new UIData ( ) ; List < WebElement > tds = row . findElements ( By . xpath ( "./td" ) ) ; data . serviceName = tds . get ( 0 ) . getText ( ) ; data . uiId = Integer . parseInt ( tds . get ( 2 ) . getText ( ) ) ; uis . add ( data ) ; } return uis ; } </DOCUMENT>
<DOCUMENT_ID="deleteAllCookies_1317/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( "fish1" , "cod" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( "fish2" , "tune" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( "/common" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( "/common" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_1318/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1320/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1319/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1322/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1323/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl_1325/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="listVaadinSessions_1315/tree/master/uitest/src/com/vaadin/tests/integration/JSPIntegrationTest.java"> public void function ( ) { assertUICount ( 0 ) ; getDriver ( ) . get ( integrationUrl ) ; assertUICount ( 1 ) ; getDriver ( ) . get ( integrationUrl ) ; List < UIData > twoUIs = getUIs ( ) ; assertEquals ( 2 , twoUIs . size ( ) ) ; assertNotEquals ( twoUIs . get ( 0 ) . uiId , twoUIs . get ( 1 ) . uiId ) ; assertEquals ( twoUIs . get ( 0 ) . serviceName , twoUIs . get ( 1 ) . serviceName ) ; getDriver ( ) . get ( appRunnerTestUrl ) ; List < UIData > threeUIs = getUIs ( ) ; assertEquals ( 3 , threeUIs . size ( ) ) ; Set < String > serviceNames = new HashSet < String > ( ) ; Set < Integer > uiIds = new HashSet < Integer > ( ) ; for ( UIData uiData : threeUIs ) { serviceNames . add ( uiData . serviceName ) ; uiIds . add ( uiData . uiId ) ; } assertGreaterOrEqual ( "There ▁ should ▁ be ▁ at ▁ least ▁ two ▁ unique ▁ service ▁ names" , serviceNames . size ( ) , 2 ) ; assertGreaterOrEqual ( "There ▁ should ▁ be ▁ at ▁ least ▁ two ▁ unique ▁ ui ▁ ids" , uiIds . size ( ) , 2 ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl_1326/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1328/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1324/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1321/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1330/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction_1329/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void function ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage_1331/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport_1333/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1327/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability_1332/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( "simpleTest.html" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( "Hello ▁ WebDriver" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports_1334/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports_1335/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter_1337/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode_1338/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1339/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1340/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1342/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink_1336/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1341/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden_1345/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute_1347/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1343/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem_1346/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( "overflow-body.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( "resultsFrame" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute_1348/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void function ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage_1344/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow_1350/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void function ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication_1353/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void function ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates_1352/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl_1354/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1349/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java"> private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( "url" ) != null ) { url = System . getProperty ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl_1355/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void function ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldCreateASeparateSessionWithEveryNewDriverInstance_1356/tree/master/test/ghostdriver-test/java/src/test/java/ghostdriver/IsolatedSessionTest.java"> public void function ( ) { WebDriver d = getDriver ( ) ; d . get ( url ) ; Set < Cookie > newSessionCookies = d . manage ( ) . getCookies ( ) ; for ( Cookie c : sessionCookies ) { assertFalse ( newSessionCookies . contains ( c ) ) ; } for ( Cookie c : newSessionCookies ) { assertFalse ( sessionCookies . contains ( c ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="getWebDriver_1351/tree/master/zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java"> public static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( "true" . equals ( System . getenv ( "TRAVIS" ) ) ) { ffox . setEnvironmentProperty ( "DISPLAY" , ":99" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( "Firefox ▁ version ▁ " + firefoxVersion + " ▁ detected" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + "/firebug/" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + "firebug.xpi" ; final String firepathPath = tempPath + "firepath.xpi" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( "browser.download.folderList" , 2 ) ; profile . setPreference ( "browser.download.dir" , downLoadsDir ) ; profile . setPreference ( "browser.helperApps.alwaysAsk.force" , false ) ; profile . setPreference ( "browser.download.manager.showWhenStarting" , false ) ; profile . setPreference ( "browser.download.manager.showAlertOnComplete" , false ) ; profile . setPreference ( "browser.download.manager.closeWhenDone" , true ) ; profile . setPreference ( "app.update.auto" , false ) ; profile . setPreference ( "app.update.enabled" , false ) ; profile . setPreference ( "dom.max_script_run_time" , 0 ) ; profile . setPreference ( "dom.max_chrome_script_run_time" , 0 ) ; profile . setPreference ( "browser.helperApps.neverAsk.saveToDisk" , "application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain" ) ; profile . setPreference ( "network.proxy.type" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ " , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ " , e ) ; } } String url ; if ( System . getenv ( "url" ) != null ) { url = System . getenv ( "url" ) ; } else { url = "http: // localhost:8080" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( AbstractZeppelinIT . MAX_IMPLICIT_WAIT , TimeUnit . SECONDS ) ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( "Create ▁ new ▁ note" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( "Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ " , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } </DOCUMENT>
