<DOCUMENT_ID="user_with_email_logs_onto_the_site/tree/master/src/test/java/uk/co/hmtt/cukes/core/steps/Booking.java"> public void user_with_email_logs_onto_the_site ( String email ) throws Throwable { final User user = new User ( ) ; user . setEmail ( email ) ; user . setPasscode ( PASS_CODE ) ; if ( runtimeScope . getWebDriver ( ) != null ) { runtimeScope . getWebDriver ( ) . quit ( ) ; runtimeScope . setWebDriver ( null ) ; } final WebDriver webDriver = webDriverFactory . newInstance ( runtimeScope . getScenario ( ) ) ; runtimeScope . setWebDriver ( webDriver ) ; webDriver . get ( gymBookerUrl ) ; logonToGym . logon ( user ) ; } </DOCUMENT>
<DOCUMENT_ID="the_user_logs_onto_the_mobile_site/tree/master/src/test/java/uk/co/hmtt/cukes/core/steps/Mobile.java"> public void the_user_logs_onto_the_mobile_site ( String email ) throws Throwable { final User user = new User ( ) ; user . setEmail ( email ) ; user . setPasscode ( PASS_CODE ) ; if ( runtimeScope . getWebDriver ( ) != null ) { runtimeScope . getWebDriver ( ) . quit ( ) ; runtimeScope . setWebDriver ( null ) ; } final WebDriver webDriver = webDriverFactory . newInstance ( runtimeScope . getScenario ( ) ) ; final Dimension dimension = new Dimension ( 420 , 600 ) ; webDriver . manage ( ) . window ( ) . setSize ( dimension ) ; runtimeScope . setWebDriver ( webDriver ) ; webDriver . get ( gymBookerUrl ) ; logonToGym . logon ( user ) ; } </DOCUMENT>
<DOCUMENT_ID="the_user_cannot_access_site/tree/master/src/test/java/uk/co/hmtt/cukes/core/steps/Logon.java"> public void the_user_cannot_access_site ( ) throws Throwable { runtimeScope . getWebDriver ( ) . get ( gymBookerUrl ) ; ( ( CukesWebDriver ) runtimeScope . getWebDriver ( ) ) . takeScreenShot ( ) ; assertThat ( runtimeScope . getWebDriver ( ) . getCurrentUrl ( ) , containsString ( "login" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testWSO2FormatTestCase/tree/master/src/main/resources/WSO2FormatTestCaseTweakP1.java"> public void testWSO2FormatTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testWSO2FormatTestCase/tree/master/src/main/resources/aaWSO2FormatTestCase.java"> public void testWSO2FormatTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="navigate_to_web_page_headless/tree/master/src/test/java/com/jawbone/lib/Env_html.java"> public void navigate_to_web_page_headless ( String url , String Suburl ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( "================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ " + given_url ) ; driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( "================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ " + getter_url ) ; Print_out ( "" ) ; print_page_title_h ( ) ; } </DOCUMENT>
<DOCUMENT_ID="Navigate_to_intern_web_page/tree/master/src/test/java/com/jawbone/lib/Env.java"> public void Navigate_to_intern_web_page ( String url , String Suburl ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( "================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ " + given_url ) ; </DOCUMENT>
<DOCUMENT_ID="testSignUpFailedOnInvalidPassword/tree/master/src/test/java/com/iBase/web/SignUpFailedPasswordTest.java"> public void testSignUpFailedOnInvalidPassword ( ) throws Exception { driver . get ( baseUrl + "/iBase/signup" ) ; driver . findElement ( By . id ( "firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "firstName" ) ) . sendKeys ( "Jake" ) ; driver . findElement ( By . id ( "lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "lastName" ) ) . sendKeys ( "Krammer" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "jake123@asu.edu" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "pass1" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "password ▁ must ▁ be ▁ atleast ▁ 6 ▁ characters!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGoToSignUp/tree/master/src/test/java/com/iBase/web/SignUpTest.java"> public void testGoToSignUp ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . cssSelector ( "a ▁ > ▁ font" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Registration" , driver . findElement ( By . cssSelector ( "h2" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpFailedOnInvalidEmail/tree/master/src/test/java/com/iBase/web/SignUpFailedEmailTest.java"> public void testSignUpFailedOnInvalidEmail ( ) throws Exception { driver . get ( baseUrl + "/iBase/signup" ) ; driver . findElement ( By . id ( "firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "firstName" ) ) . sendKeys ( "Jake" ) ; driver . findElement ( By . id ( "lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "lastName" ) ) . sendKeys ( "Krammer" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "jake123" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "invalid ▁ email ▁ address!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testUploadFailedOnWrongImageType/tree/master/src/test/java/com/iBase/web/UploadFailedTest.java"> public void testUploadFailedOnWrongImageType ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; driver . get ( baseUrl + "/iBase/upload" ) ; driver . findElement ( By . name ( "imageFile" ) ) . sendKeys ( "/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif" ) ; driver . findElement ( By . id ( "name" ) ) . sendKeys ( "gif ▁ image" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Sorry! ▁ Invalid ▁ File!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; assertEquals ( "Upload" , driver . findElement ( By . linkText ( "Upload" ) ) . getText ( ) ) ; assertEquals ( "Settings" , driver . findElement ( By . linkText ( "Settings" ) ) . getText ( ) ) ; assertEquals ( "Logout" , driver . findElement ( By . linkText ( "Logout" ) ) . getText ( ) ) ; assertEquals ( "Share ▁ your ▁ photo ▁ with ▁ the ▁ world!" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( "" , driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . getText ( ) ) ; assertEquals ( "Title:" , driver . findElement ( By . id ( "imageFile" ) ) . getText ( ) ) ; assertEquals ( "Home" , driver . findElement ( By . linkText ( "Home" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginFailedOnInvalidUsernameAndPassword/tree/master/src/test/java/com/iBase/web/LoginFailedTest.java"> public void testLoginFailedOnInvalidUsernameAndPassword ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake1234@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "Invalid ▁ username ▁ and ▁ password!" , driver . findElement ( By . cssSelector ( "div.error" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSettingsFailedOnWrongImageType/tree/master/src/test/java/com/iBase/web/SettingsFailedTest.java"> public void testSettingsFailedOnWrongImageType ( ) throws Exception { driver . get ( baseUrl + "/iBase/login" ) ; driver . findElement ( By . name ( "userId" ) ) . clear ( ) ; driver . findElement ( By . name ( "userId" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; driver . get ( baseUrl + "/iBase/settings" ) ; driver . findElement ( By . name ( "profileImageFile" ) ) . sendKeys ( "/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Home" , driver . findElement ( By . linkText ( "Home" ) ) . getText ( ) ) ; assertEquals ( "Upload" , driver . findElement ( By . linkText ( "Upload" ) ) . getText ( ) ) ; assertEquals ( "Settings" , driver . findElement ( By . linkText ( "Settings" ) ) . getText ( ) ) ; assertEquals ( "iBase ▁ - ▁ Image ▁ Database" , driver . getTitle ( ) ) ; assertEquals ( "Logout" , driver . findElement ( By . linkText ( "Logout" ) ) . getText ( ) ) ; assertEquals ( "Update ▁ your ▁ profile ▁ picture!" , driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) ) ; assertEquals ( "" , driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . getText ( ) ) ; assertEquals ( "Sorry! ▁ Invalid ▁ File!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSignUpFailedOnUsernameTaken/tree/master/src/test/java/com/iBase/web/SignUpFailedUsernameTest.java"> public void testSignUpFailedOnUsernameTaken ( ) throws Exception { driver . get ( baseUrl + "/iBase/signup" ) ; driver . findElement ( By . id ( "firstName" ) ) . clear ( ) ; driver . findElement ( By . id ( "firstName" ) ) . sendKeys ( "Jake" ) ; driver . findElement ( By . id ( "lastName" ) ) . clear ( ) ; driver . findElement ( By . id ( "lastName" ) ) . sendKeys ( "Krammer" ) ; driver . findElement ( By . id ( "email" ) ) . clear ( ) ; driver . findElement ( By . id ( "email" ) ) . sendKeys ( "jake@asu.edu" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "password1" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Username ▁ Taken!" , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testPromoteToInReview/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToInReview.java"> public void testPromoteToInReview ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , "supertenantuser ▁ changed ▁ the ▁ asset ▁ from ▁ Created ▁ to ▁ In-Review" ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateSuperTenantUser/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/CreateSuperTenantUser.java"> public void testCreateSuperTenantUser ( ) throws Exception { driver . get ( baseUrl + "/store/" ) ; driver . findElement ( By . id ( "btn-register" ) ) . click ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-username" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "reg-password" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "reg-password2" ) ) . clear ( ) ; driver . findElement ( By . id ( "reg-password2" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "registrationSubmit" ) ) . click ( ) ; try { assertEquals ( "supertenantuser" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testPromoteToPublishedTenant/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToPublishedTenant.java"> public void testPromoteToPublishedTenant ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "Published" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; assertEquals ( val . getText ( ) , "tenantAdmin ▁ changed ▁ the ▁ asset ▁ from ▁ In-Review ▁ to ▁ Published" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSortByPopDefaults/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestSortByPopDefaults.java"> public void testSortByPopDefaults ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . cssSelector ( "i.icon-star" ) ) . click ( ) ; assertEquals ( 12 , driver . findElements ( By . cssSelector ( ".asset-icon" ) ) . size ( ) ) ; JavascriptExecutor jsx = ( JavascriptExecutor ) driver ; jsx . executeScript ( "window.scrollBy(0,5000)" , "" ) ; assertEquals ( 16 , driver . findElements ( By . cssSelector ( ".asset-icon" ) ) . size ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLoginAsSuperTenantUser/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsSuperTenantUser.java"> public void testLoginAsSuperTenantUser ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "supertenantuser" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "supertenantuser" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testPromoteToInReviewTenant/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/PromoteToInReviewTenant.java"> public void testPromoteToInReviewTenant ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Life ▁ Cycle" ) ) . click ( ) ; driver . findElement ( By . id ( "In-Review" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( " // table[@id='lc-history'] // tr" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( "./td[2]" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , "tenantUser ▁ changed ▁ the ▁ asset ▁ from ▁ Created ▁ to ▁ In-Review" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSortByPopAfterReview/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestSortByPopAfterReview.java"> public void testSortByPopAfterReview ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . xpath ( "(( // div[@class='span3 ▁ asset'])[8]) // a" ) ) . click ( ) ; String populerAsset = driver . getCurrentUrl ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; </DOCUMENT>
<DOCUMENT_ID="testIfAssetAddedToPublisher/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestIfAssetAddedToPublisher.java"> public void testIfAssetAddedToPublisher ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/" ) ; assertTrue ( isElementPresent ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testIfAssetAddedToStoreTenant/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/TestIfAssetAddedToStoreTenant.java"> public void testIfAssetAddedToStoreTenant ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . xpath ( " // a[contains(text(),\"userAddedAsset\")]" ) ) . click ( ) ; try { assertEquals ( "by ▁ tenantUser" , driver . findElement ( By . xpath ( " // div[@id='container-assets'] // small[2]" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginAsTenantAdmin/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsTenantAdmin.java"> public void testLoginAsTenantAdmin ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "tenantAdmin@mytestdomain.com" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "admin1234" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "tenantAdmin" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testLoginAsTenantUser/tree/master/examples/src/main/java/com/crawljax/plugins/testilizer/casestudies/eshop/originaltests/LoginAsTenantUser.java"> public void testLoginAsTenantUser ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget" ) ; driver . findElement ( By . linkText ( "Sign ▁ in" ) ) . click ( ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "tenantUser@mytestdomain.com" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "tenantUser" ) ; driver . findElement ( By . xpath ( " // button[@type='submit']" ) ) . click ( ) ; try { assertEquals ( "tenantUser" , driver . findElement ( By . cssSelector ( "ul.nav ▁ li ▁ a.dropdown-toggle" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="getDynamicContentFromUrl/tree/master/src/main/java/org/bg/winddata/DynamicContentScraper.java"> public String getDynamicContentFromUrl ( String url ) { </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testSelenuimTooSmallNumber/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void testSelenuimTooSmallNumber ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Invalid ▁ move ▁ , ▁ try ▁ again" , driver . findElement ( By . xpath ( " // div[@id='results']/pre[2]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelenuimTooLargeNumber/tree/master/src/selenium/java/is/kings/TicTacToeWebTest.java"> public void testSelenuimTooLargeNumber ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( "New ▁ Game" ) ) . click ( ) ; driver . findElement ( By . id ( "number" ) ) . clear ( ) ; driver . findElement ( By . id ( "number" ) ) . sendKeys ( "10" ) ; driver . findElement ( By . cssSelector ( "button[type=\"submit\"]" ) ) . click ( ) ; assertEquals ( "Invalid ▁ move ▁ , ▁ try ▁ again" , driver . findElement ( By . xpath ( " // div[@id='results']/pre[2]" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/src/test/java/com/youtube/SampleTestNgTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testEZRxInitialPage/tree/master/src/test/java/com/bna/ezrxlookup/ui/web/EZRxInitialPage.java"> public void testEZRxInitialPage ( ) throws Exception { driver . get ( baseUrl + "/EZRxLookup" ) ; try { assertTrue ( isElementPresent ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testEZRxLookupResultPageNoNegativeNoRecalls/tree/master/src/test/java/com/bna/ezrxlookup/ui/web/EZRxBusinessTests.java"> public void testEZRxLookupResultPageNoNegativeNoRecalls ( ) throws Exception { try { driver . get ( baseUrl + "/EZRxLookup/" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "51439-007-02" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:search" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 10 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( "label" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; assertEquals ( "ACNE ▁ CLEARNING ▁ TREATMENT ▁ FACE" , driver . findElement ( By . id ( "j_idt5:j_idt19:cmdBName" ) ) . getText ( ) ) ; WebElement element = driver . findElement ( By . id ( "j_idt5:j_idt19:j_idt28" ) ) ; String path = element . getAttribute ( "src" ) ; assert ( path . contains ( "green" ) ) ; } catch ( Error e ) { verificationErrors . append ( e ) ; } } </DOCUMENT>
<DOCUMENT_ID="testEZRxLookupResultPageRecallsFound/tree/master/src/test/java/com/bna/ezrxlookup/ui/web/EZRxBusinessTests.java"> public void testEZRxLookupResultPageRecallsFound ( ) throws Exception { try { driver . get ( baseUrl + "/EZRxLookup/" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . clear ( ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:drugName_input" ) ) . sendKeys ( "43598-209-53" ) ; driver . findElement ( By . id ( "j_idt5:j_idt18:search" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 10 ) fail ( "timeout" ) ; try { if ( isElementPresent ( By . cssSelector ( "label" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; assertEquals ( "AMOXICILLIN" , driver . findElement ( By . id ( "j_idt5:j_idt19:cmdBName" ) ) . getText ( ) ) ; WebElement element = driver . findElement ( By . id ( "j_idt5:j_idt19:j_idt28" ) ) ; String path = element . getAttribute ( "src" ) ; assert ( path . contains ( "red" ) ) ; } catch ( Error e ) { verificationErrors . append ( e ) ; } } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="nonAdminTryAccessAdminPages/tree/master/ArcGames/test/ch/hearc/arcgames/tests/AdminSecurityTest.java"> public void nonAdminTryAccessAdminPages ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="loggedUserTryAccessPages/tree/master/ArcGames/test/ch/hearc/arcgames/tests/searchTest.java"> public void loggedUserTryAccessPages ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="loggedUserTryAccessPages/tree/master/ArcGames/test/ch/hearc/arcgames/tests/DBInteractionTest.java"> public void loggedUserTryAccessPages ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void testGetCookieDoesNotRetriveBeyondCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSettingACookieThatExpiredInThePast/tree/master/java/client/test/org/openqa/selenium/CookieImplementationTest.java"> public void testSettingACookieThatExpiredInThePast ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "animals" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long expires = System . currentTimeMillis ( ) - 1000 ; Cookie cookie = new Cookie ( "expired" , "yes" , "/common/animals" , new Date ( expires ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie ) ; cookie = options . getCookieNamed ( "fish" ) ; assertNull ( "Cookie ▁ expired ▁ before ▁ it ▁ was ▁ set, ▁ so ▁ nothing ▁ should ▁ be ▁ returned: ▁ " + cookie , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void testCanBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void testCanNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void testCanNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="checkAndPutExampleBluelightEnglish/tree/master/framework/testtools/selenium/tests/org/ofbiz/testtools/webdriverTests/utils/Utils.java"> public static void checkAndPutExampleBluelightEnglish ( String baseUrl , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; WebElement waitFor ; boolean themeAndLanguageCorrect , firstTime ; firstTime = true ; int i = 2 ; do { themeAndLanguageCorrect = false ; driver . get ( baseUrl + "example/control/logout" ) ; waitFor = driverWait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "USERNAME" ) ) ) ; waitFor . clear ( ) ; waitFor . sendKeys ( "admin" ) ; WebElement element = driver . findElement ( By . name ( "PASSWORD" ) ) ; element . clear ( ) ; element . sendKeys ( "ofbiz" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; driverWait . until ( ExpectedConditions . titleContains ( "OFBiz: ▁ Example: ▁ Find ▁ Example" ) ) ; List < WebElement > currentLanguages = driver . findElements ( By . xpath ( " // ul[@id='preferences-menu']/li[3]/a" ) ) ; if ( currentLanguages . size ( ) == 0 || ! currentLanguages . get ( 0 ) . getText ( ) . contains ( "Language ▁ : ▁ English" ) ) { Utils . testChangeLanguage ( baseUrl , null , null , "BLUELIGHT" , driver ) ; themeAndLanguageCorrect = true ; i -= 1 ; firstTime = i > 0 ; } } while ( themeAndLanguageCorrect && firstTime ) ; assertTrue ( firstTime ) ; } </DOCUMENT>
<DOCUMENT_ID="errorMessageAfterFailedLoginAttempt/tree/master/src/test/java/uk/co/yottr/acceptance/SignInSignOutIT.java"> public void errorMessageAfterFailedLoginAttempt ( ) { driver . navigate ( ) . to ( urlBase + "/yottr" ) ; final WebElement usernameField = driver . findElement ( By . id ( "username" ) ) ; final WebElement passwordField = driver . findElement ( By . id ( "password" ) ) ; final WebElement signInButton = driver . findElement ( By . id ( "sign-in-button" ) ) ; usernameField . sendKeys ( "mike" ) ; passwordField . sendKeys ( "wrongpassword" ) ; signInButton . click ( ) ; final WebElement errorMessage = driver . findElement ( By . id ( "error-msg" ) ) ; assertEquals ( "Invalid ▁ username ▁ and ▁ password." , errorMessage . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates/tree/master/firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void testCanBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/common/test/java/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="createYoutubeVideoObjectFromVideoId/tree/master/VideoSummary/app/utils/Summarizer/TranscriptFactory.java"> private static YoutubeVideo createYoutubeVideoObjectFromVideoId ( String videoId ) { if ( getNumConcurrentBrowswers ( ) >= Constants . NUM_CONCURRENT_VIDEO_INFO_RETRIEVAL_ACTORS ) { throw new RuntimeException ( "Too ▁ Many ▁ Active ▁ Video ▁ Retrieval ▁ Browsers. ▁ Try ▁ again ▁ later" ) ; } WebDriver browser = createWebDriver ( ) ; WebElement moreButton = null ; WebElement transcriptButton = null ; WebElement transcriptContainer = null ; WebElement videoEndTimeElement = null ; WebElement videoTitleElement = null ; String url = StringManip . generateUrlFromVideoId ( videoId ) ; String videoEndTime = null ; String videoTitle = null ; long startTime = System . currentTimeMillis ( ) ; browser . manage ( ) . timeouts ( ) . implicitlyWait ( TIMEOUT , TimeUnit . SECONDS ) ; try { browser . get ( url ) ; logger . debug ( "retrieved ▁ url: ▁ {}" , url ) ; videoEndTimeElement = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . className ( "ytp-time-duration" ) ) ) ; videoEndTime = videoEndTimeElement . getText ( ) ; logger . debug ( "retrieved ▁ video ▁ end ▁ time: ▁ {}" , videoEndTime ) ; videoTitleElement = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "eow-title" ) ) ) ; videoTitle = videoTitleElement . getText ( ) ; logger . debug ( "retrieved ▁ video ▁ title: ▁ {}" , videoTitle ) ; moreButton = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . elementToBeClickable ( By . id ( "action-panel-overflow-button" ) ) ) ; clickElement ( browser , moreButton ) ; logger . debug ( "clicked ▁ more ▁ button" ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; killWebDriver ( browser ) ; return null ; } int counter = 0 ; while ( transcriptButton == null && counter < Constants . BROWSER_RETRIES ) { try { transcriptButton = new WebDriverWait ( browser , 1 ) . until ( ExpectedConditions . elementToBeClickable ( By . className ( "action-panel-trigger-transcript" ) ) ) ; } catch ( Exception e ) { System . out . println ( "caught ▁ exception" ) ; clickElement ( browser , moreButton ) ; System . out . println ( "clicked ▁ more ▁ button" ) ; counter ++ ; } } if ( counter == Constants . BROWSER_RETRIES ) { killWebDriver ( browser ) ; return null ; } </DOCUMENT>
<DOCUMENT_ID="getDocumentAndStoreSource/tree/master/src/main/java/org/polimi/zarathustra/webdriver/LocalWebdriverWorker.java"> public Document getDocumentAndStoreSource ( final String url , File outputDir , String fileName ) { MonitorThread monitor = new MonitorThread ( hardLimitTimeoutSeconds , new Runnable ( ) { @ Override public void run ( ) { driver . quit ( ) ; throw new TimeoutException ( "Timedout ▁ while ▁ retrieving ▁ DOM ▁ for ▁ " + url ) ; } } ) ; monitor . setDaemon ( true ) ; driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( url ) ; </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( TestUtilities . isFirefox ( driver ) && TestUtilities . isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="getTwitterAuthorizationPINPageSource/tree/master/ManalithBot/src/main/java/org/manalith/ircbot/plugin/tweetreader/TweetReader.java"> private String getTwitterAuthorizationPINPageSource ( ) { String url = requestToken . getAuthenticationURL ( ) ; driver . get ( url ) ; jse . executeScript ( "document.getElementById('username_or_email').setAttribute('value','" + username + "')" ) ; </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilPageTitlePresentPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisiblePos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementVisiblePos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilTextPresentPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilTextPresent ( text ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementDisapearPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementPresentPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWasitUntilElementPipedLocator/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWasitUntilElementPipedLocator ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( pipedLocator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilWebPageIsValidatedNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilWebPageIsValidatedNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageIsValidated ( new BasicPageImpl ( ) { @ Override public BasicPageImpl getPage ( ) { return this ; } } ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilPageTitlePresentNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisibleNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementVisibleNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilTextPresentNeg ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementDisapearNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementPresentNeg ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void testESPublisherAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void testESPublisherAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void testESRegisterUserTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void testESPublisherAssetCaramelPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/gadget/list" ) ; </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionOpenURL/tree/master/source/src/main/java/org/cerberus/service/webdriver/impl/WebDriverService.java"> public MessageEvent doSeleniumActionOpenURL ( Session session , String host , Identifier identifier , boolean withBase ) { MessageEvent message ; String url = "" ; try { url = identifier . getLocator ( ) ; if ( ! StringUtil . isNull ( url ) ) { if ( withBase ) { host = StringUtil . cleanHostURL ( host ) ; url = host + url ; } session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; } else { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; } } catch ( TimeoutException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL_TIMEOUT ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%TIMEOUT%" , String . valueOf ( session . getDefaultWait ( ) ) ) ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . WARN , exception . toString ( ) ) ; } catch ( WebDriverException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_SELENIUM_CONNECTIVITY ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . FATAL , exception . toString ( ) ) ; } return message ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionUrlLogin/tree/master/source/src/main/java/org/cerberus/service/webdriver/impl/WebDriverService.java"> public MessageEvent doSeleniumActionUrlLogin ( Session session , String host , String uri ) { MessageEvent message ; host = StringUtil . cleanHostURL ( host ) ; String url = host + ( host . endsWith ( "/" ) ? uri . replace ( "/" , "" ) : uri ) ; try { session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; } catch ( TimeoutException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN_TIMEOUT ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%TIMEOUT%" , String . valueOf ( session . getDefaultWait ( ) ) ) ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . WARN , exception . toString ( ) ) ; } catch ( Exception e ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) + " ▁ " + e . getMessage ( ) ) ; } return message ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionOpenURL/tree/master/source/src/main/java/org/cerberus/serviceEngine/impl/WebDriverService.java"> public MessageEvent doSeleniumActionOpenURL ( Session session , String host , String value , String property , boolean withBase ) { MessageEvent message ; String url = "null" ; try { if ( ! StringUtil . isNull ( value ) ) { url = value ; } else if ( ! StringUtil . isNull ( property ) ) { url = property ; } if ( ! StringUtil . isNull ( url ) ) { if ( withBase ) { url = "http: // " + host + url ; } session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; return message ; } } catch ( WebDriverException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_SELENIUM_CONNECTIVITY ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . FATAL , exception . toString ( ) ) ; return message ; } message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; return message ; } </DOCUMENT>
<DOCUMENT_ID="doSeleniumActionUrlLogin/tree/master/source/src/main/java/org/cerberus/serviceEngine/impl/WebDriverService.java"> public MessageEvent doSeleniumActionUrlLogin ( Session session , String host , String uri ) { MessageEvent message ; String url = "http: // " + host + ( host . endsWith ( "/" ) ? uri . replace ( "/" , "" ) : uri ) ; try { session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) ) ; return message ; } catch ( Exception e ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( "%URL%" , url ) + " ▁ " + e . getMessage ( ) ) ; return message ; } } </DOCUMENT>
<DOCUMENT_ID="goToWebadminStartPage/tree/master/server/src/webtest/java/org/neo4j/server/webdriver/WebadminWebdriverLibrary.java"> public void goToWebadminStartPage ( ) { if ( isUsingDevDotHTML ( ) ) { d . get ( serverUrl + "webadmin/dev.html" ) ; } else if ( avoidRedirectAndGoStraightToWebAdminHomepage ( ) ) { d . get ( serverUrl + "webadmin/" ) ; } else { goToServerRoot ( ) ; } waitForTitleToBe ( "Neo4j ▁ Monitoring ▁ and ▁ Management ▁ Tool" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilPageTitlePresentPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisiblePos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementVisiblePos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilTextPresentPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilTextPresent ( text ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementDisapearPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementPresentPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWasitUntilElementPipedLocator/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWasitUntilElementPipedLocator ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( pipedLocator ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilWebPageIsValidatedNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilWebPageIsValidatedNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilWebPageIsValidated ( new BasicPageImpl ( ) { @ Override public BasicPageImpl getPage ( ) { return this ; } } ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilPageTitlePresentNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisibleNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementVisibleNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilTextPresentNeg ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementDisapearNeg ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementPresentNeg ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnPopularity/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnPopularity ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnAlphabeticalOrder/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnAlphabeticalOrder ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnCreatedTime/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnCreatedTime ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"> public void testESPublisherOverridenGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void testESPublisherAssetOverrideExistingPageTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"> public void testESPublisherNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void testESRegisterUserTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"> public void testESStoreNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreBeforeAddRatings/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"> public void testStoreBeforeAddRatings ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( "socialIfr" ) ) ) ; assertEquals ( "Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review" , driver . findElement ( By . cssSelector ( "div.com-guest" ) ) . getText ( ) ) ; assertEquals ( "Be ▁ the ▁ first ▁ one ▁ to ▁ review!" , driver . findElement ( By . cssSelector ( "p.com-first-review" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void testESPublisherAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void testESPublisherAssetCaramelPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_caramel_page" ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void testESPublishToStore ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"> public void testESStoreAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"> public void testESStoreAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"> public void testESStoreAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"> public void testESPublisherAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testListPageSortByName/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"> public void testListPageSortByName ( ) throws Exception { driver . get ( baseUrl + "/publisher" ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . partialLinkText ( "NAME" ) ) . click ( ) ; assertEquals ( nameSortAsset1 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[1]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; assertEquals ( nameSortAsset2 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[14]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddAndDeleteItem/tree/master/src/test/java/UITestBase.java"> public void testAddAndDeleteItem ( ) throws Exception { driver . get ( baseUrl + "/" ) ; </DOCUMENT>
<DOCUMENT_ID="testSisseLogimineFBga/tree/master/Automaattestid/Sisse logimine FBga.java"> public void testSisseLogimineFBga ( ) throws Exception { driver . get ( baseUrl + "/login" ) ; driver . findElement ( By . id ( "engout" ) ) . click ( ) ; try { assertEquals ( "Pöidlapüüdja ▁ - ▁ Home" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( "loginButton" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( "timeout" ) ; try { if ( "LOG ▁ OUT" . equals ( driver . findElement ( By . id ( "logout" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } </DOCUMENT>
<DOCUMENT_ID="testSoidugaLiitumineJubaLiitunud/tree/master/Automaattestid/Soiduga liitumine juba liitunud.java"> public void testSoidugaLiitumineJubaLiitunud ( ) throws Exception { driver . get ( baseUrl + "/soidud" ) ; driver . findElement ( By . linkText ( "SÕIDUD" ) ) . click ( ) ; driver . findElement ( By . id ( "est" ) ) . click ( ) ; try { assertEquals ( "Pöidlapüüdja ▁ - ▁ Sõidud" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( " // tbody[@id='innertable']/tr/td[2]" ) ) . click ( ) ; try { assertEquals ( "Oled ▁ juba ▁ selle ▁ sõiduga ▁ liitunud" , driver . findElement ( By . xpath ( " // div/div/div/div" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testUsersHaveDiffLists/tree/master/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"> public void testUsersHaveDiffLists ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select userASchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userASchoolItem = userASchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; driver . get ( studentListUrl + usernameParamPrefix + userB ) ; Select userBSchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userBSchoolItem = userBSchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; assertFalse ( userBSchoolItem . equals ( userASchoolItem ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="startGraphHostAppInNewWinndow/tree/master/selenium2/src/at/mannaz/socialsnapshot/SocialSnapshot.java"> private static void startGraphHostAppInNewWinndow ( String graphUrl ) { WebDriver driver = new FirefoxDriver ( ) ; driver . get ( graphUrl ) ; driver . findElement ( By . id ( "continue" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilPageTitlePresentPos ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisiblePos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementVisiblePos ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilTextPresentPos ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilTextPresent ( text ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementDisapearPos ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; try { WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentPos/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementPresentPos ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilPageTitlePresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilPageTitlePresentNeg ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; fail ( "Wait ▁ Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementVisibleNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementVisibleNeg ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; fail ( "Wait ▁ Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilTextPresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilTextPresentNeg ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } fail ( "Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementDisapearNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementDisapearNeg ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; fail ( "Runtime ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testWaitUntilElementPresentNeg/tree/master/client/src/test/java/com/paypal/selion/platform/grid/SeLionSeleniumTest.java"> public void testWaitUntilElementPresentNeg ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , "20000" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } fail ( "Timeout ▁ Exception ▁ was ▁ not ▁ thrown." ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testGoogleSeleniumWebdriverTestCase/tree/master/src/com/example/tests/GoogleSeleniumWebdriverTestCase.java"> public void testGoogleSeleniumWebdriverTestCase ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "gbqfq" ) ) . clear ( ) ; driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( "selenium ▁ hq" ) ; </DOCUMENT>
<DOCUMENT_ID="checkAddFilmFromCatalog/tree/master/src/test/java/ru/st/selenium/SearchFilmFromCatalog.java"> public void checkAddFilmFromCatalog ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( "input#username" ) ) ; WebElement password = driver . findElement ( By . name ( "password" ) ) ; WebElement login = driver . findElement ( By . name ( "submit" ) ) ; userName . sendKeys ( "admin" ) ; password . sendKeys ( "admin" ) ; login . click ( ) ; String movieTitle = "Óíåñ¸ííûå ▁ âåòðîì" ; WebElement addMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "a[href='./?go=add']" ) ) ) ; addMovie . click ( ) ; WebElement imdbsearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "imdbsearch" ) ) ) ; imdbsearchField . sendKeys ( movieTitle ) ; driver . findElement ( By . cssSelector ( "input[value='Search']" ) ) . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "table.imdbmovies ▁ tr:nth-child(1)" ) ) ) ; String year = driver . findElement ( By . cssSelector ( "table.imdbmovies ▁ tr:nth-child(1) ▁ td.year" ) ) . getText ( ) ; movie . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "form#updateform" ) ) ) ; WebElement save = driver . findElement ( By . id ( "submit" ) ) ; save . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( ".maininfo_full ▁ h2" ) ) ) ; System . out . println ( movieTitle + " ▁ (" + year + ")" ) ; assertEquals ( h2Title . getText ( ) , movieTitle + " ▁ (" + year + ")" ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmWithoutResult/tree/master/src/test/java/ru/st/selenium/SearchFilmWithoutResult.java"> public void testSearchFilmWithoutResult ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( "input#username" ) ) ; WebElement password = driver . findElement ( By . name ( "password" ) ) ; WebElement login = driver . findElement ( By . name ( "submit" ) ) ; userName . sendKeys ( "admin" ) ; password . sendKeys ( "admin" ) ; login . click ( ) ; String movieTitle = "Ïî ▁ ýòîìó ▁ çàïðîñó ▁ ÿ ▁ íè÷åãî ▁ íå ▁ íàéäó" ; WebElement addMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "a[href='./?go=add']" ) ) ) ; addMovie . click ( ) ; WebElement imdbsearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( "imdbsearch" ) ) ) ; imdbsearchField . sendKeys ( movieTitle ) ; driver . findElement ( By . cssSelector ( "input[value='Search']" ) ) . click ( ) ; WebElement resultNotFound = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "#content ▁ .content ▁ div" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElement ( resultNotFound , "No ▁ movies ▁ where ▁ found." ) ) ; assertEquals ( resultNotFound . getText ( ) , "No ▁ movies ▁ where ▁ found." ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void testESRegisterUserTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testLogOutputInHtmlResponse/tree/master/src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"> public void testLogOutputInHtmlResponse ( ) throws Exception { String url = getBaseUrl ( ) ; logger . info ( "making ▁ request ▁ to ▁ '{}'" , url ) ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( "Bootstrap ▁ 101 ▁ Template" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( "return ▁ logged.length;" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLogOutputInServletResponse/tree/master/src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"> public void testLogOutputInServletResponse ( ) throws Exception { String url = getBaseUrl ( ) + "/testservlet" ; logger . info ( "making ▁ request ▁ to ▁ '{}'" , url ) ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( "TestServlet" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( "return ▁ logged.length;" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testLogOutputInForwardedRequest/tree/master/src/test/java/com/willvuong/logbackrequest/it/WebDriverIT.java"> public void testLogOutputInForwardedRequest ( ) throws Exception { String url = getBaseUrl ( ) + "/forwardservlet" ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( "WEB-INF/jsp/forward.jsp" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; System . out . println ( source ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( "return ▁ logged.length;" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilmFromImdb/tree/master/src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"> public void testAddFilmFromImdb ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ; addMovieButton . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; WebElement imdbSearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "imdbsearch" ) ) ) ; imdbSearchField . clear ( ) ; imdbSearchField . sendKeys ( "123456" ) ; WebElement imdbSearchButton = driver . findElement ( By . xpath ( "/html/body/div/div/div/section/div/form/table/tbody/tr[2]/td/input" ) ) ; imdbSearchButton . click ( ) ; WebElement searchedMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . linkText ( "Home ▁ and ▁ Away" ) ) ) ; searchedMovie . click ( ) ; WebElement saveFilmButton = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "submit" ) ) ) ; saveFilmButton . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( "movie" ) ) ) ; WebElement titleAndYear = movie . findElement ( By . tagName ( "h2" ) ) ; assertTrue ( titleAndYear . getText ( ) . equals ( "Home ▁ and ▁ Away ▁ (1988)" ) ) ; WebElement goHomeButton = driver . findElement ( By . linkText ( "Home" ) ) ; goHomeButton . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAddFilmNoYear/tree/master/src/test/java/ru/abbyy/lingvolive/AddFilmTest.java"> public void testAddFilmNoYear ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ; addMovieButton . click ( ) ; WebElement filmTitleField = driver . findElement ( By . name ( "name" ) ) ; filmTitleField . clear ( ) ; filmTitleField . sendKeys ( "My ▁ Test ▁ Film" ) ; WebElement saveFilmButton = driver . findElement ( By . id ( "submit" ) ) ; saveFilmButton . click ( ) ; WebElement errorLabel = driver . findElement ( By . xpath ( "/html/body/div/div/div/section/div/div/form/table/tbody/tr[4]/td[2]/label" ) ) ; assertTrue ( errorLabel . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testAppraisalWithNoProjects/tree/master/WEB-INF/src/java/junit/AppraisalWithNoProjectsTest.java"> public void testAppraisalWithNoProjects ( ) throws Exception { driver . get ( baseUrl + "FYPFirstChoice/" ) ; driver . findElement ( By . id ( "Login_Username" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Username" ) ) . sendKeys ( "poppy" ) ; driver . findElement ( By . id ( "Login_Password" ) ) . clear ( ) ; driver . findElement ( By . id ( "Login_Password" ) ) . sendKeys ( "test" ) ; driver . findElement ( By . id ( "Login_0" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Self ▁ Appraise" ) ) . click ( ) ; driver . findElement ( By . id ( "Appraisal_accomplishments" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_accomplishments" ) ) . sendKeys ( "accomplishments" ) ; driver . findElement ( By . id ( "Appraisal_barriers" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_barriers" ) ) . sendKeys ( "barriers" ) ; driver . findElement ( By . id ( "Appraisal_improvements" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_improvements" ) ) . sendKeys ( "improvement" ) ; driver . findElement ( By . id ( "Appraisal_performance" ) ) . clear ( ) ; driver . findElement ( By . id ( "Appraisal_performance" ) ) . sendKeys ( "knowledge" ) ; driver . findElement ( By . id ( "Appraisal_attendanceRecordVery ▁ Good" ) ) . click ( ) ; driver . findElement ( By . id ( "Appraisal_respectRecordAverage ▁ Respect ▁ for ▁ others" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( "Appraisal_firstName" ) ) ) . selectByVisibleText ( "Gillian" ) ; driver . findElement ( By . id ( "Appraisal_Appraisal" ) ) . click ( ) ; try { assertEquals ( "Self ▁ Appraisal ▁ Complete" , driver . findElement ( By . cssSelector ( "h6.center" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithAbapBackend/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void testCreateReviewWithAbapBackend ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithCloudBackend/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void testCreateReviewWithCloudBackend ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; </DOCUMENT>
<DOCUMENT_ID="CreateNewAccountBuySomeBouqs/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/Join_ExistingUser_PurchasedBefore.java"> public void CreateNewAccountBuySomeBouqs ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="cancelOrderCheckOrderHistoryVideo/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/CustomerCancelOrderCheckVideo.java"> public void cancelOrderCheckOrderHistoryVideo ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; </DOCUMENT>
<DOCUMENT_ID="giftCardBuyWithCC/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/GiftCard/BuyEditGiftCard.java"> public void giftCardBuyWithCC ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; </DOCUMENT>
<DOCUMENT_ID="checkBookSubsWithVideo/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/VideoWidget_Pending.java"> public void checkBookSubsWithVideo ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; </DOCUMENT>
<DOCUMENT_ID="checkBookOrderWithVideo/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/VideoMessage/BookOrderWithVideo.java"> public void checkBookOrderWithVideo ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; </DOCUMENT>
<DOCUMENT_ID="aCustmoerCancelUpsellBouq/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/CustmoerCancelMainUpsellBouq.java"> public void aCustmoerCancelUpsellBouq ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; </DOCUMENT>
<DOCUMENT_ID="cCustmoerCancelMainBouq/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/CustmoerCancelMainUpsellBouq.java"> public void cCustmoerCancelMainBouq ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; </DOCUMENT>
<DOCUMENT_ID="checkVipAccountNotUpsellShown/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/Upsell/Bookorder_corpAccount.java"> public void checkVipAccountNotUpsellShown ( ) throws Exception { driver . get ( baseUrl ) ; </DOCUMENT>
<DOCUMENT_ID="BookSubsUpsellForWifeWithVase/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/SubscriptionUpsell/SubsUpsell_LoginCart_Vase.java"> public void BookSubsUpsellForWifeWithVase ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; </DOCUMENT>
<DOCUMENT_ID="BookSubsUpsellForMomWithVase/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/SubscriptionUpsell/SubsUpsell_RegistCart_Vase.java"> public void BookSubsUpsellForMomWithVase ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( " // button[@onclick ▁ = ▁ 'welcomePopupMini()']" ) ) . click ( ) ; </DOCUMENT>
<DOCUMENT_ID="CreateNewAccountAndBuyBouqs/tree/master/Automation-Test/Bouqs_Web_Automation/src/com/bouqs/test/FreeBouq/GuestUser_LoginWindow_NotSaturday.java"> public void CreateNewAccountAndBuyBouqs ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testAddAndUpdateIndex/tree/master/webapp/src/test/java/uk/ac/ebi/biostudies/test/integration/IndexTest.java"> public void testAddAndUpdateIndex ( ) throws Exception { driver . get ( baseUrl + "/admin/clear-index" ) ; </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithAbapBackend/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void testCreateReviewWithAbapBackend ( ) { System . out . println ( "Opening ▁ page ▁ " + serverUrl + applicationPath ) ; driver . get ( serverUrl + applicationPath ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; </DOCUMENT>
<DOCUMENT_ID="testCreateReviewWithCloudBackend/tree/master/espm-ui-reviews-web/src/test/java/com/sap/espm/ui/reviews/web/CustomerReviewsIT.java"> public void testCreateReviewWithCloudBackend ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void testGetCookieDoesNotRetriveBeyondCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/common/test/java/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; </DOCUMENT>
<DOCUMENT_ID="testCadastroCausaNaoDoacao/tree/master/src/test/java/br/ifes/leds/sincap/web/test/CadastroCausaNaoDoacao.java"> public void testCadastroCausaNaoDoacao ( ) throws Exception { driver . get ( baseUrl + "/sincap/" ) ; driver . findElement ( By . id ( "password" ) ) . clear ( ) ; driver . findElement ( By . id ( "password" ) ) . sendKeys ( "abc123" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "555.555.555-55" ) ; driver . findElement ( By . id ( "botaoLogin" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#dashboard-menu ▁ > ▁ li ▁ > ▁ a ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // button[@type='button']" ) ) . click ( ) ; driver . findElement ( By . id ( "nome" ) ) . clear ( ) ; driver . findElement ( By . id ( "nome" ) ) . sendKeys ( "causa ▁ de ▁ nao ▁ doacao" ) ; new Select ( driver . findElement ( By . id ( "tipoNaoDoacao" ) ) ) . selectByVisibleText ( "PROBLEMAS_LOGISTICOS" ) ; driver . findElement ( By . cssSelector ( "button.btn-flat.default" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/prestashop-sample/src/test/java/ru/stqa/selenium/samples/prestashop/SampleTestNgTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="addInSumFilmNot/tree/master/src/test/java/LessonsSe/AddInSumFilmNot.java"> public void addInSumFilmNot ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="addInSumFilmNotYear/tree/master/src/test/java/LessonsSe/AddInSumFilmNotYear.java"> public void addInSumFilmNotYear ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="addInSumFilmNotTitle/tree/master/src/test/java/LessonsSe/AddInSumFilmNotTitle.java"> public void addInSumFilmNotTitle ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/src/test/java/LessonsSe/SampleTestNgTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; AssertJUnit . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/qtwebkit/hybridtests/EmbeddedWebViewTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/qtwebkit/nativetests/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = "qtwidget: // TypingTestWidget" ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "result" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/qtwebkit/nativetests/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/qtwebkit/GraphicsWebSanityTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="allocateUserToProjectAndRoles/tree/master/src/main/java/com/eviltester/redmine/RedMineGUI.java"> public void allocateUserToProjectAndRoles ( User aUser , Project aProject , List < Role > roles ) { String urlForProjectMembership = redmineURL + String . format ( "/users/%d/edit?tab=memberships" , aUser . getId ( ) ) ; aDriver . get ( urlForProjectMembership ) ; </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="checkIfThereAreFields/tree/master/test/LogInTest.java"> public void checkIfThereAreFields ( ) { FirefoxDriver driver = new FirefoxDriver ( ) ; driver . get ( baseUrl ) ; int numberOfInputs = 2 ; List < WebElement > inputs = driver . findElementsByCssSelector ( "input" ) ; WebElement button = driver . findElementByCssSelector ( "button" ) ; assertTrue ( inputs . size ( ) == numberOfInputs && button != null ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testUsersHaveDiffLists/tree/master/sli/dashboard/src/integrationtest/java/org/slc/sli/selenium/controller/StudentListSeleniumITest.java"> public void testUsersHaveDiffLists ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select userASchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userASchoolItem = userASchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; driver . get ( studentListUrl + usernameParamPrefix + userB ) ; Select userBSchoolSelect = new Select ( driver . findElement ( By . id ( "schoolSelect" ) ) ) ; String userBSchoolItem = userBSchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; assertFalse ( userBSchoolItem . equals ( userASchoolItem ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testCreationFilmWithoutYear/tree/master/src/test/java/ru/stqa/selenium/CreationFilmWithoutYear.java"> public void testCreationFilmWithoutYear ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . clear ( ) ; driver . findElement ( By . name ( "imdbid" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "film" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input[class=\"required ▁ digits ▁ error\"]" ) ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreationFilmWithNotValidNumber/tree/master/src/test/java/ru/stqa/selenium/CreationFilmWithNotValidNumber.java"> public void testCreationFilmWithNotValidNumber ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; driver . findElement ( By . name ( "name" ) ) . clear ( ) ; driver . findElement ( By . name ( "name" ) ) . sendKeys ( "dfd" ) ; driver . findElement ( By . name ( "year" ) ) . clear ( ) ; driver . findElement ( By . name ( "year" ) ) . sendKeys ( "dfdf" ) ; driver . findElement ( By . id ( "submit" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input[class=\"required ▁ digits ▁ error\"]" ) ) ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="whenEuAcessoAPaginaQueExibeInformacoesDoTestResult/tree/master/src/test/java/stories/ResultaDosTestesSteps.java"> public void whenEuAcessoAPaginaQueExibeInformacoesDoTestResult ( ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="whenDesejoObterInformacoesSobreEsseTestResult/tree/master/src/test/java/stories/ResultaDosTestesSteps.java"> public void whenDesejoObterInformacoesSobreEsseTestResult ( ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="whenEuEntroNaPaginaQueExibeInformacoesDoTestResult/tree/master/src/test/java/stories/consulta_de_resultados.java"> public void whenEuEntroNaPaginaQueExibeInformacoesDoTestResult ( ) { driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/src/test/java/ua/oit/selenium2/ZSampleTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; </DOCUMENT>
<DOCUMENT_ID="doTestLoadingJQuery/tree/master/src/test/java/eu/tuxoo/test/JQueryLoadingTest.java"> public void doTestLoadingJQuery ( String jQueryVersion , String browserVersion ) throws Exception { String html = "<!DOCTYPE ▁ HTML><html><head><title>foo</title>" + getJqueryScript ( jQueryVersion ) + "<script> \n " + "alert(window.jQuery ▁ !== ▁ undefined); \n " + "</script></head><body> \n " + "</body></html>" ; String initialUrl = "http: // localhost:8080/myDummyApp/index.html" ; CollectingAlertHandler alertHandler = new CollectingAlertHandler ( ) ; HtmlUnitDriver driver = createDriver ( alertHandler , browserVersion , new StringWebResponse ( html , new URL ( initialUrl ) ) ) ; </DOCUMENT>
<DOCUMENT_ID="testMySubscriptionForMCAT/tree/master/PicmonicAutomation/src/com/picmonic/selenium/tests/MySubscription.java"> public void testMySubscriptionForMCAT ( ) throws Exception { driver . findElement ( By . xpath ( " // button // i[@class='icon-bars']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@class='nav-item'][contains(text(),'My ▁ Subscriptions')]" ) ) . click ( ) ; assertEquals ( "MCAT ▁ Biology" , driver . findElement ( By . xpath ( " // div[@id='purchase-container'] // td[contains(text(),'MCAT ▁ Biology')]" ) ) . getText ( ) ) ; assertEquals ( "INACTIVE" , driver . findElement ( By . xpath ( " // descendant::span[@class ▁ = ▁ 'status'][2]" ) ) . getText ( ) ) ; assertTrue ( isElementPresent ( By . xpath ( "( // a[contains(text(),'SUBSCRIBE')])[2]" ) ) ) ; driver . findElement ( By . xpath ( "( // a[contains(text(),'SUBSCRIBE')])[2]" ) ) . click ( ) ; </DOCUMENT>
<DOCUMENT_ID="testMySubscriptionForMedicine/tree/master/PicmonicAutomation/src/com/picmonic/selenium/tests/MySubscription.java"> public void testMySubscriptionForMedicine ( ) throws Exception { driver . findElement ( By . xpath ( " // button // i[@class='icon-bars']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // div[@class='nav-item'][contains(text(),'My ▁ Subscriptions')]" ) ) . click ( ) ; try { assertEquals ( "Picmonic ▁ for ▁ Medicine" , driver . findElement ( By . xpath ( " // div[@id='purchase-container'] // td[contains(text(),'Picmonic ▁ for ▁ Medicine')]" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( "( // a[contains(text(),'SUBSCRIBE')])[2]" ) ) . click ( ) ; </DOCUMENT>
<DOCUMENT_ID="itShouldNotAddExistingBusiness/tree/master/SeleniumTests/src/test/java/org/tomaszjaneczko/testpoc/selenium_tests/BusinessesTests.java"> public void itShouldNotAddExistingBusiness ( ) { webDriver . get ( baseUrl + "/businesses" ) ; findElementByLocator ( By . className ( "business-name-field" ) ) . sendKeys ( "Exists" ) ; findElementByLocator ( By . className ( "business-add-button" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( "alert" ) ) ; assertThat ( "Validation ▁ problem ▁ alert ▁ is ▁ displayed" , alertElement . getText ( ) . contains ( "name ▁ already ▁ exists" ) , is ( true ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSearchFilmNotFound/tree/master/src/test/java/ru/stqa/selenium/SearchFilmNotFound.java"> public void testSearchFilmNotFound ( ) throws Exception { driver . get ( baseUrl + "/php4dvd/" ) ; driver . findElement ( By . id ( "username" ) ) . clear ( ) ; driver . findElement ( By . id ( "username" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "password" ) ) . clear ( ) ; driver . findElement ( By . name ( "password" ) ) . sendKeys ( "admin" ) ; driver . findElement ( By . name ( "submit" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "div.movie_cover" ) ) ) ; driver . findElement ( By . cssSelector ( "img[alt=\"Add ▁ movie\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( "input#imdbsearch" ) ) ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "ertretretretersdfdsfdsfds" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( "div.content" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( "div.content ▁ > ▁ div" ) ) . findElements ( By . tagName ( "tr" ) ) . size ( ) ; assertEquals ( count1 , 0 ) ; System . out . println ( "Íàéäåíî ▁ ôèëüìîâ ▁ -" + count1 + "øò" ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . clear ( ) ; driver . findElement ( By . id ( "imdbsearch" ) ) . sendKeys ( "abfdgfddfgfdgdf" ) ; driver . findElement ( By . cssSelector ( "input[type=\"submit\"]" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( "div.content" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( "div.content ▁ > ▁ div" ) ) . findElements ( By . tagName ( "tr" ) ) . size ( ) ; assertEquals ( count2 , 0 ) ; System . out . println ( "Íàéäåíî ▁ ôèëüìîâ ▁ -" + count2 + "øò" ) ; driver . quit ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAutoDockVinaStampede/tree/master/src/test/java/org/apache/airavata/pga/tests/AutoDockVinaStampede.java"> public void testAutoDockVinaStampede ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Experiment" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-name" ) ) . sendKeys ( expName + "AutoDockVina-Stampede" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "experiment-description" ) ) . sendKeys ( "Test ▁ Experiment" ) ; new Select ( driver . findElement ( By . id ( "project" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "application" ) ) ) . selectByVisibleText ( "AutoDock_Vina" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( "continue" ) ) . click ( ) ; driver . findElement ( By . id ( "Receptor-File" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Ligand-File" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "Config-File" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "compute-resource" ) ) ) . selectByVisibleText ( "stampede.tacc.xsede.org" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( "select-queue" ) ) ) . selectByVisibleText ( "normal" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "node-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "node-count" ) ) . sendKeys ( "1" ) ; driver . findElement ( By . id ( "cpu-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "cpu-count" ) ) . sendKeys ( "16" ) ; driver . findElement ( By . id ( "wall-time" ) ) . clear ( ) ; driver . findElement ( By . id ( "wall-time" ) ) . sendKeys ( "30" ) ; driver . findElement ( By . id ( "memory-count" ) ) . clear ( ) ; driver . findElement ( By . id ( "memory-count" ) ) . sendKeys ( "0" ) ; driver . findElement ( By . id ( "enableEmail" ) ) . click ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . clear ( ) ; driver . findElement ( By . id ( "emailAddresses" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email1" ) ) ; driver . findElement ( By . xpath ( "( // button[@type='button'])[3]" ) ) . click ( ) ; driver . findElement ( By . xpath ( "( // input[@name='emailAddresses[]'])[2]" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "email2" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( "expLaunch" ) ) . click ( ) ; waitTime ( 200 ) ; } </DOCUMENT>
<DOCUMENT_ID="transactionDetailHasLinksToLitle/tree/master/test/selenium/com/litle/magento/selenium/TransactionDetailTests.java"> public void transactionDetailHasLinksToLitle ( ) throws Exception { iAmDoingLitleAuth ( ) ; iAmLoggedInAsWithThePassword ( "abc@gmail.com" , "password" ) ; iHaveInMyCart ( "vault" ) ; iCheckOutWith ( "Visa" , "4100000000000001" ) ; iLogOutAsUser ( ) ; iAmLoggedInAsAnAdministrator ( ) ; iView ( "Sales" , "Orders" ) ; iClickOnTheTopRowInOrders ( ) ; iPressInvoice ( ) ; iSelectNameFromSelect ( "Capture ▁ Online" , "invoice[capture_case]" ) ; iPressSubmitInvoice ( "The ▁ invoice ▁ has ▁ been ▁ created." , null ) ; iView ( "Sales" , "Transactions" ) ; </DOCUMENT>
<DOCUMENT_ID="testCreateModifySearchProject/tree/master/src/test/java/org/apache/airavata/pga/tests/CreateModifySearchProject.java"> public void testCreateModifySearchProject ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( "Project" ) ) . click ( ) ; driver . findElement ( By . id ( "create" ) ) . click ( ) ; driver . findElement ( By . id ( "project-name" ) ) . clear ( ) ; driver . findElement ( By . id ( "project-name" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "project-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "project-description" ) ) . sendKeys ( projectDescription ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "save" ) ) . click ( ) ; waitTime ( 750 ) ; driver . findElement ( By . cssSelector ( "span.glyphicon.glyphicon-pencil" ) ) . click ( ) ; driver . findElement ( By . id ( "project-description" ) ) . clear ( ) ; driver . findElement ( By . id ( "project-description" ) ) . sendKeys ( projectDescription + "_MODIFIED_2016" ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "save" ) ) . click ( ) ; waitTime ( 500 ) ; driver . findElement ( By . linkText ( "Project" ) ) . click ( ) ; driver . findElement ( By . id ( "browse" ) ) . click ( ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( "search-value" ) ) . clear ( ) ; driver . findElement ( By . id ( "search-value" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( "project.name" ) ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( "search" ) ) . click ( ) ; driver . findElement ( By . linkText ( "View" ) ) . click ( ) ; waitTime ( 500 ) ; } </DOCUMENT>
<DOCUMENT_ID="iClickOnTheTopRowInInvoices/tree/master/test/selenium/com/litle/magento/selenium/BaseTestCase.java"> void iClickOnTheTopRowInInvoices ( ) { String url = driver . findElement ( By . xpath ( "/html/body/div[2]/div[3]/div/div/div[2]/div/div[3]/div[2]/div/div/div/table/tbody/tr" ) ) . getAttribute ( "title" ) ; driver . get ( url ) ; waitFor ( By . id ( "comments_block" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="que_el_usuario_ingreso_a/tree/master/src/test/java/ar/com/proautomation/specs/glue/GoogleSearchStepDefinition.java"> public void que_el_usuario_ingreso_a ( String url ) throws Throwable { driver = new FirefoxDriver ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="assertPageTitleContainsSearchQuery/tree/master/TentsNTrailsTesting/src/com/tentsntrails/testing/sprint6/UserStory130.java"> public void assertPageTitleContainsSearchQuery ( String title ) { driver . get ( baseUrl + "/Location" ) ; driver . findElement ( By . linkText ( "Locations" ) ) . click ( ) ; driver . findElement ( By . id ( "dropdownMenu1" ) ) . click ( ) ; driver . findElement ( By . linkText ( "All" ) ) . click ( ) ; driver . findElement ( By . name ( "searchString" ) ) . clear ( ) ; driver . findElement ( By . name ( "searchString" ) ) . sendKeys ( title ) ; driver . findElement ( By . id ( "btn" ) ) . click ( ) ; if ( ! driver . getTitle ( ) . contains ( title ) ) { fail ( "title ▁ of ▁ page ▁ must ▁ contain ▁ " + title ) ; } } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/src/main/resources/archetype-resources/src/test/java/SampleJUnitTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="iClickOnTheCustomerWithEmail/tree/master/test/selenium/com/litle/magento/selenium/BaseTestCase.java"> void iClickOnTheCustomerWithEmail ( String email ) { if ( "New ▁ Order ▁ / ▁ Orders ▁ / ▁ Sales ▁ / ▁ Magento ▁ Admin" . equals ( driver . getTitle ( ) ) ) { WebElement e = driver . findElement ( By . id ( "sales_order_create_customer_grid_table" ) ) ; e = e . findElement ( By . tagName ( "tbody" ) ) ; List < WebElement > rows = e . findElements ( By . tagName ( "tr" ) ) ; WebElement rowToClick = null ; for ( WebElement row : rows ) { WebElement emailCol = row . findElements ( By . tagName ( "td" ) ) . get ( 2 ) ; String colValue = emailCol . getText ( ) . trim ( ) ; if ( colValue . equals ( email ) ) { rowToClick = row ; } } assertNotNull ( "Couldn't ▁ find ▁ customer ▁ with ▁ email ▁ " + email , rowToClick ) ; rowToClick . click ( ) ; waitFor ( By . id ( "submit_order_top_button" ) ) ; } else { WebElement e = driver . findElement ( By . id ( "customerGrid_table" ) ) ; e = e . findElement ( By . tagName ( "tbody" ) ) ; List < WebElement > rows = e . findElements ( By . tagName ( "tr" ) ) ; String url = null ; for ( WebElement row : rows ) { WebElement emailCol = row . findElements ( By . tagName ( "td" ) ) . get ( 3 ) ; String colName = emailCol . getText ( ) . trim ( ) ; if ( colName . equals ( email ) ) { url = row . getAttribute ( "title" ) ; } } assertNotNull ( "Couldn't ▁ find ▁ customer ▁ with ▁ email ▁ " + email , url ) ; driver . get ( url ) ; waitFor ( By . id ( "customer_info_tabs" ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( TestUtilities . isFirefox ( driver ) && TestUtilities . isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="changeTemplateToArticleTest/tree/master/src/test/java/org/craftercms/web/editing/ChangeTemplateTests.java"> public void changeTemplateToArticleTest ( ) throws InterruptedException { login ( ) ; long time = System . currentTimeMillis ( ) ; String articleUrl = "selenium" + time ; String articleTitle = "Selenium ▁ Article" + time ; String articleContent = "This ▁ is ▁ a ▁ testing ▁ article ▁ content. ▁ " + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( "Wait ▁ for ▁ item ▁ to ▁ be ▁ deployed" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; String articleFilePath = seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + "/site/website/" + articleUrl + "/index.xml" ; String contentTypeTag = "<content-type>" + seleniumProperties . getProperty ( "craftercms.page.content.type" ) + "</content-type>" ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , contentTypeTag ) ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , articleContent ) ) ; String newContentType = seleniumProperties . getProperty ( "craftercms.change.template.content.type" ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Choose ▁ 'Change ▁ Template' ▁ in ▁ pages ▁ tree ▁ context ▁ menu" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement articleElement = CStudioSeleniumUtil . findItemWithName ( driver , articleTitle ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "Change&nbsp;Template" , articleElement ) ; logger . info ( "Confirm ▁ change ▁ template" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "acceptCTChange" ) ) ; logger . info ( "Choose ▁ '" + newContentType + "' ▁ as ▁ new ▁ content ▁ type" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "option[value=\"" + newContentType + "\"]" ) ) ; logger . info ( "Confirm ▁ operation" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "submitWCMPopup" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( "Save ▁ and ▁ close" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "cstudioSaveAndClose" ) ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; logger . info ( "Wait ▁ for ▁ item ▁ to ▁ be ▁ deployed" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; String newContentTypeTag = "<content-type>" + newContentType + "</content-type>" ; logger . info ( "Check ▁ item ▁ has ▁ been ▁ updated" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , articleTitle ) ) ; assertFalse ( CStudioSeleniumUtil . readFileContents ( articleFilePath , contentTypeTag ) ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( articleFilePath , newContentTypeTag ) ) ; } </DOCUMENT>
<DOCUMENT_ID="inContextEditTemplateTest/tree/master/src/test/java/org/craftercms/web/editing/ContextEditingTests.java"> public void inContextEditTemplateTest ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String baseUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) ; final String pageToEditUrl = seleniumProperties . getProperty ( "craftercms.page.to.edit.url" ) ; logger . info ( "Navigate ▁ to ▁ '" + pageToEditUrl + "'" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; openTemplateEditor ( ) ; String pageTitle = driver . getTitle ( ) ; By titleBy = By . xpath ( " // div[@id='editor-container'] // pre[text()='" + pageTitle + "'][1]" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleBy ) ; WebElement title = driver . findElement ( titleBy ) ; String sequence = "" ; </DOCUMENT>
<DOCUMENT_ID="scheduleToBeDeletedTest/tree/master/src/test/java/org/craftercms/web/basic/ScheduleToBeDeletedTests.java"> public void scheduleToBeDeletedTest ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; String pageToUpdate = seleniumProperties . getProperty ( "craftercms.page.to.schedule.to.delete" ) ; String updateString = "Resources ▁ " + System . currentTimeMillis ( ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , pageToUpdate , updateString ) ; logger . info ( "Refresh ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement articleItem = CStudioSeleniumUtil . findItemWithName ( driver , updateString ) ; logger . info ( "Choose ▁ delete ▁ in ▁ pages ▁ tree ▁ context ▁ menu" ) ; CStudioSeleniumUtil . contextMenuOption ( driver , "Delete" , articleItem ) ; logger . info ( "Schedule ▁ item ▁ and ▁ dependencies" ) ; By datepickerBy = By . cssSelector ( "#datepicker.date-picker" ) ; By timepickerBy = By . cssSelector ( "input.time-picker" ) ; By scheduleTimeLinksBy = By . cssSelector ( "#acnVersionWrapper ▁ a[checkid]" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , scheduleTimeLinksBy ) ; List < WebElement > scheduleTimeLinks = driver . findElements ( scheduleTimeLinksBy ) ; for ( WebElement scheduleTimeLink : scheduleTimeLinks ) { scheduleTimeLink . click ( ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , datepickerBy ) ; WebElement datepicker = driver . findElement ( datepickerBy ) ; datepicker . clear ( ) ; datepicker . sendKeys ( "1/01/3001" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , timepickerBy ) ; WebElement timepicker = driver . findElement ( timepickerBy ) ; timepicker . sendKeys ( "12:00:01 ▁ a.m." ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( " // div[@id='acnVersionWrapper'] // a[text()='Done']" ) ) ; } logger . info ( "Click ▁ 'Delete' ▁ button" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "#acnVersionWrapper ▁ input.do-delete[type='submit']" ) ) ; logger . info ( "Wait ▁ for ▁ item ▁ to ▁ be ▁ scheduled" ) ; Thread . sleep ( 2000 ) ; String baseUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) ; String pageToEditUrl = seleniumProperties . getProperty ( "craftercms.page.to.schedule.to.delete.url" ) ; logger . info ( "Navigate ▁ to ▁ '" + pageToEditUrl + "'" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; logger . info ( "Check ▁ item ▁ was ▁ scheduled ▁ to ▁ be ▁ deleted" ) ; By statusIconBy = By . cssSelector ( "#acn-active-content ▁ div.status-icon.deleted" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , statusIconBy ) ; WebElement statusIcon = driver . findElement ( statusIconBy ) ; assertTrue ( statusIcon . getText ( ) . contains ( "Deleted" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="navigateToAndWaitForPageToLoad/tree/master/src/test/java/org/craftercms/web/util/CStudioSeleniumUtil.java"> public static void navigateToAndWaitForPageToLoad ( WebDriver webDriver , String url ) { webDriver . navigate ( ) . to ( url ) ; waitForCurrentPageToLoad ( webDriver ) ; } </DOCUMENT>
<DOCUMENT_ID="editPageIcePencilTest/tree/master/src/test/java/org/craftercms/web/editing/ContextEditingTests.java"> public void editPageIcePencilTest ( ) throws InterruptedException { login ( ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String baseUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) ; final String pageToEditUrl = seleniumProperties . getProperty ( "craftercms.page.to.edit.url" ) ; logger . info ( "Navigate ▁ to ▁ '" + pageToEditUrl + "'" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; openPreviewTools ( ) ; logger . info ( "Turn ▁ on ▁ In-Context ▁ Edit" ) ; By titlePencilBy = By . cssSelector ( "#title ▁ img" ) ; List < WebElement > titlePencilList = driver . findElements ( titlePencilBy ) ; boolean pencilVisible = false ; if ( titlePencilList . size ( ) > 0 ) { pencilVisible = titlePencilList . get ( 0 ) . isDisplayed ( ) ; } if ( ! pencilVisible ) { By toggleIceBy = By . xpath ( " // div[@id='preview-tools-panel-container'] // span[contains(.,'In-Context ▁ Edit')]/preceding-sibling::*[1]" ) ; CStudioSeleniumUtil . clickOn ( driver , toggleIceBy ) ; } logger . info ( "Click ▁ on ▁ title ▁ ice ▁ pencil" ) ; CStudioSeleniumUtil . clickOn ( driver , titlePencilBy ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . tagName ( "iframe" ) ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . frame ( "in-context-edit-editor" ) ; logger . info ( "Update ▁ title" ) ; String newTitle = "Big ▁ Data ▁ for ▁ Risk ▁ Reduction ▁ " + System . currentTimeMillis ( ) ; By titleInputBy = By . cssSelector ( "#title ▁ input.datum" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleInputBy ) ; CStudioSeleniumUtil . waitForItemToBeEnabled ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleInputBy ) ; WebElement titleInput = driver . findElement ( titleInputBy ) ; titleInput . clear ( ) ; titleInput . sendKeys ( newTitle ) ; Thread . sleep ( 1000 ) ; logger . info ( "Save ▁ And ▁ Close" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "cstudioSaveAndClose" ) ) ; logger . info ( "Check ▁ title ▁ has ▁ been ▁ updated" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . xpath ( " // *[contains(., ▁ '" + newTitle + "')]" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageEditSaveAndClose/tree/master/src/test/java/org/craftercms/web/basic/PageEditTests.java"> public void testPageEditSaveAndClose ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( "Login ▁ as ▁ admin" ) ; login ( ) ; logger . info ( "Navigate ▁ to ▁ Dashboard ▁ page" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editContentJS ( driver , seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , seleniumProperties . getProperty ( "craftercms.page.content.type" ) , siteName ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( "Find ▁ internal-name ▁ field ▁ and ▁ edit" ) ; driver . findElement ( By . cssSelector ( "#internal-name ▁ .datum" ) ) . clear ( ) ; driver . findElement ( By . cssSelector ( "#internal-name ▁ .datum" ) ) . sendKeys ( updateString ) ; logger . info ( "Click ▁ Save&Close ▁ button ▁ and ▁ wait ▁ for ▁ change ▁ to ▁ complete" ) ; driver . findElement ( By . id ( "cstudioSaveAndClose" ) ) . click ( ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; logger . info ( "Navigate ▁ back ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; assertTrue ( driver . getTitle ( ) . equals ( "Crafter ▁ Studio" ) ) ; logger . info ( "Check ▁ my-recent-activity ▁ widget" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( "MyRecentActivity-body" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; } </DOCUMENT>
<DOCUMENT_ID="editContentTypeFieldTitle/tree/master/src/test/java/org/craftercms/web/ContentTypeTests.java"> public void editContentTypeFieldTitle ( ) { login ( ) ; String contentType = "/page/article" ; openContentType ( contentType ) ; logger . info ( "Update ▁ content ▁ type ▁ title ▁ field" ) ; String newTitle = "Title ▁ " + System . currentTimeMillis ( ) ; By titleVariableBy = By . xpath ( " // div[@id='content-type-canvas'] // div[contains(@class,'content-type-visual-field-container')] // span[contains(@class,'content-field-variable') ▁ and ▁ text()='title']" ) ; CStudioSeleniumUtil . clickOn ( driver , titleVariableBy ) ; By titleBy = By . xpath ( " // div[@id='properties-container'] // div[contains(@class, ▁ 'property-wrapper')]/div[@class='property-label' ▁ and ▁ text()='Title']/following-sibling::input" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleBy ) ; WebElement titleInput = driver . findElement ( titleBy ) ; titleInput . clear ( ) ; titleInput . sendKeys ( newTitle ) ; logger . info ( "Click ▁ 'Save'" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "#cstudio-admin-console-command-bar ▁ input.cstudio-button[value='Save']" ) ) ; logger . info ( "Wait ▁ for ▁ content ▁ type ▁ to ▁ be ▁ saved" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_SAVE ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver webDriver ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } ) ; logger . info ( "Navigate ▁ to ▁ dashboard" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . createContentJS ( driver , "/site/website" , siteName ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( "option[value=\"/page/article\"]" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( "submitWCMPopup" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; By titleLabelBy = By . cssSelector ( "#title ▁ span.label.cstudio-form-field-title" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleLabelBy ) ; WebElement titleLabelElement = driver . findElement ( titleLabelBy ) ; assertEquals ( newTitle , titleLabelElement . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldNotBePossibleToSigninWithAnInvalidEmail ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; homePage . typePassword ( "any ▁ password" ) ; homePage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testPageEditSaveAndPreview/tree/master/src/test/java/org/craftercms/web/basic/PageEditTests.java"> public void testPageEditSaveAndPreview ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( "Login ▁ as ▁ admin" ) ; login ( ) ; String mainWindowHandle = driver . getWindowHandle ( ) ; logger . info ( "Navigate ▁ to ▁ Dashboard ▁ page" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( "Edit ▁ page" ) ; CStudioSeleniumUtil . editContentJS ( driver , seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , seleniumProperties . getProperty ( "craftercms.page.content.type" ) , siteName ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; String editWindowHandle = driver . getWindowHandle ( ) ; logger . info ( "Edit ▁ internal-name ▁ field" ) ; WebElement internalNameElement = driver . findElement ( By . cssSelector ( "#internal-name ▁ .datum" ) ) ; internalNameElement . clear ( ) ; internalNameElement . sendKeys ( updateString ) ; Thread . sleep ( 1000 ) ; logger . info ( "Click ▁ Save&Preview ▁ button ▁ and ▁ wait ▁ for ▁ change ▁ to ▁ complete" ) ; driver . findElement ( By . id ( "cstudioSaveAndPreview" ) ) . click ( ) ; logger . info ( "Switch ▁ back ▁ to ▁ first ▁ window" ) ; driver . switchTo ( ) . window ( mainWindowHandle ) ; logger . info ( "Wait ▁ for ▁ preview ▁ to ▁ load" ) ; new WebDriverWait ( driver , 30 ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver webDriver ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } ) ; String pageUrl = seleniumProperties . getProperty ( "craftercms.base.url" ) + seleniumProperties . getProperty ( "craftercms.page.to.edit.url" ) ; logger . info ( "Check ▁ url ▁ match ▁ edited ▁ page ▁ url" ) ; assertTrue ( driver . getCurrentUrl ( ) . equals ( pageUrl ) ) ; logger . info ( "Check ▁ item ▁ content ▁ has ▁ changed" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( seleniumProperties . getProperty ( "craftercms.preview.deployer.path" ) + seleniumProperties . getProperty ( "craftercms.page.to.edit" ) , updateString ) ) ; logger . info ( "Go ▁ back ▁ and ▁ close ▁ edit ▁ window ▁ so ▁ item ▁ is ▁ not ▁ locked" ) ; driver . switchTo ( ) . window ( editWindowHandle ) ; driver . findElement ( By . cssSelector ( "input[value=\"Cancel\"]" ) ) . click ( ) ; List < WebElement > buttonConfirm = driver . findElements ( By . xpath ( " // button[text()='Yes']" ) ) ; if ( buttonConfirm . size ( ) > 0 ) buttonConfirm . get ( 0 ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToAccessToOtherPagesWithoutSignin/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldNotBePossibleToAccessToOtherPagesWithoutSignin ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; try { homePage . goToAccountPageViaMenu ( ) . goToAppPageViaMenu ( ) ; Assert . fail ( ) ; } catch ( IllegalStateException ex ) { } } * / </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAnAccountWithoutFillForm/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldNotBePossibleToCreateAnAccountWithoutFillForm ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAnAcocuntWithDifferentPassword/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldNotBePossibleToCreateAnAcocuntWithDifferentPassword ( ) { driver . get ( baseUrl ) ; Random localrand = new Random ( ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; newAccountPage . typeEmailAddress ( "john" + localrand . nextInt ( ) + "@test.com" ) ; newAccountPage . typeFirstName ( "John" ) ; newAccountPage . typeLastName ( "Doe" ) ; newAccountPage . typePassword ( "P4ssw0rd" ) ; newAccountPage . typePasswordConfirmation ( "D1ff3r3n7" ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAnAcocuntWithWeakPassword/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldNotBePossibleToCreateAnAcocuntWithWeakPassword ( ) { driver . get ( baseUrl ) ; Random rand = new Random ( ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; newAccountPage . typeEmailAddress ( "john" + rand . nextInt ( ) + "@test.com" ) ; newAccountPage . typeFirstName ( "John" ) ; newAccountPage . typeLastName ( "Doe" ) ; newAccountPage . typePassword ( "pass" ) ; newAccountPage . typePasswordConfirmation ( "pass" ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void successfulSigninShouldBringUserToHomePage ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldBePossibleToRegisterANewApp/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldBePossibleToRegisterANewApp ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; RegisterNewAppPage newAppPage = firstPage . goToNewAppPage ( ) ; newAppPage . typeAppName ( "RandomName" ) ; newAppPage . typeAppDescription ( "app ▁ description" ) ; Assert . assertFalse ( newAppPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToRegisterANewAppWithoutSpecifiedAName/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldNotBePossibleToRegisterANewAppWithoutSpecifiedAName ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; RegisterNewAppPage newAppPage = firstPage . goToNewAppPage ( ) ; newAppPage . typeAppName ( "" ) ; newAppPage . typeAppDescription ( "app ▁ description" ) ; Assert . assertTrue ( newAppPage . submitForm ( ) . containError ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldBePossibleToLogout/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void itShouldBePossibleToLogout ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; firstPage . logout ( ) ; } </DOCUMENT>
<DOCUMENT_ID="editAccountWithoutSpecifyNewPasswordShouldNotChangePassword/tree/master/implementation/gamificationtests/gamificationtests/src/test/java/ch/heigvd/gamificationtests/selenium/GamificationTest.java"> public void editAccountWithoutSpecifyNewPasswordShouldNotChangePassword ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; AccountPage accountPage = firstPage . goToAccountPageViaMenu ( ) ; accountPage . submitForm ( ) ; homePage = accountPage . goToAppPageViaMenu ( ) . logout ( ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="canNotLogInWithInvalidEmail/tree/master/ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"> public void canNotLogInWithInvalidEmail ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePwd ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserCanLoginWithValidEmail/tree/master/ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"> public void aUserCanLoginWithValidEmail ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( "toto@contoso.com" ) ; loginPage . typePwd ( "12345" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="testDosMasDosGoogle/tree/master/src/test/java/ejemplo/SumaEnGoogleWebDriver.java"> public void testDosMasDosGoogle ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . id ( "gbqfq" ) ) . clear ( ) ; driver . findElement ( By . id ( "gbqfq" ) ) . sendKeys ( "2+2" ) ; </DOCUMENT>
<DOCUMENT_ID="aUserShouldBeAbleToVisitAllPagesAfterLogin/tree/master/ProjetTests/AMT_Tests_Untitled/src/test/java/ch/heigvd/amt/selenium/AMT_Projet_Test.java"> public void aUserShouldBeAbleToVisitAllPagesAfterLogin ( ) throws InterruptedException { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( "toto@contoso.com" ) ; loginPage . typePwd ( "12345" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToAccountViaMenu ( ) . goToAppPageViaMenu ( ) ; </DOCUMENT>
<DOCUMENT_ID="itShouldCorrectlyCreateAccount/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldCorrectlyCreateAccount ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; LoginPage loginPage = ( LoginPage ) registrationPage . submitForm ( LoginPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutFName/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAccountWithoutFName ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud1@heig-vd.ch" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutLName/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAccountWithoutLName ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud2@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutEmail/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAccountWithoutEmail ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "4321" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccount2DifferentPasswords/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAccount2DifferentPasswords ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud3@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; registrationPage . typeRPassword ( "4321" ) ; registrationPage . typePassword ( "1234" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithoutPassword/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAccountWithoutPassword ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "thibaud.duchoud4@heig-vd.ch" ) ; registrationPage . typeFName ( "Thibaud" ) ; registrationPage . typeLName ( "Duchoud" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToSigninWithAnInvalidEmail ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePassword ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void successfulSigninShouldBringUserToHomePage ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccount2DifferentPasswords/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToModifyAccount2DifferentPasswords ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccountWithoutFName/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToModifyAccountWithoutFName ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccountWithoutLName/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToModifyAccountWithoutLName ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAccountWithoutPassword/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToModifyAccountWithoutPassword ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAppWithoutName/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAppWithoutName ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToModifyAppWithoutName/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToModifyAppWithoutName ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldDisplayListUsers/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldDisplayListUsers ( ) { </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToCreateAccountWithExistantEmail/tree/master/projet/MoussaRaserTest/MoussaRaserTests/src/test/java/ch/heigvd/amt/selenium/MoussaRaserTest.java"> public void itShouldNotBePossibleToCreateAccountWithExistantEmail ( ) { driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPageTmp = new RegistrationPage ( driver ) ; registrationPageTmp . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPageTmp . typeFName ( "Mario" ) ; registrationPageTmp . typeLName ( "Ferreira" ) ; registrationPageTmp . typeRPassword ( "1234" ) ; registrationPageTmp . typePassword ( "1234" ) ; driver . get ( baseUrl + "registrationPage" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( "mario.ferreira@heig-vd.ch" ) ; registrationPage . typeFName ( "Mario" ) ; registrationPage . typeLName ( "Ferreira" ) ; registrationPage . typeRPassword ( "1234" ) ; registrationPage . typePassword ( "1234" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="getLinkFromOnclickElement/tree/master/src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Deprecated/Entry_Scraper2.java"> private static void getLinkFromOnclickElement ( WebDriver driver , String searchUrl , String baseUrl , String key ) { String url = searchUrl + pageNum ; driver . get ( url ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( "a" ) ) ; for ( WebElement link : links ) { String onclick = null ; try { onclick = link . getAttribute ( "onclick" ) ; if ( onclick . startsWith ( "snap_to_marker" ) ) { String title = link . getAttribute ( "title" ) ; sleep ( ) ; link . click ( ) ; String [ ] tmpArray = { convertToUrl ( baseUrl , title ) . toLowerCase ( ) , title . toLowerCase ( ) } ; initialUrls . add ( tmpArray ) ; } } catch ( Exception e ) { </DOCUMENT>
<DOCUMENT_ID="getInitialJavascriptLinksAddToPageQueue/tree/master/src/main/java/org/Webgatherer/ExperimentalLabs/Scraper/Core/PageRetrieverThreadManagerScraper.java"> public Queue getInitialJavascriptLinksAddToPageQueue ( String intialPageUrl , String javascriptLinkIdentifier , String customAttributeLabel ) { driver . get ( intialPageUrl ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( "a" ) ) ; Queue < String [ ] > queue = new ConcurrentLinkedQueue < String [ ] > ( ) ; for ( WebElement link : links ) { String customAttribute = null ; try { customAttribute = link . getAttribute ( customAttributeLabel ) ; if ( customAttribute . contains ( javascriptLinkIdentifier ) ) { customAttribute = customLogic ( customAttribute ) ; String [ ] testEntry = new String [ sizeOfStringArrayEnum ] ; testEntry [ ThreadCommunicationBase . PageQueueEntries . BASE_URL . ordinal ( ) ] = intialPageUrl ; testEntry [ ThreadCommunicationBase . PageQueueEntries . CUSTOM_PARAM . ordinal ( ) ] = customAttribute ; queue . add ( testEntry ) ; } } catch ( Exception e ) { } } return queue ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void itShouldNotBePossibleToSigninWithAnInvalidEmail ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePassword ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void successfulSigninShouldBringUserToHomePage ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserTryingToGetToAboutPageShouldBeRedirectedThereAfterSignin/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void aUserTryingToGetToAboutPageShouldBeRedirectedThereAfterSignin ( ) { driver . get ( baseUrl + "/pages/about" ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; AboutPage aboutPage = ( AboutPage ) loginPage . submitForm ( AboutPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserShouldBeAbleToVisitAllPagesAfterSignin/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void aUserShouldBeAbleToVisitAllPagesAfterSignin ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToBeersPageViaMenu ( ) . goToBeersPageViaMenu ( ) . goToAJAXPageViaMenu ( ) . goToGenerateTestDataPageViaMenu ( ) . goToCorporateInformationPageViaMenu ( ) ; } </DOCUMENT>
<DOCUMENT_ID="aUserShouldBeAbleToGetDetailsInformationAboutACompany/tree/master/MVCDemoUserAcceptanceTests/src/test/java/ch/heigvd/amt/uat/selenium/MVCDemoTest.java"> public void aUserShouldBeAbleToGetDetailsInformationAboutACompany ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToCorporateInformationPageViaMenu ( ) . clickOnFirstCompanyLinkInCompaniesTable ( ) ; } </DOCUMENT>
<DOCUMENT_ID="itShouldNotBePossibleToSigninWithAnInvalidEmail/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void itShouldNotBePossibleToSigninWithAnInvalidEmail ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address" ) ; loginPage . typePassword ( "any ▁ password" ) ; loginPage . submitFormExpectingFailure ( ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulSigninShouldBringUserToHomePage/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void successfulSigninShouldBringUserToHomePage ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( "a@a.com" ) ; loginPage . typePassword ( "any ▁ password" ) ; YourAppPage yourapppage = ( YourAppPage ) loginPage . submitForm ( YourAppPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="ClickCreateAccountButtonShouldBringUserToAccountRegistrationPage/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void ClickCreateAccountButtonShouldBringUserToAccountRegistrationPage ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; AccountRegistrationPage accountregistrationpage = ( AccountRegistrationPage ) loginPage . submitForm ( AccountRegistrationPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="aWrongLoginStaysToHomePage/tree/master/project/GoomY/src/test/java/ch/heigvd/amt/goomy/selenium/GOOMYTest.java"> public void aWrongLoginStaysToHomePage ( ) throws InterruptedException { Thread . sleep ( 2000 ) ; driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; Thread . sleep ( 2000 ) ; homePage . typeIncorrectCreditentials ( ) ; Thread . sleep ( 5000 ) ; if ( ! "GoomY" . equals ( driver . getTitle ( ) ) ) { throw new IllegalStateException ( "This ▁ is ▁ not ▁ the ▁ correct ▁ page" ) ; } } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="successfulCreatAccountShouldBringUserToyourAppPage/tree/master/GamificationProjectTest/src/test/java/ch/heigvd/amt/uat/selenium/GamificationProjectTest.java"> public void successfulCreatAccountShouldBringUserToyourAppPage ( ) { driver . get ( baseUrl + "/pages/yourApps" ) ; AccountRegistrationPage creatAccountPage = new AccountRegistrationPage ( driver ) ; creatAccountPage . typeEmailAddress ( "a@a.com" ) ; creatAccountPage . typeFirstname ( "any ▁ firstname" ) ; creatAccountPage . typeLastname ( "any ▁ lastname" ) ; creatAccountPage . typeLastname ( "any ▁ lastname" ) ; creatAccountPage . typePassword ( "any ▁ password" ) ; creatAccountPage . typeConfirmPassword ( "any ▁ password" ) ; YourAppPage yourapppage = ( YourAppPage ) creatAccountPage . submitForm ( YourAppPage . class ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/common/test/java/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testWSO2FormatTestCase/tree/master/src/main/resources/WSO2FormatTestCase.java"> public void testWSO2FormatTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates/tree/master/firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void testCanBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UsernamePasswordCredentials user = new UsernamePasswordCredentials ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanBlockInvalidSslCertificates/tree/master/firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void testCanBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testGetAndCheckText/tree/master/answer/test/java/introwork/IntroWork7Test.java"> public void testGetAndCheckText ( ) throws Exception { File html = new File ( "introwork/introWork7.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement total = driver . findElement ( By . id ( "total" ) ) ; assertThat ( total . getText ( ) , is ( "9000" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnElementFoundInADifferentFrameViaJsShouldHaveSameId/tree/master/java/client/test/org/openqa/selenium/ElementEqualityTest.java"> public void testAnElementFoundInADifferentFrameViaJsShouldHaveSameId ( ) { String url = appServer . whereIs ( "missedJsReference.html" ) ; driver . get ( url ) ; driver . switchTo ( ) . frame ( "inner" ) ; WebElement first = driver . findElement ( By . id ( "oneline" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement element = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( "return ▁ frames[0].document.getElementById('oneline');" ) ; driver . switchTo ( ) . frame ( "inner" ) ; WebElement second = driver . findElement ( By . id ( "oneline" ) ) ; checkIdEqualityIfRemote ( first , element ) ; checkIdEqualityIfRemote ( second , element ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnElementFoundInADifferentFrameViaJsCanBeUsed/tree/master/java/client/test/org/openqa/selenium/ElementFindingTest.java"> public void testAnElementFoundInADifferentFrameViaJsCanBeUsed ( ) { String url = appServer . whereIs ( "missedJsReference.html" ) ; driver . get ( url ) ; try { driver . switchTo ( ) . frame ( "inner" ) ; WebElement first = driver . findElement ( By . id ( "oneline" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement element = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( "return ▁ frames[0].document.getElementById('oneline');" ) ; driver . switchTo ( ) . frame ( "inner" ) ; WebElement second = driver . findElement ( By . id ( "oneline" ) ) ; assertEquals ( first , element ) ; assertEquals ( second , element ) ; } finally { driver . switchTo ( ) . defaultContent ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="testESStoreBookmarkTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"> public void testESStoreBookmarkTestCase ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="shouldHaveTokenAssociatedAfterOAuth/tree/master/tests/src/test/java/org/kontinuity/catapult/test/GitHubResourceIT.java"> public void shouldHaveTokenAssociatedAfterOAuth ( ) throws IOException { </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = waitFor ( alertToBePresent ( driver ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testClearAndSendKeys/tree/master/answer/test/java/introwork/IntroWork3Test.java"> public void testClearAndSendKeys ( ) throws Exception { File html = new File ( "introwork/introWork3.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement subject = driver . findElement ( By . id ( "subject" ) ) ; subject . clear ( ) ; subject . sendKeys ( "Selenium" ) ; } </DOCUMENT>
<DOCUMENT_ID="testReserveWith9MembersUsingCalendarUtility/tree/master/answer/test/java/practicework/work1/PracticeWork1Test.java"> public void testReserveWith9MembersUsingCalendarUtility ( ) { File html = new File ( "reserveApp/index.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; </DOCUMENT>
<DOCUMENT_ID="testSelectOptionByValue/tree/master/answer/test/java/introwork/IntroWork6Test.java"> public void testSelectOptionByValue ( ) throws Exception { File html = new File ( "introwork/introWork6.html" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement headCount = driver . findElement ( By . id ( "head_count" ) ) ; Select select = new Select ( headCount ) ; select . selectByValue ( "5" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void testESPublishToStore ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testPostConnectivityDataTenTimes/tree/master/tvb/tests/ui_tests/functional_tests/src/main/java/org/tvb/tests/ConnectivityTest.java"> public void testPostConnectivityDataTenTimes ( ) throws Exception { loginAdmin ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { postConnectivityData ( ) ; webDriver . get ( baseUrl + USER_PROFILE_URL_SUFFIX ) ; WebElement logout = findElement ( By . name ( "logout" ) ) ; assertEquals ( "button" , logout . getTagName ( ) ) ; assertEquals ( "submit" , logout . getAttribute ( "type" ) ) ; } logout ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void testESPublisherAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"> public void testESPublisherAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnPopularity/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnPopularity ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnAlphabeticalOrder/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnAlphabeticalOrder ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnCreatedTime/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnCreatedTime ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideRendererTestCase.java"> public void testESPublisherAssetOverrideRendererTestCase ( ) throws Exception { driver . get ( lifecycleUrl ) ; assertTrue ( isElementPresent ( By . id ( "assetLifecyclePartial" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetLifecyclePartial" ) ) . getText ( ) , "Asset ▁ Overridden ▁ Lifecycle ▁ through ▁ renderer" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void testESPublisherAssetCaramelPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreBeforeAddRatings/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"> public void testStoreBeforeAddRatings ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( "socialIfr" ) ) ) ; assertEquals ( "Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review" , driver . findElement ( By . cssSelector ( "div.com-guest" ) ) . getText ( ) ) ; assertEquals ( "Be ▁ the ▁ first ▁ one ▁ to ▁ review!" , driver . findElement ( By . cssSelector ( "p.com-first-review" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testListPageSortByName/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"> public void testListPageSortByName ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . partialLinkText ( "NAME" ) ) . click ( ) ; assertEquals ( NAME_SORT_ASSET_1 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[1]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; assertEquals ( NAME_SORT_ASSET_2 , driver . findElement ( By . xpath ( " // tbody[@id='list-asset-table-body']/tr[14]/td[2]" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"> public void testESStoreNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void testESPublisherAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/gadget/list" ) ; driver . findElement ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Service" ) ) . click ( ) ; driver . get ( baseUrl + "/publisher/asts/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void testESPublisherAssetOverridePartialTestCase ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( By . id ( "assetOverriddenListingH1" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetOverriddenListingH1" ) ) . getText ( ) , "New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreBookmarkTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"> public void testESStoreBookmarkTestCase ( ) throws Exception { driver . get ( baseUrl + STORE_TOP_ASSETS_PAGE ) ; driver . findElement ( By . xpath ( " // i[@class='icon-cog']" ) ) . click ( ) ; </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"> public void testESStoreAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void testESRegisterUserTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"> public void testESPublisherNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"> public void testESStoreAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; driver . findElementPoll ( By . id ( "assetListingPageH1" ) , POLL_COUNT ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"> public void testESPublisherOverridenGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"> public void testESStoreAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/common/test/java/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void testGetCookieDoesNotRetriveBeyondCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void testESPublishToStore ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testBaseURLExternalLinks/tree/master/software/junit-test/output/TestTermBrowserTestCase.java"> public void testBaseURLExternalLinks ( ) throws Exception { try { driver . get ( baseUrl ) ; java . util . List < WebElement > links = driver . findElements ( By . tagName ( "a" ) ) ; HashSet hset = new HashSet ( ) ; int lcv = 0 ; for ( int i = 0 ; i < links . size ( ) ; i ++ ) { String href = links . get ( i ) . getAttribute ( "href" ) ; if ( href != null && href . length ( ) > 0 ) { if ( ! hset . contains ( href ) ) { hset . add ( href ) ; } } } Iterator it = hset . iterator ( ) ; while ( it . hasNext ( ) ) { String href = ( String ) it . next ( ) ; if ( ! href . startsWith ( baseUrl ) ) { lcv ++ ; int responseCode = getHTTPResponseCode ( href ) ; System . out . println ( "(" + lcv + ") ▁ " + href + " ▁ (response ▁ code: ▁ " + responseCode + ")" ) ; assertTrue ( responseCode == 200 ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; assertTrue ( false ) ; } assertTrue ( true ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldFlingViaCatapultConsoleButton/tree/master/tests/src/test/java/org/kontinuity/catapult/test/CatapultConsoleIT.java"> public void shouldFlingViaCatapultConsoleButton ( ) throws IOException { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/common/test/java/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/src/main/resources/archetype-resources/src/test/java/SampleTestNgTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "simpleTest.html" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( "fish" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetCookieDoesNotRetriveBeyondCurrentDomain/tree/master/common/test/java/org/openqa/selenium/CookieImplementationTest.java"> public void testGetCookieDoesNotRetriveBeyondCurrentDomain ( ) { Cookie cookie1 = new Cookie ( "fish" , "cod" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( "" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testCreateEventJUnit4/tree/master/eventize/src/test/TestCreateEvent_JUnit4.java"> public void testCreateEventJUnit4 ( ) throws Exception { driver . get ( baseUrl + "/" ) ; driver . findElement ( By . linkText ( "inputLogin ▁ using ▁ your ▁ gmail ▁ account" ) ) . click ( ) ; driver . findElement ( By . id ( "Email" ) ) . clear ( ) ; driver . findElement ( By . id ( "Email" ) ) . sendKeys ( "harshithachidanand" ) ; driver . findElement ( By . id ( "next" ) ) . click ( ) ; driver . findElement ( By . id ( "Passwd" ) ) . clear ( ) ; driver . findElement ( By . id ( "Passwd" ) ) . sendKeys ( "" ) ; driver . findElement ( By . id ( "next" ) ) . click ( ) ; driver . findElement ( By . id ( "eventName" ) ) . clear ( ) ; driver . findElement ( By . id ( "eventName" ) ) . sendKeys ( "New ▁ events" ) ; driver . findElement ( By . id ( "eventTagline" ) ) . clear ( ) ; driver . findElement ( By . id ( "eventTagline" ) ) . sendKeys ( "New ▁ is ▁ awesome" ) ; driver . findElement ( By . xpath ( " // table[@id='eventDate_table']/tbody/tr[3]/td[6]/div" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "button.btn-flat.picker__close" ) ) . click ( ) ; driver . findElement ( By . id ( "eventTime" ) ) . clear ( ) ; driver . findElement ( By . id ( "eventTime" ) ) . sendKeys ( "9:00AM" ) ; driver . findElement ( By . id ( "duration" ) ) . clear ( ) ; driver . findElement ( By . id ( "duration" ) ) . sendKeys ( "2 ▁ hours" ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#select-options-815bcc23-dabb-d8e7-0c54-cc604715e2d4 ▁ > ▁ li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#select-options-091efa9b-6d5f-ef96-ae17-69722f5ba9b7 ▁ > ▁ li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "input.select-dropdown.active" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "#select-options-7ed503fc-e8cb-c3b8-0752-c157b27088ea ▁ > ▁ li.active ▁ > ▁ span" ) ) . click ( ) ; driver . findElement ( By . id ( "capacity" ) ) . clear ( ) ; driver . findElement ( By . id ( "capacity" ) ) . sendKeys ( "90" ) ; driver . findElement ( By . id ( "location" ) ) . clear ( ) ; driver . findElement ( By . id ( "location" ) ) . sendKeys ( "HFH" ) ; driver . findElement ( By . id ( "description" ) ) . clear ( ) ; driver . findElement ( By . id ( "description" ) ) . sendKeys ( "yep! ▁ come ▁ n ▁ see ▁ what ▁ new" ) ; driver . findElement ( By . id ( "createrName" ) ) . clear ( ) ; driver . findElement ( By . id ( "createrName" ) ) . sendKeys ( "Harshitha" ) ; driver . findElement ( By . id ( "createrEmail" ) ) . clear ( ) ; driver . findElement ( By . id ( "createrEmail" ) ) . sendKeys ( "har@gmail.com" ) ; driver . findElement ( By . name ( "action" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // ul[@id='nav-mobile']/li[3]/a" ) ) . click ( ) ; driver . findElement ( By . linkText ( "call_madeSignout" ) ) . click ( ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; WebElement element = wait . until ( presenceOfElementLocated ( By . tagName ( "h1" ) ) ) ; assertEquals ( "authorized" , element . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/common/test/java/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; driver . get ( url ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideExistingPageTestCase.java"> public void testESPublisherAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideRendererTestCase.java"> public void testESPublisherAssetOverrideRendererTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/lifecycle" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetOverrideExistingPageTestCase.java"> public void testESStoreAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testNotFoundNoAlert/tree/master/tests/selenium/java_package/src/selenium_package/tests/second_page/TestSecondPage.java"> public void testNotFoundNoAlert ( ) throws Exception { driver . get ( baseUrl + "not_found" ) ; assertFalse ( isAlertPresent ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetNewPageTestCase.java"> public void testESPublisherAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "servicexNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testNotFoundNoAlert/tree/master/tests/selenium/java_package/src/selenium_package/tests/TestStaff.java"> public void testNotFoundNoAlert ( ) throws Exception { driver . get ( baseUrl + "not_found" ) ; assertFalse ( isAlertPresent ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverridePartialTestCase.java"> public void testESPublisherAssetOverridePartialTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/update" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAddedAssetTestCase.java"> public void testESStoreAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetCaramelPageTestCase.java"> public void testESPublisherAssetCaramelPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/asts/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetNewPageTestCase.java"> public void testESStoreAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/asts/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="displaysPolicyUrlInLoginPage/tree/master/Client/src/test/java/org/xdi/oxauth/interop/DisplaysPolicyUriInLoginPage.java"> public void displaysPolicyUrlInLoginPage ( final String redirectUris , final String redirectUri ) throws Exception { showTitle ( "OC5:FeatureTest-Displays ▁ Policy ▁ in ▁ Login ▁ Page" ) ; List < ResponseType > responseTypes = Arrays . asList ( ResponseType . CODE ) ; String policyUri = "http: // www.gluu.org/policy" ; </DOCUMENT>
<DOCUMENT_ID="displaysLogoInLoginPage/tree/master/Client/src/test/java/org/xdi/oxauth/interop/DisplaysLogoInLoginPage.java"> public void displaysLogoInLoginPage ( final String redirectUris , final String redirectUri ) throws Exception { showTitle ( "OC5:FeatureTest-Displays ▁ Logo ▁ in ▁ Login ▁ Page" ) ; List < ResponseType > responseTypes = Arrays . asList ( ResponseType . CODE ) ; String logoUri = "http: // www.gluu.org/wp-content/themes/gluursn/images/logo.png" ; </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void testESPublisherAssetOverridePartialTestCase ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOverriddenListingH1" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetOverriddenListingH1" ) ) . getText ( ) , "New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testHomePageHasAHeader/tree/master/src/test/java/ru/stqa/selenium/SampleTestNgTest.java"> public void testHomePageHasAHeader ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( "" . equals ( homepage . header . getText ( ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl/tree/master/support/test/java/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void testCanNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testCanNavigateToAGivenUrl/tree/master/support/test/java/org/openqa/selenium/lift/TestContextTest.java"> public void testCanNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void testESPublisherAssetOverridePartialTestCase ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOverriddenListingH1" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetOverriddenListingH1" ) ) . getText ( ) , "New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideListAssetBodyPartialTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverridePartialTestCase.java"> public void testESPublisherAssetOverrideListAssetBodyPartialTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; assertTrue ( isElementPresent ( driver , By . className ( "assetOverriddenListingElement" ) ) ) ; assertEquals ( driver . findElement ( By . className ( "assetOverriddenListingElement" ) ) . getText ( ) , "New ▁ Asset ▁ List ▁ Partial ▁ of ▁ Publisher" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/ios-selenium-tests/src/test/java/org/uiautomation/ios/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreBookmarkTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreBookmarkTestCase.java"> public void testESStoreBookmarkTestCase ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testESRegisterUserTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRegisterUserTestCase.java"> public void testESRegisterUserTestCase ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testRestrictAddAssetAsReviewer/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void testRestrictAddAssetAsReviewer ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; assertTrue ( ! isElementPresent ( driver , By . id ( "Addgadget" ) ) , "User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ add ▁ " + "asset." ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictEditAssetAsReviewer/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void testRestrictEditAssetAsReviewer ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "h3.ast-name" ) ) . click ( ) ; assertTrue ( ! isElementPresent ( driver , By . id ( "Edit" ) ) , "User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ edit ▁ " + "asset." ) ; } </DOCUMENT>
<DOCUMENT_ID="testRestrictVersionAssetAsReviewer/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void testRestrictVersionAssetAsReviewer ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( "h3.ast-name" ) ) . click ( ) ; assertTrue ( ! isElementPresent ( driver , By . id ( "Version" ) ) , "User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ version" + "asset." ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublishToStore/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESPublishToStore.java"> public void testESPublishToStore ( ) throws Exception { </DOCUMENT>
<DOCUMENT_ID="testRestrictLoginToStoreAsReviewer/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsReviewerTestCase.java"> public void testRestrictLoginToStoreAsReviewer ( ) throws Exception { driver . get ( baseUrl + STORE_TOP_ASSETS_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( "btn-signin" ) ) ) ; driver . findElement ( By . id ( "btn-signin" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "You ▁ do ▁ not ▁ have ▁ permission ▁ to ▁ login ▁ to ▁ this" + " ▁ application.Please ▁ contact ▁ your ▁ administrator ▁ and ▁ request ▁ permission." ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetNewPageTestCase.java"> public void testESPublisherAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testRestrictLoginToPublisherAsStoreOnlyUser/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESRBACAsStoreUserTestCase.java"> public void testRestrictLoginToPublisherAsStoreOnlyUser ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; assertEquals ( driver . findElement ( By . cssSelector ( "h3" ) ) . getText ( ) , "You ▁ do ▁ not ▁ have ▁ permission ▁ to ▁ login ▁ to ▁ this" + " ▁ application.Please ▁ contact ▁ your ▁ administrator ▁ and ▁ request ▁ permission." ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetCaramelPageTestCase.java"> public void testESPublisherAssetCaramelPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideExistingPageTestCase.java"> public void testESPublisherAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/list" ) ; </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreNewGlobalPageTestCase.java"> public void testESStoreNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideExistingPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideExistingPageTestCase.java"> public void testESPublisherAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/details" ) ; assertTrue ( isElementPresent ( By . id ( "assetOveriddenDetailsPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAssetOverrideRendererTestCase.java"> public void testESPublisherAssetOverrideRendererTestCase ( ) throws Exception { driver . get ( lifecycleUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetLifecyclePartial" ) ) ) ; assertEquals ( driver . findElement ( By . id ( "assetLifecyclePartial" ) ) . getText ( ) , "Asset ▁ Overridden ▁ Lifecycle ▁ through ▁ renderer" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherOverridenGlobalPageTestCase.java"> public void testESPublisherOverridenGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherNewGlobalPageTestCase.java"> public void testESPublisherNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testSelfSignUpForm/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/common/ESSelfSignUpTestCase.java"> public void testSelfSignUpForm ( ) throws Exception { driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Configure')]" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Claim ▁ Management" ) ) . click ( ) ; driver . findElement ( By . linkText ( "http: // wso2.org/claims" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // span[contains(.,'Country')]" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // a[@href='update-claim.jsp?dialect=http: // wso2.org/claims&claimUri=http: // wso2.org/claims/country']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // input[@id='required']" ) ) . click ( ) ; driver . findElement ( By . xpath ( " // input[@value='Update']" ) ) . click ( ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( driver , By . name ( "reg-country" ) ) , "New ▁ claim ▁ is ▁ not ▁ shown ▁ up ▁ in ▁ sign ▁ up ▁ form" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetNewPageTestCase.java"> public void testESStoreAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAddedAssetTestCase.java"> public void testESStoreAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/assets/service/list" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; </DOCUMENT>
<DOCUMENT_ID="testListPageSortByName/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/publisher/ESPublisherListPageSortTestCase.java"> public void testListPageSortByName ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . cssSelector ( "#dropdownMenu1 ▁ > ▁ img" ) ) . click ( ) ; driver . findElement ( By . linkText ( "Name" ) ) . click ( ) ; assertEquals ( NAME_SORT_ASSET_1 , driver . findElement ( By . xpath ( "/html/body/div/div[3]/div/div[3]/div/div[1]/div/div/a/h3" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; assertEquals ( NAME_SORT_ASSET_2 , driver . findElement ( By . xpath ( "/html/body/div/div[3]/div/div[3]/div/div[2]/div/div/a/h3" ) ) . getText ( ) , "Sort ▁ on ▁ name ▁ failed" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverridePartialTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverridePartialTestCase.java"> public void testESPublisherAssetOverridePartialTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/update" ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnPopularity/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnPopularity ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetCaramelPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetCaramelPageTestCase.java"> public void testESPublisherAssetCaramelPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/new_caramel_page" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "span.publisherTitle" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Overview" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Edit" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( "Life ▁ Cycle" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnAlphabeticalOrder/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnAlphabeticalOrder ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testStoreSortOnCreatedTime/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonCategorySortingTestCase.java"> public void testStoreSortOnCreatedTime ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetOverrideRendererTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetOverrideRendererTestCase.java"> public void testESPublisherAssetOverrideRendererTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/lifecycle" ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/publisher/ESPublisherAddedAssetTestCase.java"> public void testESPublisherAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; </DOCUMENT>
<DOCUMENT_ID="testESPublisherAssetNewPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAssetNewPageTestCase.java"> public void testESPublisherAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( By . id ( "servicexNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetOverrideExistingPageTestCase.java"> public void testESStoreAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/list" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetOverrideExistingPageTestCase/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAssetOverrideExistingPageTestCase.java"> public void testESStoreAssetOverrideExistingPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/list" ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreAssetNewPageTestCase/tree/master/modules/integration/tests-ui-integration/tests-ui-extension/src/test/java/org/wso2/es/ui/integration/extension/test/store/ESStoreAssetNewPageTestCase.java"> public void testESStoreAssetNewPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/assets/servicex/new_page" ) ; assertTrue ( isElementPresent ( driver , By . id ( "assetNewPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testESStoreAddedAssetTestCase/tree/master/modules/integration/selenium/generated/store/extensions/asset/ESStoreAddedAssetTestCase.java"> public void testESStoreAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . xpath ( " // div[@id='container-search']/div/div/div/div/a[3]/li" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . id ( "assetListingPageH1" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testStoreBeforeAddRatings/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreRatingsTestCase.java"> public void testStoreBeforeAddRatings ( ) throws Exception { driver . get ( baseUrl + "/store/assets/gadget/list" ) ; driver . findElement ( By . cssSelector ( "i.icon-cog" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( "h4" ) ) . click ( ) ; driver . findElement ( By . linkText ( "User ▁ Reviews" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( "socialIfr" ) ) ) ; assertEquals ( "Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review" , driver . findElement ( By . cssSelector ( "div.com-guest" ) ) . getText ( ) ) ; assertEquals ( "Be ▁ the ▁ first ▁ one ▁ to ▁ review!" , driver . findElement ( By . cssSelector ( "p.com-first-review" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } </DOCUMENT>
<DOCUMENT_ID="testAnonAssetListingPage/tree/master/modules/integration/tests-ui-integration/tests-ui/src/test/java/org/wso2/es/ui/integration/test/store/ESStoreAnonTenantHomePageTestCase.java"> public void testAnonAssetListingPage ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( ".ctrl-wr-asset" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( ".app-logo" ) ) , "Home ▁ Page ▁ error: ▁ Logo ▁ missing" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( ".ctrl-wr-asset" ) ) , "Home ▁ Page ▁ error: ▁ Gadgets ▁ list ▁ is ▁ not ▁ populated" ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = waitFor ( alertToBePresent ( driver ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void canNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void canNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherNewGlobalPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherNewGlobalPageTestCase.java"> public void testESPublisherNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESStoreNewGlobalPageTestCase/tree/master/modules/integration/selenium/generated/store/extensions/app/ESStoreNewGlobalPageTestCase.java"> public void testESStoreNewGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/store/pages/servicex_global" ) ; assertTrue ( isElementPresent ( By . id ( "assetNewGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherOverridenGlobalPageTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherOverridenGlobalPageTestCase.java"> public void testESPublisherOverridenGlobalPageTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/pages/splash" ) ; assertTrue ( isElementPresent ( By . id ( "assetOverridenGlobalPage" ) ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testESPublisherAddedAssetTestCase/tree/master/modules/integration/selenium/generated/publisher/extensions/ESPublisherAddedAssetTestCase.java"> public void testESPublisherAddedAssetTestCase ( ) throws Exception { driver . get ( baseUrl + "/publisher/" ) ; assertTrue ( isElementPresent ( By . cssSelector ( "button.btn.dropdown-toggle" ) ) ) ; </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; WebElement element = wait . until ( presenceOfElementLocated ( By . tagName ( "h1" ) ) ) ; assertEquals ( "authorized" , element . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testGetInfoFromSecurityContext/tree/master/uberfire-workbench/uberfire-workbench-client-tests/src/test/java/org/uberfire/wbtest/selenium/UserCookieTest.java"> public void testGetInfoFromSecurityContext ( ) throws Exception { User user = makeTestUser ( ) ; String jsonUser = UserCookieEncoder . toCookieValue ( user ) ; </DOCUMENT>
<DOCUMENT_ID="testGetInfoFromInjectedUser/tree/master/uberfire-workbench/uberfire-workbench-client-tests/src/test/java/org/uberfire/wbtest/selenium/UserCookieTest.java"> public void testGetInfoFromInjectedUser ( ) throws Exception { User user = makeTestUser ( ) ; String jsonUser = UserCookieEncoder . toCookieValue ( user ) ; </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UserAndPassword user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void canNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void canNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldReturnURLOnNotExistedPage/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void testShouldReturnURLOnNotExistedPage ( ) { String url = appServer . whereIs ( "not_existed_page.html" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="handleFormWithJavascriptAction/tree/master/java/client/test/org/openqa/selenium/FormHandlingTest.java"> public void handleFormWithJavascriptAction ( ) { String url = appServer . whereIs ( "form_handling_js_submit.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "theForm" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( "Tasty ▁ cheese" , text ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability/tree/master/java/client/test/org/openqa/selenium/PageLoadingTest.java"> public void shouldBeAbleToDisableAcceptOfInsecureSslCertsWithRequiredCapability ( ) { </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports ( ) { String url = appServer . whereIs ( "click_too_big.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInTheViewport/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInTheViewport ( ) { String url = appServer . whereIs ( "click_out_of_bounds.html" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( "button" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( "click_too_big_in_frame.html" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( "iframe1" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( "click" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooter ( ) { String url = appServer . whereIs ( "fixedFooterNoScroll.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnLinkInAbsolutelyPositionedFooterInQuirksMode ( ) { String url = appServer . whereIs ( "fixedFooterNoScrollQuirksMode.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "XHTML ▁ Test ▁ Page" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToClickOnRTLLanguageLink/tree/master/java/client/test/org/openqa/selenium/ClickTest.java"> public void testShouldBeAbleToClickOnRTLLanguageLink ( ) { String url = appServer . whereIs ( "click_rtl.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "ar_link" ) ) ; element . click ( ) ; wait . until ( titleIs ( "clicks" ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldBeAbleToReturnTheTextInAPage/tree/master/java/client/test/org/openqa/selenium/I18nTest.java"> public void testShouldBeAbleToReturnTheTextInAPage ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( "encoding" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( "body" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } </DOCUMENT>
<DOCUMENT_ID="tooSmallAWindowWithOverflowHiddenIsNotAProblem/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void tooSmallAWindowWithOverflowHiddenIsNotAProblem ( ) { </DOCUMENT>
<DOCUMENT_ID="parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void parentNodeVisibleWhenAllChildrenAreAbsolutelyPositionedAndOverflowIsHidden ( ) { String url = appServer . whereIs ( "visibility-css.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "suggest" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "child" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldShowElementNotVisibleWithHiddenAttribute/tree/master/java/client/test/org/openqa/selenium/VisibilityTest.java"> public void shouldShowElementNotVisibleWithHiddenAttribute ( ) { String url = appServer . whereIs ( "hidden.html" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( "singleHidden" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="testShouldScrollToClickOnAnElementHiddenByOverflow/tree/master/java/client/test/org/openqa/selenium/ClickScrollingTest.java"> public void testShouldScrollToClickOnAnElementHiddenByOverflow ( ) { String url = appServer . whereIs ( "click_out_of_bounds_overflow.html" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( "link" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( "Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ " + e . getMessage ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="canBlockInvalidSslCertificates/tree/master/java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java"> public void canBlockInvalidSslCertificates ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( "simpleTest.html" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( "Hello ▁ WebDriver" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( "Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed." ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="canAuthenticateUsingBasicAuthentication/tree/master/java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java"> public void canAuthenticateUsingBasicAuthentication ( ) { String url = appServer . whereIs ( "basicAuth" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( "test" , "test" ) ; alert . authenticateUsing ( user ) ; assertEquals ( "authorized" , driver . findElement ( By . tagName ( "h1" ) ) . getText ( ) ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/TestContextTest.java"> public void canNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="canNavigateToAGivenUrl/tree/master/java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java"> public void canNavigateToAGivenUrl ( ) throws Exception { final String url = "http: // www.example.com" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } </DOCUMENT>
<DOCUMENT_ID="shouldCreateASeparateSessionWithEveryNewDriverInstance/tree/master/test/ghostdriver-test/java/src/test/java/ghostdriver/IsolatedSessionTest.java"> public void shouldCreateASeparateSessionWithEveryNewDriverInstance ( ) { WebDriver d = getDriver ( ) ; d . get ( url ) ; </DOCUMENT>
