{"id":"97ccd3ba2fda131252b7c06f69667fa561454557","size":"2913","content":"package uk.co.hmtt.gym.config.web;\n\nimport org.openqa.selenium.WebDriver;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport uk.co.hmtt.gym.app.model.User;\nimport uk.co.hmtt.gym.app.service.UserService;\nimport uk.co.hmtt.gym.app.web.WebDriverFactory;\nimport uk.co.hmtt.gym.app.web.process.HomePageSelection;\nimport uk.co.hmtt.gym.app.web.process.Logon;\n\nimport java.util.Collections;\n\npublic class GymAuthenticationProvider implements AuthenticationProvider {\n\n    @Value(\"${gym.url}\")\n    private String gymUrl;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private Logon logon;\n\n    @Autowired\n    private WebDriverFactory webDriverFactory;\n\n    @Autowired\n    private HomePageSelection homePageSelection;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\n        User clientSubmittedDetails = new User();\n        clientSubmittedDetails.setEmail((String)authentication.getPrincipal());\n        clientSubmittedDetails.setPasscode((String)authentication.getCredentials());\n\n        final User user = userService.getUser((String)authentication.getPrincipal());\n\n        if (user == null) {\n            return null;\n        }\n\n        final WebDriver driver = webDriverFactory.newInstance();\n        driver.get(gymUrl);\n\n        logon.logon(driver, clientSubmittedDetails);\n        final boolean successfullyLoggedOn = homePageSelection.confirmLoggedIn(driver);\n\n        driver.quit();\n\n        if (successfullyLoggedOn)\n        {\n            user.setPasscode((String)authentication.getCredentials());\n            userService.updateUserForSuccessfullLogon(user);\n            GrantedAuthority grantedAuths = new SimpleGrantedAuthority(\"ROLE_USER\");\n            org.springframework.security.core.userdetails.User appUser = new GymUser((String)authentication.getPrincipal(),(String)authentication.getCredentials(), true, true, true, true,Collections.singleton(grantedAuths), user);\n            return  new UsernamePasswordAuthenticationToken(appUser, authentication.getCredentials(), Collections.singleton(grantedAuths));\n        }\n        else\n        {\n            userService.updateUserForFailedLogon(user);\n            return null;\n        }\n\n    }\n\n    @Override\n    public boolean supports(Class\u003c?\u003e authentication) {\n        return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));\n    }\n}\n","binary":false,"copies":"1","sample_repo_name":"hmtt/gym","sample_path":"src/main/java/uk/co/hmtt/gym/config/web/GymAuthenticationProvider.java"}
{"id":"75fd9ff418f1e7cfd23bf48b2884537472a73208","size":"848","content":"package uk.co.hmtt.gym.app.web.process;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.support.PageFactory;\nimport org.springframework.stereotype.Component;\nimport uk.co.hmtt.gym.app.web.pageobjects.ActivityPage;\n\nimport java.util.Set;\n\n@Component\npublic class ActivityPageAction {\n\n    public Set\u003cString\u003e readAllActivities(final WebDriver driver) {\n        final ActivityPage activityPage = PageFactory.initElements(driver, ActivityPage.class);\n        activityPage.waitForPageToLoad(driver);\n        return activityPage.readBookingLinks();\n    }\n\n    public void clickOnLink(final WebDriver driver, String linkOnPage) {\n        final ActivityPage activityPage = PageFactory.initElements(driver, ActivityPage.class);\n        activityPage.waitForPageToLoad(driver);\n        activityPage.clickOnLink(driver, linkOnPage);\n    }\n\n}\n","binary":false,"copies":"1","sample_repo_name":"hmtt/gym","sample_path":"src/main/java/uk/co/hmtt/gym/app/web/process/ActivityPageAction.java"}
{"id":"ecbe65db834dfdebdbb69381b3fd3fdc836eccb6","size":"5854","content":"package uk.co.hmtt.gym.app.web;\n\nimport static uk.co.hmtt.gym.app.utilities.DateUtility.isDateExcluded;\n\nimport java.text.ParseException;\nimport java.util.*;\n\nimport org.apache.commons.collections.CollectionUtils;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport uk.co.hmtt.gym.app.model.Activity;\nimport uk.co.hmtt.gym.app.model.Exclusion;\nimport uk.co.hmtt.gym.app.model.User;\nimport uk.co.hmtt.gym.app.model.UserActivity;\nimport uk.co.hmtt.gym.app.service.UserActivityService;\n\n//import uk.co.hmtt.gym.app.dao.TextFileUserActivity;\n\n@Component\npublic class Booker {\n\n    final Logger logger = LoggerFactory.getLogger(Booker.class);\n\n    @Value(\"${gym.url}\")\n    private String gymUrl;\n\n    @Autowired\n    private UserActivityService userActivityService;\n\n    @Autowired\n    private WebDriverFactory webDriverFactory;\n\n    public void book() {\n        final Map\u003cUser, Set\u003cUserActivity\u003e\u003e bookingRequests = userActivityService.getBookingRequests();\n\n        Iterator\u003cMap.Entry\u003cUser, Set\u003cUserActivity\u003e\u003e\u003e iterator = bookingRequests.entrySet().iterator();\n\n        while (iterator.hasNext()) {\n            Map.Entry\u003cUser, Set\u003cUserActivity\u003e\u003e user = iterator.next();\n            if (!user.getKey().isEnabled()) {\n                logger.debug(\"Skipping user {}. Not enabled.\", user.getKey().getEmail());\n                continue;\n            }\n            final WebDriver driver = webDriverFactory.newInstance();\n            try {\n                logon(driver, user.getKey().getEmail(), user.getKey().getPasscode());\n                bookClasses(driver, user.getKey(), bookingRequests.get(user.getKey()));\n            } finally {\n                driver.quit();\n            }\n        }\n\n    }\n\n    private void bookClasses(WebDriver driver, User user, Set\u003cUserActivity\u003e activities) {\n        for (UserActivity activity : activities) {\n            bookClass(driver, user, activity);\n        }\n    }\n\n    private void bookClass(WebDriver driver, User user, UserActivity activity) {\n        try {\n            driver.findElement(By.partialLinkText(\"Make a booking\")).click();\n            Thread.sleep(1000);\n            driver.findElement(By.xpath(\"//input[@value='\" + activity.getActivity().getClassName() + \"']\")).click();\n            Thread.sleep(1000);\n            driver.findElement(By.xpath(\"//input[contains(@value,'\" + activity.getActivity().getClassDate() + \"')]\")).click();\n            Thread.sleep(1000);\n\n            final WebElement table = driver.findElement(By.id(\"ctl00_MainContent_gvClasses\"));\n            final List\u003cWebElement\u003e allRows = table.findElements(By.tagName(\"tr\"));\n\n            int rowCount = 0;\n            for (WebElement row : allRows) {\n                rowCount++;\n                if (rowCount == 1) {\n                    continue;\n                }\n                final List\u003cWebElement\u003e allCells = row.findElements(By.tagName(\"td\"));\n\n                if (dateIsExcluded(activity, allCells)) {\n                    logger.debug(\"Did not book '\" + activity.getActivity().getClassName() + \"' at '\" + activity.getActivity().getClassDate() + \"' as excluded date\");\n                    continue;\n                }\n\n                allCells.get(3).findElement(By.className(\"button\")).click();\n                Thread.sleep(1000);\n                driver.findElement(By.id(\"ctl00_MainContent_btnBook\")).click();\n                logger.debug(\"\");\n                logger.debug(\"\");\n                logger.debug(\"***************************************\");\n                logger.debug(\"Booked '\" + activity.getActivity().getClassName() + \"' at '\" + activity.getActivity().getClassDate() + \"'\");\n                logger.debug(\"***************************************\");\n                logger.debug(\"\");\n                logger.debug(\"\");\n\n                activity.setLastBooked(new Date());\n                userActivityService.updateBookingRequest(activity);\n\n            }\n\n        } catch (RuntimeException e) {\n            logError(user, activity.getActivity(), e);\n        } catch (InterruptedException e) {\n            logError(user, activity.getActivity(), e);\n        }\n    }\n\n    private boolean dateIsExcluded(UserActivity activity, List\u003cWebElement\u003e allCells) {\n        if (CollectionUtils.isNotEmpty(activity.getExclusions())) {\n            final String scrappedDate = allCells.get(1).getText().trim();\n            try {\n\n                final List\u003cCalendar\u003e excludedDates = new ArrayList\u003c\u003e();\n                for (Exclusion exclusion: activity.getExclusions()) {\n                    final Calendar instance = Calendar.getInstance();\n                    instance.setTime(exclusion.getExclusionDate());\n                    excludedDates.add(instance);\n                }\n\n                if (isDateExcluded(scrappedDate, excludedDates)) {\n                    return true;\n                }\n            } catch (ParseException e) {\n                logger.error(\"Could not process exclusion\", e);\n            }\n        }\n        return false;\n    }\n\n    private void logError(User user, Activity activity, Throwable throwable) {\n        logger.debug(\"Could not book '\" + activity.getClassName() + \"' for '\" + activity.getClassDate() + \"' for client '\"+ user.getEmail() +\"'\");\n    }\n\n    private void logon(WebDriver driver, String username, String password) {\n        driver.get(gymUrl);\n        driver.findElement(By.id(\"ctl00_MainContent_InputLogin\")).sendKeys(username);\n        driver.findElement(By.id(\"ctl00_MainContent_InputPassword\")).sendKeys(password);\n        driver.findElement(By.id(\"ctl00_MainContent_btnLogin\")).click();\n    }\n\n}\n","binary":false,"copies":"1","sample_repo_name":"hmtt/gym","sample_path":"src/main/java/uk/co/hmtt/gym/app/web/Booker.java"}
{"id":"dda426aa55a243e68ed541cdaf23ab32772be99b","size":"16043","content":"package uk.co.hmtt.cukes.core.steps;\n\n\nimport static java.lang.String.format;\nimport static org.hamcrest.core.Is.is;\n\nimport cucumber.api.DataTable;\nimport cucumber.api.PendingException;\nimport cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport gherkin.formatter.model.DataTableRow;\nimport org.apache.commons.collections.Predicate;\nimport org.hamcrest.Matchers;\nimport org.hamcrest.core.Is;\nimport org.openqa.selenium.WebDriver;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.test.context.ContextConfiguration;\nimport uk.co.hmtt.cukes.core.web.pageobjects.*;\nimport uk.co.hmtt.cukes.core.web.pageobjects.Schedule;\nimport uk.co.hmtt.cukes.core.web.process.*;\nimport uk.co.hmtt.gym.app.exceptions.GymException;\nimport uk.co.hmtt.gym.app.model.User;\nimport uk.co.hmtt.cukes.configuration.CukesConfig;\nimport uk.co.hmtt.cukes.core.utilities.RuntimeScope;\nimport uk.co.hmtt.cukes.core.drivers.CukesWebDriverFactory;\nimport uk.co.hmtt.cukes.core.entities.ActivityEntity;\nimport uk.co.hmtt.cukes.core.entities.EntityDao;\nimport uk.co.hmtt.cukes.core.entities.UserActivityEntity;\nimport uk.co.hmtt.cukes.core.entities.UserEntity;\nimport uk.co.hmtt.cukes.core.utilities.DataSetExtractor;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\nimport static org.apache.commons.collections.CollectionUtils.filter;\nimport static org.apache.commons.collections.CollectionUtils.select;\nimport static org.hamcrest.CoreMatchers.notNullValue;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.*;\nimport static uk.co.hmtt.cukes.core.entities.ActivityEntity.buildActivityEntity;\nimport static uk.co.hmtt.cukes.core.entities.ExclusionEntity.buildExclusionEntity;\nimport static uk.co.hmtt.cukes.core.entities.UserEntity.buildUserEntity;\nimport static uk.co.hmtt.gym.app.utilities.Collections.safeIterator;\n\n@ContextConfiguration(classes = {CukesConfig.class})\npublic class Booking {\n\n    final Logger LOGGER = LoggerFactory.getLogger(Booking.class);\n\n    public static final String USER_EMAIL = \"USER_EMAIL\";\n    public static final String CLASS_NAME = \"CLASS_NAME\";\n    public static final String CLASS_DATE = \"CLASS_DATE\";\n    public static final String PASS_CODE = \"1111\";\n    public static final String DATA_TABLE = \"dataTable\";\n\n    @Autowired\n    private Logon logon;\n\n    @Autowired\n    private ActivityTimeProcess activityTimeProcess;\n\n    @Autowired\n    private BookClassProcess bookClassProcess;\n\n    @Autowired\n    private CukesWebDriverFactory webDriverFactory;\n\n    @Autowired\n    private RuntimeScope runtimeScope;\n\n    @Autowired\n    private ActivitiesProcess activitiesProcess;\n\n    @Autowired\n    private LogonToGym logonToGym;\n\n    @Autowired\n    private EntityDao entityDao;\n\n    @Autowired\n    private DataSetExtractor dataSetExtractor;\n\n    @Autowired\n    private ScheduleProcess scheduleProcess;\n\n    @Value(\"${gymbooker.url}\")\n    private String gymBookerUrl;\n\n    @When(\"^the user books the class$\")\n    public void the_user_books_the_class() throws Throwable {\n\n        final User user = new User();\n        user.setEmail(runtimeScope.getScenarioData(USER_EMAIL));\n        user.setPasscode(PASS_CODE);\n\n        logon.the_user_logs_onto_the_site();\n\n        activitiesProcess.isLoaded();\n        activitiesProcess.selectActivity(runtimeScope.getScenarioData(CLASS_NAME));\n        activityTimeProcess.selectActivityTime(runtimeScope.getScenarioData(CLASS_DATE));\n        bookClassProcess.bookClass();\n\n    }\n\n    @Given(\"^a user who wishes to book \\\"([^\\\"]*)\\\" for \\\"([^\\\"]*)\\\"$\")\n    public void a_user_who_wishes_to_book_for(String className, String classDate) throws Throwable {\n        buildActivityEntity().withClassName(className).withClassDate(classDate).persist();\n        final UserEntity user = buildUserEntity().persist();\n\n        runtimeScope.addScenarioData(USER_EMAIL, user.getEmail());\n        runtimeScope.addScenarioData(CLASS_NAME, className);\n        runtimeScope.addScenarioData(CLASS_DATE, classDate);\n\n    }\n\n    @Given(\"^a user with email \\\"([^\\\"]*)\\\" who has booked classes with exclusions$\")\n    public void a_user_with_email_who_has_booked_classes_with_exclusions(String email, DataTable dataTable) throws Throwable {\n\n        final UserEntity userEntity = buildUserEntity()\n                .withEmail(email)\n                .withPassCode(PASS_CODE);\n\n\n        for (DataTableRow row: dataTable.getGherkinRows()) {\n            Date exclusionDate;\n            try {\n                if (!\"none\".equals(row.getCells().get(2))) {\n                    exclusionDate = new SimpleDateFormat(\"dd/MM/yyyy\").parse(row.getCells().get(2));\n                    final ActivityEntity activity = buildActivityEntity()\n                            .withClassName(row.getCells().get(0))\n                            .withClassDate(row.getCells().get(1))\n                            .withExclusion(buildExclusionEntity().withExclusionDate(exclusionDate));\n                    userEntity.withActivity(activity);\n                } else {\n                    final ActivityEntity activity = buildActivityEntity()\n                            .withClassName(row.getCells().get(0))\n                            .withClassDate(row.getCells().get(1));\n                    userEntity.withActivity(activity);\n                }\n            } catch (ParseException e) {\n                throw new GymException(e);\n            }\n\n        }\n        userEntity.persist();\n\n\n\n\n        runtimeScope.addScenarioData(USER_EMAIL, email);\n        runtimeScope.addScenarioData(\"passCode\", PASS_CODE);\n        runtimeScope.addScenarioDataTable(\"dataTable\", dataTable);\n        runtimeScope.addScenarioDataTable(email, dataTable);\n\n    }\n\n    @Then(\"^the users schedule is updated with the requested class$\")\n    public void the_users_schedule_is_updated_with_the_requested_class() throws Throwable {\n\n        final UserEntity user = dataSetExtractor.findUserAfter(runtimeScope.getScenarioData(USER_EMAIL));\n        \n        final List\u003cUserActivityEntity\u003e usersActivities = new ArrayList\u003c\u003e();\n\n        select(runtimeScope.getUpdatedData().getUserActivities(), forUserBookings(user), usersActivities);\n\n        final List\u003cActivityEntity\u003e activities = entityDao.fetch(ActivityEntity.class);\n\n        filter(activities, forRequestedActivity(runtimeScope.getScenarioData(CLASS_NAME), runtimeScope.getScenarioData(CLASS_DATE)));\n\n        filter(usersActivities, forLoggedOnUser(user, activities));\n\n        assertThat(usersActivities, is(notNullValue()));\n        assertThat(usersActivities.size(), is(equalTo(1)));\n    }\n\n    private Predicate forUserBookings(final UserEntity loggedOnUser) {\n        return new Predicate() {\n            @Override\n            public boolean evaluate(Object o) {\n                final UserActivityEntity userActivity = (UserActivityEntity) o;\n                return (userActivity.getUserId() == loggedOnUser.getId());\n            }\n        };\n    }\n\n    private Predicate forRequestedActivity(final String className, final String classDate) {\n        return new Predicate() {\n            @Override\n            public boolean evaluate(Object o) {\n                final ActivityEntity activityEntity = (ActivityEntity) o;\n                return (activityEntity.getClassName().equals(className) \u0026\u0026 activityEntity.getClassDate().equals(classDate));\n            }\n        };\n    }\n\n    private Predicate forLoggedOnUser(final UserEntity loggedOnUser, final List\u003cActivityEntity\u003e activities) {\n        return new Predicate() {\n            @Override\n            public boolean evaluate(Object o) {\n                final UserActivityEntity userActivityEntity = (UserActivityEntity) o;\n                return (userActivityEntity.getUserId() == loggedOnUser.getId() \u0026\u0026 userActivityEntity.getActivityId() == activities.get(0).getId());\n            }\n        };\n    }\n\n\n    @Given(\"^a user with email \\\"([^\\\"]*)\\\" who has booked classes$\")\n    public void a_user_with_email_who_has_booked_classes(String email, DataTable dataTable) throws Throwable {\n\n        final UserEntity userEntity = buildUserEntity()\n                .withEmail(email)\n                .withPassCode(PASS_CODE);\n\n        for (DataTableRow row: dataTable.getGherkinRows()) {\n            final ActivityEntity activity = buildActivityEntity()\n                    .withClassName(row.getCells().get(0))\n                    .withClassDate(row.getCells().get(1));\n            userEntity.withActivity(activity);\n        }\n\n        userEntity.persist();\n        runtimeScope.addScenarioDataTable(email, dataTable);\n\n    }\n\n    @When(\"^user with email \\\"([^\\\"]*)\\\" logs onto the site$\")\n    public void user_with_email_logs_onto_the_site(String email) throws Throwable {\n        final User user = new User();\n        user.setEmail(email);\n        user.setPasscode(PASS_CODE);\n\n        if (runtimeScope.getWebDriver() != null){\n            runtimeScope.getWebDriver().quit();\n            runtimeScope.setWebDriver(null);\n        }\n        final WebDriver webDriver = webDriverFactory.newInstance(runtimeScope.getScenario());\n        runtimeScope.setWebDriver(webDriver);\n        webDriver.get(gymBookerUrl);\n\n        logonToGym.logon(user);\n    }\n\n    @Then(\"^classes should be scheduled for the user with email address \\\"([^\\\"]*)\\\"$\")\n    public void classes_should_be_scheduled_for_the_user_with_email_address(String email) throws Throwable {\n\n        final List\u003cSchedule.ScheduledActivity\u003e scheduledActivities = scheduleProcess.readBookings();\n        final DataTable scenarioDataTable = runtimeScope.getScenarioDataTable(email);\n        assertThat(scheduledActivities.size(), is(equalTo(scenarioDataTable.getGherkinRows().size())));\n\n        for (DataTableRow row: scenarioDataTable.getGherkinRows()) {\n            assertThat(foundActivity(scheduledActivities, row), is(true));\n        }\n\n    }\n\n    private boolean foundActivity(List\u003cSchedule.ScheduledActivity\u003e scheduledActivities, DataTableRow row) {\n        for (Schedule.ScheduledActivity activity: scheduledActivities) {\n            if (row.getCells().get(0).equals(activity.getClassName())\n                \u0026\u0026 row.getCells().get(1).equals(activity.getClassTime())) {\n                return true;\n            }\n        }\n        LOGGER.debug(\"Could not find activity: {} for time: {}\", row.getCells().get(0), row.getCells().get(1));\n        return false;\n    }\n\n    @Then(\"^the activities should be scheduled with exclusions$\")\n    public void the_activities_should_be_scheduled_with_exclusions() throws Throwable {\n        final List\u003cSchedule.Exclusion\u003e exclusions = scheduleProcess.readExclusions();\n        final DataTable dataTable = runtimeScope.getScenarioDataTable(DATA_TABLE);\n        assertThat(exclusions.size(), is(equalTo(dataTable.getGherkinRows().size())));\n\n        for (DataTableRow row: dataTable.getGherkinRows()) {\n            assertThat(foundExclusion(exclusions, row), is(true));\n        }\n\n    }\n\n    private boolean foundExclusion(List\u003cSchedule.Exclusion\u003e exclusions, DataTableRow row) {\n        for (Schedule.Exclusion exclusion: exclusions) {\n            if (row.getCells().get(0).equals(exclusion.getClassName())\n                    \u0026\u0026 row.getCells().get(1).equals(exclusion.getClassTime())\n                    \u0026\u0026 row.getCells().get(2).equals(exclusion.getRequestedExclusion())) {\n                return true;\n            }\n        }\n        LOGGER.debug(format(\"Could not find exclusion: %s for time: %s and requested date: %s\", row.getCells().get(0), row.getCells().get(1), row.getCells().get(2)));\n        return false;\n    }\n\n    @Given(\"^a user is booked into \\\"([^\\\"]*)\\\" for \\\"([^\\\"]*)\\\"$\")\n    public void a_user_is_booked_into_for(String className, String classDate) throws Throwable {\n        final UserEntity user = buildUserEntity()\n                .withActivity(\n                        buildActivityEntity()\n                                .withClassName(className)\n                                .withClassDate(classDate)\n                ).persist();\n        runtimeScope.addScenarioData(CLASS_NAME, className);\n        runtimeScope.addScenarioData(CLASS_DATE, classDate);\n        runtimeScope.addScenarioData(USER_EMAIL, user.getEmail());\n    }\n\n    @When(\"^adds an exclusion for \\\"([^\\\"]*)\\\"$\")\n    public void adds_an_exclusion_for(String exclusion) throws Throwable {\n        activitiesProcess.isLoaded();\n        activitiesProcess.selectActivity(runtimeScope.getScenarioData(CLASS_NAME));\n        activityTimeProcess.selectActivityTime(runtimeScope.getScenarioData(CLASS_DATE));\n        runtimeScope.addScenarioData(\"exclusionDate\", exclusion);\n        final String[] exclusionParts = exclusion.split(\"/\");\n        bookClassProcess.addExclusion(exclusionParts[0], exclusionParts[1], exclusionParts[2], false);\n    }\n\n    @When(\"^adds an exclusion for today using the date picker$\")\n    public void adds_an_exclusion_for_today_using_the_date_picker() throws Throwable {\n        activitiesProcess.isLoaded();\n        activitiesProcess.selectActivity(runtimeScope.getScenarioData(CLASS_NAME));\n        activityTimeProcess.selectActivityTime(runtimeScope.getScenarioData(CLASS_DATE));\n\n        final String today = new SimpleDateFormat(\"dd/MM/yyyy\").format(new Date());\n\n        runtimeScope.addScenarioData(\"exclusionDate\", today);\n        final String[] exclusionParts = today.split(\"/\");\n        bookClassProcess.addExclusion(exclusionParts[0], exclusionParts[1], exclusionParts[2], true);\n    }\n\n    @Then(\"^the exclusion is added to the users schedule$\")\n    public void the_exclusion_is_added_to_the_users_schedule() throws Throwable {\n            Date exclusion;\n            try {\n                exclusion = new SimpleDateFormat(\"dd/MM/yyyy\").parse(runtimeScope.getScenarioData(\"exclusionDate\"));\n            } catch (ParseException e) {\n                throw new GymException(e);\n            }\n\n            final boolean hasExclusion = dataSetExtractor.hasExclusion(dataSetExtractor.findUserAfter(runtimeScope.getScenarioData(USER_EMAIL)), buildActivityEntity()\n                            .withClassName(runtimeScope.getScenarioData(CLASS_NAME))\n                            .withClassDate(runtimeScope.getScenarioData(CLASS_DATE)),\n                    buildExclusionEntity().withExclusionDate(exclusion));\n\n           assertThat(hasExclusion, is(true));\n\n    }\n\n    @When(\"^the exclusion is not added to the users schedule$\")\n    public void the_exclusion_is_not_added_to_the_users_schedule() throws Throwable {\n            final boolean hasExclusions = dataSetExtractor.hasExclusions(dataSetExtractor.findUserAfter(runtimeScope.getScenarioData(USER_EMAIL)), buildActivityEntity()\n                    .withClassName(runtimeScope.getScenarioData(CLASS_NAME))\n                    .withClassDate(runtimeScope.getScenarioData(CLASS_DATE)));\n            assertThat(hasExclusions, is(false));\n    }\n\n    @When(\"^clicks on the schedule link for \\\"([^\\\"]*)\\\" for \\\"([^\\\"]*)\\\"$\")\n    public void clicks_on_the_schedule_link_for_for(String className, String classTime) throws Throwable {\n        scheduleProcess.navigateToScheduleScreen();\n        final List\u003cSchedule.ScheduledActivity\u003e scheduledActivities = scheduleProcess.readBookings();\n        for (Schedule.ScheduledActivity scheduledActivity: safeIterator(scheduledActivities)) {\n            if (className.equals(scheduledActivity.getClassName()) \u0026\u0026 classTime.equals(scheduledActivity.getClassTime())) {\n                scheduledActivity.navigateToBooking();\n                break;\n            }\n        }\n    }\n\n    @Then(\"^the user navigates to the booking screen for \\\"([^\\\"]*)\\\" for \\\"([^\\\"]*)\\\"$\")\n    public void the_user_navigates_to_the_booking_screen_for_for(String className, String classTime) throws Throwable {\n        assertThat(runtimeScope.getWebDriver().getPageSource(), containsString(className + \":\" + classTime));\n    }\n\n}\n","binary":false,"copies":"1","sample_repo_name":"hmtt/gym","sample_path":"src/test/java/uk/co/hmtt/cukes/core/steps/Booking.java"}