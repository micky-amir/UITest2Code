{"id": 0, "website": "bigquery", "code": " public void function ( String email ) throws Throwable { final User user = new User ( ) ; user . setEmail ( email ) ; user . setPasscode ( PASS_CODE ) ; if ( runtimeScope . getWebDriver ( ) != null ) { runtimeScope . getWebDriver ( ) . quit ( ) ; runtimeScope . setWebDriver ( null ) ; } final WebDriver webDriver = webDriverFactory . newInstance ( runtimeScope . getScenario ( ) ) ; runtimeScope . setWebDriver ( webDriver ) ; webDriver . get ( gymBookerUrl ) ; logonToGym . logon ( user ) ; } ", "comments": ["When(\"^user with email \\\"([^\\\"]*)\\\" logs onto the site$\")"], "method name": "user with email logs onto the site"}
{"id": 1, "website": "bigquery", "code": " public void function ( String email ) throws Throwable { final User user = new User ( ) ; user . setEmail ( email ) ; user . setPasscode ( PASS_CODE ) ; if ( runtimeScope . getWebDriver ( ) != null ) { runtimeScope . getWebDriver ( ) . quit ( ) ; runtimeScope . setWebDriver ( null ) ; } final WebDriver webDriver = webDriverFactory . newInstance ( runtimeScope . getScenario ( ) ) ; final Dimension dimension = new Dimension ( 420 , 600 ) ; webDriver . manage ( ) . window ( ) . setSize ( dimension ) ; runtimeScope . setWebDriver ( webDriver ) ; webDriver . get ( gymBookerUrl ) ; logonToGym . logon ( user ) ; } ", "comments": ["When(\"^the user \\\"(.*?)\\\"  logs onto the mobile site$\")"], "method name": "the user logs onto the mobile site"}
{"id": 2, "website": "bigquery", "code": " public void function ( ) throws Throwable { runtimeScope . getWebDriver ( ) . get ( gymBookerUrl ) ; ( ( CukesWebDriver ) runtimeScope . getWebDriver ( ) ) . takeScreenShot ( ) ; assertThat ( runtimeScope . getWebDriver ( ) . getCurrentUrl ( ) , containsString ( \"login\" ) ) ; } ", "comments": ["Then(\"^the user cannot access site$\")"], "method name": "the user cannot access site"}
{"id": 3, "website": "bigquery", "code": " private void function ( ) { webDriver . get ( baseUrl ) ; } ", "comments": [], "method name": "load Login Page"}
{"id": 4, "website": "bigquery", "code": " public void function ( String url ) { logComment ( \"Open ▁ URL: ▁ \" + url ) ; webDriverUtil . getWebDriver ( ) . get ( url ) ; webDriverUtil . logEvent ( \"Page ▁ loaded\" , true ) ; } ", "comments": [" Glue code for: I visit page: xxx.", " @param url is the xxx", "When(\"^I visit page: '(.+)'$\")"], "method name": "i Visit Page Url"}
{"id": 5, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/\" ) ; compatibilityTester . takeScreenshotAndSaveToRepo ( \"springTest\" , driver ) ; } ", "comments": ["Test"], "method name": "save Screenshot To File"}
{"id": 6, "website": "bigquery", "code": " public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } ", "comments": [" Navigates to a new web page in the current browser window. <br />", " ", " Usage for FitNesse: |navigate to Url|http://www.example.org|<br />", " ", " FitNesse usage..: |navigate to Url|arg1| <br />", " FitNesse example: |navigate to Url|http://www.example.org| <br />", " <br />", " ", " @param url", "            URL of page to navigate to", " @return always true to show inside FitNesse a positive result"], "method name": "navigate To Url"}
{"id": 7, "website": "bigquery", "code": " public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } ", "comments": [" Navigates to a new web page in the current browser window.", " ", " @param url", "            URL of page to navigate to", " @return always {@code true} to show inside FitNesse a positive result"], "method name": "navigate To Url"}
{"id": 8, "website": "bigquery", "code": " public void function ( String url ) { getDriver ( ) . get ( url ) ; } ", "comments": ["Override"], "method name": "go To Url"}
{"id": 9, "website": "bigquery", "code": " public void function ( ) throws Exception { int demoWaitTime = 2000 ; driver . get ( baseUrl + \"/about\" ) ; driver . findElement ( By . linkText ( \"Products ▁ & ▁ Invoices\" ) ) . click ( ) ; driver . findElement ( By . id ( \"j_username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"j_password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_password\" ) ) . sendKeys ( \"admin\" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( \"input.button\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . xpath ( \" // tr[@id='4']/td[2]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"editBtn\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"price\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"price\" ) ) . sendKeys ( \"45.50 ▁ a\" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"sData\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; assertPresent ( \"#tr_name ▁ .field-error-message\" ) ; assertPresent ( \"#tr_price ▁ .field-error-message\" ) ; driver . findElement ( By . id ( \"cData\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"editBtn\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"price\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"price\" ) ) . sendKeys ( \"45.51\" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"sData\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( \"span.ui-icon.ui-icon-seek-next\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( \"span.ui-icon.ui-icon-seek-prev\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; assertEquals ( \"$ ▁ 45.51\" , driver . findElement ( By . xpath ( \" // tr[@id='4']/td[3]\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // tr[@id='4']/td[2]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"editBtn\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"price\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"price\" ) ) . sendKeys ( \"45.50\" ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . id ( \"sData\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( \"span.ui-icon.ui-icon-seek-next\" ) ) . click ( ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . cssSelector ( \"span.ui-icon.ui-icon-seek-prev\" ) ) . click ( ) ; assertEquals ( \"$ ▁ 45.50\" , driver . findElement ( By . xpath ( \" // tr[@id='4']/td[3]\" ) ) . getText ( ) ) ; Thread . sleep ( demoWaitTime ) ; driver . findElement ( By . linkText ( \"Logout: ▁ admin\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Products Page"}
{"id": 10, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Валюта')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // tr[3]/td/a/span\" ) ) . click ( ) ; String sTitle = driver . findElement ( By . xpath ( \" // tr[3]/td/a/span\" ) ) . getText ( ) ; String sValue = driver . findElement ( By . xpath ( \" // tr[3]/td[4]/span\" ) ) . getText ( ) ; System . out . println ( sTitle + \": ▁ \" + sValue ) ; } ", "comments": ["Test"], "method name": "test Moex Rubusd"}
{"id": 11, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 12, "website": "bigquery", "code": " public void function ( String url ) throws IOException { if ( url . startsWith ( SenBotContext . RESOURCE_LOCATION_PREFIX ) ) { String urlLoc = getSenBotContext ( ) . getRuntimeResources ( ) + url . replace ( SenBotContext . RESOURCE_LOCATION_PREFIX , \"\" ) ; if ( urlLoc . startsWith ( \"/\" ) ) { urlLoc = urlLoc . replaceFirst ( \"/\" , \"\" ) ; } url = \"file: // /\" + urlLoc ; } getWebDriver ( ) . get ( url ) ; } ", "comments": [" Navigates the {@link WebDriver} to the passed page", " ", " @param url to navigate to. This can be either a file on the file system, a http(s) url or a {@link ResourceUtils#CLASSPATH_URL_PREFIX} prefixed ", " string indicating the page can be found on the current classpath.", " @throws IOException"], "method name": "navigate to url"}
{"id": 13, "website": "bigquery", "code": " public void function ( ) throws Exception { SenBotContext . cleanupSenBot ( ) ; System . setProperty ( \"senbotContext.alternateRuntimeResources\" , \"/some/path\" ) ; final WebDriver mockDriver = Mockito . mock ( WebDriver . class ) ; String pageUnderTest = \"/test_pages/exampleButton.html\" ; String expectedUrl = \"file: // /some/path\" + pageUnderTest ; NavigationService serviceUnderTest = new NavigationService ( seleniumElementService ) { @ Override public WebDriver getWebDriver ( ) { return mockDriver ; } } ; serviceUnderTest . navigate_to_url ( SenBotContext . RESOURCE_LOCATION_PREFIX + pageUnderTest ) ; Mockito . verify ( mockDriver , Mockito . times ( 1 ) ) . get ( expectedUrl ) ; SenBotContext . cleanupSenBot ( ) ; } ", "comments": ["Test"], "method name": "testNavigate to url onUnixPath"}
{"id": 14, "website": "bigquery", "code": " public void function ( String url ) throws Throwable { driver . get ( url ) ; } ", "comments": ["When(\"^I navigate to \\\"([^\\\"]*)\\\"$\")"], "method name": "I navigate to"}
{"id": 15, "website": "bigquery", "code": " public void function ( String url , String windowID ) throws HarnessException { if ( ZimbraSeleniumProperties . isWebDriver ( ) ) { logger . info ( \"...WebDriver...navigate().to()\" ) ; webDriver ( ) . navigate ( ) . to ( url ) ; } else { ClientSessionFactory . session ( ) . selenium ( ) . openWindow ( url , windowID ) ; } logger . info ( \"openWindow(\" + url + \", ▁ \" + windowID + \")\" ) ; } ", "comments": [" DefaultSelenium.openWindow()", " ", " @param url", " @param windowID"], "method name": "s Open Window"}
{"id": 16, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/design\" ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( \"apimng.login.username.id\" ) ) ) . clear ( ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( \"apimng.login.username.id\" ) ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( \"apimng.login.pass.id\" ) ) ) . clear ( ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( \"apimng.login.pass.id\" ) ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( UIElementMapper . getElement ( \"apimng.login.loginbutton.id\" ) ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( \"timeout\" ) ; } try { if ( isElementPresent ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.allstatistics.linktext\" ) ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.allstatistics.linktext\" ) ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( \"timeout\" ) ; } try { if ( isElementPresent ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apiresponsetimes.linktext\" ) ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apiresponsetimes.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apiusagebyresourcepath.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apiusagebyuser.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.browse.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.subscriptions.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.statistics.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apisubscriptions.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apiusage.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apiresponsetimes.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.apilastaccesstimes.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.browse.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.browse.linktext\" ) ) ) . click ( ) ; driver . findElement ( By . linkText ( UIElementMapper . getElement ( \"apimng.main.add.linktext\" ) ) ) . click ( ) ; } ", "comments": ["Test(groups = \"\", description = \"\")"], "method name": "test WSO2 Format Test Case"}
{"id": 17, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/design\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"pass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"pass\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"loginButton\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( \"timeout\" ) ; } try { if ( isElementPresent ( By . linkText ( \"All ▁ Statistics\" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"All ▁ Statistics\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( \"timeout\" ) ; } try { if ( isElementPresent ( By . linkText ( \"API ▁ Response ▁ Times\" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"API ▁ Response ▁ Times\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Usage ▁ by ▁ Resource ▁ Path\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Usage ▁ by ▁ User\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Browse\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Subscriptions\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Statistics\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Subscriptions\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Usage\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Response ▁ Times\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Last ▁ Access ▁ Times\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Browse\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Browse\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; } ", "comments": ["Test(groups = \"\", description = \"\")"], "method name": "test WSO2 Format Test Case"}
{"id": 18, "website": "bigquery", "code": " public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } ", "comments": ["Override"], "method name": "goto Test Course"}
{"id": 19, "website": "bigquery", "code": " public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } ", "comments": ["Override"], "method name": "goto Test Course"}
{"id": 20, "website": "bigquery", "code": " private void function ( String url , int timeoutSeconds ) { WebDriver driver = new HtmlUnitDriver ( true ) ; driver . get ( url ) ; WebDriverWait wait = new WebDriverWait ( driver , timeoutSeconds ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( XPATH_AUTHOR_LINK_A ) ) ) ; List < WebElement > aList = driver . findElements ( By . xpath ( XPATH_AUTHOR_LINK_A ) ) ; for ( WebElement e : aList ) { System . out . println ( \" ▁ ▁ \" + e . getText ( ) ) ; String raw = e . getAttribute ( \"href\" ) ; int i1 = raw . indexOf ( \"id=\" ) ; if ( i1 < 0 ) { continue ; } int i2 = raw . indexOf ( \"&\" ) ; if ( i2 < 0 || i2 < i1 ) { continue ; } String id = raw . substring ( i1 + \"id=\" . length ( ) , i2 ) . trim ( ) ; AuthorNode authorNode = new AuthorNode ( id ) ; authorNode . setName ( e . getText ( ) . trim ( ) ) ; authorNode . setDb ( db ) ; if ( db != null ) { db . addAuthor ( authorNode . getId ( ) , authorNode . getName ( ) ) ; processAuthor ( id , timeoutSeconds ) ; } this . list . add ( authorNode ) ; -- max ; if ( max <= 0 ) { return ; } } } ", "comments": [], "method name": "populate From Journal"}
{"id": 21, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertEquals ( \"Keycloak ▁ Account ▁ Management\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 22, "website": "bigquery", "code": " public void function ( String url , String Suburl ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( \"================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ \" + given_url ) ; driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( \"================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ \" + getter_url ) ; Print_out ( \"\" ) ; print_page_title_h ( ) ; } ", "comments": ["Page_up_home up_page;Page_jambox speakers_page;Page_Store store_page;", "Page_Support support_page;Page_headsets_home headsets_page;Pages_Css page_css;", "*******************************************************************************", "*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************", "*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************", "*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************"], "method name": "navigate to web page headless"}
{"id": 23, "website": "bigquery", "code": " public boolean function ( String url ) { driver . get ( url ) ; driver . manage ( ) . window ( ) . maximize ( ) ; get_wait ( 60 ) ; Print_out ( \"Success ▁ ...\" ) ; return true ; } ", "comments": ["*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************", "*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************", "    public boolean isPromoSale_Banner_Off(){    // Created for International locales only", "        String getter_url= driver.getCurrentUrl();", "        try {", "            get_wait(5);", "            driver.findElement(By.id(banner_SALE_ON));", "            Print_out(\"\");", "            fail(\"-ERROR: SALE BANNER IS DISPLAYED ON PAGE  :   \"+getter_url);", "            return false;}", "        catch (NoSuchElementException e) {", "            Print_out(\"-MESSAGE: SUCCESS! PROMO SALE IS OFF - NO SALE BANNER ON PAGE  :   \"+getter_url);", "            Print_out(\"\");", "            return true;", "        }", "    }", "*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************"], "method name": "Open web page"}
{"id": 24, "website": "bigquery", "code": " public void function ( String url , String Suburl , String Jenkins_job , String sale ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( \"================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ \" + given_url ) ; if ( sale . equalsIgnoreCase ( \"on\" ) ) { Print_out ( \"-MESSAGE: ▁ PROMO ▁ SALE ▁ KEYWORD ▁ IS ▁ SET ▁ TO ▁ ON\" ) ; Print_out ( \"-IsPromoSale_On ▁ method ▁ running ▁ / ▁ verification ▁ of ▁ promo ▁ banner ▁ is ▁ starting.../\" ) ; Print_out ( \"\" ) ; isPromoSale_On ( Jenkins_job ) ; } else { Print_out ( \"-MESSAGE: ▁ PROMO ▁ SALE ▁ KEYWORD ▁ IS ▁ SET ▁ TO ▁ OFF\" ) ; Print_out ( \"\" ) ; } driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( \"================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ \" + getter_url ) ; Print_out ( \"Success ▁ ...\" ) ; } ", "comments": ["*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************"], "method name": "Navigate to web page"}
{"id": 25, "website": "bigquery", "code": " public void function ( String url , String Suburl ) throws InterruptedException { Thread . sleep ( 500 ) ; String given_url = url + Suburl ; Print_out ( \"================== ▁ ▁ going ▁ to ▁ insert ▁ given ▁ URL: ▁ ▁ \" + given_url ) ; driver . get ( url + Suburl ) ; String getter_url = driver . getCurrentUrl ( ) ; Print_out ( \"================== ▁ ▁ Verified... ▁ ▁ ▁ current ▁ URL: ▁ ▁ \" + getter_url ) ; Print_out ( \"Success ▁ ...\" ) ; } ", "comments": ["*******************************************************************************", "NAME:", "PARAMETERS:", "USED:", "*******************************************************************************"], "method name": "Navigate to intern web page"}
{"id": 26, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/signup\" ) ; driver . findElement ( By . id ( \"firstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"firstName\" ) ) . sendKeys ( \"Jake\" ) ; driver . findElement ( By . id ( \"lastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"lastName\" ) ) . sendKeys ( \"Krammer\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"jake123@asu.edu\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"pass1\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"password ▁ must ▁ be ▁ atleast ▁ 6 ▁ characters!\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Sign Up Failed On Invalid Password"}
{"id": 27, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . cssSelector ( \"a ▁ > ▁ font\" ) ) . click ( ) ; assertEquals ( \"iBase ▁ - ▁ Registration\" , driver . findElement ( By . cssSelector ( \"h2\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Go To Sign Up"}
{"id": 28, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/signup\" ) ; driver . findElement ( By . id ( \"firstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"firstName\" ) ) . sendKeys ( \"Jake\" ) ; driver . findElement ( By . id ( \"lastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"lastName\" ) ) . sendKeys ( \"Krammer\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"jake123\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"invalid ▁ email ▁ address!\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Sign Up Failed On Invalid Email"}
{"id": 29, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . name ( \"userId\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"userId\" ) ) . sendKeys ( \"jake@asu.edu\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; driver . get ( baseUrl + \"/iBase/upload\" ) ; driver . findElement ( By . name ( \"imageFile\" ) ) . sendKeys ( \"/Users/KartheekGanesh/Sources/iBaseTestImages/sparky.jpg\" ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"ASU ▁ Logo\" ) ; assertEquals ( \"Home\" , driver . findElement ( By . linkText ( \"Home\" ) ) . getText ( ) ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; assertEquals ( \"Upload\" , driver . findElement ( By . linkText ( \"Upload\" ) ) . getText ( ) ) ; assertEquals ( \"Settings\" , driver . findElement ( By . xpath ( \" // li[3]\" ) ) . getText ( ) ) ; assertEquals ( \"Logout\" , driver . findElement ( By . linkText ( \"Logout\" ) ) . getText ( ) ) ; assertEquals ( \"Share ▁ your ▁ photo ▁ with ▁ the ▁ world!\" , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( \"\" , driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . getText ( ) ) ; assertEquals ( \"Title:\" , driver . findElement ( By . id ( \"imageFile\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Upload Passed"}
{"id": 30, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . name ( \"userId\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"userId\" ) ) . sendKeys ( \"jake@asu.edu\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; driver . get ( baseUrl + \"/iBase/upload\" ) ; driver . findElement ( By . name ( \"imageFile\" ) ) . sendKeys ( \"/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif\" ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"gif ▁ image\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Sorry! ▁ Invalid ▁ File!\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; assertEquals ( \"Upload\" , driver . findElement ( By . linkText ( \"Upload\" ) ) . getText ( ) ) ; assertEquals ( \"Settings\" , driver . findElement ( By . linkText ( \"Settings\" ) ) . getText ( ) ) ; assertEquals ( \"Logout\" , driver . findElement ( By . linkText ( \"Logout\" ) ) . getText ( ) ) ; assertEquals ( \"Share ▁ your ▁ photo ▁ with ▁ the ▁ world!\" , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( \"\" , driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . getText ( ) ) ; assertEquals ( \"Title:\" , driver . findElement ( By . id ( \"imageFile\" ) ) . getText ( ) ) ; assertEquals ( \"Home\" , driver . findElement ( By . linkText ( \"Home\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Upload Failed On Wrong Image Type"}
{"id": 31, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . name ( \"userId\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"userId\" ) ) . sendKeys ( \"jake@asu.edu\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; driver . get ( baseUrl + \"/iBase/settings\" ) ; driver . findElement ( By . name ( \"profileImageFile\" ) ) . sendKeys ( \"/Users/KartheekGanesh/Sources/iBaseTestImages/sparky.jpg\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Settings\" , driver . findElement ( By . linkText ( \"Settings\" ) ) . getText ( ) ) ; assertEquals ( \"Upload\" , driver . findElement ( By . linkText ( \"Upload\" ) ) . getText ( ) ) ; assertEquals ( \"Home\" , driver . findElement ( By . linkText ( \"Home\" ) ) . getText ( ) ) ; assertEquals ( \"Logout\" , driver . findElement ( By . linkText ( \"Logout\" ) ) . getText ( ) ) ; assertEquals ( \"Update ▁ your ▁ profile ▁ picture!\" , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( \"Profile ▁ picture ▁ successfully ▁ updated!\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Settings Passed"}
{"id": 32, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . name ( \"userId\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"userId\" ) ) . sendKeys ( \"jake1234@asu.edu\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; assertEquals ( \"Invalid ▁ username ▁ and ▁ password!\" , driver . findElement ( By . cssSelector ( \"div.error\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Login Failed On Invalid Username And Password"}
{"id": 33, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . name ( \"userId\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"userId\" ) ) . sendKeys ( \"jake@asu.edu\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; driver . get ( baseUrl + \"/iBase/settings\" ) ; driver . findElement ( By . name ( \"profileImageFile\" ) ) . sendKeys ( \"/Users/KartheekGanesh/Sources/iBaseTestImages/sparky2.gif\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Home\" , driver . findElement ( By . linkText ( \"Home\" ) ) . getText ( ) ) ; assertEquals ( \"Upload\" , driver . findElement ( By . linkText ( \"Upload\" ) ) . getText ( ) ) ; assertEquals ( \"Settings\" , driver . findElement ( By . linkText ( \"Settings\" ) ) . getText ( ) ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; assertEquals ( \"Logout\" , driver . findElement ( By . linkText ( \"Logout\" ) ) . getText ( ) ) ; assertEquals ( \"Update ▁ your ▁ profile ▁ picture!\" , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( \"\" , driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . getText ( ) ) ; assertEquals ( \"Sorry! ▁ Invalid ▁ File!\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Settings Failed On Wrong Image Type"}
{"id": 34, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/login\" ) ; driver . findElement ( By . name ( \"userId\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"userId\" ) ) . sendKeys ( \"jake@asu.edu\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; assertEquals ( \"iBase ▁ - ▁ Image ▁ Database\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "test Login Passed"}
{"id": 35, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/iBase/signup\" ) ; driver . findElement ( By . id ( \"firstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"firstName\" ) ) . sendKeys ( \"Jake\" ) ; driver . findElement ( By . id ( \"lastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"lastName\" ) ) . sendKeys ( \"Krammer\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"jake@asu.edu\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"password1\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Username ▁ Taken!\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Sign Up Failed On Username Taken"}
{"id": 36, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"#table-friends\" ) ) ) ; friends = driver . findElements ( By . cssSelector ( \"#table-friends>tr\" ) ) . size ( ) ; WebElement firstFriend = driver . findElement ( By . cssSelector ( \"#table-friends>tr:nth-of-type(1)>td\" ) ) ; assertEquals ( \"Steve ▁ Fulling\" , firstFriend . getText ( ) ) ; firstFriend . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"friend-name\" ) ) ) ; assertEquals ( \"Steve ▁ Fulling\" , driver . findElement ( By . cssSelector ( \"#view-friend ▁ #friend-name\" ) ) . getText ( ) ) ; assertEquals ( \"swf@kynetx.com\" , driver . findElement ( By . cssSelector ( \"#view-friend ▁ #friend-email\" ) ) . getText ( ) ) ; assertEquals ( \"8016023200\" , driver . findElement ( By . cssSelector ( \"#view-friend ▁ #friend-phone\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test20 Existing Friends"}
{"id": 37, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( squareTagUrl ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"navAvatar\" ) ) ) ; driver . findElement ( By . id ( \"navAvatar\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"#navRight ▁ ul.dropdown-menu\" ) ) ) ; driver . findElement ( By . linkText ( \"Logout\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"formLogin\" ) ) ) ; driver . get ( baseUrl ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"view-friends\" ) ) ) ; driver . findElement ( By . cssSelector ( \"div.navbar-inner ▁ .container-fluid ▁ button.btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Logout\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( \"Click ▁ here ▁ to ▁ Link ▁ Squaretag\" ) ) ) ; driver . findElement ( By . linkText ( \"Click ▁ here ▁ to ▁ Link ▁ Squaretag\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( \"I'm ▁ a ▁ new ▁ SquareTag ▁ User\" ) ) ) ; driver . findElement ( By . linkText ( \"I'm ▁ a ▁ new ▁ SquareTag ▁ User\" ) ) . click ( ) ; long time = System . currentTimeMillis ( ) ; String email = \"cloudos_test\" + time + \"@kynetx.com\" ; String password = \"fizzbazz\" ; driver . findElement ( By . id ( \"signupEmail\" ) ) . sendKeys ( email ) ; driver . findElement ( By . id ( \"signupPassword\" ) ) . sendKeys ( password ) ; driver . findElement ( By . id ( \"confirmPassword\" ) ) . sendKeys ( password ) ; driver . findElement ( By . id ( \"signupSubmit\" ) ) . click ( ) ; By authorizeLink = By . cssSelector ( \"#cloudAppPanel-b177052x7-content ▁ a.btn-primary\" ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( authorizeLink ) ) ; driver . findElement ( authorizeLink ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"view-home-auth\" ) ) ) ; assertEquals ( \"Forever ▁ is ▁ linked ▁ to ▁ your ▁ personal ▁ cloud\" , driver . findElement ( By . cssSelector ( \"#view-home-auth ▁ h3\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test40 New Account"}
{"id": 38, "website": "bigquery", "code": " public static void function ( AtomicInteger nextTest , int tests ) { FirefoxDriver driver = new FirefoxDriver ( ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; while ( nextTest . get ( ) <= tests ) { int test = nextTest . getAndIncrement ( ) ; try { String url = allTestCases . get ( test ) ; driver . get ( url ) ; for ( WebElement we : driver . findElements ( By . tagName ( \"form\" ) ) ) { we . submit ( ) ; } driver . get ( url ) ; Thread . sleep ( 500 ) ; String jQuerySelector = \"#login-btn\" ; js . executeScript ( \"$(\\\"\" + jQuerySelector + \"\\\").click();\" ) ; Thread . sleep ( 500 ) ; } catch ( Exception e ) { } } driver . quit ( ) ; } ", "comments": [], "method name": "visit Test Cases"}
{"id": 39, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 40, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 41, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 42, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 43, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason = \"not tested\")"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 44, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason = \"not tested\")"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 45, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 46, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 47, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 48, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 49, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Categories\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"flowers\" ) ; driver . findElement ( By . name ( \"desc\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"desc\" ) ) . sendKeys ( \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) ; driver . findElement ( By . id ( \"listRadioNo\" ) ) . click ( ) ; driver . findElement ( By . id ( \"listRadioYe\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'Delete ▁ / ▁ Clear')])[2]\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\\\(direct\\\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . xpath ( \"( // input[@name='howto'])[4]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\\\s\\\\S]*$\" ) ) ; } ", "comments": ["Test"], "method name": "test Add Category"}
{"id": 50, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( \" // table[@id='lc-history'] // tr\" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( \"./td[2]\" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , \"supertenantuser ▁ changed ▁ the ▁ asset ▁ from ▁ Created ▁ to ▁ In-Review\" ) ; } ", "comments": ["Test"], "method name": "test Promote To In Review"}
{"id": 51, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Stories\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"Photos\" ) ; driver . findElement ( By . name ( \"desc\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"desc\" ) ) . sendKeys ( \"Greenery ▁ !!\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Get ▁ Comments[\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a[title=\\\"Log ▁ Out\\\"]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Story Assert"}
{"id": 52, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; driver . findElement ( By . id ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"overview_description\" ) ) . sendKeys ( \"this ▁ is ▁ my ▁ user ▁ added ▁ asset ▁ 1 ▁ + ▁ added ▁ description\" ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Update Description"}
{"id": 53, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/\" ) ; driver . findElement ( By . id ( \"btn-register\" ) ) . click ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . sendKeys ( \"supertenantuser\" ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . sendKeys ( \"supertenantuser\" ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . sendKeys ( \"supertenantuser\" ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; try { assertEquals ( \"supertenantuser\" , driver . findElement ( By . cssSelector ( \"ul.nav ▁ li ▁ a.dropdown-toggle\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Create Super Tenant User"}
{"id": 54, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Admin ▁ Page\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"sendKeys\" , \"editor\" ) . sendKeys ( \"editor\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Manage ▁ Categories\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"name\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"name\" ) ) ) , \"sendKeys\" , \"flowers\" ) . sendKeys ( \"flowers\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( \"desc\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( \"desc\" ) ) ) , \"sendKeys\" , \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) . sendKeys ( \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"listRadioNo\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"listRadioYe\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"BODY\" ) ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( \"assertTrue(driver.findElement(By.cssSelector(\\\"BODY\\\")).getText().matches(\\\"^[\\\\\\\\s\\\\\\\\S]*Category ▁ \\\\\\\"flowers\\\\\\\" ▁ added ▁ succesfully![\\\\\\\\s\\\\\\\\S]*$\\\"))\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . xpath ( \"( // a[contains(text(),'Delete ▁ / ▁ Clear')])[2]\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"BODY\" ) ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\\\(direct\\\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\\\s\\\\S]*$\" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( \"assertTrue(driver.findElement(By.cssSelector(\\\"BODY\\\")).getText().matches(\\\"^[\\\\\\\\s\\\\\\\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\\\\\\\(direct\\\\\\\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\\\\\\\s\\\\\\\\S]*$\\\"))\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . xpath ( \"( // input[@name='howto'])[4]\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\\\s\\\\S]*$\" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( \"assertTrue(closeAlertAndGetItsText().matches(\\\"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\\\\\\\s\\\\\\\\S]*$\\\"))\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; } ", "comments": ["Test"], "method name": "test Add Category"}
{"id": 55, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Admin ▁ Page\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"sendKeys\" , \"editor\" ) . sendKeys ( \"editor\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Manage ▁ Categories\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"<< ▁ Admin ▁ Page\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Log ▁ Out\" ) ) ) , \"click\" , \"\" ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Login Log Out"}
{"id": 56, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( \" // table[@id='lc-history'] // tr\" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( \"./td[2]\" ) ) ; assertEquals ( val . getText ( ) , \"tenantAdmin ▁ changed ▁ the ▁ asset ▁ from ▁ In-Review ▁ to ▁ Published\" ) ; } ", "comments": ["Test"], "method name": "test Promote To Published Tenant"}
{"id": 57, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . xpath ( \"(( // div[@class='span3 ▁ asset'])[last()]) // a\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"User ▁ Reviews\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . id ( \"com-body\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . id ( \"com-body\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"com-body\" ) ) . sendKeys ( \"my ▁ test ▁ rating ▁ with ▁ 3 ▁ stars\" ) ; driver . findElement ( By . linkText ( \"3\" ) ) . click ( ) ; driver . findElement ( By . id ( \"btn-post\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . cssSelector ( \".com-review\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . refresh ( ) ; } ", "comments": ["Test"], "method name": "test Add Review"}
{"id": 58, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-star\" ) ) . click ( ) ; assertEquals ( 12 , driver . findElements ( By . cssSelector ( \".asset-icon\" ) ) . size ( ) ) ; JavascriptExecutor jsx = ( JavascriptExecutor ) driver ; jsx . executeScript ( \"window.scrollBy(0,5000)\" , \"\" ) ; assertEquals ( 16 , driver . findElements ( By . cssSelector ( \".asset-icon\" ) ) . size ( ) ) ; } ", "comments": ["Test"], "method name": "test Sort By Pop Defaults"}
{"id": 59, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( \" // table[@id='lc-history'] // tr\" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( \"./td[2]\" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , \"admin ▁ changed ▁ the ▁ asset ▁ from ▁ In-Review ▁ to ▁ Published\" ) ; } ", "comments": ["Test"], "method name": "test Promote To Published"}
{"id": 60, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; try { assertEquals ( 12 , driver . findElements ( By . cssSelector ( \".asset-icon\" ) ) . size ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } JavascriptExecutor jsx = ( JavascriptExecutor ) driver ; jsx . executeScript ( \"window.scrollBy(0,5000)\" , \"\" ) ; try { assertEquals ( 16 , driver . findElements ( By . cssSelector ( \".asset-icon\" ) ) . size ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Gadgets Available"}
{"id": 61, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Stories\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"Photos\" ) ; driver . findElement ( By . name ( \"desc\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"desc\" ) ) . sendKeys ( \"Greenery ▁ !!\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"div.method\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Story ▁ \\\"Photos\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . cssSelector ( \"a[title=\\\"Log ▁ Out\\\"]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Story Assert"}
{"id": 62, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"supertenantuser\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"supertenantuser\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; try { assertEquals ( \"supertenantuser\" , driver . findElement ( By . cssSelector ( \"ul.nav ▁ li ▁ a.dropdown-toggle\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Login As Super Tenant User"}
{"id": 63, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; List < WebElement > rows = driver . findElements ( By . xpath ( \" // table[@id='lc-history'] // tr\" ) ) ; WebElement val = rows . get ( 0 ) . findElement ( By . xpath ( \"./td[2]\" ) ) ; System . out . println ( val . getText ( ) ) ; assertEquals ( val . getText ( ) , \"tenantUser ▁ changed ▁ the ▁ asset ▁ from ▁ Created ▁ to ▁ In-Review\" ) ; } ", "comments": ["Test"], "method name": "test Promote To In Review Tenant"}
{"id": 64, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; Utils . waitSomeTime ( ) ; driver . findElement ( By . linkText ( \"My ▁ Items\" ) ) . click ( ) ; Utils . waitSomeTime ( ) ; assertEquals ( \"by ▁ admin\" , driver . findElement ( By . cssSelector ( \"div.store-my-item ▁ .bookmark-assert-provider\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Show My Items"}
{"id": 65, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"kandidaadid\" ) ; WebElement candidatesDiv = driver . findElement ( By . id ( \"candidates\" ) ) ; driver . findElement ( By . id ( \"nimi\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nimi\" ) ) . sendKeys ( \"li\" ) ; assertThat ( driver . getCurrentUrl ( ) , containsString ( \"/kandidaadid/kogu_riik/erakonnata/li\" ) ) ; assertThat ( candidatesDiv . getText ( ) , containsString ( \"Linnar ▁ Lind\" ) ) ; assertThat ( candidatesDiv . getText ( ) , containsString ( \"Liine ▁ Näri\" ) ) ; new Select ( driver . findElement ( By . id ( \"erakond\" ) ) ) . selectByVisibleText ( \"ABC\" ) ; new Select ( driver . findElement ( By . id ( \"ringkond\" ) ) ) . selectByVisibleText ( \"Haabersti, ▁ Kristiine, ▁ Põhja-Tallinn\" ) ; assertThat ( driver . getCurrentUrl ( ) , containsString ( \"/kandidaadid/HAAB/ABC/li\" ) ) ; assertThat ( candidatesDiv . getText ( ) , containsString ( \"Linnar ▁ Lind\" ) ) ; driver . get ( baseUrl + \"kandidaadid/V%C3%95RU/%C3%9CPE/j%C3%B5\" ) ; candidatesDiv = driver . findElement ( By . id ( \"candidates\" ) ) ; assertThat ( candidatesDiv . getText ( ) , not ( containsString ( \"Linnar ▁ Lind\" ) ) ) ; } ", "comments": ["Test"], "method name": "test Candidate Search"}
{"id": 66, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Categories\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"<< ▁ Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ Out\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Login Log Out"}
{"id": 67, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Re Login"}
{"id": 68, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Admin ▁ Page\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"sendKeys\" , \"editor\" ) . sendKeys ( \"editor\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Manage ▁ Stories\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"name\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"name\" ) ) ) , \"sendKeys\" , \"Photos\" ) . sendKeys ( \"Photos\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( \"desc\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( \"desc\" ) ) ) , \"sendKeys\" , \"Greenery ▁ !!\" ) . sendKeys ( \"Greenery ▁ !!\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"div.method\" ) ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Story ▁ \\\"Photos\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( \"assertTrue(driver.findElement(By.cssSelector(\\\"div.method\\\")).getText().matches(\\\"^[\\\\\\\\s\\\\\\\\S]*Story ▁ \\\\\\\"Photos\\\\\\\" ▁ added ▁ succesfully![\\\\\\\\s\\\\\\\\S]*$\\\"))\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"a[title=\\\"Log ▁ Out\\\"]\" ) ) ) , \"click\" , \"\" ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Story Assert"}
{"id": 69, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . xpath ( \"(( // div[@class='span3 ▁ asset'])[8]) // a\" ) ) . click ( ) ; String populerAsset = driver . getCurrentUrl ( ) ; driver . findElement ( By . linkText ( \"User ▁ Reviews\" ) ) . click ( ) ; driver . findElement ( By . id ( \"com-body\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"com-body\" ) ) . sendKeys ( \"my ▁ test ▁ rating ▁ with ▁ 5 ▁ stars\" ) ; driver . findElement ( By . linkText ( \"5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"btn-post\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . cssSelector ( \".com-review\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-star\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"(( // div[@class='span3 ▁ asset'])[1]) // a\" ) ) . click ( ) ; assertEquals ( populerAsset , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Sort By Pop After Review"}
{"id": 70, "website": "bigquery", "code": " public void function ( URL url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . debug ( \"goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded\" , e ) ; Thread . currentThread ( ) . interrupt ( ) ; return ; } } ", "comments": [" @param url", "            The URL.", "Override"], "method name": "go To Url"}
{"id": 71, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Categories\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"flowers\" ) ; driver . findElement ( By . name ( \"desc\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"desc\" ) ) . sendKeys ( \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) ; driver . findElement ( By . id ( \"listRadioNo\" ) ) . click ( ) ; driver . findElement ( By . id ( \"listRadioYe\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'Delete ▁ / ▁ Clear')])[2]\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Clears ▁ Category ▁ flowers ▁ of ▁ all ▁ its ▁ own ▁ \\\\(direct\\\\) ▁ photos, ▁ nothing ▁ will ▁ be ▁ removed[\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . xpath ( \"( // input[@name='howto'])[4]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ delete ▁ [\\\\s\\\\S]*$\" ) ) ; } ", "comments": ["Test"], "method name": "test Add Category"}
{"id": 72, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Categories\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"flowers\" ) ; driver . findElement ( By . name ( \"desc\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"desc\" ) ) . sendKeys ( \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) ; driver . findElement ( By . id ( \"listRadioNo\" ) ) . click ( ) ; driver . findElement ( By . id ( \"listRadioYe\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"div.method\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . cssSelector ( \"a[title=\\\"Log ▁ Out\\\"]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Category"}
{"id": 73, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . cssSelector ( \"#assets-container ▁ a\" ) ) . click ( ) ; driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Bookmarked\" . equals ( driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Bookmark Asset"}
{"id": 74, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; assertTrue ( isElementPresent ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) ) ; } ", "comments": ["Test"], "method name": "test If Asset Added To Publisher"}
{"id": 75, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/\" ) ; driver . findElement ( By . linkText ( \"Add ▁ gadget\" ) ) . click ( ) ; driver . findElement ( By . id ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"overview_name\" ) ) . sendKeys ( \"userAddedAsset\" ) ; driver . findElement ( By . id ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"overview_version\" ) ) . sendKeys ( \"1.2.3\" ) ; driver . findElement ( By . xpath ( \" // ul[@role='menu']/li[3]/a/span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"overview_url\" ) ) . sendKeys ( \"http: // example.com/gadget.xml\" ) ; driver . findElement ( By . id ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"overview_description\" ) ) . sendKeys ( \"this ▁ is ▁ my ▁ user ▁ added ▁ asset ▁ 1\" ) ; driver . findElement ( By . id ( \"images_thumbnail\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"images_thumbnail\" ) ) . sendKeys ( \"~/Pictures/thumbnail.jpg\" ) ; driver . findElement ( By . id ( \"images_banner\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"images_banner\" ) ) . sendKeys ( \"~/Pictures/banner.jpg\" ) ; driver . findElement ( By . id ( \"token-input-tag-container\" ) ) . sendKeys ( \"wso2,\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( ! driver . findElement ( By . cssSelector ( \".asset-being-added\" ) ) . isDisplayed ( ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Add New Asset"}
{"id": 76, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),\\\"userAddedAsset\\\")]\" ) ) . click ( ) ; try { assertEquals ( \"by ▁ tenantUser\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets'] // small[2]\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test If Asset Added To Store Tenant"}
{"id": 77, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; try { assertEquals ( \"admin\" , driver . findElement ( By . cssSelector ( \"ul.nav ▁ li ▁ a.dropdown-toggle\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Login As Admin"}
{"id": 78, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"tenantAdmin@mytestdomain.com\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"admin1234\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; try { assertEquals ( \"tenantAdmin\" , driver . findElement ( By . cssSelector ( \"ul.nav ▁ li ▁ a.dropdown-toggle\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Login As Tenant Admin"}
{"id": 79, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Categories\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"flowers\" ) ; driver . findElement ( By . name ( \"desc\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"desc\" ) ) . sendKeys ( \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) ; driver . findElement ( By . id ( \"listRadioNo\" ) ) . click ( ) ; driver . findElement ( By . id ( \"listRadioYe\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; } ", "comments": ["Test"], "method name": "test Add Category"}
{"id": 80, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Admin ▁ Page\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"loginAdminPass\" ) ) ) , \"sendKeys\" , \"editor\" ) . sendKeys ( \"editor\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . linkText ( \"Manage ▁ Categories\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"name\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"name\" ) ) ) , \"sendKeys\" , \"flowers\" ) . sendKeys ( \"flowers\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( \"desc\" ) ) ) , \"clear\" , \"\" ) . clear ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . name ( \"desc\" ) ) ) , \"sendKeys\" , \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) . sendKeys ( \"contains ▁ photos ▁ of ▁ all ▁ the ▁ flowers ▁ !\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"listRadioNo\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . id ( \"listRadioYe\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"input.submit\" ) ) ) , \"click\" , \"\" ) . click ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOn ( ) ; assertTrue ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"div.method\" ) ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*Category ▁ \\\"flowers\\\" ▁ added ▁ succesfully![\\\\s\\\\S]*$\" ) ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getAssertion ( \"assertTrue(driver.findElement(By.cssSelector(\\\"div.method\\\")).getText().matches(\\\"^[\\\\\\\\s\\\\\\\\S]*Category ▁ \\\\\\\"flowers\\\\\\\" ▁ added ▁ succesfully![\\\\\\\\s\\\\\\\\S]*$\\\"))\" ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . assertionModeOff ( ) ; com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getWebElement ( driver . findElement ( com . crawljax . plugins . testilizer . seleniuminstrumentor . SeleniumInstrumentor . getBy ( By . cssSelector ( \"a[title=\\\"Log ▁ Out\\\"]\" ) ) ) , \"click\" , \"\" ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Category"}
{"id": 81, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget\" ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"tenantUser@mytestdomain.com\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"tenantUser\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; try { assertEquals ( \"tenantUser\" , driver . findElement ( By . cssSelector ( \"ul.nav ▁ li ▁ a.dropdown-toggle\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Login As Tenant User"}
{"id": 82, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/phormer331/\" ) ; driver . findElement ( By . linkText ( \"Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"loginAdminPass\" ) ) . sendKeys ( \"editor\" ) ; driver . findElement ( By . cssSelector ( \"input.submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Categories\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"<< ▁ Admin ▁ Page\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ Out\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Login Log Out"}
{"id": 83, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { webDriver . get ( url ) ; Thread . sleep ( 5000 ) ; } ", "comments": [" called every time before testcases i.e., methods which are marked with @Test annotation", "Before"], "method name": "before Test Case Method"}
{"id": 84, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { webDriver . get ( url ) ; Thread . sleep ( 2000 ) ; } ", "comments": [" called every time before testcases i.e., methods which are marked with @Test annotation", "After"], "method name": "after Test Case Method"}
{"id": 85, "website": "bigquery", "code": " public String function ( String url ) { logger . info ( \"Loading ▁ Selenium: ▁ \" ) ; WebDriver driver = new FirefoxDriver ( createFirefoxProfile ( ) ) ; driver . get ( url ) ; try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException ex ) { logger . error ( \"Exception ▁ in ▁ selenium ▁ interupt: ▁ \" , ex ) ; Thread . currentThread ( ) . interrupt ( ) ; } String html_content = driver . getPageSource ( ) ; driver . close ( ) ; return html_content ; } ", "comments": [], "method name": "get Dynamic Content From Url"}
{"id": 86, "website": "bigquery", "code": " public void function ( String url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( \"goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded\" , e ) ; return ; } } ", "comments": [" @param url", "            The URL."], "method name": "go To Url"}
{"id": 87, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test"], "method name": "delete All Cookies"}
{"id": 88, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 89, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 90, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 91, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 92, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE}, reason = \"Chrome: failed\")", "SwitchToTopAfterTest"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 93, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 94, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 95, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 96, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 97, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test", "Ignore(value = {IE},"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 98, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 99, "website": "bigquery", "code": " public void function ( ) throws IOException { webDriver . get ( applicationContextUrl ) ; assertThat ( webDriver . findElement ( By . id ( \"loginInfo\" ) ) . getAttribute ( \"action\" ) , is ( StringContains . containsString ( \"authentication\" ) ) ) ; } ", "comments": [" Asserts that the content of the application home page is \"Hello world!\".", "Test"], "method name": "test Web App"}
{"id": 100, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/physusp/esc\" ) ; driver . findElement ( By . id ( \"parameters.calculateAerobic\" ) ) . click ( ) ; driver . findElement ( By . id ( \"parameters.calculateAnaerobicAlactic\" ) ) . click ( ) ; driver . findElement ( By . id ( \"btnNext\" ) ) . click ( ) ; driver . findElement ( By . id ( \"anaerobicLacticParameters.peakLactateConcentration\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"anaerobicLacticParameters.peakLactateConcentration\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"anaerobicLacticParameters.restLactateConcentration\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"anaerobicLacticParameters.restLactateConcentration\" ) ) . sendKeys ( \"2\" ) ; driver . findElement ( By . id ( \"anaerobicLacticParameters.weight\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"anaerobicLacticParameters.weight\" ) ) . sendKeys ( \"70\" ) ; driver . findElement ( By . id ( \"btnNext\" ) ) . click ( ) ; } ", "comments": ["@Test"], "method name": "test Anaerobic Lactic"}
{"id": 101, "website": "bigquery", "code": " public void function ( ) throws Exception { InMemoryReporter reporter = new InMemoryReporter ( ) ; TestFilter . setReporter ( reporter ) ; JettyServer jettyServer = new JettyServer ( 0 ) ; jettyServer . start ( ) ; try { int port = jettyServer . getPort ( ) ; final String baseUrl = \"http: // localhost:\" + port ; WebDriver browser = new HtmlUnitDriver ( ) ; browser . get ( baseUrl + \"/post/more\" ) ; browser . findElement ( By . name ( \"firstname\" ) ) . sendKeys ( \"Darth\" ) ; browser . findElement ( By . name ( \"lastname\" ) ) . sendKeys ( \"Vader\" ) ; browser . findElement ( By . name ( \"doPerson\" ) ) . submit ( ) ; Thread . sleep ( 100 ) ; final List < HttpCall > httpCalls = reporter . getPlayBook ( ) ; assertThat ( httpCalls ) . hasSize ( 2 ) ; List < PlayStep > playbook = httpCalls . stream ( ) . map ( PlayStep :: new ) . collect ( Collectors . toList ( ) ) ; final HttpCallPersister callReporter = mock ( HttpCallPersister . class ) ; TestFilter . setReporter ( callReporter ) ; final HttpPlayer player = new HttpPlayer ( baseUrl ) ; player . addManipulator ( new HiddenFieldManipulator ( \"token\" ) ) ; player . playSteps ( playbook ) ; assertThat ( playbook . get ( 1 ) . getRecorded ( ) ) . contains ( \"Your ▁ name ▁ is ▁ Darth ▁ Vader\" ) ; } finally { jettyServer . stop ( ) ; } } ", "comments": ["Test"], "method name": "should Handle Basic Forms"}
{"id": 102, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 103, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"New ▁ Game\" ) ) . click ( ) ; assertEquals ( \"Play ▁ the ▁ amazing ▁ Tic ▁ Tac ▁ Toe ▁ game\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Selenium H1"}
{"id": 104, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"New ▁ Game\" ) ) . click ( ) ; assertEquals ( \"Enter ▁ a ▁ number ▁ between ▁ 1-9\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Selenuim Paragraph"}
{"id": 105, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"New ▁ Game\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"a\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Invalid ▁ move ▁ , ▁ try ▁ again\" , driver . findElement ( By . xpath ( \" // div[@id='results']/pre[2]\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Selenuim Input Char"}
{"id": 106, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"New ▁ Game\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Invalid ▁ move ▁ , ▁ try ▁ again\" , driver . findElement ( By . xpath ( \" // div[@id='results']/pre[2]\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Selenuim Too Small Number"}
{"id": 107, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"New ▁ Game\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"10\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"Invalid ▁ move ▁ , ▁ try ▁ again\" , driver . findElement ( By . xpath ( \" // div[@id='results']/pre[2]\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Selenuim Too Large Number"}
{"id": 108, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"New ▁ Game\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"2\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"3\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"5\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"6\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"7\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"8\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"9\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"number\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . cssSelector ( \"button[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"GAME ▁ OVER\" , driver . findElement ( By . xpath ( \" // div[@id='results']/pre[2]\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Selenuim Game Over"}
{"id": 109, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 110, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 111, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 112, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 113, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 114, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Has A Header"}
{"id": 115, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 116, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 117, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/EZRxLookup\" ) ; try { assertTrue ( isElementPresent ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test EZ Rx Initial Page"}
{"id": 118, "website": "bigquery", "code": " public void function ( ) throws Exception { try { driver . get ( baseUrl + \"/EZRxLookup/\" ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . sendKeys ( \"\" ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . sendKeys ( \"51439-007-02\" ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:search\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 10 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . cssSelector ( \"label\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; assertEquals ( \"ACNE ▁ CLEARNING ▁ TREATMENT ▁ FACE\" , driver . findElement ( By . id ( \"j_idt5:j_idt19:cmdBName\" ) ) . getText ( ) ) ; WebElement element = driver . findElement ( By . id ( \"j_idt5:j_idt19:j_idt28\" ) ) ; String path = element . getAttribute ( \"src\" ) ; assert ( path . contains ( \"green\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e ) ; } } ", "comments": ["Test"], "method name": "test EZ Rx Lookup Result Page No Negative No Recalls"}
{"id": 119, "website": "bigquery", "code": " public void function ( ) throws Exception { try { driver . get ( baseUrl + \"/EZRxLookup/\" ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . sendKeys ( \"\" ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:drugName_input\" ) ) . sendKeys ( \"43598-209-53\" ) ; driver . findElement ( By . id ( \"j_idt5:j_idt18:search\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 10 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . cssSelector ( \"label\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; assertEquals ( \"AMOXICILLIN\" , driver . findElement ( By . id ( \"j_idt5:j_idt19:cmdBName\" ) ) . getText ( ) ) ; WebElement element = driver . findElement ( By . id ( \"j_idt5:j_idt19:j_idt28\" ) ) ; String path = element . getAttribute ( \"src\" ) ; assert ( path . contains ( \"red\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e ) ; } } ", "comments": ["Test"], "method name": "test EZ Rx Lookup Result Page Recalls Found"}
{"id": 120, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . id ( \"j_id_10:eMail\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:eMail\" ) ) . sendKeys ( \"Test@test.com\" ) ; driver . findElement ( By . id ( \"j_id_10:kennwort\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwort\" ) ) . sendKeys ( \"123\" ) ; driver . findElement ( By . id ( \"j_id_10:kennwortWiederholung\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwortWiederholung\" ) ) . sendKeys ( \"123\" ) ; driver . findElement ( By . id ( \"j_id_10:altesKennwort\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:altesKennwort\" ) ) . sendKeys ( \"1234\" ) ; driver . findElement ( By . id ( \"j_id_10:j_id_16\" ) ) . click ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwort\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwort\" ) ) . sendKeys ( \"123\" ) ; driver . findElement ( By . id ( \"j_id_10:kennwortWiederholung\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwortWiederholung\" ) ) . sendKeys ( \"1234\" ) ; driver . findElement ( By . id ( \"j_id_10:altesKennwort\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:altesKennwort\" ) ) . sendKeys ( \"1234\" ) ; driver . findElement ( By . id ( \"j_id_10:j_id_16\" ) ) . click ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwort\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwort\" ) ) . sendKeys ( \"123\" ) ; driver . findElement ( By . id ( \"j_id_10:kennwortWiederholung\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:kennwortWiederholung\" ) ) . sendKeys ( \"123\" ) ; driver . findElement ( By . id ( \"j_id_10:altesKennwort\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_id_10:altesKennwort\" ) ) . sendKeys ( \"123\" ) ; driver . findElement ( By . id ( \"j_id_10:j_id_16\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Konto Bearbeiten"}
{"id": 121, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 122, "website": "bigquery", "code": " public static LoginPage function ( WebDriver browser , URL deployemntUrl ) { LoginPage page = new LoginPage ( browser ) ; browser . navigate ( ) . to ( deployemntUrl ) ; return page ; } ", "comments": [], "method name": "get Login Page"}
{"id": 123, "website": "bigquery", "code": " public void function ( ) { if ( episodeList == null || episodeList . size ( ) <= 0 ) { return ; } String episodeUrl = engageServerUrl + \"/engage/ui/watch.html?id=\" + episodeList . get ( generator . nextInt ( episodeList . size ( ) ) ) ; driver . get ( episodeUrl ) ; if ( ! driver . getCurrentUrl ( ) . equalsIgnoreCase ( episodeUrl ) ) { authenticate ( ) ; } logger . info ( name + \" ▁ - ▁ Playing ▁ episode ▁ \" + episodeUrl ) ; logger . debug ( \"Episode ▁ Page ▁ title ▁ is: ▁ \" + driver . getTitle ( ) ) ; WebElement play = ( new WebDriverWait ( driver , 60 ) ) . until ( new ExpectedCondition < WebElement > ( ) { @ Override public WebElement apply ( WebDriver driver ) { WebElement webElement = driver . findElement ( By . id ( \"oc_btn-play-pause\" ) ) ; if ( webElement != null && webElement . isDisplayed ( ) ) { return webElement ; } return null ; } } ) ; play . click ( ) ; WebElement fastForward = ( new WebDriverWait ( driver , 10000 ) ) . until ( new ExpectedCondition < WebElement > ( ) { @ Override public WebElement apply ( WebDriver driver ) { WebElement webElement = driver . findElement ( By . id ( \"oc_btn-fast-forward\" ) ) ; if ( webElement != null && webElement . isDisplayed ( ) ) { return webElement ; } return null ; } } ) ; for ( int i = 0 ; i < 5 ; i ++ ) { fastForward . click ( ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { logger . error ( \"There ▁ was ▁ an ▁ exception ▁ while ▁ fastforwarding:\" , e ) ; } } } ", "comments": [" Start playing a new episode."], "method name": "play New Stream"}
{"id": 124, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 125, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 126, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 127, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 128, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 129, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 130, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 131, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . linkText ( \"Add ▁ movie\" ) ) . click ( ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"my ▁ first ▁ film\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"2013\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"1000\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"1000\" ) ; driver . findElement ( By . id ( \"seen_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"own_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Film"}
{"id": 132, "website": "bigquery", "code": " public void function ( ) throws Exception { String username = \"nonAdmin\" ; String passwd = \"nonAdminPassword\" ; driver . get ( baseUrl + \"/ArcGames/\" ) ; login ( username , passwd ) ; for ( String page : adminUrlList ) { String adminUrl = baseUrl + page ; driver . get ( adminUrl ) ; assertNotEquals ( driver . getCurrentUrl ( ) , adminUrl ) ; } driver . findElement ( By . linkText ( \"logout\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "non Admin Try Access Admin Pages"}
{"id": 133, "website": "bigquery", "code": " public void function ( ) throws Exception { String username = \"Admin\" ; String passwd = \"123456\" ; driver . get ( baseUrl + \"/ArcGames/\" ) ; login ( username , passwd ) ; for ( String page : adminUrlList ) { String adminUrl = baseUrl + page ; driver . get ( adminUrl ) ; assertEquals ( driver . getCurrentUrl ( ) , adminUrl ) ; } driver . findElement ( By . linkText ( \"logout\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "admin Access Admin Pages"}
{"id": 134, "website": "bigquery", "code": " public void function ( ) throws Exception { String username = \"nonAdmin\" ; String passwd = \"nonAdminPassword\" ; driver . get ( baseUrl + \"/ArcGames/\" ) ; String pattern = \"fake\" ; signUp ( pattern , pattern , pattern , pattern , pattern , pattern ) ; login ( username , passwd ) ; driver . findElement ( By . linkText ( \"Users\" ) ) . click ( ) ; simpleSearch ( pattern ) ; String result = driver . findElement ( By . xpath ( \" // form[@id='j_idt21']/table/tbody[2]/tr/td\" ) ) . getText ( ) ; assertTrue ( result . contains ( pattern ) ) ; advancedSearch ( pattern ) ; result = driver . findElement ( By . xpath ( \" // form[@id='j_idt21']/table/tbody[2]/tr/td\" ) ) . getText ( ) ; assertTrue ( result . contains ( pattern ) ) ; driver . findElement ( By . linkText ( \"logout\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "logged User Try Access Pages"}
{"id": 135, "website": "bigquery", "code": " public void function ( ) throws Exception { String username = \"myUsername\" ; String mail = \"myMail@gmail.com\" ; String location = \"Neuchâtel\" ; String firstName = \"myFName\" ; String lastName = \"myLName\" ; String passwd = \"myPasswd\" ; driver . get ( baseUrl + \"/ArcGames/\" ) ; signUp ( username , mail , passwd , location , firstName , lastName ) ; login ( username , passwd ) ; String s = \"edited\" ; driver . findElement ( By . linkText ( username ) ) . click ( ) ; driver . findElement ( By . id ( \"j_idt19:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:username\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:mail\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:mail\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:passwd\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:passwd\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:passwdConfirm\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:passwdConfirm\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:location\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:location\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:firstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:firstName\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:lastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_idt19:lastName\" ) ) . sendKeys ( s ) ; driver . findElement ( By . id ( \"j_idt19:submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"logout\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "logged User Try Access Pages"}
{"id": 136, "website": "bigquery", "code": " private CloudJenkinsConfigurationPage function ( final URL url ) { webDriver . navigate ( ) . to ( url ) ; return PageFactory . initElements ( webDriver , CloudJenkinsConfigurationPage . class ) ; } ", "comments": [], "method name": "open Configuration Page"}
{"id": 137, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"simpleTest.html\" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( \"fish\" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain"}
{"id": 138, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"\" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Get Cookie Does Not Retrive Beyond Current Domain"}
{"id": 139, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"animals\" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" , \"/common/animals\" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } ", "comments": ["Ignore({SELENESE, IE, OPERA})"], "method name": "test Cookie Integrity"}
{"id": 141, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"animals\" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long expires = System . currentTimeMillis ( ) - 1000 ; Cookie cookie = new Cookie ( \"expired\" , \"yes\" , \"/common/animals\" , new Date ( expires ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie ) ; cookie = options . getCookieNamed ( \"fish\" ) ; assertNull ( \"Cookie ▁ expired ▁ before ▁ it ▁ was ▁ set, ▁ so ▁ nothing ▁ should ▁ be ▁ returned: ▁ \" + cookie , cookie ) ; } ", "comments": ["Ignore(value = {ANDROID, IE, SELENESE}, reason = \"Untested\")"], "method name": "test Setting A Cookie That Expired In The Past"}
{"id": 140, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"animals\" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" , \"/common/animals\" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Cookie retrieved = options . getCookieNamed ( \"fish\" ) ; assertNotNull ( retrieved ) ; assertEquals ( cookie1 . getExpiry ( ) , retrieved . getExpiry ( ) ) ; } ", "comments": ["Ignore(value = {ANDROID, IE, SELENESE, OPERA}, reason ="], "method name": "test Retains Cookie Expiry"}
{"id": 142, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": [], "method name": "test Can Block Invalid Ssl Certificates"}
{"id": 143, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({IE, CHROME, SELENESE, IPHONE, OPERA})"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 144, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Ignore(value = {IE, SELENESE})"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 145, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } ", "comments": [], "method name": "test Can Navigate To A Given Url"}
{"id": 146, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } ", "comments": [], "method name": "test Can Navigate To A Given Url"}
{"id": 148, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 149, "website": "bigquery", "code": " public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( \"Sign-out\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 147, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 150, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 152, "website": "bigquery", "code": " public void function ( String url ) { driverProvider . get ( ) . get ( url ) ; } ", "comments": ["Given(\"I visit the website \\\"$url\\\"\")"], "method name": "i Visit The Website"}
{"id": 151, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-signin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Forgot ▁ your ▁ password?\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( USER ) ; driver . findElement ( By . id ( \"validationSubmit\" ) ) . click ( ) ; String resourceLocation = getResourceLocation ( ) ; smtpPropertyLocation = resourceLocation + SMTP_PROPERTY_FILE ; Thread . sleep ( 10000 ) ; String message = ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , RESET_MAIL_TITLE ) ; String resetUrl = message . split ( \"\" ) [ 5 ] . trim ( ) . substring ( \"https: // localhost:9443\" . length ( ) ) ; driver . get ( baseUrl + resetUrl ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( \"password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password2\" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( \"resetPassword\" ) ) . click ( ) ; ESUtil . login ( driver , baseUrl , STORE_APP , USER , NEW_PASSWORD ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing password recovery through email\")"], "method name": "test Password Recovery Email"}
{"id": 154, "website": "bigquery", "code": " public static void function ( String baseUrl , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; WebElement waitFor ; boolean themeAndLanguageCorrect , firstTime ; firstTime = true ; int i = 2 ; do { themeAndLanguageCorrect = false ; driver . get ( baseUrl + \"example/control/logout\" ) ; waitFor = driverWait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( \"USERNAME\" ) ) ) ; waitFor . clear ( ) ; waitFor . sendKeys ( \"admin\" ) ; WebElement element = driver . findElement ( By . name ( \"PASSWORD\" ) ) ; element . clear ( ) ; element . sendKeys ( \"ofbiz\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; driverWait . until ( ExpectedConditions . titleContains ( \"OFBiz: ▁ Example: ▁ Find ▁ Example\" ) ) ; List < WebElement > currentLanguages = driver . findElements ( By . xpath ( \" // ul[@id='preferences-menu']/li[3]/a\" ) ) ; if ( currentLanguages . size ( ) == 0 || ! currentLanguages . get ( 0 ) . getText ( ) . contains ( \"Language ▁ : ▁ English\" ) ) { Utils . testChangeLanguage ( baseUrl , null , null , \"BLUELIGHT\" , driver ) ; themeAndLanguageCorrect = true ; i -= 1 ; firstTime = i > 0 ; } } while ( themeAndLanguageCorrect && firstTime ) ; assertTrue ( firstTime ) ; } ", "comments": [" Connection to example, Check if already in Bluelight theme and english language, if not call testChangeLanguage to change", " Most of the time, this method is not used because Bluelight theme is no more in \"stable\" revision, so default theme is now tomawak ", " @param baseUrl", " @param driver", " @throws Exception"], "method name": "check And Put Example Bluelight English"}
{"id": 153, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( dataBrowserUrl ) ; WebElement dbTitle = driver . findElement ( By . id ( \"ext-comp-1009_header\" ) ) . findElement ( By . id ( \"ext-comp-1009_header-body\" ) ) . findElement ( By . id ( \"ext-comp-1009_header-innerCt\" ) ) . findElement ( By . id ( \"ext-comp-1009_header-targetEl\" ) ) . findElement ( By . id ( \"ext-comp-1009_header_hd\" ) ) . findElement ( By . id ( \"ext-comp-1009_header_hd-textEl\" ) ) ; Assert . assertTrue ( \"Data ▁ Browser ▁ panel ▁ structure ▁ OK\" , dbTitle . getText ( ) . contains ( \"RODA ▁ - ▁ Data ▁ Browser\" ) ) ; WebElement catalogLabel = driver . findElement ( By . id ( \"CatalogsTabConfig-btnInnerEl\" ) ) ; Assert . assertTrue ( \"Catalog ▁ Button ▁ OK\" , catalogLabel . getText ( ) . contains ( \"Cataloage\" ) ) ; WebElement catalogHandler = driver . findElement ( By . id ( \"CatalogsTabConfig\" ) ) ; catalogHandler . click ( ) ; Assert . assertTrue ( \"Catalog ▁ tree ▁ panel ▁ loaded ▁ ok\" , driver . findElement ( By . id ( \"CatalogsTreeView\" ) ) . isDisplayed ( ) ) ; WebElement aniLabel = driver . findElement ( By . id ( \"YearsTabConfig-btnEl\" ) ) ; Assert . assertTrue ( \"Years ▁ Button ▁ OK\" , aniLabel . getText ( ) . contains ( \"Ani\" ) ) ; WebElement aniHandler = driver . findElement ( By . id ( \"YearsTabConfig\" ) ) ; aniHandler . click ( ) ; Assert . assertTrue ( \"Years ▁ tree ▁ panel ▁ loaded ▁ ok\" , driver . findElement ( By . id ( \"YearsTreeView\" ) ) . isDisplayed ( ) ) ; WebElement utLabel = driver . findElement ( By . id ( \"UsersTabConfig-btnEl\" ) ) ; Assert . assertTrue ( \"Users ▁ Button ▁ OK\" , utLabel . getText ( ) . contains ( \"Utilizatori\" ) ) ; WebElement utHandler = driver . findElement ( By . id ( \"UsersTabConfig\" ) ) ; utHandler . click ( ) ; Assert . assertTrue ( \"Users ▁ grid ▁ panel ▁ loaded ▁ ok\" , driver . findElement ( By . id ( \"UsersGridView\" ) ) . isDisplayed ( ) ) ; } ", "comments": [" @Test"], "method name": "test Data Browser"}
{"id": 155, "website": "bigquery", "code": " public static void function ( String baseUrl , String component , String language , String theme , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; if ( language == null ) { language = \"English ▁ ▁ ▁ ▁ - ▁ ▁ ▁ ▁ [en]\" ; } if ( theme == null ) { theme = \"BLUELIGHT\" ; } if ( component == null ) { component = \"catalog\" ; } driver . get ( baseUrl + component + \"/control/logout\" ) ; if ( \"webtools\" . equals ( component ) ) { driver . get ( baseUrl + component + \"/control/checkLogin\" ) ; } WebElement waitFor = driverWait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) ) ; WebElement element = driver . findElement ( By . name ( \"USERNAME\" ) ) ; element . clear ( ) ; element . sendKeys ( \"admin\" ) ; element = driver . findElement ( By . name ( \"PASSWORD\" ) ) ; element . clear ( ) ; element . sendKeys ( \"ofbiz\" ) ; waitFor . click ( ) ; Thread . sleep ( 500 ) ; if ( isElementPresent ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) , driver ) ) { driver . findElement ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) ) . click ( ) ; driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"theme\" ) ) ) . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"javascript:document.SetUserPreferences_\" + theme + \".submit()\\\"]\" ) ) ) ; waitFor . click ( ) ; } else { driver . get ( baseUrl + component + \"/control/ListVisualThemes\" ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"javascript:document.SetUserPreferences_\" + theme + \".submit()\\\"]\" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"/\" + component + \"/control/main\\\"]\" ) ) ) ; waitFor . click ( ) ; if ( isElementPresent ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) , driver ) ) { driver . findElement ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) ) . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"language\" ) ) ) ; waitFor . click ( ) ; } else { waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"/\" + component + \"/control/ListLocales\\\"]\" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . linkText ( language ) ) ) ; waitFor . click ( ) ; } ", "comments": [" connection on component and put on the theme and the language", " @param baseUrl", " @param component", " @param language", " @param theme", " @param driver", " @throws Exception"], "method name": "test Change Language"}
{"id": 156, "website": "bigquery", "code": " public static void function ( String baseUrl , String component , String language , String theme , WebDriver driver ) throws Exception { WebDriverWait driverWait = new WebDriverWait ( driver , 30 ) ; if ( language == null ) { language = \"English ▁ ▁ ▁ ▁ - ▁ ▁ ▁ ▁ [en]\" ; } if ( theme == null ) { theme = \"TOMAHAWK\" ; } WebElement waitFor ; WebElement we ; if ( isElementPresent ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) , driver ) ) { we = driver . findElement ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) ) ; we . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"theme\" ) ) ) ; waitFor . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"javascript:document.SetUserPreferences_\" + theme + \".submit()\\\"]\" ) ) ) ; waitFor . click ( ) ; } else { driver . get ( baseUrl + component + \"/control/ListVisualThemes\" ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"javascript:document.SetUserPreferences_\" + theme + \".submit()\\\"]\" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"/\" + component + \"/control/main\\\"]\" ) ) ) ; waitFor . click ( ) ; Thread . sleep ( 500 ) ; if ( isElementPresent ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) , driver ) ) { we = driver . findElement ( By . xpath ( \" // div[@id=\\\"controls\\\"] // span[@id=\\\"prefBtn\\\"] // a\" ) ) ; we . click ( ) ; waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"language\" ) ) ) ; waitFor . click ( ) ; } else { waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@href=\\\"/\" + component + \"/control/ListLocales\\\"]\" ) ) ) ; waitFor . click ( ) ; } waitFor = driverWait . until ( ExpectedConditions . elementToBeClickable ( By . linkText ( language ) ) ) ; waitFor . click ( ) ; } ", "comments": [" Change only the theme and language without connecting"], "method name": "change Theme Language"}
{"id": 157, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 159, "website": "bigquery", "code": " public void function ( ) { driver . navigate ( ) . to ( urlBase + \"/yottr\" ) ; final WebElement usernameField = driver . findElement ( By . id ( \"username\" ) ) ; final WebElement passwordField = driver . findElement ( By . id ( \"password\" ) ) ; final WebElement signInButton = driver . findElement ( By . id ( \"sign-in-button\" ) ) ; usernameField . sendKeys ( \"mike\" ) ; passwordField . sendKeys ( \"wrongpassword\" ) ; signInButton . click ( ) ; final WebElement errorMessage = driver . findElement ( By . id ( \"error-msg\" ) ) ; assertEquals ( \"Invalid ▁ username ▁ and ▁ password.\" , errorMessage . getText ( ) ) ; } ", "comments": ["Test"], "method name": "error Message After Failed Login Attempt"}
{"id": 158, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertEquals ( \"Keycloak ▁ Account ▁ Management\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 160, "website": "bigquery", "code": " public void function ( ) { driver . navigate ( ) . to ( urlBase + \"/yottr\" ) ; final WebElement usernameField = driver . findElement ( By . id ( \"username\" ) ) ; final WebElement passwordField = driver . findElement ( By . id ( \"password\" ) ) ; final WebElement signInButton = driver . findElement ( By . id ( \"sign-in-button\" ) ) ; usernameField . sendKeys ( \"mike\" ) ; passwordField . sendKeys ( \"aph3xtwIn\" ) ; signInButton . click ( ) ; final WebElement logoutLink = driver . findElement ( By . id ( \"logout-link\" ) ) ; assertEquals ( \"Logout\" , logoutLink . getText ( ) ) ; logoutLink . click ( ) ; final WebElement loggedOutMessage = driver . findElement ( By . id ( \"logged-out-msg\" ) ) ; assertEquals ( \"You ▁ have ▁ been ▁ logged ▁ out.\" , loggedOutMessage . getText ( ) ) ; } ", "comments": ["Test"], "method name": "sign In Sign Out"}
{"id": 161, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": [], "method name": "test Can Block Invalid Ssl Certificates"}
{"id": 162, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Ignore(value = {IE, SELENESE})"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 163, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"reserveApp/index.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; Thread . sleep ( 8000 ) ; driver . findElement ( By . id ( \"reserve_year\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_year\" ) ) . sendKeys ( \"2013\" ) ; driver . findElement ( By . id ( \"reserve_month\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_month\" ) ) . sendKeys ( \"12\" ) ; driver . findElement ( By . id ( \"reserve_day\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_day\" ) ) . sendKeys ( \"7\" ) ; driver . findElement ( By . id ( \"reserve_term\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_term\" ) ) . sendKeys ( \"1\" ) ; assertThat ( driver . findElement ( By . id ( \"price\" ) ) . getText ( ) , is ( \"105750\" ) ) ; assertThat ( driver . findElement ( By . id ( \"datefrom\" ) ) . getText ( ) , is ( \"2013年12月7日\" ) ) ; assertThat ( driver . findElement ( By . id ( \"dateto\" ) ) . getText ( ) , is ( \"2013年12月8日\" ) ) ; assertThat ( driver . findElement ( By . id ( \"dayscount\" ) ) . getText ( ) , is ( \"1\" ) ) ; } ", "comments": ["Test"], "method name": "test Reserve With9 Mmebers"}
{"id": 164, "website": "bigquery", "code": " public void function ( ) { File html = new File ( \"introWork/introWork1.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement userName = driver . findElement ( By . id ( \"user_name\" ) ) ; userName . sendKeys ( \"TestUser\" ) ; WebElement password = driver . findElement ( By . id ( \"password\" ) ) ; password . sendKeys ( \"pass\" ) ; WebElement login = driver . findElement ( By . id ( \"login\" ) ) ; login . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } ", "comments": [" このプログラムはハンズオンに必要なプログラムが適切にインストールされたかをチェックするプログラムです。", " このファイルをInteillJ IDEA上から、右クリック>'Run EnvironmentCheckTest' によりJUnitとして実行し、", " JUnitのテストが成功すれば、インストールは正常に完了しています。", "Test"], "method name": "check That Installed Successfully"}
{"id": 165, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork9.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement okButton = driver . findElement ( By . id ( \"ok_button\" ) ) ; okButton . click ( ) ; Thread . sleep ( 8000 ) ; } ", "comments": [" 入門課題その9:「テキストが表示されるまで待機してみよう」", "Test"], "method name": "test Click OK Button"}
{"id": 166, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork1.html\" ) ; String url = html . toURI ( ) . toString ( ) ; System . out . println ( url ) ; driver . get ( url ) ; Thread . sleep ( 1000 ) ; WebElement userName = driver . findElement ( By . id ( \"user_name\" ) ) ; userName . sendKeys ( \"TestUser\" ) ; Thread . sleep ( 1000 ) ; WebElement password = driver . findElement ( By . id ( \"password\" ) ) ; password . sendKeys ( \"pass\" ) ; Thread . sleep ( 1000 ) ; WebElement login = driver . findElement ( By . id ( \"login\" ) ) ; login . click ( ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; Thread . sleep ( 1000 ) ; } ", "comments": ["Test"], "method name": "test Login Success"}
{"id": 167, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 168, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 169, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 171, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 170, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 172, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 174, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 175, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertEquals ( \"Keycloak ▁ Account ▁ Management\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 176, "website": "bigquery", "code": " public void function ( String url , String account , String password , WebDriver driver ) throws InterruptedException { driver . get ( \"https: // login.alibaba.com/?Done=http%3A%2F%2Fbiz.alibaba.com%2Fgeneralorders%2Flist_orders.htm\" ) ; Thread . sleep ( 3000 ) ; WebElement xloginPassportId = driver . findElement ( By . id ( \"xloginPassportId\" ) ) ; xloginPassportId . clear ( ) ; xloginPassportId . sendKeys ( account ) ; driver . findElement ( By . id ( \"xloginPasswordId\" ) ) . sendKeys ( password ) ; driver . findElement ( By . id ( \"signInButton\" ) ) . click ( ) ; int tryTime = 40 ; while ( driver . getCurrentUrl ( ) . contains ( \"login.alibaba.com\" ) && tryTime > 0 ) { tryTime -- ; } if ( tryTime <= 0 ) { driver . get ( url ) ; } } ", "comments": [], "method name": "pre Login To"}
{"id": 177, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 178, "website": "bigquery", "code": " public static void function ( WebDriver driver , String url ) { LOGGER . log ( Level . INFO , String . format ( \"Navigating ▁ to ▁ the ▁ URL: ▁ \\\"%s\\\"\" , url ) ) ; driver . navigate ( ) . to ( url ) ; } ", "comments": [], "method name": "navigate To URL"}
{"id": 173, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 179, "website": "bigquery", "code": " public void function ( ) throws Exception { Actions actions = new Actions ( driver ) ; driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl + \"customer/account/login/\" ) ; WebElement email = driver . findElement ( By . id ( \"email\" ) ) ; email . clear ( ) ; email . sendKeys ( \"qatestingtestqa@gmail.com\" ) ; WebElement pass = driver . findElement ( By . id ( \"pass\" ) ) ; pass . clear ( ) ; pass . sendKeys ( \"qwerty\" ) ; WebElement submit = driver . findElement ( By . cssSelector ( \"button[title=\\\"Login\\\"]\" ) ) ; submit . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; WebElement h1 = driver . findElement ( By . tagName ( \"h1\" ) ) ; assertEquals ( \"MY ▁ DASHBOARD\" , h1 . getText ( ) ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( \"browser\" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } WebElement signout = driver . findElement ( By . linkText ( \"Sign ▁ Out\" ) ) ; WebElement my_account = driver . findElement ( By . linkText ( \"My ▁ Account\" ) ) ; actions . moveToElement ( my_account ) . build ( ) . perform ( ) ; signout . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; assertEquals ( list , logsEntries ) ; } ", "comments": ["Test"], "method name": "Js error account"}
{"id": 181, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl + \"customer/account/create/\" ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( \"browser\" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } assertEquals ( list , logsEntries ) ; } ", "comments": ["Test"], "method name": "Js error register"}
{"id": 182, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl + \"customer/account/login/\" ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( \"browser\" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } assertEquals ( list , logsEntries ) ; } ", "comments": ["Test"], "method name": "Js error login"}
{"id": 180, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + \"personalised-swarovski-crystal-heart-vase.html\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ a.button ▁ > ▁ span\" ) ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( \"li ▁ > ▁ a.button ▁ > ▁ span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"qatestingtestqa@gmail.com\" ) ; driver . findElement ( By . id ( \"pass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"pass\" ) ) . sendKeys ( \"qwerty\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"send2\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; assertEquals ( \"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase ▁ has ▁ been ▁ added ▁ to ▁ your ▁ wishlist.\" , driver . findElement ( By . cssSelector ( \"span\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"button.mfp-close\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . get ( baseUrl + \"personalised-swarovski-big-heart-diamante-vase.html\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ a.button ▁ > ▁ span\" ) ) ) ; driver . findElement ( By . cssSelector ( \"li ▁ > ▁ a.button ▁ > ▁ span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( \"button.mfp-close\" ) ) . click ( ) ; driver . get ( baseUrl + \"wishlist/\" ) ; TimeUnit . SECONDS . sleep ( 3 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"button.button.btn-add\" ) ) ) ; driver . findElement ( By . cssSelector ( \"button.button.btn-add\" ) ) . click ( ) ; try { assertEquals ( \"2 ▁ product(s) ▁ have ▁ been ▁ added ▁ to ▁ shopping ▁ cart: ▁ \\\"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\\\", ▁ \\\"Personalised ▁ Swarovski ▁ Diamante ▁ Vase ▁ - ▁ Big ▁ Heart ▁ Design\\\".\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ span\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertEquals ( \"You ▁ have ▁ no ▁ items ▁ in ▁ your ▁ wishlist.\" , driver . findElement ( By . cssSelector ( \"p.wishlist-empty\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . get ( baseUrl + \"checkout/cart/\" ) ; assertEquals ( \"YOUR ▁ SHOPPING ▁ BASKET\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; try { assertEquals ( \"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\" , driver . findElement ( By . xpath ( \"( // a[contains(text(),'Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase')])[3]\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( \" // div[@class='item']/div[7]/a\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 7 ) ; driver . findElement ( By . xpath ( \" // div[@class='item']/div[7]/a\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( \"SHOPPING ▁ CART ▁ IS ▁ EMPTY\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . get ( baseUrl + \"customer/account/logout\" ) ; } ", "comments": ["Test"], "method name": "Add all cart"}
{"id": 184, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; driver . get ( baseUrl ) ; Logs log = driver . manage ( ) . logs ( ) ; List < LogEntry > logsEntries = log . get ( \"browser\" ) . getAll ( ) ; List < String > list = new ArrayList < String > ( ) ; list . isEmpty ( ) ; for ( LogEntry entry : logsEntries ) { System . out . println ( entry . getMessage ( ) ) ; } assertEquals ( list , logsEntries ) ; } ", "comments": ["Test"], "method name": "Js error home"}
{"id": 183, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + \"customer/account/login/\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"qatestingtestqa@gmail.com\" ) ; driver . findElement ( By . id ( \"pass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"pass\" ) ) . sendKeys ( \"qwerty\" ) ; driver . findElement ( By . id ( \"send2\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; assertEquals ( \"MY ▁ DASHBOARD\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; driver . get ( baseUrl + \"personalised-swarovski-crystal-heart-vase.html\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"button[title=\\\"Add ▁ to ▁ Basket\\\"]\" ) ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( \"button[title=\\\"Add ▁ to ▁ Basket\\\"]\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . xpath ( \" // a[2]/span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . get ( baseUrl + \"checkout/onepage/\" ) ; TimeUnit . SECONDS . sleep ( 7 ) ; assertEquals ( \"SECURE ▁ CHECKOUT\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"#billing-buttons-container ▁ > ▁ button.button.btn-primary\" ) ) ) ; driver . findElement ( By . cssSelector ( \"#billing-buttons-container ▁ > ▁ button.button.btn-primary\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . cssSelector ( \"label[for='s_method_productmatrix_royal_mail_48']\" ) ) . click ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"#shipping-method-buttons-container ▁ > ▁ button.button.btn-primary\" ) ) ) ; driver . findElement ( By . cssSelector ( \"#shipping-method-buttons-container ▁ > ▁ button.button.btn-primary\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . xpath ( \" // *[@id='checkout-step-payment']/div[1]/h2\" ) ) ) ; TimeUnit . SECONDS . sleep ( 7 ) ; driver . findElement ( By . cssSelector ( \"label[for='p_method_checkmo']\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . xpath ( \" // ul[@id='checkout-payment-method-load']/li[5]/div/label\" ) ) . click ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"#payment-buttons-container ▁ > ▁ button.button.btn-primary\" ) ) ) ; driver . findElement ( By . cssSelector ( \"#payment-buttons-container ▁ > ▁ button.button.btn-primary\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( \"A ▁ BIG ▁ THANK ▁ YOU ▁ TOM ▁ NOW ▁ SEE ▁ BELOW ▁ WHAT ▁ YOU ▁ CAN ▁ DO\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; String order = driver . findElement ( By . xpath ( \"/html/body/div[2]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/div/strong\" ) ) . getText ( ) ; String regex = \"[0-9]\\\\d+\" ; Pattern p = Pattern . compile ( regex ) ; Matcher m = p . matcher ( order ) ; if ( m . find ( ) ) { driver . get ( baseUrl + \"customer/account/logout\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . get ( baseUrl + \"dukkan\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"Turnkey@1986\" ) ; driver . findElement ( By . id ( \"login\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"login\" ) ) . sendKeys ( \"E/4zp^Gi79:heX6{wp\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( \"input.form-button\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 25 ) ; Boolean test1 = isElementPresent ( By . cssSelector ( \"a[title=\\\"close\\\"] ▁ > ▁ span\" ) ) ; if ( test1 == true ) { driver . findElement ( By . cssSelector ( \"a[title=\\\"close\\\"] ▁ > ▁ span\" ) ) . click ( ) ; } actions . moveToElement ( driver . findElement ( By . xpath ( \" // *[@id='nav']/li[2]/a/span\" ) ) ) . build ( ) . perform ( ) ; driver . findElement ( By . xpath ( \" // *[@id='nav']/li[2]/ul/li[1]/a/span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"sales_order_grid_filter_am_real_order_id\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"sales_order_grid_filter_am_real_order_id\" ) ) . sendKeys ( m . group ( ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( \"button[title=\\\"Search\\\"]\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; driver . findElement ( By . cssSelector ( \"input[name=\\\"order_ids\\\"]\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; new Select ( driver . findElement ( By . id ( \"sales_order_grid_massaction-select\" ) ) ) . selectByVisibleText ( \"Cancel\" ) ; driver . findElement ( By . cssSelector ( \"button[title=\\\"Submit\\\"]\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( \"1 ▁ order(s) ▁ have ▁ been ▁ canceled.\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ span\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"#html-body ▁ > ▁ div.wrapper ▁ > ▁ div.header ▁ > ▁ div.header-top ▁ > ▁ div ▁ > ▁ p ▁ > ▁ a.link-logout\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 8 ) ; } } private boolean isElementPresent ( By by ) { try { driver . findElement ( by ) ; return true ; } catch ( NoSuchElementException e ) { return false ; } } private String closeAlertAndGetItsText ( ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; String alertText = alert . getText ( ) ; if ( acceptNextAlert ) { alert . accept ( ) ; } else { alert . dismiss ( ) ; } return alertText ; } finally { acceptNextAlert = true ; } } } ", "comments": ["Test"], "method name": "Order login customer"}
{"id": 185, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + \"personalised-swarovski-crystal-heart-vase.html\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ a.button ▁ > ▁ span\" ) ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . cssSelector ( \"li ▁ > ▁ a.button ▁ > ▁ span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"qatestingtestqa@gmail.com\" ) ; driver . findElement ( By . id ( \"pass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"pass\" ) ) . sendKeys ( \"qwerty\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"send2\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 15 ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; assertEquals ( \"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase ▁ has ▁ been ▁ added ▁ to ▁ your ▁ wishlist.\" , driver . findElement ( By . cssSelector ( \"span\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"button.mfp-close\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . get ( baseUrl + \"wishlist/\" ) ; assertEquals ( \"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\" , driver . findElement ( By . cssSelector ( \"div.columns.small-6 ▁ > ▁ h3.product-name ▁ > ▁ a[title=\\\"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\\\"]\" ) ) . getText ( ) ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"arguments[0].scrollIntoView();\" , driver . findElement ( By . cssSelector ( \"div.columns.small-6 ▁ > ▁ h3.product-name ▁ > ▁ a[title=\\\"Engraved ▁ Swarovski ▁ Crystal ▁ Heart ▁ Vase\\\"]\" ) ) ) ; driver . findElement ( By . cssSelector ( \"div.r-tbody ▁ > ▁ div:last-child ▁ > ▁ div.columns.small-1 ▁ > ▁ a.btn-remove.btn-remove2\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this ▁ product ▁ from ▁ your ▁ wishlist[\\\\s\\\\S]$\" ) ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( \"(0 ▁ items)\" , driver . findElement ( By . cssSelector ( \"span.item-count\" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 5 ) ; WebElement signout = driver . findElement ( By . linkText ( \"Sign ▁ Out\" ) ) ; WebElement my_account = driver . findElement ( By . linkText ( \"My ▁ Account\" ) ) ; actions . moveToElement ( my_account ) . build ( ) . perform ( ) ; signout . click ( ) ; } ", "comments": ["Test"], "method name": "Add delete wishlist"}
{"id": 186, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . manage ( ) . window ( ) . setSize ( new Dimension ( 1366 , 1050 ) ) ; Actions actions = new Actions ( driver ) ; driver . get ( baseUrl + \"customer/account/login/\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"qatestingtestqa@gmail.com\" ) ; driver . findElement ( By . id ( \"pass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"pass\" ) ) . sendKeys ( \"qwerty\" ) ; TimeUnit . SECONDS . sleep ( 5 ) ; driver . findElement ( By . id ( \"send2\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 5 ) ; assertEquals ( \"MY ▁ DASHBOARD\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . xpath ( \"/html/body/div[2]/div[1]/div[1]/div[3]/div/div[2]/ul/li[8]/a\" ) ) . click ( ) ; assertEquals ( \"MY ▁ WISHLISTS\" , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . id ( \"wishlist-create-button\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 3 ) ; driver . findElement ( By . id ( \"wishlist-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wishlist-name\" ) ) . sendKeys ( \"Test ▁ 123\" ) ; driver . findElement ( By . cssSelector ( \"button.button.btn-save\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 10 ) ; assertEquals ( \"Wishlist ▁ \\\"Test ▁ 123\\\" ▁ was ▁ successfully ▁ saved\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ span\" ) ) . getText ( ) ) ; assertEquals ( \"Test ▁ 123 ▁ / ▁ Edit ▁ (0 ▁ items)\" , driver . findElement ( By . cssSelector ( \"div.box-title ▁ > ▁ h3\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // *[@id='wishlist-view-form']/fieldset/div/button/span/span\" ) ) . click ( ) ; TimeUnit . SECONDS . sleep ( 7 ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^You ▁ are ▁ about ▁ to ▁ delete ▁ your ▁ wish ▁ list\\\\. \\n This ▁ action ▁ cannot ▁ be ▁ undone\\\\. \\n Do ▁ you ▁ want ▁ to ▁ proceed[\\\\s\\\\S]$\" ) ) ; TimeUnit . SECONDS . sleep ( 7 ) ; assertEquals ( \"Wishlist ▁ \\\"Test ▁ 123\\\" ▁ has ▁ been ▁ deleted.\" , driver . findElement ( By . cssSelector ( \"li ▁ > ▁ span\" ) ) . getText ( ) ) ; driver . get ( baseUrl + \"customer/account/logout\" ) ; TimeUnit . SECONDS . sleep ( 7 ) ; } ", "comments": ["Test"], "method name": "Create delete wishlist"}
{"id": 188, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"Account ▁ Management\" ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 189, "website": "bigquery", "code": " public void function ( ) { driver . get ( homeUrl ) ; } ", "comments": ["Step(\"Open home url\")"], "method name": "open Home Url"}
{"id": 190, "website": "bigquery", "code": " public function ( WebDriver driver ) { super ( driver ) ; PageFactory . initElements ( new HtmlElementDecorator ( driver ) , this ) ; driver . get ( homeUrl + \"post/new\" ) ; } ", "comments": [], "method name": "Create Post Page"}
{"id": 191, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/\" ) ; final String htmlText = driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ; assertNotNull ( driver . findElement ( By . tagName ( \"h2\" ) ) ) ; assertEquals ( htmlText , \"Hello ▁ World!\" ) ; } ", "comments": ["Test", "Ignore"], "method name": "test I Said Hello"}
{"id": 187, "website": "bigquery", "code": " private static YoutubeVideo function ( String videoId ) { if ( getNumConcurrentBrowswers ( ) >= Constants . NUM_CONCURRENT_VIDEO_INFO_RETRIEVAL_ACTORS ) { throw new RuntimeException ( \"Too ▁ Many ▁ Active ▁ Video ▁ Retrieval ▁ Browsers. ▁ Try ▁ again ▁ later\" ) ; } WebDriver browser = createWebDriver ( ) ; WebElement moreButton = null ; WebElement transcriptButton = null ; WebElement transcriptContainer = null ; WebElement videoEndTimeElement = null ; WebElement videoTitleElement = null ; String url = StringManip . generateUrlFromVideoId ( videoId ) ; String videoEndTime = null ; String videoTitle = null ; long startTime = System . currentTimeMillis ( ) ; browser . manage ( ) . timeouts ( ) . implicitlyWait ( TIMEOUT , TimeUnit . SECONDS ) ; try { browser . get ( url ) ; logger . debug ( \"retrieved ▁ url: ▁ {}\" , url ) ; videoEndTimeElement = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . className ( \"ytp-time-duration\" ) ) ) ; videoEndTime = videoEndTimeElement . getText ( ) ; logger . debug ( \"retrieved ▁ video ▁ end ▁ time: ▁ {}\" , videoEndTime ) ; videoTitleElement = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"eow-title\" ) ) ) ; videoTitle = videoTitleElement . getText ( ) ; logger . debug ( \"retrieved ▁ video ▁ title: ▁ {}\" , videoTitle ) ; moreButton = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"action-panel-overflow-button\" ) ) ) ; clickElement ( browser , moreButton ) ; logger . debug ( \"clicked ▁ more ▁ button\" ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; killWebDriver ( browser ) ; return null ; } int counter = 0 ; while ( transcriptButton == null && counter < Constants . BROWSER_RETRIES ) { try { transcriptButton = new WebDriverWait ( browser , 1 ) . until ( ExpectedConditions . elementToBeClickable ( By . className ( \"action-panel-trigger-transcript\" ) ) ) ; } catch ( Exception e ) { System . out . println ( \"caught ▁ exception\" ) ; clickElement ( browser , moreButton ) ; System . out . println ( \"clicked ▁ more ▁ button\" ) ; counter ++ ; } } if ( counter == Constants . BROWSER_RETRIES ) { killWebDriver ( browser ) ; return null ; } try { Thread . sleep ( 1500 ) ; clickElement ( browser , transcriptButton ) ; transcriptContainer = new WebDriverWait ( browser , TIMEOUT ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"transcript-scrollbox\" ) ) ) ; logger . debug ( \"transcript ▁ successfully ▁ loaded ▁ into ▁ webdriver\" ) ; Document doc = Jsoup . parse ( transcriptContainer . getAttribute ( \"innerHTML\" ) ) ; LinkedHashMap < String , String > timeToText = new LinkedHashMap < > ( ) ; for ( Element timeRegion : doc . body ( ) . children ( ) ) { Elements timeRegionData = timeRegion . children ( ) ; String currentTime = timeRegionData . get ( 0 ) . text ( ) ; String currentCaption = timeRegionData . get ( 1 ) . text ( ) ; if ( timeToText . containsKey ( currentTime ) ) { timeToText . put ( currentTime , timeToText . get ( currentTime ) + currentCaption . trim ( ) ) ; } else { timeToText . put ( currentTime , currentCaption . trim ( ) ) ; } } String rawTranscript = timeToTextMappingToRawTranscript ( timeToText , videoEndTime ) ; logger . debug ( \"transcript ▁ successfully ▁ parsed\" ) ; long finishTime = System . currentTimeMillis ( ) ; logger . debug ( \"time ▁ taken: ▁ {}\" , ( finishTime - startTime ) * 1.0 / 1000 ) ; killWebDriver ( browser ) ; return new YoutubeVideo ( videoId , rawTranscript , videoTitle ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; logger . error ( e . toString ( ) ) ; killWebDriver ( browser ) ; return null ; } } ", "comments": [" attempts to get a string representation of the transcript from a youtube url", " @param videoId", " @return transcript string formatted so that each 2 lines follows this pattern:", " the start time --- end time", " captions said during this time", " captions do not have any newlines within them"], "method name": "create Youtube Video Object From Video Id"}
{"id": 193, "website": "bigquery", "code": " public void function ( String url ) { cleanDriver . get ( url ) ; } ", "comments": [], "method name": "clean Go To"}
{"id": 194, "website": "bigquery", "code": " public void function ( String url ) { infectedDriver . get ( url ) ; } ", "comments": [" Navigates the infected webdriver to the given url"], "method name": "infected Go To"}
{"id": 192, "website": "bigquery", "code": " public Document function ( final String url , File outputDir , String fileName ) { MonitorThread monitor = new MonitorThread ( hardLimitTimeoutSeconds , new Runnable ( ) { @ Override public void run ( ) { driver . quit ( ) ; throw new TimeoutException ( \"Timedout ▁ while ▁ retrieving ▁ DOM ▁ for ▁ \" + url ) ; } } ) ; monitor . setDaemon ( true ) ; driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( url ) ; String page = driver . getPageSource ( ) ; storeHtmlSource ( outputDir , fileName , page ) ; monitor . done ( ) ; Preconditions . checkNotNull ( url ) ; return WebdriverHelper . getDom ( page ) ; } ", "comments": [], "method name": "get Document And Store Source"}
{"id": 195, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 197, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 196, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 198, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 200, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 199, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . isFirefox ( driver ) && TestUtilities . isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 201, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 202, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; waitFor ( pageTitleToBe ( driver , \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 203, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 204, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 205, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 207, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 208, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 206, "website": "bigquery", "code": " public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({ANDROID, IPHONE, OPERA, OPERA_MOBILE, MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 209, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore(value = {IE, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE, PHANTOMJS},", "Test"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 211, "website": "bigquery", "code": " private String function ( ) { String url = requestToken . getAuthenticationURL ( ) ; driver . get ( url ) ; jse . executeScript ( \"document.getElementById('username_or_email').setAttribute('value','\" + username + \"')\" ) ; jse . executeScript ( \"document.getElementById('password').setAttribute('value','\" + password + \"')\" ) ; jse . executeScript ( \"document.getElementById('allow').click()\" ) ; driver . getPageSource ( ) ; return driver . getPageSource ( ) ; } ", "comments": [], "method name": "get Twitter Authorization PIN Page Source"}
{"id": 212, "website": "bigquery", "code": " private static void function ( FileWriter fw , WebDriver driver , String finalUrl ) throws Exception { driver . get ( finalUrl ) ; List < WebElement > tables = driver . findElements ( By . tagName ( \"table\" ) ) ; WebElement mainTable = tables . get ( 1 ) ; List < WebElement > trs = mainTable . findElements ( By . tagName ( \"tr\" ) ) ; Boolean firstOne = true ; int cols = 0 ; for ( WebElement tr : trs ) { try { if ( firstOne ) { StringBuilder header = new StringBuilder ( ) ; firstOne = false ; List < WebElement > tds = tr . findElements ( By . tagName ( \"td\" ) ) ; for ( WebElement td : tds ) { try { String s = td . findElement ( By . tagName ( \"strong\" ) ) . getText ( ) ; header . append ( s + \",\" ) ; } catch ( NoSuchElementException e ) { header . append ( \"ImageURL,\" ) ; } } System . out . println ( header . toString ( ) ) ; fw . write ( header + \" \\n \" ) ; cols = header . toString ( ) . split ( \",\" ) . length ; } else { List < WebElement > tds = tr . findElements ( By . tagName ( \"td\" ) ) ; if ( tds . size ( ) == cols ) { StringBuilder line = new StringBuilder ( ) ; for ( WebElement td : tds ) { try { String s = \"http: // shouji.gd.chinamobile.com\" + td . findElement ( By . tagName ( \"img\" ) ) . getAttribute ( \"src\" ) ; line . append ( s + \",\" ) ; } catch ( NoSuchElementException e ) { line . append ( td . getText ( ) + \",\" ) ; } } System . out . println ( line ) ; fw . write ( line . toString ( ) + \" \\n \" ) ; } else { StringBuilder line = new StringBuilder ( ) ; for ( int i = 0 ; i < ( cols - tds . size ( ) ) ; i ++ ) { line . append ( \",\" ) ; } for ( WebElement td : tds ) { line . append ( td . getText ( ) + \",\" ) ; } System . out . println ( line ) ; fw . write ( line . toString ( ) + \" \\n \" ) ; } } } catch ( NoSuchElementException e ) { System . out . println ( \"One ▁ page ▁ end!\" ) ; fw . write ( \"One ▁ page ▁ end!\" . toString ( ) + \" \\n \" ) ; } } } ", "comments": [], "method name": "go To URL"}
{"id": 213, "website": "bigquery", "code": " private static void function ( FileWriter fw , WebDriver driver , String url ) throws Exception { try { driver . get ( url ) ; WebElement table = driver . findElement ( By . xpath ( \" // table[@bgcolor='BFBEC3']\" ) ) ; List < WebElement > items = table . findElements ( By . xpath ( \"./tbody/tr\" ) ) ; for ( int i = 1 ; i < items . size ( ) - 1 ; i ++ ) { List < WebElement > cols = items . get ( i ) . findElements ( By . tagName ( \"td\" ) ) ; for ( WebElement col : cols ) { System . out . print ( col . getText ( ) + \",\" ) ; fw . write ( col . getText ( ) + \",\" ) ; } System . out . println ( ) ; fw . write ( \" \\n \" ) ; } } catch ( Exception e ) { System . out . println ( \"---------Retry--------------------------\" ) ; System . out . println ( e . getMessage ( ) ) ; System . out . println ( \"---------Retry---------------------------\" ) ; readForEachPage ( fw , driver , url ) ; } } ", "comments": [], "method name": "read For Each Page"}
{"id": 214, "website": "bigquery", "code": " public String function ( String url ) { driver . get ( url ) ; String source = driver . getPageSource ( ) ; return source ; } ", "comments": [], "method name": "get HTML Content"}
{"id": 215, "website": "bigquery", "code": " public String function ( String url ) { driver . get ( url ) ; String source = driver . getPageSource ( ) ; return source ; } ", "comments": [], "method name": "get HTML Content"}
{"id": 216, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Page Title Present Pos"}
{"id": 217, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Visible Pos"}
{"id": 218, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilTextPresent ( text ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Text Present Pos"}
{"id": 219, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Disapear Pos"}
{"id": 220, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Present Pos"}
{"id": 221, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( pipedLocator ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wasit Until Element Piped Locator"}
{"id": 222, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageIsValidated ( new BasicPageImpl ( ) { @ Override public BasicPageImpl getPage ( ) { return this ; } } ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Web Page Is Validated Neg"}
{"id": 223, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Page Title Present Neg"}
{"id": 224, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Element Visible Neg"}
{"id": 225, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Text Present Neg"}
{"id": 226, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { RuntimeException.class })", "WebTest"], "method name": "test Wait Until Element Disapear Neg"}
{"id": 227, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Element Present Neg"}
{"id": 228, "website": "bigquery", "code": " public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( \"Sign-out\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 229, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/assets/servicex/details\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetOveriddenDetailsPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding existing page in extensions\")"], "method name": "test ES Publisher Asset Override Existing Page Test Case"}
{"id": 210, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 230, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElement ( By . id ( \"Addgadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_name\" ) ) ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div.col-lg-10\" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(3) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div.col-lg-10\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 231, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Edit\" ) ) ) ; driver . findElement ( By . id ( \"Edit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_version\" ) ) ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION_2 ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Overview\" ) ) ) ; driver . findElement ( By . id ( \"Overview\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Overview\" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \"/html/body/div/div[3]/div[1]/div/div/div[2]/h1\" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div.col-lg-10\" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(3) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div.col-lg-10\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\", dependsOnMethods = \"testAddAsset\")"], "method name": "test Edit Asset"}
{"id": 233, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\","], "method name": "test Edit Asset"}
{"id": 232, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElement ( By . id ( \"Addgadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_name\" ) ) ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div.col-lg-10\" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(3) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div.col-lg-10\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div.col-lg-10\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 234, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertEquals ( \"Asset ▁ | ▁ WSO2 ▁ Enterprise ▁ Store ▁ back-office\" , driver . getTitle ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( \"/html/body/div/div[1]/header/div/div[2]/div/a/div/span\" ) ) . getText ( ) , \"Logged ▁ in ▁ user ▁ not ▁ shown\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify login to ES Publisher\")"], "method name": "test Login To Publisher"}
{"id": 235, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/assets/servicex/new_page\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test adding a new asset page in extensions\")"], "method name": "test ES Publisher Asset New Page Test Case"}
{"id": 236, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-register\" ) ) . click ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . name ( \"reg-email\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-email\" ) ) . sendKeys ( NEW_USER_EMAIL ) ; driver . findElement ( By . name ( \"reg-first-name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-first-name\" ) ) . sendKeys ( NEW_USER_FNAME ) ; driver . findElement ( By . name ( \"reg-last-name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-last-name\" ) ) . sendKeys ( NEW_USER_LNAME ) ; new Select ( driver . findElement ( By . name ( \"secret-question\" ) ) ) . selectByVisibleText ( SECRET_QUESTION ) ; driver . findElement ( By . name ( \"secret-answer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"secret-answer\" ) ) . sendKeys ( SECRET_ANSWER ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"My ▁ Items\" ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( NEW_USER_NAME ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( driver , By . linkText ( NEW_USER_NAME ) ) , \"Login ▁ failed ▁ for ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing user registration\")"], "method name": "test ES Register User Test Case"}
{"id": 237, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // span[contains(.,'Gadget')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/facebook.png']\" ) ) . click ( ) ; String facebookLink = driver . getCurrentUrl ( ) ; facebookLink = URLDecoder . decode ( URLDecoder . decode ( facebookLink , \"UTF-8\" ) , \"UTF-8\" ) ; assertTrue ( facebookLink . contains ( correctFacebookLink ) , \"Facebook ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing facebook link in share tab\")"], "method name": "test Facebook Sharing"}
{"id": 238, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // span[contains(.,'Gadget')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/google.png']\" ) ) . click ( ) ; String gplusLink = driver . getCurrentUrl ( ) ; gplusLink = URLDecoder . decode ( gplusLink , \"UTF-8\" ) ; assertTrue ( gplusLink . contains ( correctGplusLink ) , \"GPlus ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Google plus link in share tab\")"], "method name": "test G Plus Sharing"}
{"id": 239, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // span[contains(.,'Gadget')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/twitter.png']\" ) ) . click ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , \"UTF-8\" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Twitter link in share tab\")"], "method name": "test Twitter Sharing"}
{"id": 240, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // span[contains(.,'Gadget')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/diggit.png']\" ) ) . click ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , \"UTF-8\" ) ; assertTrue ( diggLink . contains ( correctDiggLink ) , \"Digg ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Digg link in share tab\")"], "method name": "test Digg Sharing"}
{"id": 242, "website": "bigquery", "code": " private void function ( String url ) { getWebDriver ( ) . get ( url ) ; } ", "comments": [], "method name": "fake Type URL"}
{"id": 243, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test(enabled = false)", " @Ignore(value = { ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI,", " SELENESE, OPERA_MOBILE }, reason =", " \"Untested on all other browsers, fails on chrome, fails on IE.\", issues = {", " 3508 })"], "method name": "handle Form With Javascript Action"}
{"id": 241, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/gadget/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/assets/servicex/new_caramel_page\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; assertTrue ( isElementPresent ( driver , By . id ( \"Overview\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . id ( \"Edit\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new caramel page in extensions\")"], "method name": "test ES Publisher Asset Caramel Page Test Case"}
{"id": 244, "website": "bigquery", "code": " void function ( Context context ) { LOG . debug ( \"Navigating ▁ to ▁ homepage\" ) ; String homepageUrl = System . getProperty ( HOMEPAGE_UR ) ; if ( homepageUrl == null || homepageUrl . isEmpty ( ) ) { LOG . info ( String . format ( \"System ▁ property ▁ \\\"%s\\\" ▁ not ▁ set, ▁ using ▁ default ▁ homepage ▁ url ▁ \\\"%s\\\"\" , HOMEPAGE_UR , DEFAULT_HOMEPAGE_URL ) ) ; homepageUrl = DEFAULT_HOMEPAGE_URL ; } LOG . debug ( String . format ( \"Trying ▁ to ▁ navigate ▁ to ▁ url ▁ \\\"%s\\\"\" , homepageUrl ) ) ; context . driver ( ) . get ( homepageUrl ) ; } ", "comments": [], "method name": "goto Application Url"}
{"id": 245, "website": "bigquery", "code": " public MessageEvent function ( Session session , String host , Identifier identifier , boolean withBase ) { MessageEvent message ; String url = \"\" ; try { url = identifier . getLocator ( ) ; if ( ! StringUtil . isNull ( url ) ) { if ( withBase ) { host = StringUtil . cleanHostURL ( host ) ; url = host + url ; } session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; } else { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; } } catch ( TimeoutException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL_TIMEOUT ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%TIMEOUT%\" , String . valueOf ( session . getDefaultWait ( ) ) ) ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . WARN , exception . toString ( ) ) ; } catch ( WebDriverException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_SELENIUM_CONNECTIVITY ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . FATAL , exception . toString ( ) ) ; } return message ; } ", "comments": ["Override"], "method name": "do Selenium Action Open URL"}
{"id": 246, "website": "bigquery", "code": " public MessageEvent function ( Session session , String host , String uri ) { MessageEvent message ; host = StringUtil . cleanHostURL ( host ) ; String url = host + ( host . endsWith ( \"/\" ) ? uri . replace ( \"/\" , \"\" ) : uri ) ; try { session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; } catch ( TimeoutException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN_TIMEOUT ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%TIMEOUT%\" , String . valueOf ( session . getDefaultWait ( ) ) ) ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . WARN , exception . toString ( ) ) ; } catch ( Exception e ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) + \" ▁ \" + e . getMessage ( ) ) ; } return message ; } ", "comments": ["Override"], "method name": "do Selenium Action Url Login"}
{"id": 247, "website": "bigquery", "code": " public void function ( String user , String pass ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement usernameField = driver . findElement ( By . id ( \"username\" ) ) ; usernameField . clear ( ) ; usernameField . sendKeys ( user ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( pass ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; } ", "comments": [], "method name": "test User Login"}
{"id": 248, "website": "bigquery", "code": " public void function ( WebDriver driver , String url ) { driver . get ( url ) ; System . out . println ( \"Start ▁ to ▁ open ▁ the ▁ url ▁ : ▁ \" + url ) ; } ", "comments": [], "method name": "Open Target URL"}
{"id": 249, "website": "bigquery", "code": " public List < DHCPClient > function ( ) { logger . info ( \"Fetching ▁ DHCP ▁ clients\" ) ; webDriver . get ( baseUrl ) ; webDriver . findElement ( By . id ( \"pcPassword\" ) ) . clear ( ) ; webDriver . findElement ( By . id ( \"pcPassword\" ) ) . sendKeys ( \"admin\" ) ; webDriver . findElement ( By . id ( \"loginBtn\" ) ) . click ( ) ; String title = webDriver . getTitle ( ) ; logger . debug ( \"Page ▁ title:\" + title ) ; WebDriver menuFrame1 = webDriver . switchTo ( ) . frame ( webDriver . findElement ( By . id ( \"frame1\" ) ) ) ; WebElement findElement = webDriver . findElement ( By . id ( \"menu\" ) ) ; findElement . findElement ( By . id ( \"menu_dhcp\" ) ) . click ( ) ; webDriver . findElement ( By . id ( \"menu_dhcpclient\" ) ) . click ( ) ; logger . debug ( \"DHCP ▁ menu ▁ opened\" ) ; webDriver . switchTo ( ) . defaultContent ( ) ; WebDriver menuFrame2 = webDriver . switchTo ( ) . frame ( webDriver . findElement ( By . id ( \"frame2\" ) ) ) ; webDriver . findElement ( By . id ( \"updateBtn\" ) ) . click ( ) ; logger . debug ( \"DHCP ▁ clients ▁ updated\" ) ; WebElement dhcpClientsTable = webDriver . findElement ( By . tagName ( \"tbody\" ) ) ; List < WebElement > dhcpClientsTableRows = dhcpClientsTable . findElements ( By . tagName ( \"tr\" ) ) ; List < DHCPClient > dhcpClients = new ArrayList < DHCPClient > ( ) ; for ( WebElement webElement : dhcpClientsTableRows ) { List < WebElement > dhcpClientsTableCols = webElement . findElements ( By . tagName ( \"td\" ) ) ; DHCPClient client = new DHCPClient ( ) ; client . setId ( Integer . parseInt ( dhcpClientsTableCols . get ( 0 ) . getText ( ) . trim ( ) ) ) ; client . setName ( dhcpClientsTableCols . get ( 1 ) . getText ( ) . trim ( ) ) ; client . setMacAddress ( dhcpClientsTableCols . get ( 2 ) . getText ( ) . trim ( ) ) ; client . setAssignedIP ( dhcpClientsTableCols . get ( 3 ) . getText ( ) . trim ( ) ) ; client . setLeaseTime ( dhcpClientsTableCols . get ( 4 ) . getText ( ) . trim ( ) ) ; dhcpClients . add ( client ) ; logger . info ( client . getId ( ) + \" ▁ \" + client . getName ( ) + \" ▁ \" + client . getMacAddress ( ) + \" ▁ \" + client . getAssignedIP ( ) + \" ▁ \" + client . getLeaseTime ( ) ) ; } return dhcpClients ; } ", "comments": [], "method name": "get DHCP Client List"}
{"id": 250, "website": "bigquery", "code": " public MessageEvent function ( Session session , String host , String value , String property , boolean withBase ) { MessageEvent message ; String url = \"null\" ; try { if ( ! StringUtil . isNull ( value ) ) { url = value ; } else if ( ! StringUtil . isNull ( property ) ) { url = property ; } if ( ! StringUtil . isNull ( url ) ) { if ( withBase ) { url = \"http: // \" + host + url ; } session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; return message ; } } catch ( WebDriverException exception ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_SELENIUM_CONNECTIVITY ) ; MyLogger . log ( WebDriverService . class . getName ( ) , Level . FATAL , exception . toString ( ) ) ; return message ; } message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_OPENURL ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; return message ; } ", "comments": ["Override"], "method name": "do Selenium Action Open URL"}
{"id": 251, "website": "bigquery", "code": " public MessageEvent function ( Session session , String host , String uri ) { MessageEvent message ; String url = \"http: // \" + host + ( host . endsWith ( \"/\" ) ? uri . replace ( \"/\" , \"\" ) : uri ) ; try { session . getDriver ( ) . get ( url ) ; message = new MessageEvent ( MessageEventEnum . ACTION_SUCCESS_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) ) ; return message ; } catch ( Exception e ) { message = new MessageEvent ( MessageEventEnum . ACTION_FAILED_URLLOGIN ) ; message . setDescription ( message . getDescription ( ) . replaceAll ( \"%URL%\" , url ) + \" ▁ \" + e . getMessage ( ) ) ; return message ; } } ", "comments": ["Override"], "method name": "do Selenium Action Url Login"}
{"id": 253, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork1.html\" ) ; String url = html . toURI ( ) . toString ( ) ; System . out . println ( url ) ; driver . get ( url ) ; Thread . sleep ( 1000 ) ; WebElement userName = driver . findElement ( By . id ( \"user_name\" ) ) ; userName . sendKeys ( \"TestUser\" ) ; Thread . sleep ( 1000 ) ; WebElement password = driver . findElement ( By . id ( \"password\" ) ) ; password . sendKeys ( \"pass\" ) ; Thread . sleep ( 1000 ) ; WebElement login = driver . findElement ( By . id ( \"login\" ) ) ; login . click ( ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; Thread . sleep ( 1000 ) ; } ", "comments": ["Test"], "method name": "test Login Success"}
{"id": 254, "website": "bigquery", "code": " public void function ( ) { File html = new File ( \"introWork/introWork1.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement userName = driver . findElement ( By . id ( \"user_name\" ) ) ; userName . sendKeys ( \"TestUser\" ) ; WebElement password = driver . findElement ( By . id ( \"password\" ) ) ; password . sendKeys ( \"pass\" ) ; WebElement login = driver . findElement ( By . id ( \"login\" ) ) ; login . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } ", "comments": [" このプログラムはハンズオンに必要なプログラムが適切にインストールされたかをチェックするプログラムです。", " このファイルをInteillJ IDEA上から、右クリック>'Run EnvironmentCheckTest' によりJUnitとして実行し、", " JUnitのテストが成功すれば、インストールは正常に完了しています。", "Ignore", "Test"], "method name": "check That Installed Successfully"}
{"id": 255, "website": "bigquery", "code": " private String function ( String email , String pw , String client_id , String redirect_uri , String scope ) { Property staticToken = property ( \"authToken\" ) ; if ( staticToken . exists ( ) ) { return staticToken . getPropertyValue ( ) ; } String requestTokenUrl = String . format ( \"%s?response_type=token&client_id=%s&redirect_uri=%s&scope=%s\" , GOOGLE_OAUTH2_REQUEST_TOKEN_URL , client_id , redirect_uri , scope ) ; String cacheKey = email + \":\" + requestTokenUrl ; if ( tokenCache . containsKey ( cacheKey ) ) { return tokenCache . get ( cacheKey ) ; } driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( requestTokenUrl ) ; try { driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( email ) ; driver . findElement ( By . id ( \"Passwd\" ) ) . sendKeys ( pw ) ; driver . findElement ( By . id ( \"signIn\" ) ) . submit ( ) ; } catch ( NoSuchElementException nsee ) { String errMsg = driver . getCurrentUrl ( ) + \" ▁ ----- ▁ \" + driver . getPageSource ( ) ; throw new NoSuchElementException ( nsee . toString ( ) + \" ▁ ----- ▁ \" + errMsg ) ; } try { WebElement button = driver . findElement ( By . id ( \"submit_approve_access\" ) ) ; Graphene . waitModel ( driver ) . withTimeout ( 5 , TimeUnit . SECONDS ) . until ( ) . element ( button ) . is ( ) . enabled ( ) ; button . click ( ) ; } catch ( NoSuchElementException e ) { } String redirectUrlWithToken = driver . getCurrentUrl ( ) . replace ( \"#access_token=\" , \"?access_token=\" ) ; List < NameValuePair > params ; try { params = URLEncodedUtils . parse ( new URI ( redirectUrlWithToken ) , \"UTF-8\" ) ; } catch ( URISyntaxException urise ) { throw new IllegalStateException ( urise ) ; } String accessToken = null ; for ( NameValuePair param : params ) { if ( param . getName ( ) . equals ( \"access_token\" ) ) { accessToken = param . getValue ( ) ; } } assertNotNull ( \"Token ▁ is ▁ null:\" + driver . getCurrentUrl ( ) + \" ▁ ----- ▁ \" + driver . getPageSource ( ) , accessToken ) ; tokenCache . put ( cacheKey , accessToken ) ; return accessToken ; } ", "comments": [" This can get a single scope only.  Unable to automate requesting token for multiple scopes."], "method name": "get Google Access Token"}
{"id": 252, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"http: // 192.168.99.100/\" ; String url_goods = \"http: // 192.168.99.100/products/detail/10002\" ; driver . get ( url ) ; driver . get ( url_goods ) ; driver . findElement ( By . className ( \"btn-primary\" ) ) . click ( ) ; driver . findElement ( By . className ( \"hover_change_image\" ) ) . click ( ) ; driver . findElement ( By . className ( \"hover_change_image\" ) ) . click ( ) ; driver . get ( \"http: // 192.168.99.100/shopping/nonmember\" ) ; driver . findElement ( By . id ( \"nonmember_name_name01\" ) ) . sendKeys ( \"Familyname\" ) ; driver . findElement ( By . id ( \"nonmember_name_name02\" ) ) . sendKeys ( \"Firstname\" ) ; driver . findElement ( By . id ( \"nonmember_kana_kana01\" ) ) . sendKeys ( \"familyname\" ) ; driver . findElement ( By . id ( \"nonmember_kana_kana02\" ) ) . sendKeys ( \"firstname\" ) ; driver . findElement ( By . id ( \"nonmember_company_name\" ) ) . sendKeys ( \"会社名\" ) ; driver . findElement ( By . id ( \"zip01\" ) ) . sendKeys ( \"000\" ) ; driver . findElement ( By . id ( \"zip02\" ) ) . sendKeys ( \"0000\" ) ; WebElement selectBox0 = ( driver . findElement ( By . id ( \"pref\" ) ) ) ; Select select0 = new Select ( selectBox0 ) ; select0 . selectByValue ( \"36\" ) ; driver . findElement ( By . id ( \"addr01\" ) ) . sendKeys ( \"都道府県11111\" ) ; driver . findElement ( By . id ( \"addr02\" ) ) . sendKeys ( \"町11111\" ) ; driver . findElement ( By . id ( \"nonmember_tel_tel01\" ) ) . sendKeys ( \"000\" ) ; driver . findElement ( By . id ( \"nonmember_tel_tel02\" ) ) . sendKeys ( \"0000\" ) ; driver . findElement ( By . id ( \"nonmember_tel_tel03\" ) ) . sendKeys ( \"0000\" ) ; driver . findElement ( By . id ( \"nonmember_fax_fax01\" ) ) . sendKeys ( \"00\" ) ; driver . findElement ( By . id ( \"nonmember_fax_fax02\" ) ) . sendKeys ( \"0000\" ) ; driver . findElement ( By . id ( \"nonmember_fax_fax03\" ) ) . sendKeys ( \"0000\" ) ; driver . findElement ( By . id ( \"nonmember_email\" ) ) . sendKeys ( \"matsumoto@example.com\" ) ; driver . findElement ( By . id ( \"nonmember_sex_1\" ) ) . click ( ) ; WebElement selectBox = ( driver . findElement ( By . id ( \"nonmember_job\" ) ) ) ; Select select = new Select ( selectBox ) ; select . selectByValue ( \"1\" ) ; WebElement selectBox1 = ( driver . findElement ( By . id ( \"nonmember_birth_year\" ) ) ) ; Select select1 = new Select ( selectBox1 ) ; select1 . selectByValue ( \"1993\" ) ; WebElement selectBox2 = ( driver . findElement ( By . id ( \"nonmember_birth_month\" ) ) ) ; Select select2 = new Select ( selectBox2 ) ; select2 . selectByValue ( \"1\" ) ; WebElement selectBox3 = ( driver . findElement ( By . id ( \"nonmember_birth_day\" ) ) ) ; Select select3 = new Select ( selectBox3 ) ; select3 . selectByValue ( \"7\" ) ; driver . findElement ( By . id ( \"singular\" ) ) . click ( ) ; driver . findElement ( By . id ( \"next-top\" ) ) . click ( ) ; assertThat ( driver . findElement ( By . className ( \"title\" ) ) . getText ( ) , is ( \"ご購入完了\" ) ) ; } ", "comments": ["Test"], "method name": "test Login Success"}
{"id": 257, "website": "bigquery", "code": " public void function ( String url , String ER ) { driver . get ( url ) ; String title = driver . getTitle ( ) ; assertThat ( title , equalTo ( ER ) ) ; } ", "comments": [], "method name": "test Page Title"}
{"id": 256, "website": "bigquery", "code": " public static byte [ ] function ( WebDriver driver , String url ) { driver . get ( url ) ; TakesScreenshot ts = ( TakesScreenshot ) driver ; byte [ ] data = ts . getScreenshotAs ( OutputType . BYTES ) ; return data ; } ", "comments": [" Loads a URL in the given driver and returns PNG data.", " ", " @param driver", "            the driver to load the URL in.", " @param url", "            the URL to load.", " @return PNG data."], "method name": "url To Png"}
{"id": 258, "website": "bigquery", "code": " public void function ( ) { d . get ( serverUrl ) ; } ", "comments": [], "method name": "go To Server Root"}
{"id": 259, "website": "bigquery", "code": " public void function ( ) { if ( isUsingDevDotHTML ( ) ) { d . get ( serverUrl + \"webadmin/dev.html\" ) ; } else if ( avoidRedirectAndGoStraightToWebAdminHomepage ( ) ) { d . get ( serverUrl + \"webadmin/\" ) ; } else { goToServerRoot ( ) ; } waitForTitleToBe ( \"Neo4j ▁ Monitoring ▁ and ▁ Management ▁ Tool\" ) ; } ", "comments": [], "method name": "go To Webadmin Start Page"}
{"id": 261, "website": "bigquery", "code": " public static void function ( AtomicInteger nextTest , int tests ) { String baseUrl = \"https: // localhost:8443/benchmark/BenchmarkTest\" ; FirefoxDriver driver = new FirefoxDriver ( ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; while ( nextTest . get ( ) <= tests ) { String test = \"000000\" + nextTest . getAndIncrement ( ) ; test = test . substring ( test . length ( ) - 5 ) ; try { String url = baseUrl + test + \".html\" ; System . out . println ( \"URL: ▁ \" + url ) ; driver . get ( url ) ; for ( WebElement we : driver . findElements ( By . tagName ( \"form\" ) ) ) { we . submit ( ) ; } driver . get ( url ) ; Thread . sleep ( 500 ) ; String jQuerySelector = \"#login-btn\" ; js . executeScript ( \"$(\\\"\" + jQuerySelector + \"\\\").click();\" ) ; Thread . sleep ( 500 ) ; } catch ( Exception e ) { } } driver . quit ( ) ; } ", "comments": [], "method name": "visit Test Cases"}
{"id": 260, "website": "bigquery", "code": " public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = new DefaultHttpProxyServer ( port ) ; proxyServer . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( \"localhost:%d\" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = \"http: // www.yahoo.com/\" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } ", "comments": ["@Test"], "method name": "test With Web Driver"}
{"id": 263, "website": "bigquery", "code": " public void function ( String url ) { this . driver . get ( url ) ; } ", "comments": [" Navigate to a particular url", " @param url"], "method name": "navigate To Url"}
{"id": 264, "website": "bigquery", "code": " public void function ( ) throws Throwable { System . out . println ( \"This ▁ is ▁ test ▁ number ▁ 1\" ) ; driver . get ( url ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"admin@test.com\" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( \"pwd\" ) ) . sendKeys ( \"1234\" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( \"btn-default\" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( \"calendarView\" ) ) != null ) ; } ", "comments": ["Test"], "method name": "a test login page"}
{"id": 262, "website": "bigquery", "code": " public void function ( ) throws Exception { LOG . debug ( \"selenium: ▁ running ▁ test..\" ) ; driver . get ( baseUrl + \"/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*totask2[\\\\s\\\\S]*$\" ) ) ; assertEquals ( \"edit ▁ weekly ▁ work ▁ hours..\" , driver . findElement ( By . xpath ( \" // a[contains(@href, ▁ '/weekEntry')]\" ) ) . getText ( ) ) ; driver . findElement ( By . linkText ( \"projects..\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"loginForm\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*sign ▁ in[\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"unit-test-user\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"t123456\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.btn-primary\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) . matches ( \"^currently ▁ defined ▁ projects[\\\\s\\\\S]*$\" ) ) ; driver . findElement ( By . xpath ( \" // button[@value='sign ▁ out']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"div.container.paper-box\" ) ) . getText ( ) . matches ( \"^[\\\\s\\\\S]*you ▁ have ▁ been ▁ logged ▁ out[\\\\s\\\\S]*$\" ) ) ; } ", "comments": ["Ignore(\"test needs an started totask2 web applications\")", "Test"], "method name": "test Login Projects Logout"}
{"id": 265, "website": "bigquery", "code": " public void function ( ) throws Throwable { System . out . println ( \"This ▁ is ▁ test ▁ number ▁ 2\" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . get ( url ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( \"users_link\" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( \"createUserForm\" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( \"orderRoom_link\" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( \"mapWrap\" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( \"createTimetable_link\" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( \"createTimetableForm\" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . id ( \"calendar_link\" ) ) . click ( ) ; assert ( driver . findElement ( By . id ( \"calendarView\" ) ) != null ) ; } ", "comments": ["Test"], "method name": "b test headerNavigation"}
{"id": 266, "website": "bigquery", "code": " public void function ( ) throws Throwable { System . out . println ( \"This ▁ is ▁ test ▁ number ▁ 3\" ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . get ( url ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( \"fc-agendaWeek-button\" ) ) . click ( ) ; assert ( driver . findElement ( By . className ( \"fc-agendaWeek-view\" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( \"fc-agendaDay-button\" ) ) . click ( ) ; assert ( driver . findElement ( By . className ( \"fc-agendaDay-view\" ) ) != null ) ; if ( wait ) { Thread . sleep ( 2000 ) ; } driver . findElement ( By . className ( \"fc-month-button\" ) ) . click ( ) ; assert ( driver . findElement ( By . className ( \"fc-month-view\" ) ) != null ) ; } ", "comments": ["Test"], "method name": "c test calendar"}
{"id": 267, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 268, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 269, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Page Title Present Pos"}
{"id": 270, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Visible Pos"}
{"id": 272, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Disapear Pos"}
{"id": 273, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Present Pos"}
{"id": 274, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( pipedLocator ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wasit Until Element Piped Locator"}
{"id": 271, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilTextPresent ( text ) ; } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Text Present Pos"}
{"id": 276, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Page Title Present Neg"}
{"id": 275, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilWebPageIsValidated ( new BasicPageImpl ( ) { @ Override public BasicPageImpl getPage ( ) { return this ; } } ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Web Page Is Validated Neg"}
{"id": 277, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Element Visible Neg"}
{"id": 278, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Text Present Neg"}
{"id": 279, "website": "bigquery", "code": " public void function ( ) { String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { RuntimeException.class })", "WebTest"], "method name": "test Wait Until Element Disapear Neg"}
{"id": 280, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Element Present Neg"}
{"id": 282, "website": "bigquery", "code": " public void function ( String url ) throws Throwable { driver . get ( url ) ; } ", "comments": ["Given(\"^Go to the page, (.*)$\")"], "method name": "go to the page"}
{"id": 283, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/test\" ) ; assertEquals ( \"Search ▁ Key\" , driver . findElement ( By . xpath ( \" // div[@id='ROOT-2521314']/div/div[2]/div/div/div/div/div/div/div/div/div/div/div[6]/div/div\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Vaadin Abstract Form"}
{"id": 281, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Start\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 284, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/test\" ) ; assertEquals ( \"Sample ▁ Name\" , driver . findElement ( By . xpath ( \"( // input[@type='text'])[4]\" ) ) . getAttribute ( \"value\" ) ) ; assertEquals ( \"on\" , driver . findElement ( By . id ( \"gwt-uid-2\" ) ) . getAttribute ( \"value\" ) ) ; driver . findElement ( By . cssSelector ( \"span.v-button-caption\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; assertEquals ( \"A\" , driver . findElement ( By . xpath ( \"( // input[@type='text'])[8]\" ) ) . getAttribute ( \"value\" ) ) ; assertEquals ( \"mail@nomail.org\" , driver . findElement ( By . xpath ( \"( // input[@type='text'])[7]\" ) ) . getAttribute ( \"value\" ) ) ; assertEquals ( \"▼Others\" , driver . findElement ( By . cssSelector ( \"span.v-button-caption\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // div[2]/div/div/span/span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; assertEquals ( \"Otro ▁ nombre\" , driver . findElement ( By . xpath ( \"( // input[@type='text'])[4]\" ) ) . getAttribute ( \"value\" ) ) ; assertEquals ( \"B\" , driver . findElement ( By . xpath ( \"( // input[@type='text'])[8]\" ) ) . getAttribute ( \"value\" ) ) ; } ", "comments": ["Test"], "method name": "test Vaadin Abstract Form"}
{"id": 286, "website": "bigquery", "code": " public void function ( String domain , String location ) throws Exception { driver = getDriver ( ) ; String url = getBaseUrl ( ) + \"/\" + domain ; if ( location != null && ! location . isEmpty ( ) ) { url += \"/\" + location ; } driver . get ( url ) ; } ", "comments": [" Redirect user to given location", " @param domain   name of the domain where user wants to direct in to", " @param location name of the location to be directed to"], "method name": "redirect To Location"}
{"id": 285, "website": "bigquery", "code": " public void function ( ) throws Exception { JdbcConnectionPool dataSource = JdbcConnectionPool . create ( \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\" , \"sa\" , \"sa\" ) ; JdbcPersonRepository . createDatabaseSchema ( dataSource ) ; new EnvEntry ( \"jdbc/primaryDs\" , dataSource ) ; Server server = new Server ( 0 ) ; server . setHandler ( new WebAppContext ( \"src/main/webapp\" , \"/\" ) ) ; server . start ( ) ; String rootUrl = \"http: // localhost:\" + server . getConnectors ( ) [ 0 ] . getLocalPort ( ) + \"/\" ; WebDriver browser = new HtmlUnitDriver ( ) { @ Override public WebElement findElement ( By by ) { try { return super . findElement ( by ) ; } catch ( NoSuchElementException e ) { throw new NoSuchElementException ( \"Can't ▁ find ▁ \" + by + \" ▁ in ▁ \" + getPageSource ( ) ) ; } } } ; browser . get ( rootUrl ) ; browser . findElement ( By . linkText ( \"Create ▁ person\" ) ) . click ( ) ; browser . findElement ( By . name ( \"full_name\" ) ) . sendKeys ( \"Darth ▁ Vader\" ) ; browser . findElement ( By . name ( \"create_person\" ) ) . click ( ) ; browser . findElement ( By . linkText ( \"Find ▁ people\" ) ) . click ( ) ; assertThat ( browser . getPageSource ( ) ) . contains ( \"Darth ▁ Vader\" ) ; } ", "comments": ["Test"], "method name": "should find saved people"}
{"id": 288, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"catalog-search-input\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"catalog-search-input\" ) ) . sendKeys ( \"waiting ▁ for ▁ godot\" ) ; driver . findElement ( By . id ( \"catalog-search-button\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Waiting ▁ for ▁ Godot ▁ [En ▁ attendant ▁ Godot. ▁ Engl.]. ▁ A ▁ tragicomedy ▁ in ▁ 2 ▁ acts. ▁ (1. ▁ publ.)\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Search Title"}
{"id": 287, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"catalog-search-input\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"catalog-search-input\" ) ) . sendKeys ( \"beckett\" ) ; driver . findElement ( By . id ( \"catalog-search-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"exlidFacet3-0\" ) ) . click ( ) ; driver . findElement ( By . id ( \"exlidFacet4-0\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Wie ▁ es ▁ ist\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Bestellen\" ) ) . click ( ) ; driver . findElement ( By . id ( \"REQUEST_TAB_SIGN_IN_RECORD_3\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Order Book"}
{"id": 289, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-star\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , popularAsset1 ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , popularAsset1 , \"Popularity ▁ Sort ▁ failed\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[2]/div/div/a/h4\" ) ) . getText ( ) , popularAsset2 , \"Popularity ▁ Sort ▁ failed\" ) ; } ", "comments": ["TODO-disabled bug", "Test(groups = \"wso2.es.store\", description = \"Testing sorting on popularity\", enabled = false)"], "method name": "test Store Sort On Popularity"}
{"id": 290, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-sort-alphabetical\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . xpath ( \" // div[@id='assets-container']/div/div[3]/div/div/a/h4\" ) , BUBBLE_CHART ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; assertEquals ( BAR_CHART , driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[2]/div/div/a/h4\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on alphabetical order\")"], "method name": "test Store Sort On Alphabetical Order"}
{"id": 291, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-calendar\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , assetName ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Recent ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on created time\")"], "method name": "test Store Sort On Created Time"}
{"id": 292, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Google\" ) ) . click ( ) ; assertEquals ( 3 , driver . findElements ( By . cssSelector ( \"div.asset-details\" ) ) . size ( ) , \"Google ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category Google\")"], "method name": "test Category Google"}
{"id": 294, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Templates\" ) ) . click ( ) ; assertEquals ( 6 , driver . findElements ( By . cssSelector ( \"div.span3.asset\" ) ) . size ( ) , \"Templates ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category template\")"], "method name": "test Category Template"}
{"id": 293, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"WSO2\" ) ) . click ( ) ; assertEquals ( 5 , driver . findElements ( By . cssSelector ( \"div.asset-details\" ) ) . size ( ) , \"WSO2 ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category WSO2\")"], "method name": "test Category WSO2"}
{"id": 295, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Templates\" ) ) . click ( ) ; assertEquals ( \"Templates\" , driver . findElement ( By . cssSelector ( \"div.breadcrumb-head\" ) ) . getText ( ) , \"Category ▁ drop ▁ down ▁ not ▁ showing ▁ selected ▁ category ▁ \" ) ; } ", "comments": ["TODO-BUG", "Test(groups = \"wso2.es.store\", description = \"Testing category drop down\", enabled = false)"], "method name": "test Category Menu"}
{"id": 296, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( assetCategory1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetUrl1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription1 ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 298, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/splash\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOverridenGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Overriden Global Page Test Case"}
{"id": 299, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/asts/servicex/details\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOveriddenDetailsPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Existing Page Test Case"}
{"id": 297, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( assetCategory2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetUrl2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( \"Overview\" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ provider\" ) ; assertEquals ( assetName , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ asset ▁ name\" ) ; assertEquals ( assetVersion , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( assetCategory2 , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ Category\" ) ; assertEquals ( assetUrl2 , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( assetDescription2 , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\","], "method name": "test Edit Asset"}
{"id": 300, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( providerName ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( assetCategory1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetUrl1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription1 ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 301, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( assetCategory2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetUrl2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( \"Overview\" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]\" ) ) . getText ( ) , providerName , \"Incorrect ▁ provider\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]\" ) ) . getText ( ) , assetName , \"Incorrect ▁ asset ▁ name\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]\" ) ) . getText ( ) , assetVersion , \"Incorrect ▁ version\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]\" ) ) . getText ( ) , \"WSO2\" , \"Incorrect ▁ Category\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]\" ) ) . getText ( ) , assetUrl2 , \"Incorrect ▁ URL\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]\" ) ) . getText ( ) , assetDescription2 , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\","], "method name": "test Edit Asset"}
{"id": 302, "website": "bigquery", "code": " public void function ( By by , int pollCount ) { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } ", "comments": [" This method will keep refreshing/reloading the current url for a given number of poll-count", " until a given element is available", " @param by        Element that is expected to be present", " @param pollCount Number of time page need to be reloaded into webdriver"], "method name": "find Element Poll"}
{"id": 304, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher New Global Page Test Case"}
{"id": 305, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store\" ) ; driver . findElement ( By . id ( \"btn-register\" ) ) . click ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . sendKeys ( newUserName ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . sendKeys ( newUserPwd ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . sendKeys ( newUserPwd ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"My ▁ Items\" ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; assertTrue ( isElementPresent ( By . linkText ( newUserName ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; driver . get ( baseUrl + \"/publisher\" ) ; assertTrue ( isElementPresent ( By . linkText ( newUserName ) ) , \"Login ▁ failed ▁ for ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing user registration\")"], "method name": "test ES Register User Test Case"}
{"id": 306, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store New Global Page Test Case"}
{"id": 307, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"h4\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"User ▁ Reviews\" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( \"socialIfr\" ) ) ) ; assertEquals ( \"Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review\" , driver . findElement ( By . cssSelector ( \"div.com-guest\" ) ) . getText ( ) ) ; assertEquals ( \"Be ▁ the ▁ first ▁ one ▁ to ▁ review!\" , driver . findElement ( By . cssSelector ( \"p.com-first-review\" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } ", "comments": ["Test(groups = \"wso2.es.store.ratings\", description = \"Test Start Add Rating\")"], "method name": "test Store Before Add Ratings"}
{"id": 308, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , assetType , providerName , assetName , assetVersion , createdTime ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + \"/carbon/\" ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ \" + \"tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Check if subscriptions are created\")"], "method name": "test Subscription Creation"}
{"id": 303, "website": "bigquery", "code": " public void function ( ) throws Exception { ESUtil . login ( driver , baseUrl , \"publisher\" , userInfo . getUserName ( ) , userInfo . getPassword ( ) ) ; driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( assetAuthor ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( assetCategory ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetURL ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { String alert = closeAlertAndGetItsText ( ) ; log . warn ( alert + \": ▁ modal ▁ box ▁ appeared\" ) ; } driver . findElementPoll ( By . linkText ( assetName ) , 10 ) ; driver . findElement ( By . cssSelector ( \"a.btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , assetName ) ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"div.pull-left\" ) , \"Lifecycle ▁ - ▁ \" + assetName ) ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"commentModalLabel\" ) , \"Add ▁ a ▁ comment\" ) ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( \"ok\" ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"state\" ) , \"IN-REVIEW\" ) ) ; assertEquals ( driver . findElement ( By . id ( \"state\" ) ) . getText ( ) , \"IN-REVIEW\" , \"Not ▁ Promoted ▁ to ▁ In-Review\" ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"commentModalLabel\" ) , \"Add ▁ a ▁ comment\" ) ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( \"ok\" ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"state\" ) , \"PUBLISHED\" ) ) ; assertEquals ( driver . findElement ( By . id ( \"state\" ) ) . getText ( ) , \"PUBLISHED\" , \"Not ▁ Promoted ▁ to ▁ Published\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Add asset\")//,", "dependsOnMethods = \"testESStoreSearchAssetsByName\")"], "method name": "test Add Asset"}
{"id": 309, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store\" ) ; try { assertTrue ( isElementPresent ( By . cssSelector ( \"a.brand\" ) ) , \"Home ▁ Page ▁ error: ▁ Logo ▁ missing\" ) ; assertEquals ( \"Sign ▁ in\" , driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Sign ▁ in ▁ button ▁ missing\" ) ; assertTrue ( isElementPresent ( By . id ( \"btn-register\" ) ) , \"Home ▁ Page ▁ error: ▁ Register ▁ button\" + \" ▁ missing\" ) ; assertEquals ( \"Gadget\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[1]/li\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Gadget ▁ menu ▁ missing\" ) ; assertEquals ( \"Site\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[2]/li\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Site ▁ menu ▁ missing\" ) ; assertEquals ( \"Recent ▁ Gadgets\" , driver . findElement ( By . linkText ( \"Recent ▁ Gadgets\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Recent ▁ Gadgets ▁ links ▁ missing\" ) ; assertEquals ( \"Recent ▁ Sites\" , driver . findElement ( By . linkText ( \"Recent ▁ Sites\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Recent ▁ Sites ▁ links ▁ missing\" ) ; assertTrue ( isElementPresent ( By . id ( \"search\" ) ) , \"Home ▁ Page ▁ error: ▁ Search ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"div.span3.store-right ▁ > ▁ div.row ▁ > ▁ div\" + \".span3\" ) ) , \"Home ▁ Page ▁ error: ▁ Recent ▁ Added ▁ side ▁ list ▁ missing\" ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } verificationErrors = failOnError ( verificationErrors ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Anonymous User Home Page\")"], "method name": "test Anon Home Page"}
{"id": 310, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[1]/li\" ) ) . click ( ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( \" // h4[contains(.,\" + \"'\" + LINE_PLUS_BAR_CHART + \"')]\" ) ) . getText ( ) , \"Gadgets ▁ Menu ▁ not ▁ working\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[2]/li\" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( \" // h4[contains(.,\" + \"'\" + AMAZON + \"')]\" ) ) . getText ( ) , \"Sites ▁ Menu ▁ not ▁ working\" ) ; driver . findElement ( By . cssSelector ( \"a.brand\" ) ) . click ( ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Anonymous Navigation from top menu\")"], "method name": "test Anon Navigation Top"}
{"id": 311, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store\" ) ; driver . findElement ( By . cssSelector ( \"a.brand\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Recent ▁ Gadgets\" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . xpath ( \" // h4[contains(.,'\" + LINE_CHART + \"')]\" ) ) . getText ( ) , \"Recent ▁ Gadgets ▁ link ▁ not ▁ working\" ) ; driver . findElement ( By . cssSelector ( \"a.brand\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Recent ▁ Sites\" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( \" // h4[contains(.,'\" + AMAZON + \"')]\" ) ) . getText ( ) , \"Recent ▁ Sites ▁ link ▁ not ▁ working\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Anonymous Navigation page links\")"], "method name": "test Anon Navigation Links"}
{"id": 312, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; try { assertEquals ( \"Gadget\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . getText ( ) , \"Gadget ▁ Menu ▁ missing\" ) ; assertEquals ( \"Line ▁ Plus ▁ Bar ▁ Chart\" , driver . findElement ( By . xpath ( \" // a[contains(text(),'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . getText ( ) , \"Gadgets ▁ missing\" ) ; firstAsset = driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ; assertEquals ( \"Recently ▁ Added\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets']/div/div[2]/div[1]/div/h4\" ) ) . getText ( ) , \"Recently ▁ Added ▁ section ▁ missing\" ) ; assertEquals ( \"Line ▁ Plus ▁ Bar ▁ Chart\" , driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . getText ( ) , \"Recently ▁ added ▁ Gadgets ▁ missing\" ) ; assertEquals ( \"Tags\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets']/div/div[2]/div[2]/div/h4\" ) ) . getText ( ) , \"Tags ▁ section ▁ missing\" ) ; assertTrue ( isElementPresent ( By . linkText ( \"charts\" ) ) , \"Tags ▁ missing ▁ (charts ▁ tag)\" ) ; assertEquals ( \"All ▁ Categories\" , driver . findElement ( By . cssSelector ( \"div.breadcrumb-head\" ) ) . getText ( ) , \"Category ▁ drop ▁ down ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"i.icon-star\" ) ) , \"Popularity ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"i.icon-sort-alphabetical\" ) ) , \"Alphabetical ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"i.icon-calendar\" ) ) , \"Recent ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( By . id ( \"search\" ) ) , \"Search ▁ tray ▁ missing\" ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } verificationErrors = failOnError ( verificationErrors ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page\")"], "method name": "test Gadget Page"}
{"id": 313, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; try { assertEquals ( firstAsset , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Gadget ▁ list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Line ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( \"Line ▁ Chart\" , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) , \"Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Recently ▁ added ▁ list\" ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } verificationErrors = failOnError ( verificationErrors ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page Links\","], "method name": "test Links From Page"}
{"id": 314, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/asts/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset New Page Test Case"}
{"id": 315, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store\" ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"My ▁ Items\" ) ) , \"My ▁ Items ▁ link ▁ missing\" ) ; assertTrue ( isElementPresent ( By . linkText ( currentUserName ) ) , \"Logged ▁ in ▁ user ▁ not ▁ shown\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Store Login\")"], "method name": "test ES Store Login"}
{"id": 317, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/asts/servicex/new_caramel_page\" ) ; assertTrue ( isElementPresent ( By . linkText ( \"Overview\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Edit\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Life ▁ Cycle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Caramel Page Test Case"}
{"id": 316, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store\" ) ; driver . findElement ( By . linkText ( currentUserName ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Sign ▁ out\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"Sign ▁ in\" ) ) , \"Sign ▁ in ▁ link ▁ missing\" ) ; assertEquals ( \"Register\" , driver . findElement ( By . id ( \"btn-register\" ) ) . getText ( ) , \"Register ▁ button ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Store Logout\","], "method name": "test ES Store Logout"}
{"id": 319, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Asset New Page Test Case"}
{"id": 320, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , assetType , currentUserName , assetName , assetVersion , createdTime ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + \"/carbon/\" ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ \" + \"tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"Check if subscriptions are created\", enabled = true)"], "method name": "test Subscription Creation"}
{"id": 321, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; AssetUtil . updateAsset ( driver , baseUrl , assetType , assetName , assetDescription ) ; driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , emailPwd , email , updateNotificationSubject ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update \" +"], "method name": "test Update Notification"}
{"id": 322, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/servicex/list\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Asset Override Existing Page Test Case"}
{"id": 318, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( userInfo . getUserName ( ) ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( assetCreatedTime ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetUrl ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . findElement ( By . cssSelector ( \"a.btn\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . linkText ( \"Publishing ▁ Asset\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( lcComment ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( lcComment ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; driver . get ( baseUrl + \"/store\" ) ; driver . findElementPoll ( By . xpath ( \" // a[contains(.,'\" + assetName + \"')]\" ) , 5 ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"div.asset-author-category ▁ > ▁ ul ▁ > ▁ li\" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( assetDescription , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")"], "method name": "test ES Publish To Store"}
{"id": 323, "website": "bigquery", "code": " public static void function ( ESWebDriver driver , String url ) { driver . get ( url + adminConsoleSuffix ) ; driver . findElement ( By . linkText ( \"Sign-out\" ) ) . click ( ) ; } ", "comments": [], "method name": "logout From Admin Console"}
{"id": 324, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[3]/li\" ) ) . click ( ) ; driver . findElementPoll ( By . id ( \"assetListingPageH1\" ) , 30 ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Added Asset Test Case"}
{"id": 325, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; AssetUtil . updateAsset ( driver , baseUrl , assetType , assetName , assetDescription ) ; driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , emailPwd , email , updateNotificationSubject ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update \" +"], "method name": "test Update Notification"}
{"id": 326, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"span.publisherTitle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Added Asset Test Case"}
{"id": 327, "website": "bigquery", "code": " public void function ( By by , int pollCount ) { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } ", "comments": [" This method will keep refreshing/reloading the current url for a given number of poll-count", " until a given element is available", " @param by        Element that is expected to be present", " @param pollCount Number of time page need to be reloaded into webdriver"], "method name": "find Element Poll"}
{"id": 328, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher\" ) ; driver . findElementPoll ( By . linkText ( assetName ) , 30 ) ; driver . findElement ( By . partialLinkText ( \"NAME\" ) ) . click ( ) ; assertEquals ( nameSortAsset1 , driver . findElement ( By . xpath ( \" // tbody[@id='list-asset-table-body']/tr[1]/td[2]\" ) ) . getText ( ) , \"Sort ▁ on ▁ name ▁ failed\" ) ; assertEquals ( nameSortAsset2 , driver . findElement ( By . xpath ( \" // tbody[@id='list-asset-table-body']/tr[14]/td[2]\" ) ) . getText ( ) , \"Sort ▁ on ▁ name ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Test sort by name\")"], "method name": "test List Page Sort By Name"}
{"id": 329, "website": "bigquery", "code": " public void function ( String url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( \"goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded\" , e ) ; return ; } } ", "comments": [" @param url", "            The URL."], "method name": "go To Url"}
{"id": 330, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ location\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nick\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nick\" ) ) . sendKeys ( \"user\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"pass\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"Huehue\" ) ; driver . findElement ( By . id ( \"city\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"city\" ) ) . sendKeys ( \"Huehueland\" ) ; driver . findElement ( By . id ( \"code\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"code\" ) ) . sendKeys ( \"66-666\" ) ; driver . findElement ( By . id ( \"address\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"address\" ) ) . sendKeys ( \"Huehue ▁ st.\" ) ; driver . findElement ( By . id ( \"public\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertEquals ( \"Name: ▁ Huehue\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; assertEquals ( \"City: ▁ Huehueland\" , driver . findElement ( By . xpath ( \" // p[2]\" ) ) . getText ( ) ) ; assertEquals ( \"Postal: ▁ 66-666\" , driver . findElement ( By . xpath ( \" // p[3]\" ) ) . getText ( ) ) ; assertEquals ( \"Street: ▁ Huehue ▁ st.\" , driver . findElement ( By . xpath ( \" // p[4]\" ) ) . getText ( ) ) ; assertEquals ( \"Public: ▁ true\" , driver . findElement ( By . xpath ( \" // p[5]\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Sele Create Location"}
{"id": 332, "website": "bigquery", "code": " public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } ", "comments": [" Navigates to a new web page in the current browser window. <br />", " ", " Usage for FitNesse: |navigate to Url|http://www.example.org|<br />", " ", " FitNesse usage..: |navigate to Url|arg1| <br />", " FitNesse example: |navigate to Url|http://www.example.org| <br />", " <br />", " ", " @param url", "            URL of page to navigate to", " @return always true to show inside FitNesse a positive result"], "method name": "navigate To Url"}
{"id": 331, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nick\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nick\" ) ) . sendKeys ( \"user\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"pass\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertEquals ( \"user\" , driver . findElement ( By . cssSelector ( \"p.navbar-text.navbar-right ▁ > ▁ span\" ) ) . getText ( ) ) ; driver . findElement ( By . linkText ( \"Logout\" ) ) . click ( ) ; assertEquals ( \"Please ▁ input ▁ your ▁ credentials\" , driver . findElement ( By . xpath ( \" // span\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Sele Login Logout"}
{"id": 333, "website": "bigquery", "code": " public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } ", "comments": [" Navigates to a new web page in the current browser window.", " ", " @param url", "            URL of page to navigate to", " @return always {@code true} to show inside FitNesse a positive result"], "method name": "navigate To Url"}
{"id": 334, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Innovation ▁ Item\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Owner\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Submission ▁ Date\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Theme\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"span.glyphicon.glyphicon-chevron-up\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"span.glyphicon.glyphicon-chevron-down\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='albums']/div[3]/div/div[4]/div/div/div/a/span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"div.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ a\" ) ) . click ( ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . sendKeys ( \"4/30/2015\" ) ; driver . findElement ( By . xpath ( \" // div[3]/button\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Sort Item"}
{"id": 335, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"add ▁ an ▁ idea\" ) ) . click ( ) ; driver . findElement ( By . id ( \"title\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"title\" ) ) . sendKeys ( \"Authorization ▁ as ▁ a ▁ Service\" ) ; driver . findElement ( By . id ( \"artist\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"artist\" ) ) . sendKeys ( \"Patrick ▁ Graziosi\" ) ; driver . findElement ( By . id ( \"description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"description\" ) ) . sendKeys ( \"That ▁ guy ▁ in ▁ the ▁ picture ▁ loved ▁ it!\" ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . sendKeys ( \"4/30/2016\" ) ; driver . findElement ( By . id ( \"genre\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"genre\" ) ) . sendKeys ( \"Right ▁ Speed ▁ IT\" ) ; driver . findElement ( By . xpath ( \" // div[3]/button\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Item"}
{"id": 337, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/soidud\" ) ; driver . findElement ( By . id ( \"est\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"button.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . id ( \"lahtekoht\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"lahtekoht\" ) ) . sendKeys ( \"asd\" ) ; driver . findElement ( By . id ( \"sihtkoht\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"sihtkoht\" ) ) . sendKeys ( \"asd\" ) ; driver . findElement ( By . id ( \"lisainfo\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"lisainfo\" ) ) . sendKeys ( \"asd\" ) ; driver . findElement ( By . id ( \"lisasoitnupp\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Lisamine ▁ oli ▁ edukas\" . equals ( driver . findElement ( By . xpath ( \" // div/div/div/div\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Soidu Loomine"}
{"id": 336, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"add ▁ an ▁ idea\" ) ) . click ( ) ; driver . findElement ( By . id ( \"title\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"title\" ) ) . sendKeys ( \"Test ▁ Idea ▁ 2\" ) ; driver . findElement ( By . id ( \"artist\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"artist\" ) ) . sendKeys ( \"Patrick ▁ Graziosi\" ) ; driver . findElement ( By . id ( \"description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"description\" ) ) . sendKeys ( \"Test ▁ Idea ▁ 2\" ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . sendKeys ( \"4/30/2016\" ) ; driver . findElement ( By . id ( \"genre\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"genre\" ) ) . sendKeys ( \"Cloud ▁ Ready\" ) ; driver . findElement ( By . xpath ( \" // div[3]/button\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"add ▁ an ▁ idea\" ) ) . click ( ) ; driver . findElement ( By . id ( \"title\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"title\" ) ) . sendKeys ( \"Test ▁ Idea ▁ 3\" ) ; driver . findElement ( By . id ( \"artist\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"artist\" ) ) . sendKeys ( \"Patrick ▁ Graziosi\" ) ; driver . findElement ( By . id ( \"description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"description\" ) ) . sendKeys ( \"Test ▁ Idea ▁ 3\" ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"releaseYear\" ) ) . sendKeys ( \"4/30/2016\" ) ; driver . findElement ( By . id ( \"genre\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"genre\" ) ) . sendKeys ( \"Connected ▁ Workforce\" ) ; driver . findElement ( By . xpath ( \" // div[3]/button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='albums']/div[3]/div/div[5]/div/div/div/a/span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'delete')])[5]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='albums']/div[3]/div/div[5]/div/div/div/a/span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'delete')])[5]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add And Delete Item"}
{"id": 338, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/login\" ) ; driver . findElement ( By . id ( \"kasutajanimi\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"kasutajanimi\" ) ) . sendKeys ( \"Testkasutaja\" ) ; driver . findElement ( By . id ( \"eesnimi\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"eesnimi\" ) ) . sendKeys ( \"Test\" ) ; driver . findElement ( By . id ( \"perenimi\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"perenimi\" ) ) . sendKeys ( \"Kasutaja1\" ) ; driver . findElement ( By . id ( \"eesnimi\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"eesnimi\" ) ) . sendKeys ( \"Test1\" ) ; driver . findElement ( By . id ( \"kasutajanimi\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"kasutajanimi\" ) ) . sendKeys ( \"Testkasutaja1\" ) ; driver . findElement ( By . id ( \"parool\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"parool\" ) ) . sendKeys ( \"aaa\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"testkasutaja@hot.ee1\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"testkasutaja@hot.ee\" ) ; driver . findElement ( By . id ( \"telnr\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"telnr\" ) ) . sendKeys ( \"55123123\" ) ; driver . findElement ( By . id ( \"regamisnupp\" ) ) . click ( ) ; try { assertEquals ( \"The ▁ Parool ▁ field ▁ must ▁ be ▁ at ▁ least ▁ 8 ▁ characters ▁ in ▁ length.\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Registreerimine Fail"}
{"id": 339, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/login\" ) ; driver . findElement ( By . id ( \"engout\" ) ) . click ( ) ; try { assertEquals ( \"Pöidlapüüdja ▁ - ▁ Home\" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"loginButton\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"LOG ▁ OUT\" . equals ( driver . findElement ( By . id ( \"logout\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Sisse Logimine F Bga"}
{"id": 341, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/soidud\" ) ; driver . findElement ( By . linkText ( \"SÕIDUD\" ) ) . click ( ) ; driver . findElement ( By . id ( \"est\" ) ) . click ( ) ; try { assertEquals ( \"Pöidlapüüdja ▁ - ▁ Sõidud\" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( \" // tbody[@id='innertable']/tr/td[2]\" ) ) . click ( ) ; try { assertEquals ( \"Oled ▁ juba ▁ selle ▁ sõiduga ▁ liitunud\" , driver . findElement ( By . xpath ( \" // div/div/div/div\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Soiduga Liitumine Juba Liitunud"}
{"id": 342, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/soidud\" ) ; driver . findElement ( By . linkText ( \"SÕIDUD\" ) ) . click ( ) ; driver . findElement ( By . id ( \"est\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // tbody[@id='innertable']/tr/td[2]\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Liitusid ▁ sõiduga\" . equals ( driver . findElement ( By . xpath ( \" // div/div/div/div\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Soiduga Liitumine"}
{"id": 340, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/login\" ) ; driver . findElement ( By . id ( \"estout\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"button.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"Testkasutaja\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"valeparool\" ) ; driver . findElement ( By . id ( \"logimisnupp\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Invalid ▁ username ▁ or ▁ password\" . equals ( driver . findElement ( By . xpath ( \" // div/div/div/div\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Sisselogimine Vale"}
{"id": 343, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/soidud\" ) ; driver . findElement ( By . linkText ( \"LIITUTUD ▁ SÕIDUD\" ) ) . click ( ) ; driver . findElement ( By . id ( \"est\" ) ) . click ( ) ; try { assertEquals ( \"Pöidlapüüdja ▁ - ▁ Liitutud ▁ sõidud\" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( \" // tbody[@id='innertable']/tr/td[2]\" ) ) . click ( ) ; try { assertEquals ( \"Lahkusid ▁ sõidust\" , driver . findElement ( By . xpath ( \" // div/div/div/div\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Soidu Kustutamine Kaasreisjana"}
{"id": 345, "website": "bigquery", "code": " public HelloWorldPage function ( ) { this . webDriver . get ( url ) ; return helloWorldPage ; } ", "comments": [], "method name": "open Hello World Page"}
{"id": 346, "website": "bigquery", "code": " public static void function ( DSWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . cssSelector ( \".right ▁ > ▁ a\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console dashboard server", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 347, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": [], "method name": "open Main Page"}
{"id": 344, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/soidud\" ) ; driver . findElement ( By . linkText ( \"SÕIDUD\" ) ) . click ( ) ; driver . findElement ( By . id ( \"est\" ) ) . click ( ) ; driver . findElement ( By . id ( \"logout\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pöidlapüüdja ▁ - ▁ Pealeht\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Logi ▁ sisse\" . equals ( driver . findElement ( By . cssSelector ( \"button.btn.btn-default\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Valja Logimine"}
{"id": 348, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": [], "method name": "open Relative Url"}
{"id": 350, "website": "bigquery", "code": " public void function ( ) { d . get ( serverUrl ) ; } ", "comments": [], "method name": "go To Server Root"}
{"id": 349, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 351, "website": "bigquery", "code": " public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select schoolSelect = new Select ( driver . findElement ( By . id ( \"schoolSelect\" ) ) ) ; schoolSelect . selectByVisibleText ( \"Illinois ▁ PS145\" ) ; Select courseSelect = new Select ( driver . findElement ( By . id ( \"courseSelect\" ) ) ) ; courseSelect . selectByVisibleText ( \"Algebra\" ) ; Select sectionSelect = new Select ( driver . findElement ( By . id ( \"sectionSelect\" ) ) ) ; sectionSelect . selectByVisibleText ( \"Section1\" ) ; WebElement textDiv = driver . findElement ( By . id ( \"studentDiv\" ) ) ; String studentText = textDiv . getText ( ) ; assertTrue ( studentText . contains ( \"Dawson ▁ Deborah\" ) ) ; assertFalse ( studentText . contains ( \"Random ▁ name\" ) ) ; sectionSelect = new Select ( driver . findElement ( By . id ( \"sectionSelect\" ) ) ) ; sectionSelect . selectByVisibleText ( \"Section2\" ) ; WebElement temp = driver . findElement ( By . id ( \"studentDiv\" ) ) ; studentText = temp . getText ( ) ; assertTrue ( studentText . contains ( \"Marks ▁ Hector\" ) ) ; assertFalse ( studentText . contains ( \"Dawson ▁ Deborah\" ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } ", "comments": ["Test"], "method name": "test Student List Page"}
{"id": 353, "website": "bigquery", "code": " public void function ( ) { driver . get ( loginUrl ) ; WebElement username = driver . findElement ( By . name ( \"username\" ) ) ; username . sendKeys ( testBadUser ) ; WebElement errorMessage = driver . findElement ( By . name ( \"errorMessage\" ) ) ; assertTrue ( errorMessage . getCssValue ( \"display\" ) . equalsIgnoreCase ( \"none\" ) ) ; WebElement loginForm = driver . findElement ( By . name ( \"loginForm\" ) ) ; loginForm . submit ( ) ; errorMessage = driver . findElement ( By . name ( \"errorMessage\" ) ) ; assertTrue ( errorMessage . getCssValue ( \"display\" ) . equalsIgnoreCase ( \"block\" ) ) ; username = driver . findElement ( By . name ( \"username\" ) ) ; username . sendKeys ( testUser ) ; loginForm = driver . findElement ( By . name ( \"loginForm\" ) ) ; loginForm . submit ( ) ; WebElement body = driver . findElement ( By . tagName ( \"body\" ) ) ; String bodyText = body . getText ( ) ; assertTrue ( bodyText . contains ( \"Select ▁ an ▁ application\" ) ) ; driver . close ( ) ; } ", "comments": ["Test"], "method name": "test Login Page"}
{"id": 352, "website": "bigquery", "code": " public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select userASchoolSelect = new Select ( driver . findElement ( By . id ( \"schoolSelect\" ) ) ) ; String userASchoolItem = userASchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; driver . get ( studentListUrl + usernameParamPrefix + userB ) ; Select userBSchoolSelect = new Select ( driver . findElement ( By . id ( \"schoolSelect\" ) ) ) ; String userBSchoolItem = userBSchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; assertFalse ( userBSchoolItem . equals ( userASchoolItem ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } ", "comments": ["Test"], "method name": "test Users Have Diff Lists"}
{"id": 355, "website": "bigquery", "code": " private static void function ( String graphUrl ) { WebDriver driver = new FirefoxDriver ( ) ; driver . get ( graphUrl ) ; driver . findElement ( By . id ( \"continue\" ) ) . click ( ) ; } ", "comments": [" Starts the collection process of the newly added GraphHostApp in a new window."], "method name": "start Graph Host App In New Winndow"}
{"id": 354, "website": "bigquery", "code": " public void function ( ) { if ( StrUtils . isEmpty ( httpUrl ) ) { UIUtils . log ( \"无效的HTTP, ▁ 终止操作.\" ) ; return ; } isStop = false ; UIUtils . log ( \"正在开启浏览器捕获数据...\" ) ; WebDriver driver = null ; try { driver = browserDriver . getWebDriver ( ) ; UIUtils . log ( \"正在打开网页 ▁ [\" + httpUrl + \"] ▁ ...\" ) ; driver . get ( httpUrl ) ; UIUtils . openHomePage ( ) ; UIUtils . log ( \"统计在线用户数据开始...\" ) ; int lastSize = 0 ; while ( isStop ( ) == false ) { WebElement chatMsgList = driver . findElement ( By . id ( CHAT_MSG_LIST_NAME ) ) ; String data = chatMsgList . getText ( ) ; int curSize = data . length ( ) ; if ( lastSize != curSize ) { lastSize = curSize ; analyzer . statistics ( data ) ; log . info ( \"已刷新在线用户数据.\" ) ; } else { log . info ( \"在线用户数据无变化.\" ) ; } browserDriver . refresh ( driver ) ; } UIUtils . log ( \"统计在线用户数据结束.\" ) ; } catch ( NoSuchElementException e ) { log . error ( \"加载网页元素失败: ▁ [{}].\" , httpUrl , e ) ; } catch ( Throwable e ) { log . error ( \"统计在线用户数据异常: ▁ [{}].\" , httpUrl , e ) ; } finally { UIUtils . log ( \"浏览器已关闭.\" ) ; isStop = true ; browserDriver . close ( driver ) ; System . exit ( 0 ) ; } } ", "comments": [], "method name": "collect Online Data"}
{"id": 356, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Page Title Present Pos"}
{"id": 357, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilElementIsVisible ( locator ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Visible Pos"}
{"id": 358, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilTextPresent ( text ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Text Present Pos"}
{"id": 359, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( pageTitle ) ; Button btn = new Button ( disappearElement ) ; btn . click ( ) ; try { WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Disapear Pos"}
{"id": 361, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilPageTitleContains ( badLocator ) ; fail ( \"Wait ▁ Timeout ▁ Exception ▁ was ▁ not ▁ thrown.\" ) ; } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { WaitTimedOutException.class })", "WebTest"], "method name": "test Wait Until Page Title Present Neg"}
{"id": 362, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsVisible ( badLocator ) ; fail ( \"Wait ▁ Timeout ▁ Exception ▁ was ▁ not ▁ thrown.\" ) ; } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { WaitTimedOutException.class })", "WebTest"], "method name": "test Wait Until Element Visible Neg"}
{"id": 363, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; WebDriverWaitUtils . waitUntilTextPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } fail ( \"Timeout ▁ Exception ▁ was ▁ not ▁ thrown.\" ) ; } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Text Present Neg"}
{"id": 364, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; WebDriverWaitUtils . waitUntilElementIsInvisible ( disappearElement ) ; fail ( \"Runtime ▁ Exception ▁ was ▁ not ▁ thrown.\" ) ; } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { RuntimeException.class })", "WebTest"], "method name": "test Wait Until Element Disapear Neg"}
{"id": 365, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; String origTimeout = Config . getConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT ) ; try { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , \"20000\" ) ; WebDriverWaitUtils . waitUntilElementIsPresent ( badLocator ) ; } finally { Config . setConfigProperty ( Config . ConfigProperty . EXECUTION_TIMEOUT , origTimeout ) ; } fail ( \"Timeout ▁ Exception ▁ was ▁ not ▁ thrown.\" ) ; } ", "comments": ["Test(groups = { \"browser-tests\" }, expectedExceptions = { TimeoutException.class })", "WebTest"], "method name": "test Wait Until Element Present Neg"}
{"id": 360, "website": "bigquery", "code": " public void function ( ) { Grid . driver ( ) . get ( url ) ; try { WebDriverWaitUtils . waitUntilElementIsPresent ( locator ) ; assertTrue ( true ) ; } catch ( WaitTimedOutException e ) { fail ( e . getMessage ( ) ) ; } } ", "comments": ["Test(groups = { \"browser-tests\" })", "WebTest"], "method name": "test Wait Until Element Present Pos"}
{"id": 366, "website": "bigquery", "code": " public void function ( ) throws Exception { String testName = \"testExampleCategorical2\" ; List < String > errorList = new ArrayList ( ) ; List < String > successList = new ArrayList ( ) ; List < String > exceptionList = new ArrayList ( ) ; Date start = new Date ( ) ; int targetCount = 1 ; String mgiGeneAcc = \"MGI:98373\" ; String impressParameter = \"M-G-P_014_001_001\" ; String zygosity = \"homozygote\" ; String geneSymbol = \"Sparc\" ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 3 , TimeUnit . SECONDS ) ; String tempUrl = baseUrl + \"/charts?accession=\" + mgiGeneAcc + \"&parameter_stable_id=\" + impressParameter + \"&zygosity=\" + zygosity ; driver . get ( tempUrl ) ; String title = driver . findElement ( By . className ( \"title\" ) ) . getText ( ) ; if ( ! title . contains ( geneSymbol ) ) { errorList . add ( \"ERROR: ▁ Expected ▁ title ▁ to ▁ contain ▁ '\" + geneSymbol + \"' ▁ but ▁ was ▁ '\" + title + \"'. ▁ ▁ URL: ▁ \" + tempUrl + \"'\" ) ; } else { successList . add ( \"OK\" ) ; } TestUtils . printEpilogue ( testName , start , errorList , exceptionList , successList , targetCount , 1 ) ; System . out . println ( ) ; } ", "comments": ["Test"], "method name": "test Example Categorical2"}
{"id": 367, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/\" ) ; } ", "comments": [], "method name": "open Main Page"}
{"id": 368, "website": "bigquery", "code": " public void function ( ) { } ", "comments": [" @Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI,", " OPERA_MOBILE}, reason = \"Safari: does not support insecure SSL\")", "Test(enabled = false)"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 369, "website": "bigquery", "code": " public void function ( ) { } ", "comments": [" @Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE,", " SAFARI, SELENESE})", "Test(enabled = false)"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 371, "website": "bigquery", "code": " private void function ( String url ) { getSession ( ) . getRemoteWebDriver ( ) . get ( url ) ; } ", "comments": [], "method name": "fake Type URL"}
{"id": 370, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test(enabled = false)", " @Ignore(value = { ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI,", " SELENESE, OPERA_MOBILE }, reason =", " \"Untested on all other browsers, fails on chrome, fails on IE.\", issues = {", " 3508 })"], "method name": "handle Form With Javascript Action"}
{"id": 373, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 372, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . sendKeys ( \"selenium ▁ hq\" ) ; } ", "comments": ["Test"], "method name": "test Google Selenium Webdriver Test Case"}
{"id": 375, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 376, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 374, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 377, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( \"input#username\" ) ) ; WebElement password = driver . findElement ( By . name ( \"password\" ) ) ; WebElement login = driver . findElement ( By . name ( \"submit\" ) ) ; userName . sendKeys ( \"admin\" ) ; password . sendKeys ( \"admin\" ) ; login . click ( ) ; String movieTitle = \"Óíåñ¸ííûå ▁ âåòðîì\" ; WebElement addMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"a[href='./?go=add']\" ) ) ) ; addMovie . click ( ) ; WebElement imdbsearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( \"imdbsearch\" ) ) ) ; imdbsearchField . sendKeys ( movieTitle ) ; driver . findElement ( By . cssSelector ( \"input[value='Search']\" ) ) . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"table.imdbmovies ▁ tr:nth-child(1)\" ) ) ) ; String year = driver . findElement ( By . cssSelector ( \"table.imdbmovies ▁ tr:nth-child(1) ▁ td.year\" ) ) . getText ( ) ; movie . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"form#updateform\" ) ) ) ; WebElement save = driver . findElement ( By . id ( \"submit\" ) ) ; save . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \".maininfo_full ▁ h2\" ) ) ) ; System . out . println ( movieTitle + \" ▁ (\" + year + \")\" ) ; assertEquals ( h2Title . getText ( ) , movieTitle + \" ▁ (\" + year + \")\" ) ; } ", "comments": ["Test"], "method name": "check Add Film From Catalog"}
{"id": 378, "website": "bigquery", "code": " public void function ( ) throws Exception { String movieTitle = \"Äåâ÷àòà\" ; String imdbNumber = \"0134614\" ; String alsoKnowAs = \"Devchata\" ; String duration = \"92\" ; String rating = \"8.362\" ; String pathToImage = \"C:/Users/Evgenia/Pictures/devchata.jpg\" ; String linkTrailer = \"https: // www.youtube.com/watch?v=LaCUkjlQuVw\" ; String year = \"1961\" ; driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( \"input#username\" ) ) ; WebElement password = driver . findElement ( By . name ( \"password\" ) ) ; WebElement login = driver . findElement ( By . name ( \"submit\" ) ) ; userName . sendKeys ( \"admin\" ) ; password . sendKeys ( \"admin\" ) ; login . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#results ▁ div[title='\" + movieTitle + \"']\" ) ) ) ; movie . click ( ) ; WebElement edit = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#content ▁ nav ▁ ul ▁ li:nth-child(3) ▁ a\" ) ) ) ; edit . click ( ) ; WebElement imdbidField = driver . findElement ( By . name ( \"imdbid\" ) ) ; imdbidField . sendKeys ( imdbNumber ) ; WebElement akaField = driver . findElement ( By . name ( \"aka\" ) ) ; akaField . sendKeys ( alsoKnowAs ) ; WebElement durationField = driver . findElement ( By . name ( \"duration\" ) ) ; durationField . sendKeys ( duration ) ; WebElement ratingField = driver . findElement ( By . name ( \"rating\" ) ) ; ratingField . sendKeys ( rating ) ; WebElement fileInput = driver . findElement ( By . id ( \"cover\" ) ) ; fileInput . sendKeys ( pathToImage ) ; WebElement trailerField = driver . findElement ( By . name ( \"trailer\" ) ) ; trailerField . sendKeys ( linkTrailer ) ; WebElement save = driver . findElement ( By . id ( \"submit\" ) ) ; save . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \".maininfo ▁ h2\" ) ) ) ; assertEquals ( h2Title . getText ( ) , movieTitle + \" ▁ (\" + year + \")\" ) ; driver . findElement ( By . cssSelector ( \"#content ▁ nav ▁ ul ▁ li:nth-child(6) ▁ a\" ) ) . click ( ) ; WebElement imdbidField2 = driver . findElement ( By . name ( \"imdbid\" ) ) ; WebElement akaField2 = driver . findElement ( By . name ( \"aka\" ) ) ; WebElement durationField2 = driver . findElement ( By . name ( \"duration\" ) ) ; WebElement ratingField2 = driver . findElement ( By . name ( \"rating\" ) ) ; WebElement trailerField2 = driver . findElement ( By . name ( \"trailer\" ) ) ; assertEquals ( imdbidField2 . getAttribute ( \"value\" ) , imdbNumber ) ; assertEquals ( akaField2 . getText ( ) , alsoKnowAs ) ; assertEquals ( durationField2 . getAttribute ( \"value\" ) , duration ) ; assertEquals ( ratingField2 . getAttribute ( \"value\" ) , rating ) ; assertEquals ( trailerField2 . getAttribute ( \"value\" ) , linkTrailer ) ; } ", "comments": ["Test"], "method name": "check Edit Film"}
{"id": 379, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( \"input#username\" ) ) ; WebElement password = driver . findElement ( By . name ( \"password\" ) ) ; WebElement login = driver . findElement ( By . name ( \"submit\" ) ) ; userName . sendKeys ( \"admin\" ) ; password . sendKeys ( \"admin\" ) ; login . click ( ) ; String movieTitle = \"Ïî ▁ ýòîìó ▁ çàïðîñó ▁ ÿ ▁ íè÷åãî ▁ íå ▁ íàéäó\" ; WebElement addMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"a[href='./?go=add']\" ) ) ) ; addMovie . click ( ) ; WebElement imdbsearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( \"imdbsearch\" ) ) ) ; imdbsearchField . sendKeys ( movieTitle ) ; driver . findElement ( By . cssSelector ( \"input[value='Search']\" ) ) . click ( ) ; WebElement resultNotFound = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#content ▁ .content ▁ div\" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElement ( resultNotFound , \"No ▁ movies ▁ where ▁ found.\" ) ) ; assertEquals ( resultNotFound . getText ( ) , \"No ▁ movies ▁ where ▁ found.\" ) ; } ", "comments": ["SuppressWarnings(\"deprecation\")", "Test"], "method name": "test Search Film Without Result"}
{"id": 381, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"conts/web/view/tutorial/interacting-with-controllers\" ; driver . get ( url ) ; ScreenshotArgument arg = ScreenshotArgument . builder ( \"tutorial13\" ) . addNewTarget ( ) . addHiddenElementSelectors ( GOTOTOP_DOM_ELEMENT ) . build ( ) ; assertionView . assertView ( arg ) ; } ", "comments": ["Test"], "method name": "test Capture Tutorial13"}
{"id": 382, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"conts/web/view/tutorial/menu\" ; driver . get ( url ) ; PtlWebElement e = ( PtlWebElement ) driver . findElement ( By . cssSelector ( \".wikimodel-freestanding\" ) ) ; DoubleValueRect rect = e . getDoubleValueRect ( ) ; driver . executeScript ( \"arguments[0].width=arguments[1]\" , e , rect . getWidth ( ) ) ; driver . executeScript ( \"arguments[0].height=arguments[1]\" , e , rect . getHeight ( ) ) ; driver . executeScript ( \"arguments[0].src=''\" , e ) ; ScreenshotArgument arg = ScreenshotArgument . builder ( \"tutorialTop\" ) . addNewTarget ( ) . addHiddenElementSelectors ( GOTOTOP_DOM_ELEMENT ) . build ( ) ; assertionView . assertView ( arg ) ; } ", "comments": ["Test"], "method name": "test Capture Tutorial Top"}
{"id": 380, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; WebElement userName = driver . findElement ( By . cssSelector ( \"input#username\" ) ) ; WebElement password = driver . findElement ( By . name ( \"password\" ) ) ; WebElement login = driver . findElement ( By . name ( \"submit\" ) ) ; userName . sendKeys ( \"admin\" ) ; password . sendKeys ( \"admin\" ) ; login . click ( ) ; String movieTitle = \"Äåâ÷àòà\" ; String year = \"1961\" ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#results ▁ img[title='\" + movieTitle + \"']\" ) ) ) ; movie . click ( ) ; WebElement h2Title = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \".maininfo ▁ h2\" ) ) ) ; AssertJUnit . assertEquals ( h2Title . getText ( ) , movieTitle + \" ▁ (\" + year + \")\" ) ; driver . findElement ( By . cssSelector ( \"#content ▁ nav ▁ ul ▁ li:nth-child(7) ▁ a\" ) ) . click ( ) ; Alert alert = wait . until ( ExpectedConditions . alertIsPresent ( ) ) ; alert . accept ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#results\" ) ) ) ; assertEquals ( 0 , driver . findElements ( By . cssSelector ( \"#results ▁ img[title='\" + movieTitle + \"']\" ) ) . size ( ) ) ; } ", "comments": ["Test"], "method name": "check Remove Film"}
{"id": 383, "website": "bigquery", "code": " public function ( ) { String baseUrl = WebDriverFactory . INSTANCE . getHostUrl ( ) ; hostUrl = appendTrailingSlash ( baseUrl ) ; driver = WebDriverFactory . INSTANCE . getDriver ( ) ; driver . get ( hostUrl ) ; } ", "comments": [], "method name": "Abstract Web Work Flow"}
{"id": 385, "website": "bigquery", "code": " public DashboardBasePage function ( ) { driver . get ( hostUrl + \"dashboard\" ) ; return new DashboardBasePage ( driver ) ; } ", "comments": [], "method name": "go To Dashboard"}
{"id": 384, "website": "bigquery", "code": " public HomePage function ( ) { new BasePage ( driver ) . waitForAMoment ( ) . until ( new Predicate < WebDriver > ( ) { @ Override public boolean apply ( WebDriver input ) { driver . get ( hostUrl ) ; return new HomePage ( driver ) . isPageValid ( ) ; } } ) ; return new HomePage ( driver ) ; } ", "comments": [], "method name": "go To Home"}
{"id": 386, "website": "bigquery", "code": " public void function ( String url ) throws InterruptedException { Thread . sleep ( 2000 ) ; driver . get ( url ) ; Thread . sleep ( 2000 ) ; } ", "comments": [], "method name": "delay Get And Delay"}
{"id": 387, "website": "bigquery", "code": " public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( \"Sign-out\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 389, "website": "bigquery", "code": " public MainPage function ( int session ) throws InterruptedException { String mainUrl = driver . getCurrentUrl ( ) ; driver . get ( \"http: // virtonomica.ru/vera/main/globalreport/marketing/by_trade_at_cities\" ) ; String productName = \"\" ; Select s1 = new Select ( driver . findElement ( By . id ( \"__product_category_list\" ) ) ) ; for ( int i = 0 ; i < s1 . getOptions ( ) . size ( ) ; i ++ ) { s1 . selectByIndex ( i ) ; for ( int j = 0 ; j < driver . findElements ( By . xpath ( \" // *[@id='__products_list']/span\" ) ) . size ( ) ; j ++ ) { waitForElement ( \" // *[@id='__products_list']/span[\" + ( j + 1 ) + \"] // img\" ) ; driver . findElement ( By . xpath ( \" // *[@id='__products_list']/span[\" + ( j + 1 ) + \"] // img\" ) ) . click ( ) ; productName = driver . findElement ( By . xpath ( \" // *[@id='__products_list']/span[\" + ( j + 1 ) + \"] // img\" ) ) . getAttribute ( \"title\" ) ; getMarketAvgData ( session , productName ) ; } s1 = new Select ( driver . findElement ( By . id ( \"__product_category_list\" ) ) ) ; } driver . get ( mainUrl ) ; logMe ( \"Wait ▁ 11 ▁ minutes...\" ) ; return new MainPage ( driver ) ; } ", "comments": ["Сначала ставим товар потом перебираем по городам."], "method name": "get Analyze Market Avg"}
{"id": 388, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-register\" ) ) . click ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . name ( \"reg-email\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-email\" ) ) . sendKeys ( NEW_USER_EMAIL ) ; driver . findElement ( By . name ( \"reg-first-name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-first-name\" ) ) . sendKeys ( NEW_USER_FNAME ) ; driver . findElement ( By . name ( \"reg-last-name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-last-name\" ) ) . sendKeys ( NEW_USER_LNAME ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . id ( \"regFormSuc\" ) ) , \"User ▁ creation ▁ failed.\" ) ; driver . findElement ( By . id ( \"signInLink\" ) ) . click ( ) ; driver . findElementPoll ( By . id ( \"username\" ) , MAX_POLL_COUNT ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"#logedInUser\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"My ▁ Items\" ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( NEW_USER_NAME ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing user registration\")"], "method name": "test ES Register User Test Case"}
{"id": 390, "website": "bigquery", "code": " public MainPage function ( String productName , String typeProduct , int session ) throws InterruptedException { logMe ( \"-----------------------------------------------\" ) ; logMe ( productName ) ; logMe ( \"-----------------------------------------------\" ) ; String [ ] countries = { \"Болгария\" , \"Венесуэла\" , \"Германия\" , \"Греция\" , \"Казахстан\" , \"Канада\" , \"Куба\" , \"Латвия\" , \"Литва\" , \"Нидерланды\" , \"Норвегия\" , \"Россия\" , \"Украина\" , \"Финляндия\" , \"Франция\" , \"Эстония\" } ; String mainUrl = driver . getCurrentUrl ( ) ; driver . get ( \"http: // virtonomica.ru/vera/main/globalreport/marketing/by_trade_at_cities\" ) ; Select s1 = new Select ( driver . findElement ( By . id ( \"__product_category_list\" ) ) ) ; s1 . selectByVisibleText ( typeProduct ) ; waitForElement ( \" // img[@alt='\" + productName + \"']\" ) ; waitForElementVisible ( \" // img[@alt='\" + productName + \"']\" ) ; driver . findElement ( By . xpath ( \" // img[@alt='\" + productName + \"']\" ) ) . click ( ) ; int counter = 0 ; Select c1 = new Select ( driver . findElements ( By . xpath ( \" // *[@id='mainContent']/fieldset/table[2] // select\" ) ) . get ( 0 ) ) ; for ( int i = 0 ; i < countries . length ; i ++ ) { c1 . selectByVisibleText ( countries [ i ] ) ; Select c2 = new Select ( driver . findElements ( By . xpath ( \" // *[@id='mainContent']/fieldset/table[2] // select\" ) ) . get ( 1 ) ) ; for ( int j = 1 ; j < c2 . getOptions ( ) . size ( ) ; j ++ ) { c2 . selectByIndex ( j ) ; Select c3 = new Select ( driver . findElements ( By . xpath ( \" // *[@id='mainContent']/fieldset/table[2] // select\" ) ) . get ( 2 ) ) ; for ( int k = 1 ; k < c3 . getOptions ( ) . size ( ) ; k ++ ) { c3 . selectByIndex ( k ) ; getMarketData ( session , productName ) ; logMe ( \"Completed: ▁ \" + counter ) ; counter ++ ; c3 = new Select ( driver . findElements ( By . xpath ( \" // *[@id='mainContent']/fieldset/table[2] // select\" ) ) . get ( 2 ) ) ; } c2 = new Select ( driver . findElements ( By . xpath ( \" // *[@id='mainContent']/fieldset/table[2] // select\" ) ) . get ( 1 ) ) ; } c1 = new Select ( driver . findElements ( By . xpath ( \" // *[@id='mainContent']/fieldset/table[2] // select\" ) ) . get ( 0 ) ) ; } driver . get ( mainUrl ) ; logMe ( \"Wait ▁ 11 ▁ minutes...\" ) ; Thread . sleep ( 5 * 60 * 1000 ) ; return new MainPage ( driver ) ; } ", "comments": ["Сначала ставим товар потом перебираем по городам."], "method name": "get Analyze Market"}
{"id": 392, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( \"number1\" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( \"number2\" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( \"function\" ) ) ; functionList . findElement ( By . cssSelector ( \"option[value='\" + this . function + \"']\" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( \"calculate\" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"answer\" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } ", "comments": ["Test"], "method name": "test calculate two values"}
{"id": 393, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( \"number1\" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( \"number2\" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( \"function\" ) ) ; functionList . findElement ( By . cssSelector ( \"option[value='\" + this . function + \"']\" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( \"calculate\" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"answer\" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } ", "comments": ["Test"], "method name": "test calculate two values"}
{"id": 394, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = getBaseUrl ( ) ; logger . info ( \"making ▁ request ▁ to ▁ '{}'\" , url ) ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( \"Bootstrap ▁ 101 ▁ Template\" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( \"return ▁ logged.length;\" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } ", "comments": ["Test"], "method name": "test Log Output In Html Response"}
{"id": 395, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = getBaseUrl ( ) + \"/testservlet\" ; logger . info ( \"making ▁ request ▁ to ▁ '{}'\" , url ) ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( \"TestServlet\" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( \"return ▁ logged.length;\" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } ", "comments": ["Test"], "method name": "test Log Output In Servlet Response"}
{"id": 396, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = getBaseUrl ( ) + \"/forwardservlet\" ; webDriver . get ( url ) ; String title = webDriver . getTitle ( ) ; assertThat ( title , is ( \"WEB-INF/jsp/forward.jsp\" ) ) ; String source = webDriver . getPageSource ( ) ; assertThat ( source , is ( notNullValue ( ) ) ) ; System . out . println ( source ) ; JavascriptExecutor executor = ( JavascriptExecutor ) webDriver ; Double length = ( Double ) executor . executeScript ( \"return ▁ logged.length;\" ) ; assertThat ( length . intValue ( ) , is ( greaterThan ( 0 ) ) ) ; } ", "comments": ["Test"], "method name": "test Log Output In Forwarded Request"}
{"id": 397, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement search_field = driver . findElement ( By . xpath ( \" // div[@id='content']/section/nav/div[@id='search'] // input[@id='q']\" ) ) ; search_field . click ( ) ; search_field . clear ( ) ; search_field . sendKeys ( \"Hobbit\" ) ; search_field . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . xpath ( \" // div[@id='results']/div[contains(text(), ▁ \\\"No ▁ movies ▁ where ▁ found.\\\")]\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Search Film Negative"}
{"id": 398, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; int film_count = driver . findElements ( By . xpath ( \" // div[@id='results'] // div[@class='movie_box']\" ) ) . size ( ) ; int film_countAfter ; WebElement search_field = driver . findElement ( By . xpath ( \" // div[@id='content']/section/nav/div[@id='search'] // input[@id='q']\" ) ) ; search_field . click ( ) ; search_field . clear ( ) ; search_field . sendKeys ( \"Interstellar\" ) ; search_field . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . xpath ( \" // div[@id='results']/a // div[@class='title']/self::div[contains(text(),\\\"Interstellar\\\")]\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } Thread . sleep ( 3000 ) ; film_countAfter = driver . findElements ( By . xpath ( \" // div[@id='results'] // div[@class='movie_box']\" ) ) . size ( ) ; try { assertNotEquals ( film_count , film_countAfter ) ; } catch ( Exception e ) { verificationErrors . append ( e . toString ( ) ) ; } List < WebElement > fMovies = driver . findElements ( By . xpath ( \" // div[@id='results'] // div[@class='movie_box'] // div[@class='title']\" ) ) ; String title ; for ( WebElement movieBox : fMovies ) { try { assertTrue ( movieBox . getText ( ) . contains ( \"Interstellar\" ) ) ; } catch ( Exception e ) { verificationErrors . append ( e . toString ( ) ) ; } } } ", "comments": ["Test"], "method name": "test Search Film Positive"}
{"id": 399, "website": "bigquery", "code": " public void function ( ) { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement component = this . findWebElementByClassName ( OUTER_COMPONENT ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"div\" , component . getTagName ( ) ) ; this . findWebElementByClassName ( OPTION_RENDERED ) ; } ", "comments": ["Test", "InSequence(1)"], "method name": "test Elements Exists"}
{"id": 400, "website": "bigquery", "code": " public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseRenderedOption = this . findWebElementByClassName ( OPTION_RENDERED ) ; String [ ] content = browser . getPageSource ( ) . split ( \"arquillian_activateLibraries_selector\" ) ; Assert . assertTrue ( content [ 1 ] . startsWith ( \"\\\"><!--ButterFaces ▁ information\" ) ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; content = browser . getPageSource ( ) . split ( \"arquillian_activateLibraries_selector\" ) ; Assert . assertFalse ( content [ 1 ] . startsWith ( \"\\\"><!--ButterFaces ▁ information\" ) ) ; } </DOCUMENT>\n", "comments": ["Test", "InSequence(2)"], "method name": "test Rendered Option"}
{"id": 401, "website": "bigquery", "code": " public void function ( ) { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"a\" , component . getTagName ( ) ) ; this . findWebElementByClassName ( OPTION_RENDERED ) ; this . findWebElementByClassName ( OPTION_VALUE ) ; this . findWebElementByClassName ( OPTION_GLYPHICON ) ; this . findWebElementByClassName ( CLICKS_SPAN ) ; } ", "comments": ["Test", "InSequence(1)"], "method name": "test Elements Exists"}
{"id": 402, "website": "bigquery", "code": " public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseRenderedOption = this . findWebElementByClassName ( OPTION_RENDERED ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNull ( \"Element ▁ should ▁ not ▁ be ▁ rendered ▁ but ▁ was.\" , findNullableWebElementByClassName ( BUTTER_COMPONENT ) ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNotNull ( \"Element ▁ should ▁ be ▁ rendered ▁ but ▁ was ▁ not.\" , findNullableWebElementByClassName ( BUTTER_COMPONENT ) ) ; } ", "comments": ["Test", "InSequence(2)"], "method name": "test Rendered Option"}
{"id": 403, "website": "bigquery", "code": " public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseValueOption = this . findWebElementByClassName ( OPTION_VALUE ) ; showcaseValueOption . clear ( ) ; guardHttp ( showcaseValueOption ) . submit ( ) ; WebElement component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertTrue ( component . getText ( ) . isEmpty ( ) ) ; guardAjax ( showcaseValueOption ) . sendKeys ( \"hello\" ) ; component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertEquals ( \"hello\" , component . getText ( ) ) ; guardAjax ( showcaseValueOption ) . sendKeys ( \" ▁ world!\" ) ; component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; Assert . assertEquals ( \"hello ▁ world!\" , component . getText ( ) ) ; } ", "comments": ["Test", "Ignore(\"Test failes on maven build\")", "InSequence(3)"], "method name": "test Value Option"}
{"id": 404, "website": "bigquery", "code": " public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final Select glyphicon = new Select ( this . findWebElementByClassName ( OPTION_GLYPHICON ) ) ; guardAjax ( glyphicon ) . selectByIndex ( 0 ) ; WebElement component = this . findWebElementByClassName ( BUTTER_COMPONENT ) ; List < WebElement > spans = component . findElements ( By . cssSelector ( \"span.butter-component-glyphicon\" ) ) ; Assert . assertEquals ( \"Find ▁ span ▁ but ▁ span ▁ should ▁ not ▁ been ▁ rendered.\" , 0 , spans . size ( ) ) ; guardAjax ( glyphicon ) . selectByIndex ( 1 ) ; spans = component . findElements ( By . cssSelector ( \"span.butter-component-glyphicon\" ) ) ; Assert . assertEquals ( \"Could ▁ not ▁ find ▁ span ▁ tag ▁ in ▁ showcase ▁ component.\" , 1 , spans . size ( ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"glyphicon\" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"glyphicon-thumbs-up\" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"glyphicon-lg\" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"butter-component-glyphicon\" ) ) ; guardAjax ( glyphicon ) . selectByIndex ( 2 ) ; spans = component . findElements ( By . cssSelector ( \"span.butter-component-glyphicon\" ) ) ; Assert . assertEquals ( \"Could ▁ not ▁ find ▁ span ▁ tag ▁ in ▁ showcase ▁ component.\" , 1 , spans . size ( ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"fa\" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"fa-language\" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"fa-lg\" ) ) ; Assert . assertTrue ( spans . get ( 0 ) . getAttribute ( \"class\" ) . contains ( \"butter-component-glyphicon\" ) ) ; } ", "comments": ["Test", "InSequence(4)"], "method name": "test Glyphicon Option"}
{"id": 405, "website": "bigquery", "code": " public void function ( ) { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement outerComponent = this . findWebElementByClassName ( ARQUILLIAN_CONTAINER ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"div\" , outerComponent . getTagName ( ) ) ; final WebElement component = outerComponent . findElement ( By . className ( \"butter-component\" ) ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"div\" , component . getTagName ( ) ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"button\" , component . findElement ( By . className ( \"bootstrap-touchspin-up\" ) ) . getTagName ( ) ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"button\" , component . findElement ( By . className ( \"bootstrap-touchspin-down\" ) ) . getTagName ( ) ) ; Assert . assertEquals ( \"Wrong ▁ tag ▁ name\" , \"input\" , this . findButterInputComponent ( ) . getTagName ( ) ) ; this . findWebElementByClassName ( OPTION_RENDERED ) ; this . findWebElementByClassName ( OPTION_AJAX ) ; this . findWebElementByClassName ( OUTPUT_VALUE ) ; } ", "comments": ["Test", "InSequence(1)"], "method name": "test Elements Exists"}
{"id": 406, "website": "bigquery", "code": " public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final WebElement showcaseRenderedOption = this . findWebElementByClassName ( OPTION_RENDERED ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNull ( \"Element ▁ should ▁ not ▁ be ▁ rendered ▁ but ▁ was.\" , findNullableButterComponent ( ) ) ; guardAjax ( showcaseRenderedOption ) . click ( ) ; Assert . assertNotNull ( \"Element ▁ should ▁ be ▁ rendered ▁ but ▁ was ▁ not.\" , findNullableButterComponent ( ) ) ; } ", "comments": ["Test", "InSequence(2)"], "method name": "test Rendered Option"}
{"id": 407, "website": "bigquery", "code": " public void function ( ) throws Exception { browser . get ( deploymentUrl + COMPONENT_PAGE ) ; final Select showcaseAjaxOption = new Select ( this . findWebElementByClassName ( OPTION_AJAX ) ) ; WebElement number = this . findButterInputComponent ( ) ; number . sendKeys ( \"23\" ) ; number . submit ( ) ; Assert . assertEquals ( \"23\" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; guardAjax ( showcaseAjaxOption ) . selectByIndex ( 1 ) ; guardAjax ( this . findButtonUp ( ) ) . click ( ) ; Assert . assertEquals ( \"24\" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; guardAjax ( this . findButtonUp ( ) ) . click ( ) ; Assert . assertEquals ( \"25\" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; guardAjax ( this . findButtonDown ( ) ) . click ( ) ; Assert . assertEquals ( \"24\" , this . findWebElementByClassName ( OUTPUT_VALUE ) . getText ( ) ) ; } ", "comments": ["Test", "InSequence(2)"], "method name": "test Ajax Option"}
{"id": 408, "website": "bigquery", "code": " private void function ( File indexHtml , boolean chrome ) { WebDriver driver ; if ( chrome ) { boolean onTravisCI = StringUtils . equals ( System . getenv ( \"CI\" ) , \"true\" ) && StringUtils . equals ( System . getenv ( \"TRAVIS\" ) , \"true\" ) ; boolean onCircleCI = StringUtils . equals ( System . getenv ( \"CI\" ) , \"true\" ) && StringUtils . equals ( System . getenv ( \"CIRCLECI\" ) , \"true\" ) ; Assume . assumeTrue ( ! onTravisCI ) ; if ( ! onCircleCI ) { System . setProperty ( \"webdriver.chrome.driver\" , chromeDriverPath ( ) ) ; } driver = new ChromeDriver ( ) ; } else { driver = new FirefoxDriver ( ) ; } try { driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; String indexHtmlUrl = \"file: // /\" + indexHtml . getAbsolutePath ( ) ; driver . get ( indexHtmlUrl ) ; driver . findElement ( By . linkText ( \"sample.SampleTest.shouldSucceed\" ) ) . click ( ) ; driver . navigate ( ) . back ( ) ; driver . findElement ( By . linkText ( \"sample.SampleTest.shouldFail\" ) ) . click ( ) ; } finally { quietQuit ( driver ) ; } } ", "comments": [], "method name": "selenium Test Run"}
{"id": 409, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/ss/\" ) ; driver . findElement ( By . cssSelector ( \"em ▁ > ▁ a\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"网友速递\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'网友速递')])[2]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"新足迹\\\"]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"论坛信息\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test IDE Test1"}
{"id": 410, "website": "bigquery", "code": " public void function ( ) { final WebDriver driver = new FirefoxDriver ( ) ; final String zenossUrl = System . getProperty ( \"zenossUrl\" ) ; final String zenossUsername = System . getProperty ( \"zenossUsername\" ) ; final String zenossPassword = System . getProperty ( \"zenossPassword\" ) ; if ( zenossUrl == null || zenossUsername == null || zenossPassword == null ) { System . out . println ( \"Skipping ▁ test ▁ because ▁ of ▁ missing ▁ system ▁ properties!\" ) ; } driver . get ( zenossUrl ) ; final WebElement username = driver . findElement ( By . name ( \"__ac_name\" ) ) ; username . sendKeys ( zenossUsername ) ; final WebElement password = driver . findElement ( By . name ( \"__ac_password\" ) ) ; password . sendKeys ( zenossPassword ) ; password . submit ( ) ; System . out . println ( \"Page ▁ title ▁ is: ▁ \" + driver . getTitle ( ) ) ; new WebDriverWait ( driver , 10 ) . until ( ( WebDriver d ) -> { return d . getTitle ( ) . toLowerCase ( ) . contains ( \"dashboard\" ) ; } ) ; final WebElement searchBox = driver . findElement ( By . id ( \"searchbox-query\" ) ) ; searchBox . sendKeys ( \"localhost\" ) ; new WebDriverWait ( driver , 5 ) . until ( ( WebDriver d ) -> { final WebElement excerpt = d . findElement ( By . className ( \"excerpt\" ) ) ; return null != excerpt && excerpt . getText ( ) . contains ( \"etiscan-1\" ) ; } ) ; final WebElement excerpt = driver . findElement ( By . className ( \"excerpt\" ) ) ; excerpt . click ( ) ; new WebDriverWait ( driver , 5 ) . until ( ( WebDriver d ) -> { return d . getTitle ( ) . toLowerCase ( ) . endsWith ( \"etiscan-1\" ) ; } ) ; final WebElement uptime = driver . findElement ( By . name ( \"uptime\" ) ) ; System . out . println ( \"Uptime: ▁ \" + uptime . getText ( ) ) ; } ", "comments": ["Test"], "method name": "get Uptime Test"}
{"id": 411, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 412, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 413, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 414, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 415, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE, HTMLUNIT},"], "method name": "handle Form With Javascript Action"}
{"id": 416, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 417, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) ; addMovieButton . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 50 ) ; WebElement imdbidField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( \"imdbid\" ) ) ) ; imdbidField . clear ( ) ; imdbidField . sendKeys ( \"1111\" ) ; String filmTitle = \"My ▁ Test ▁ Film\" ; WebElement filmTitleField = driver . findElement ( By . name ( \"name\" ) ) ; filmTitleField . clear ( ) ; filmTitleField . sendKeys ( filmTitle ) ; WebElement akaField = driver . findElement ( By . name ( \"aka\" ) ) ; akaField . clear ( ) ; akaField . sendKeys ( \"Selenium ▁ First ▁ Test\" ) ; int year = 1989 ; String yearToStr = new Integer ( year ) . toString ( ) ; WebElement yearField = driver . findElement ( By . name ( \"year\" ) ) ; yearField . clear ( ) ; yearField . sendKeys ( yearToStr ) ; WebElement durationField = driver . findElement ( By . name ( \"duration\" ) ) ; durationField . clear ( ) ; durationField . sendKeys ( \"120\" ) ; WebElement ratingField = driver . findElement ( By . name ( \"rating\" ) ) ; ratingField . clear ( ) ; ratingField . sendKeys ( \"5\" ) ; WebElement formatField = driver . findElement ( By . id ( \"formats\" ) ) ; formatField . clear ( ) ; formatField . sendKeys ( \"DVD\" ) ; WebElement ownRadioButtonNo = driver . findElement ( By . id ( \"own_no\" ) ) ; ownRadioButtonNo . click ( ) ; WebElement seenRadioButtonNo = driver . findElement ( By . id ( \"seen_no\" ) ) ; seenRadioButtonNo . click ( ) ; WebElement loanedRadioButtonYes = driver . findElement ( By . id ( \"loaned_yes\" ) ) ; loanedRadioButtonYes . click ( ) ; WebElement loanNameField = driver . findElement ( By . name ( \"loanname\" ) ) ; loanNameField . clear ( ) ; loanNameField . sendKeys ( \"John ▁ Doe\" ) ; WebElement loanDateField = driver . findElement ( By . name ( \"loandate\" ) ) ; loanDateField . clear ( ) ; loanDateField . sendKeys ( \"2015-04-24\" ) ; driver . findElement ( By . id ( \"cover\" ) ) . sendKeys ( ( new File ( \"cover.jpg\" ) . getAbsolutePath ( ) ) ) ; WebElement trailerUrlField = driver . findElement ( By . name ( \"trailer\" ) ) ; trailerUrlField . clear ( ) ; trailerUrlField . sendKeys ( \"http: // youtube.com\" ) ; WebElement notesField = driver . findElement ( By . name ( \"notes\" ) ) ; notesField . clear ( ) ; notesField . sendKeys ( \"notes\" ) ; WebElement taglinesField = driver . findElement ( By . name ( \"taglines\" ) ) ; taglinesField . clear ( ) ; taglinesField . sendKeys ( \"tag\" ) ; WebElement plotOutLinesField = driver . findElement ( By . name ( \"plotoutline\" ) ) ; plotOutLinesField . clear ( ) ; plotOutLinesField . sendKeys ( \"plot_outline\" ) ; WebElement plotsField = driver . findElement ( By . name ( \"plots\" ) ) ; plotsField . clear ( ) ; plotsField . sendKeys ( \"plots\" ) ; WebElement languagesField = driver . findElement ( By . id ( \"text_languages_0\" ) ) ; languagesField . clear ( ) ; languagesField . sendKeys ( \"langs\" ) ; WebElement subtitlesField = driver . findElement ( By . name ( \"subtitles\" ) ) ; subtitlesField . clear ( ) ; subtitlesField . sendKeys ( \"subtitles\" ) ; WebElement audioField = driver . findElement ( By . name ( \"audio\" ) ) ; audioField . clear ( ) ; audioField . sendKeys ( \"audio\" ) ; WebElement videoField = driver . findElement ( By . name ( \"video\" ) ) ; videoField . clear ( ) ; videoField . sendKeys ( \"video\" ) ; WebElement countryField = driver . findElement ( By . name ( \"country\" ) ) ; countryField . clear ( ) ; countryField . sendKeys ( \"country\" ) ; WebElement genresField = driver . findElement ( By . name ( \"genres\" ) ) ; genresField . clear ( ) ; genresField . sendKeys ( \"genres\" ) ; WebElement directorField = driver . findElement ( By . name ( \"director\" ) ) ; directorField . clear ( ) ; directorField . sendKeys ( \"director\" ) ; WebElement writerField = driver . findElement ( By . name ( \"writer\" ) ) ; writerField . clear ( ) ; writerField . sendKeys ( \"writer\" ) ; WebElement producerField = driver . findElement ( By . name ( \"producer\" ) ) ; producerField . clear ( ) ; producerField . sendKeys ( \"producer\" ) ; WebElement musicField = driver . findElement ( By . name ( \"music\" ) ) ; musicField . clear ( ) ; musicField . sendKeys ( \"music\" ) ; WebElement castField = driver . findElement ( By . name ( \"cast\" ) ) ; castField . clear ( ) ; castField . sendKeys ( \"cast\" ) ; WebElement saveFilmButton = driver . findElement ( By . id ( \"submit\" ) ) ; saveFilmButton . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"movie\" ) ) ) ; WebElement titleAndYear = movie . findElement ( By . tagName ( \"h2\" ) ) ; assertTrue ( titleAndYear . getText ( ) . equals ( filmTitle + \" ▁ (\" + yearToStr + \")\" ) ) ; WebElement goHomeButton = driver . findElement ( By . linkText ( \"Home\" ) ) ; goHomeButton . click ( ) ; WebElement movies = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"results\" ) ) ) ; assertTrue ( isElementPresent ( movies , ( By . cssSelector ( \"img[alt=\\\"\" + filmTitle + \"\\\"]\" ) ) ) ) ; } ", "comments": ["Test"], "method name": "test Add Film Positive"}
{"id": 418, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) ; addMovieButton . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; WebElement imdbSearchField = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"imdbsearch\" ) ) ) ; imdbSearchField . clear ( ) ; imdbSearchField . sendKeys ( \"123456\" ) ; WebElement imdbSearchButton = driver . findElement ( By . xpath ( \"/html/body/div/div/div/section/div/form/table/tbody/tr[2]/td/input\" ) ) ; imdbSearchButton . click ( ) ; WebElement searchedMovie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . linkText ( \"Home ▁ and ▁ Away\" ) ) ) ; searchedMovie . click ( ) ; WebElement saveFilmButton = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"submit\" ) ) ) ; saveFilmButton . click ( ) ; WebElement movie = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"movie\" ) ) ) ; WebElement titleAndYear = movie . findElement ( By . tagName ( \"h2\" ) ) ; assertTrue ( titleAndYear . getText ( ) . equals ( \"Home ▁ and ▁ Away ▁ (1988)\" ) ) ; WebElement goHomeButton = driver . findElement ( By . linkText ( \"Home\" ) ) ; goHomeButton . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Film From Imdb"}
{"id": 419, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement addMovieButton = driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) ; addMovieButton . click ( ) ; WebElement filmTitleField = driver . findElement ( By . name ( \"name\" ) ) ; filmTitleField . clear ( ) ; filmTitleField . sendKeys ( \"My ▁ Test ▁ Film\" ) ; WebElement saveFilmButton = driver . findElement ( By . id ( \"submit\" ) ) ; saveFilmButton . click ( ) ; WebElement errorLabel = driver . findElement ( By . xpath ( \"/html/body/div/div/div/section/div/div/form/table/tbody/tr[4]/td[2]/label\" ) ) ; assertTrue ( errorLabel . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "test Add Film No Year"}
{"id": 420, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String siteUsername = PropertyLoader . loadProperty ( \"site.username\" ) ; String sitePassword = PropertyLoader . loadProperty ( \"site.password\" ) ; WebElement usernameField = driver . findElement ( By . id ( \"username\" ) ) ; usernameField . clear ( ) ; usernameField . sendKeys ( siteUsername ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( sitePassword ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; Thread . sleep ( 200 ) ; WebElement logoutButton = driver . findElement ( By . xpath ( \"/html/body/div[1]/div/header/div/nav/ul/li[4]\" ) ) ; assertTrue ( logoutButton . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "test Login To Application"}
{"id": 421, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; List < WebElement > films = driver . findElements ( By . className ( \"movie_box\" ) ) ; WebElement searchField = driver . findElement ( By . id ( \"q\" ) ) ; searchField . clear ( ) ; searchField . sendKeys ( \"rainbow\" + Keys . RETURN ) ; Thread . sleep ( 500 ) ; List < WebElement > newFilms = driver . findElements ( By . className ( \"movie_box\" ) ) ; assertTrue ( newFilms . isEmpty ( ) ) ; } ", "comments": ["Test"], "method name": "test Search Negative"}
{"id": 422, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; List < WebElement > films = driver . findElements ( By . className ( \"movie_box\" ) ) ; String filmId = films . get ( 0 ) . getAttribute ( \"id\" ) ; films . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 50 ) ; WebElement deleteButton = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) ) ; deleteButton . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; Thread . sleep ( 100 ) ; List < WebElement > newFilms = driver . findElements ( By . className ( \"movie_box\" ) ) ; for ( WebElement element : newFilms ) { assertNotEquals ( element . getAttribute ( \"id\" ) , filmId ) ; } } ", "comments": ["Test"], "method name": "test Delete Film Positive"}
{"id": 423, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"gillian\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Logout_0\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Manager Login"}
{"id": 391, "website": "bigquery", "code": " public StorePage function ( String department ) throws InterruptedException { int maxDepSize = getStoreDepMaxSize ( ) ; ArrayList < String > companyDepSellProducts = getMyProductsDepToSell ( ) ; driver . findElement ( By . xpath ( \" // a[text()='Торговый ▁ зал']\" ) ) . click ( ) ; ArrayList < String > currentTypesDep = getCurrentTypesDepFromSalesRoom ( ) ; ArrayList < String > companyProductsToSell = getMyProductsToSell ( ) ; int depCount = Integer . valueOf ( currentTypesDep . size ( ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Снабжение']\" ) ) . click ( ) ; String productInfo = new String ( ) ; org . openqa . selenium . support . ui . Select s = null ; for ( String companyProduct : companyDepSellProducts ) { if ( department . equals ( companyProduct . split ( \";\" ) [ 0 ] ) ) { logMe ( \"покупаем ▁ продукцию: ▁ \" + companyProduct . split ( \";\" ) [ 0 ] ) ; for ( int i = 1 ; i < companyProduct . split ( \";\" ) . length ; i ++ ) { productInfo = getProductDataFromCompanyConfig ( companyProduct . split ( \";\" ) [ i ] , companyProductsToSell ) ; if ( isThisProductSellOnSellPage ( productInfo . split ( \";\" ) [ 0 ] ) ) continue ; logMe ( productInfo ) ; s = new org . openqa . selenium . support . ui . Select ( driver . findElement ( By . name ( \"productCategory\" ) ) ) ; s . selectByVisibleText ( companyProduct . split ( \";\" ) [ 0 ] ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( \" // span[label/img[@alt='\" + productInfo . split ( \";\" ) [ 0 ] + \"']]/input\" ) ) . click ( ) ; String handle1 = driver . getWindowHandle ( ) ; driver . findElement ( By . xpath ( \" // input[@value='Добавить ▁ поставщика']\" ) ) . click ( ) ; Set < String > handles = driver . getWindowHandles ( ) ; Iterator < String > it = handles . iterator ( ) ; while ( it . hasNext ( ) ) { String popupHandle = it . next ( ) . toString ( ) ; if ( ! popupHandle . contains ( handle1 ) ) { driver . switchTo ( ) . window ( popupHandle ) ; } } Double price = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[1]\" ) ) . getText ( ) . split ( \":\" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double qa = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[2]\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double brand = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[3]\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double confPrice = Double . valueOf ( productInfo . split ( \";\" ) [ 5 ] ) ; Double confQa = Double . valueOf ( productInfo . split ( \";\" ) [ 3 ] ) ; Double confBrand = Double . valueOf ( productInfo . split ( \";\" ) [ 4 ] ) ; String valueToSet = productInfo . split ( \";\" ) [ 6 ] ; logMe ( \"\" + price + \">=\" + confPrice ) ; logMe ( \"\" + qa + \"<\" + confQa ) ; logMe ( \"\" + brand + \"<\" + confBrand ) ; logMe ( valueToSet ) ; if ( price >= confPrice && confBrand > brand && confQa > qa ) { logMe ( \"Ура, ▁ продукт ▁ подошел!\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Свои']\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . size ( ) != 0 ) if ( driver . findElement ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . isDisplayed ( ) ) driver . findElement ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // tr[td[text()='Cвободно']]/td[2]/a[2]/img\" ) ) . size ( ) != 0 ) { Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( \" // tr[td[text()='Cвободно']]/td[2]/a[2]/img\" ) ) . click ( ) ; String goodId = driver . findElement ( By . xpath ( \" // table // tr[@class='friendlyHighLight']/td[@class='choose']/span\" ) ) . getAttribute ( \"id\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"document.getElementById(\" + goodId + \").click();\" ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . sendKeys ( valueToSet ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"document.getElementById('submitLink').click();\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; logMe ( \"Закупились ▁ \" + productInfo . split ( \";\" ) [ 0 ] ) ; } else { logMe ( \"Продукта ▁ нет!\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } else { logMe ( \"Продукт ▁ не ▁ подошел!\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } } } boolean action = false ; Thread . sleep ( 3000 ) ; waitForElementVisible ( \" // a[text()='Торговый ▁ зал']\" ) ; waitForElement ( \" // a[text()='Торговый ▁ зал']\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Торговый ▁ зал']\" ) ) . click ( ) ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . size ( ) ; i ++ ) { String salePrice = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . getAttribute ( \"value\" ) ; if ( salePrice . equals ( \"0.00\" ) ) { Double setupvalue = Double . valueOf ( driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[12]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; setupvalue = setupvalue * 1.3 ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( String . valueOf ( setupvalue ) ) ; action = true ; } } if ( action ) { driver . findElement ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . sendKeys ( Keys . RETURN ) ; } driver . findElement ( By . xpath ( \" // a[text()='Магазин']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage autoBuyProducts ( ) throws InterruptedException { int maxDepSize = Integer . valueOf ( getParameter ( \"StoreSize\" + driver . findElement ( By . xpath ( \" // tr[td[text()='Торговая ▁ площадь']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . split ( \"м\" ) [ 0 ] ) ) ; ArrayList < String > companyDepSellProducts = getMyProductsDepToSell ( ) ; driver . findElement ( By . xpath ( \" // a[text()='Торговый ▁ зал']\" ) ) . click ( ) ; ArrayList < String > currentTypesDep = getCurrentTypesDepFromSalesRoom ( ) ; ArrayList < String > companyProductsToSell = getMyProductsToSell ( ) ; int depCount = Integer . valueOf ( currentTypesDep . size ( ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Снабжение']\" ) ) . click ( ) ; String productInfo = new String ( ) ; org . openqa . selenium . support . ui . Select s = null ; for ( String companyProduct : companyDepSellProducts ) { if ( isDepToSell ( companyProduct . split ( \";\" ) [ 0 ] , currentTypesDep ) ) { logMe ( \"покупаем ▁ продукцию: ▁ \" + companyProduct . split ( \";\" ) [ 0 ] ) ; for ( int i = 1 ; i < companyProduct . split ( \";\" ) . length ; i ++ ) { productInfo = getProductDataFromCompanyConfig ( companyProduct . split ( \";\" ) [ i ] , companyProductsToSell ) ; if ( isThisProductSellOnSellPage ( productInfo . split ( \";\" ) [ 0 ] ) ) continue ; logMe ( productInfo ) ; s = new org . openqa . selenium . support . ui . Select ( driver . findElement ( By . name ( \"productCategory\" ) ) ) ; s . selectByVisibleText ( companyProduct . split ( \";\" ) [ 0 ] ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( \" // span[label/img[@alt='\" + productInfo . split ( \";\" ) [ 0 ] + \"']]/input\" ) ) . click ( ) ; String handle1 = driver . getWindowHandle ( ) ; driver . findElement ( By . xpath ( \" // input[@value='Добавить ▁ поставщика']\" ) ) . click ( ) ; Set < String > handles = driver . getWindowHandles ( ) ; Iterator < String > it = handles . iterator ( ) ; while ( it . hasNext ( ) ) { String popupHandle = it . next ( ) . toString ( ) ; if ( ! popupHandle . contains ( handle1 ) ) { driver . switchTo ( ) . window ( popupHandle ) ; } } Double price = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[1]\" ) ) . getText ( ) . split ( \":\" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double qa = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[2]\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double brand = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[3]\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double confPrice = Double . valueOf ( productInfo . split ( \";\" ) [ 5 ] ) ; Double confQa = Double . valueOf ( productInfo . split ( \";\" ) [ 3 ] ) ; Double confBrand = Double . valueOf ( productInfo . split ( \";\" ) [ 4 ] ) ; String valueToSet = productInfo . split ( \";\" ) [ 6 ] ; logMe ( \"\" + price + \">=\" + confPrice ) ; logMe ( \"\" + qa + \"<\" + confQa ) ; logMe ( \"\" + brand + \"<\" + confBrand ) ; logMe ( valueToSet ) ; if ( price >= confPrice && confBrand > brand && confQa > qa ) { logMe ( \"Ура, ▁ продукт ▁ подошел!\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Свои']\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . size ( ) != 0 ) if ( driver . findElement ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . isDisplayed ( ) ) driver . findElement ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // tr[td[text()='Cвободно']]/td[2]/a[2]/img\" ) ) . size ( ) != 0 ) { Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( \" // tr[td[text()='Cвободно']]/td[2]/a[2]/img\" ) ) . click ( ) ; String goodId = driver . findElement ( By . xpath ( \" // table // tr[@class='friendlyHighLight']/td[@class='choose']/span\" ) ) . getAttribute ( \"id\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"document.getElementById(\" + goodId + \").click();\" ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . sendKeys ( valueToSet ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"document.getElementById('submitLink').click();\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; logMe ( \"Закупились ▁ \" + productInfo . split ( \";\" ) [ 0 ] ) ; } else { logMe ( \"Продукта ▁ нет!\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } else { logMe ( \"Продукт ▁ не ▁ подошел!\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } } } for ( String companyProduct : companyDepSellProducts ) { if ( depCount >= maxDepSize ) break ; if ( ! isDepToSell ( companyProduct . split ( \";\" ) [ 0 ] , currentTypesDep ) ) { logMe ( \"Докупаем ▁ продукцию: ▁ \" + companyProduct . split ( \";\" ) [ 0 ] ) ; for ( int i = 1 ; i < companyProduct . split ( \";\" ) . length ; i ++ ) { productInfo = getProductDataFromCompanyConfig ( companyProduct . split ( \";\" ) [ i ] , companyProductsToSell ) ; if ( isThisProductSellOnSellPage ( productInfo . split ( \";\" ) [ 0 ] ) ) continue ; logMe ( productInfo ) ; s = new org . openqa . selenium . support . ui . Select ( driver . findElement ( By . name ( \"productCategory\" ) ) ) ; s . selectByVisibleText ( companyProduct . split ( \";\" ) [ 0 ] ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( \" // span[label/img[@alt='\" + productInfo . split ( \";\" ) [ 0 ] + \"']]/input\" ) ) . click ( ) ; String handle1 = driver . getWindowHandle ( ) ; driver . findElement ( By . xpath ( \" // input[@value='Добавить ▁ поставщика']\" ) ) . click ( ) ; Set < String > handles = driver . getWindowHandles ( ) ; Iterator < String > it = handles . iterator ( ) ; while ( it . hasNext ( ) ) { String popupHandle = it . next ( ) . toString ( ) ; if ( ! popupHandle . contains ( handle1 ) ) { driver . switchTo ( ) . window ( popupHandle ) ; } } Double price = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[1]\" ) ) . getText ( ) . split ( \":\" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double qa = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[2]\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double brand = Double . valueOf ( driver . findElement ( By . xpath ( \" // table[@class='right_corner'] // tr[2]/td[3]\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; Double confPrice = Double . valueOf ( productInfo . split ( \";\" ) [ 5 ] ) ; Double confQa = Double . valueOf ( productInfo . split ( \";\" ) [ 3 ] ) ; Double confBrand = Double . valueOf ( productInfo . split ( \";\" ) [ 4 ] ) ; String valueToSet = productInfo . split ( \";\" ) [ 6 ] ; logMe ( \"\" + price + \">=\" + confPrice ) ; logMe ( \"\" + qa + \"<\" + confQa ) ; logMe ( \"\" + brand + \"<\" + confBrand ) ; logMe ( valueToSet ) ; if ( price >= confPrice && confBrand > brand && confQa > qa ) { logMe ( \"Ура, ▁ продукт ▁ подошел!\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Свои']\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . size ( ) != 0 ) if ( driver . findElement ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . isDisplayed ( ) ) driver . findElement ( By . xpath ( \" // a[contains(text(),'Отменить ▁ фильтр')]\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // tr[td[text()='Cвободно']]/td[2]/a[2]/img\" ) ) . size ( ) != 0 ) { Thread . sleep ( 500 ) ; driver . findElement ( By . xpath ( \" // tr[td[text()='Cвободно']]/td[2]/a[2]/img\" ) ) . click ( ) ; String goodId = driver . findElement ( By . xpath ( \" // table // tr[@class='friendlyHighLight']/td[@class='choose']/span\" ) ) . getAttribute ( \"id\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"document.getElementById(\" + goodId + \").click();\" ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"amountInput\" ) ) . sendKeys ( valueToSet ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"document.getElementById('submitLink').click();\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; logMe ( \"Закупились ▁ \" + productInfo . split ( \";\" ) [ 0 ] ) ; } else { logMe ( \"Продукта ▁ не ▁ нашли!!\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } else { logMe ( \"Продукт ▁ не ▁ подошел!\" ) ; driver . findElement ( By . xpath ( \" // span[text()='Закрыть ▁ окно']\" ) ) . click ( ) ; driver . switchTo ( ) . window ( handle1 ) ; } } depCount ++ ; } } boolean action = false ; Thread . sleep ( 3000 ) ; waitForElementVisible ( \" // a[text()='Торговый ▁ зал']\" ) ; waitForElement ( \" // a[text()='Торговый ▁ зал']\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Торговый ▁ зал']\" ) ) . click ( ) ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . size ( ) ; i ++ ) { String salePrice = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . getAttribute ( \"value\" ) ; if ( salePrice . equals ( \"0.00\" ) ) { Double setupvalue = Double . valueOf ( driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[12]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) ; setupvalue = setupvalue * 1.3 ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( String . valueOf ( setupvalue ) ) ; action = true ; } } if ( action ) { driver . findElement ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . sendKeys ( Keys . RETURN ) ; } driver . findElement ( By . xpath ( \" // a[text()='Магазин']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage goToTradingRoom ( ) throws InterruptedException { waitForElementVisible ( \" // a[text()='Торговый ▁ зал']\" ) ; waitForElement ( \" // a[text()='Торговый ▁ зал']\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Торговый ▁ зал']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage goToMainStorePage ( ) throws InterruptedException { waitForElementVisible ( \" // a[text()='Магазин']\" ) ; waitForElement ( \" // a[text()='Магазин']\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Магазин']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage educate ( ) { if ( isStuding ( ) && isNeedtoEducate ( ) ) { logMe ( \"Обучаю ▁ персонал\" ) ; String currentUrl = driver . getCurrentUrl ( ) ; String UnitId = getUnitIdByUrl ( currentUrl ) ; driver . get ( \"http: // virtonomica.ru/vera/window/unit/employees/education/\" + UnitId ) ; driver . findElement ( By . xpath ( \" // input[@value='Обучить']\" ) ) . click ( ) ; driver . get ( currentUrl ) ; } return new StorePage ( driver ) ; } public StorePage statusStore ( ) { String status = driver . findElement ( By . xpath ( \" // div[@class='productivity_hint'] // div\" ) ) . getText ( ) ; if ( ! status . contains ( \"Элитный\" ) ) { logMe ( \"Магазин ▁ не ▁ Элитный!!!\" ) ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , \"Магазин. ▁ Статус ▁ магазина: ▁ \" + status ) ; } return new StorePage ( driver ) ; } public StorePage getStoreInfo ( ) throws InterruptedException { String depId = getUnitIdByUrl ( driver . getCurrentUrl ( ) ) ; String currentUrl = driver . getCurrentUrl ( ) ; String status = driver . findElement ( By . xpath ( \" // div[@class='productivity_hint'] // div\" ) ) . getText ( ) ; String famous = driver . findElement ( By . xpath ( \" // tr[td[text()='Известность']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; String depCount = String . valueOf ( getStoreDepSize ( ) ) ; String storeSize = driver . findElement ( By . xpath ( \" // tr[td[text()='Торговая ▁ площадь']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . split ( \"м\" ) [ 0 ] ; String employee = driver . findElement ( By . xpath ( \" // tr[td[text()='Количество ▁ сотрудников']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . split ( \"\\\\(\" ) [ 0 ] ; String visitors = driver . findElement ( By . xpath ( \" // tr[td[text()='Количество ▁ посетителей']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\D+\" , \"\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Маркетинг ▁ и ▁ Реклама']\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String population = driver . findElement ( By . xpath ( \" // tr[td[text()='Население ▁ города']]/td[2]/input\" ) ) . getAttribute ( \"value\" ) ; logMe ( depId + \"\\t\\t\\t\\t\" + employee + \"\\t\\t\\t\\t\" + storeSize + \"\\t\\t\\t\\t\" + depCount + \"\\t\\t\\t\\t\" + visitors + \"\\t\\t\\t\\t\" + famous + \"\\t\\t\\t\\t\" + population + \"\\t\\t\\t\\t\" + status ) ; driver . get ( currentUrl ) ; return new StorePage ( driver ) ; } public StorePage finans ( ) { driver . findElement ( By . xpath ( \" // a[text()='Финансовый ▁ отчёт']\" ) ) . click ( ) ; String profit = \"\" ; if ( driver . findElements ( By . xpath ( \"/tr[td[text()='Прибыль']]/td[2]/span\" ) ) . size ( ) > 0 ) profit = driver . findElement ( By . xpath ( \" // tr[td[text()='Прибыль']]/td[2]/span\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ; else profit = driver . findElement ( By . xpath ( \" // tr[td[text()='Прибыль']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ; String result = \"\" ; if ( Double . valueOf ( profit ) > 0 ) result = \"GOOD\" ; else { result = \"BAD\" ; if ( Double . valueOf ( driver . findElement ( By . xpath ( \" // tr[td[text()='Прибыль']]/td[3]/span\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) < 0 && Double . valueOf ( driver . findElement ( By . xpath ( \" // tr[td[text()='Прибыль']]/td[4]/span\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) < 0 && Double . valueOf ( driver . findElement ( By . xpath ( \" // tr[td[text()='Прибыль']]/td[5]/span\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ) < 0 ) result = \"VERY ▁ BAD\" ; } logMe ( result + \" ▁ profit: ▁ \" + profit ) ; driver . findElement ( By . xpath ( \" // a[text()='Магазин']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } public StorePage advertising ( Double fame , Double spentMoney ) { driver . findElement ( By . xpath ( \" // a[text()='Маркетинг ▁ и ▁ Реклама']\" ) ) . click ( ) ; String localFame = driver . findElement ( By . xpath ( \" // tr[td[text()='Известность']]/td[2]\" ) ) . getText ( ) ; driver . findElement ( By . xpath ( \" // a[text()='Магазин']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } private void deselectAllAdvetising ( ) { driver . findElement ( By . xpath ( \" // tr[td/label[text()='Интернет']]/td/input\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // tr[td/label[text()='Печатные ▁ издания']]/td/input\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // tr[td/label[text()='Наружная ▁ реклама']]/td/input\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // tr[td/label[text()='Радио']]/td/input\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // tr[td/label[text()='Телевидение']]/td/input\" ) ) . click ( ) ; } public StorePage trading ( ) throws InterruptedException { driver . findElement ( By . xpath ( \" // a[text()='Торговый ▁ зал']\" ) ) . click ( ) ; String store = new String ( ) ; String price = new String ( ) ; String saled = new String ( ) ; String basicCost = new String ( ) ; String market = new String ( ) ; String offer = new String ( ) ; String avgPrice = new String ( ) ; String retailerStore = new String ( ) ; String result = new String ( ) ; String productName = new String ( ) ; boolean action = false ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']\" ) ) . size ( ) ; i ++ ) { store = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[6]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; if ( Double . valueOf ( store ) == 0 ) { driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[2]/input\" ) ) . get ( i ) . click ( ) ; action = true ; } } if ( action ) { if ( driver . findElements ( By . xpath ( \" // input[@value='Ликвидировать ▁ остатки ▁ товара']\" ) ) . size ( ) > 0 ) driver . findElement ( By . xpath ( \" // input[@value='Ликвидировать ▁ остатки ▁ товара']\" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } action = false ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']\" ) ) . size ( ) ; i ++ ) { Thread . sleep ( 1000 ) ; store = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[6]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; if ( Double . valueOf ( store ) == 0 ) { driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[2]/input\" ) ) . get ( i ) . click ( ) ; action = true ; } } if ( action ) { if ( driver . findElements ( By . xpath ( \" // input[@value='Ликвидировать ▁ остатки ▁ товара']\" ) ) . size ( ) > 0 ) driver . findElement ( By . xpath ( \" // input[@value='Ликвидировать ▁ остатки ▁ товара']\" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']\" ) ) . size ( ) ; i ++ ) { result = \"\" ; store = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[6]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; saled = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[4]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; basicCost = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[9]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ; avgPrice = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[12]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ; price = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . getAttribute ( \"value\" ) ; market = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[11]\" ) ) . get ( i ) . getText ( ) . split ( \" ▁ \" ) [ 0 ] ; productName = driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[3]\" ) ) . get ( i ) . getAttribute ( \"title\" ) . split ( \" ▁ \\\\(кликните\" ) [ 0 ] ; if ( price . equals ( \"0.00\" ) ) { price = String . valueOf ( Double . valueOf ( avgPrice ) * 1.30 ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( price ) ; } if ( Double . valueOf ( saled ) == 0 ) { logMe ( \"Новый ▁ продукт, ▁ еще ▁ не ▁ продавался\" ) ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , \"Новый ▁ продукт ▁ еще ▁ не ▁ продавался, ▁ цену ▁ не ▁ трогали: ▁ \" + productName ) ; continue ; } if ( Double . valueOf ( store ) / Double . valueOf ( saled ) > 3 ) { if ( Double . valueOf ( price ) < Double . valueOf ( basicCost ) && ! getParameter ( \"ShopGoodsLessSelfCost\" ) . contains ( productName ) ) { price = basicCost ; result += \"Продажа ▁ ниже ▁ себестоимости; ▁ \" ; } else { price = String . valueOf ( Double . valueOf ( price ) * 0.9 ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( price ) ; } } else { if ( Double . valueOf ( price ) < Double . valueOf ( basicCost ) && ! getParameter ( \"ShopGoodsLessSelfCost\" ) . contains ( productName ) ) { if ( saled . equals ( store ) ) { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( price ) ; } else { price = basicCost ; result += \"Продажа ▁ ниже ▁ себестоимости; ▁ \" ; } } else { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( price ) ; } if ( saled . equals ( store ) ) { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( price ) ; } } if ( Double . valueOf ( market ) > 30 ) { price = String . valueOf ( Double . valueOf ( price ) * 1.05 ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . get ( i ) . sendKeys ( price ) ; result += \"Рынок ▁ забит; ▁ \" ; } recordDepartment ( productName , result ) ; } if ( driver . findElements ( By . xpath ( \" // input[@value='Установить ▁ цены']\" ) ) . size ( ) != 0 ) { driver . findElement ( By . xpath ( \" // tr[@class='odd' ▁ or ▁ @class='even']/td[10]/input\" ) ) . sendKeys ( Keys . ENTER ) ; } driver . findElement ( By . xpath ( \" // a[text()='Снабжение']\" ) ) . click ( ) ; if ( driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_sub_row')]/td[7]/input\" ) ) . size ( ) > 0 ) { waitForElement ( \" // tr[contains(@id,'product_sub_row')]/td[7]/input\" ) ; waitForElementVisible ( \" // tr[contains(@id,'product_sub_row')]/td[7]/input\" ) ; for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_sub_row')]/td[7]/input\" ) ) . size ( ) ; i ++ ) { driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_sub_row')]/td[7]/input\" ) ) . get ( i ) . click ( ) ; } driver . findElement ( By . xpath ( \" // input[@value='Разорвать ▁ выбранные ▁ контракты']\" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; logMe ( \"удалили ▁ второй ▁ офер\" ) ; } action = false ; int rows = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]\" ) ) . size ( ) ; waitForElement ( \" // tr[contains(@id,'product_row')]/td[10]/input[\" + rows + \"]\" ) ; for ( int i = 0 ; i < rows ; i ++ ) { store = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[1] // tr[1]/td[2]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; String supplierStore = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[9] // tr[3]/td[2]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ; if ( Double . valueOf ( store ) == 0 && Double . valueOf ( supplierStore ) != 0 ) { Thread . sleep ( 100 ) ; try { driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[10]/input\" ) ) . get ( i ) . click ( ) ; logMe ( \"удалили ▁ того ▁ саплаера ▁ если ▁ у ▁ нас ▁ на ▁ складе ▁ ноль ▁ и ▁ у ▁ него ▁ на ▁ складе ▁ ноль.\" ) ; action = true ; } catch ( WebDriverException e ) { System . out . println ( e . getMessage ( ) ) ; } } } if ( driver . findElements ( By . xpath ( \" // input[@value='Разорвать ▁ выбранные ▁ контракты']\" ) ) . size ( ) > 0 ) { driver . findElement ( By . xpath ( \" // input[@value='Разорвать ▁ выбранные ▁ контракты']\" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; } for ( int i = 0 ; i < driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]\" ) ) . size ( ) ; i ++ ) { result = \"\" ; saled = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[1] // tr[5]/td[2]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; basicCost = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[8] // tr[1]/td[2]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\" , \"\" ) ; store = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[1] // tr[1]/td[2]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; retailerStore = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[9] // tr[3]/td[2]\" ) ) . get ( i ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; offer = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . getAttribute ( \"value\" ) ; productName = driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/th // td/img\" ) ) . get ( i ) . getAttribute ( \"alt\" ) ; if ( Double . valueOf ( offer ) > 1 && Double . valueOf ( retailerStore ) > 1 && Double . valueOf ( store ) < 1 && Double . valueOf ( saled ) < 1 ) { continue ; } if ( Double . valueOf ( saled ) == 0 ) { logMe ( \"Новый ▁ продукт ▁ для ▁ продажи, ▁ не ▁ трогаем ▁ оффер\" ) ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , \"Оффер ▁ не ▁ изменен, ▁ продукт ▁ еще ▁ не ▁ продавался: ▁ \" + productName ) ; continue ; } if ( Double . valueOf ( store ) / Double . valueOf ( saled ) >= 3 ) { if ( Double . valueOf ( store ) / Double . valueOf ( saled ) >= 10 ) { offer = \"0\" ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . sendKeys ( offer ) ; result += \"Overcroud ▁ \" + productName + \" ▁ \" + store + \"; ▁ \" ; } else { offer = String . valueOf ( Double . valueOf ( offer ) * 0.8 ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . sendKeys ( offer ) ; result += \"SuperOvercroud ▁ \" + productName + \" ▁ \" + store + \"; ▁ \" ; } } else { if ( offer . equals ( \"0\" ) ) offer = String . valueOf ( Double . valueOf ( saled ) * 0.8 ) ; if ( Double . valueOf ( saled ) == Double . valueOf ( store ) || Double . valueOf ( saled ) >= Double . valueOf ( offer ) ) { offer = String . valueOf ( Double . valueOf ( saled ) * 1.5 ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . sendKeys ( offer ) ; } else { offer = String . valueOf ( Double . valueOf ( saled ) * 1.1 ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . clear ( ) ; driver . findElements ( By . xpath ( \" // tr[contains(@id,'product_row')]/td[5]/input\" ) ) . get ( i ) . sendKeys ( offer ) ; } } if ( Double . valueOf ( retailerStore ) / Double . valueOf ( saled ) < 3 ) { logMe ( \"Warning! ▁ \" + productName + \" ▁ МАЛО!\" ) ; result += \"Мало ▁ \" + productName + \" ▁ \" + retailerStore + \"; ▁ \" ; new HelpPage ( driver ) . recordReport ( driver . getCurrentUrl ( ) , \"Магазин. ▁ У ▁ поставщика ▁ мало ▁ на ▁ складе: ▁ \" + productName ) ; } recordDepartment ( productName , result ) ; } if ( driver . findElements ( By . xpath ( \" // input[@value='Изменить']\" ) ) . size ( ) > 0 ) { driver . findElement ( By . xpath ( \" // input[@value='Изменить']\" ) ) . click ( ) ; } driver . findElement ( By . xpath ( \" // a[text()='Магазин']\" ) ) . click ( ) ; return new StorePage ( driver ) ; } protected void recordDepartment ( String product , String result ) { Connection c = null ; Statement stmt = null ; try { Class . forName ( \"org.sqlite.JDBC\" ) ; c = DriverManager . getConnection ( \"jdbc:sqlite:store.db\" ) ; c . setAutoCommit ( false ) ; int session = Integer . valueOf ( formattedDate ( \"MMdd\" ) ) ; String depName = driver . findElement ( By . xpath ( \" // div[@id='headerInfo']/h1\" ) ) . getText ( ) ; String depUrl = driver . getCurrentUrl ( ) ; stmt = c . createStatement ( ) ; String sql = \"INSERT ▁ INTO ▁ MARKET ▁ (SESSION,DEPNAME,DEPURL,RESULT,PRODUCT) ▁ \" + \"VALUES ▁ (\" + session + \",'\" + depName + \"'\" + \",'\" + depUrl + \"'\" + \",'\" + result + \"'\" + \",'\" + product + \"'\" + \");\" ; stmt . executeUpdate ( sql ) ; stmt . close ( ) ; c . commit ( ) ; c . close ( ) ; } catch ( Exception e ) { System . err . println ( e . getClass ( ) . getName ( ) + \": ▁ \" + e . getMessage ( ) ) ; System . exit ( 0 ) ; } } public boolean isDepProcessed ( String dep ) { Connection c = null ; Statement stmt = null ; boolean result = false ; try { Class . forName ( \"org.sqlite.JDBC\" ) ; c = DriverManager . getConnection ( \"jdbc:sqlite:store.db\" ) ; c . setAutoCommit ( false ) ; int session = Integer . valueOf ( formattedDate ( \"MMdd\" ) ) ; String depUrl = driver . getCurrentUrl ( ) ; stmt = c . createStatement ( ) ; String sql = \"select ▁ count(*) ▁ from ▁ market ▁ where ▁ session=\" + session + \" ▁ and ▁ depurl ▁ like ▁ '\" + dep + \"%';\" ; ResultSet rs = stmt . executeQuery ( sql ) ; while ( rs . next ( ) ) { int id = rs . getInt ( \"count(*)\" ) ; if ( id > 0 ) result = true ; else result = false ; } rs . close ( ) ; stmt . close ( ) ; c . commit ( ) ; c . close ( ) ; } catch ( Exception e ) { System . err . println ( e . getClass ( ) . getName ( ) + \": ▁ \" + e . getMessage ( ) ) ; System . exit ( 0 ) ; } return result ; } public StorePage setAutoQaSlave ( ) throws InterruptedException { new SalaryPage ( driver ) . autoSetSalaryAndQaFormula ( ) ; return new StorePage ( driver ) ; } private boolean isNeedtoEducate ( ) { String salarySlave = driver . findElement ( By . xpath ( \" // tr[td[text()='Зарплата ▁ одного ▁ сотрудника']]/td[2]\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) . split ( \"\\\\$\" ) [ 0 ] . replaceAll ( \" ▁ \" , \"\" ) ; String salaryTown = driver . findElement ( By . xpath ( \" // tr[td[text()='Зарплата ▁ одного ▁ сотрудника']]/td[2]\" ) ) . getText ( ) . split ( \"городу ▁ \" ) [ 1 ] . replaceAll ( \" ▁ \" , \"\" ) . replaceAll ( \"\\\\$\\\\)\" , \"\" ) . replaceAll ( \" ▁ \" , \"\" ) ; if ( Double . valueOf ( salarySlave ) > Double . valueOf ( salaryTown ) * 0.3 ) return true ; else return false ; } private boolean isStuding ( ) { if ( driver . findElements ( By . xpath ( \" // a[text()='Обучение ▁ персонала']\" ) ) . size ( ) > 0 ) return true ; else return false ; } } ", "comments": ["автоматическая закупка в магазине при заданном отделе"], "method name": "auto Buy With Dep"}
{"id": 425, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"gillian\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Employee ▁ Appraisal\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"SelectedEmployee_firstName\" ) ) ) . selectByVisibleText ( \"Poppy\" ) ; driver . findElement ( By . id ( \"SelectedEmployee_Submit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"/html/body/div/div/table/tbody/tr[6]/td[8]/a/i\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Manage Appraisal"}
{"id": 426, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"sarah\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Logout_0\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Employee Login"}
{"id": 427, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"gillian\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Manage ▁ Projects\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Assign ▁ Employee\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"CompleteAssignment_projectName\" ) ) ) . selectByVisibleText ( \"iOS ▁ App ▁ Development\" ) ; new Select ( driver . findElement ( By . id ( \"CompleteAssignment_firstName\" ) ) ) . selectByVisibleText ( \"Sarah\" ) ; driver . findElement ( By . id ( \"CompleteAssignment_Assign\" ) ) . click ( ) ; try { assertEquals ( \"Project ▁ Assignment ▁ Complete\" , driver . findElement ( By . cssSelector ( \"h4.center\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Project Assignment"}
{"id": 428, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; try { assertEquals ( \"Invalid ▁ username\" , driver . findElement ( By . cssSelector ( \"div.errorMessage\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Invalid Login"}
{"id": 424, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; try { assertEquals ( \"Invalid ▁ username\" , driver . findElement ( By . cssSelector ( \"div.errorMessage\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertEquals ( \"Invalid ▁ Password\" , driver . findElement ( By . cssSelector ( \"#wwerr_Login_Password ▁ > ▁ div.errorMessage\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Empty Login"}
{"id": 429, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"gillian\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Register ▁ Employee\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Register_newFirstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_newFirstName\" ) ) . sendKeys ( \"Olive\" ) ; driver . findElement ( By . id ( \"Register_surname\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_surname\" ) ) . sendKeys ( \"Maguire\" ) ; driver . findElement ( By . id ( \"Register_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_Username\" ) ) . sendKeys ( \"olive124\" ) ; driver . findElement ( By . id ( \"Register_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Register_Address\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_Address\" ) ) . sendKeys ( \"Dublin\" ) ; driver . findElement ( By . id ( \"Register_Salary\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_Salary\" ) ) . sendKeys ( \"12345\" ) ; driver . findElement ( By . id ( \"Register_UserType\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Register_UserType\" ) ) . sendKeys ( \"employee\" ) ; new Select ( driver . findElement ( By . id ( \"Register_firstName\" ) ) ) . selectByVisibleText ( \"Gillian\" ) ; driver . findElement ( By . id ( \"Register_0\" ) ) . click ( ) ; try { assertEquals ( \"Employee ▁ Registered\" , driver . findElement ( By . cssSelector ( \"h4.center\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Ignore", "Test"], "method name": "test Register Employee"}
{"id": 430, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"FYPFirstChoice/\" ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Username\" ) ) . sendKeys ( \"poppy\" ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Login_Password\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . id ( \"Login_0\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Self ▁ Appraise\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Appraisal_accomplishments\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Appraisal_accomplishments\" ) ) . sendKeys ( \"accomplishments\" ) ; driver . findElement ( By . id ( \"Appraisal_barriers\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Appraisal_barriers\" ) ) . sendKeys ( \"barriers\" ) ; driver . findElement ( By . id ( \"Appraisal_improvements\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Appraisal_improvements\" ) ) . sendKeys ( \"improvement\" ) ; driver . findElement ( By . id ( \"Appraisal_performance\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Appraisal_performance\" ) ) . sendKeys ( \"knowledge\" ) ; driver . findElement ( By . id ( \"Appraisal_attendanceRecordVery ▁ Good\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Appraisal_respectRecordAverage ▁ Respect ▁ for ▁ others\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"Appraisal_firstName\" ) ) ) . selectByVisibleText ( \"Gillian\" ) ; driver . findElement ( By . id ( \"Appraisal_Appraisal\" ) ) . click ( ) ; try { assertEquals ( \"Self ▁ Appraisal ▁ Complete\" , driver . findElement ( By . cssSelector ( \"h6.center\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Appraisal With No Projects"}
{"id": 431, "website": "bigquery", "code": " public void function ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage abapsettingsview = reviewsPage . navigateToSettings ( ) ; abapsettingsview . switchToAbapBackend ( ) ; abapsettingsview . pressOk ( ) ; abapsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( \"Default ▁ category ▁ does ▁ not ▁ match\" , \"All ▁ Categories\" , reviewsPage . getCategory ( ) ) ; assertEquals ( \"Default ▁ product ▁ does ▁ not ▁ match\" , \"10\\\" ▁ Portable ▁ DVD ▁ player\" , reviewsPage . getProduct ( ) ) ; assertFalse ( \"First ▁ reviewer ▁ name ▁ is ▁ empty\" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( \"First ▁ review ▁ comment ▁ is ▁ empty\" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( \"Speakers\" ) ; reviewsPage . selectProduct ( \"Sound ▁ Booster\" ) ; CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"review-comment-text-area-id\" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( \"Good ▁ performance ▁ (\" + reviewId + \")\" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( \"James\" ) ; reviewCreationPage . setLastName ( \"Field\" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( \"James ▁ Field\" , reviewsPage . getFirstReviewer ( ) ) ; } ", "comments": ["Test"], "method name": "test Create Review With Abap Backend"}
{"id": 433, "website": "bigquery", "code": " public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } ", "comments": [" Navigates to a new web page in the current browser window. <br />", " ", " Usage for FitNesse: |navigate to Url|http://www.example.org|<br />", " ", " FitNesse usage..: |navigate to Url|arg1| <br />", " FitNesse example: |navigate to Url|http://www.example.org| <br />", " <br />", " ", " @param url", "            URL of page to navigate to", " @return always true to show inside FitNesse a positive result"], "method name": "navigate To Url"}
{"id": 434, "website": "bigquery", "code": " public boolean function ( String url ) { webDriver . get ( url ) ; return true ; } ", "comments": [" Navigates to a new web page in the current browser window.", " ", " @param url", "            URL of page to navigate to", " @return always {@code true} to show inside FitNesse a positive result"], "method name": "navigate To Url"}
{"id": 432, "website": "bigquery", "code": " public void function ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage cloudsettingsview = reviewsPage . navigateToSettings ( ) ; cloudsettingsview . switchToHanaCloudRemote ( ) ; cloudsettingsview . pressOk ( ) ; cloudsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( \"Default ▁ category ▁ does ▁ not ▁ match\" , \"All ▁ Categories\" , reviewsPage . getCategory ( ) ) ; assertEquals ( \"Default ▁ product ▁ does ▁ not ▁ match\" , \"10\\\" ▁ Portable ▁ DVD ▁ player\" , reviewsPage . getProduct ( ) ) ; assertFalse ( \"First ▁ reviewer ▁ name ▁ is ▁ empty\" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( \"First ▁ review ▁ comment ▁ is ▁ empty\" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( \"Speakers\" ) ; reviewsPage . selectProduct ( \"Sound ▁ Booster\" ) ; CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"review-comment-text-area-id\" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( \"Good ▁ performance ▁ (\" + reviewId + \")\" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( \"James\" ) ; reviewCreationPage . setLastName ( \"Field\" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( \"James ▁ Field\" , reviewsPage . getFirstReviewer ( ) ) ; } ", "comments": [" TODO: Enable as soon as ESPM OData service bug for reviews case is fixed", " @Test"], "method name": "test Create Review With Cloud Backend"}
{"id": 436, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_removeOnCart ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_EmptyCart ) ) ; } ", "comments": ["Test"], "method name": "delete Upsell Bouq"}
{"id": 435, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; String setscroll = \"document.documentElement.scrollTop=3000\" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; driver . findElement ( By . linkText ( FreeBouqPage . LinkText_wholeSale ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( \" // img[@alt='Rose ▁ - ▁ 40cm ▁ - ▁ Red']\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( FreeBouqPage . Text_BuyThisButton ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareFacebookLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareTwitterLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_SharePinterestLink ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ChekoutGiftCard ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"This ▁ field ▁ is ▁ required.\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( \"wholesale ▁ first\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( \"wholesale ▁ last\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . sendKeys ( \"5300 ▁ steven ▁ creek ▁ blvd\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . sendKeys ( \"san ▁ jose\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( \"95129\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_SelectRelationshipWholeSale ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_California ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . sendKeys ( \"8212345678\" ) ; Thread . sleep ( 2000 ) ; String deliverDate , dte , dateText ; int i ; Thread . sleep ( 1000 ) ; System . out . println ( selenium . getText ( \" // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p\" ) ) ; dateText = selenium . getText ( \" // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p\" ) ; dte = dateText . substring ( 22 , 24 ) ; System . out . println ( dte ) ; i = Integer . valueOf ( dte ) . intValue ( ) ; deliverDate = Integer . toString ( i ) ; System . out . println ( deliverDate ) ; driver . findElement ( By . linkText ( deliverDate ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String txt ; txt = driver . findElement ( By . id ( \"errors-modal-body\" ) ) . getText ( ) ; if ( CheckoutPage . Text_ErrorTips . equals ( txt ) ) { assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_ErrorTips ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \" // div[@id='errors-modal']/div[2]/div/div/button\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } ", "comments": ["wholesale pay with cc", "Test"], "method name": "wholesale Pay With CC"}
{"id": 437, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . BuyBouqsPayWithCC ( FreeBouqPage . Css_SelectBouqName ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } ", "comments": ["Test"], "method name": "Create New Account Buy Some Bouqs"}
{"id": 438, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; driver . quit ( ) ; } ", "comments": [" Regist in user that never bought bouq in prestashop system.", " @throws Exception", "Test"], "method name": "b Regist New Account"}
{"id": 439, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . enterPKGSubAfterRegist ( ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection3LearnMore ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection3Name ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . xpath ( PackageSubscriptionPage . Xpth_CollectionSize ) ) . size ( ) == 3 ) ; assertEquals ( PackageSubscriptionPage . Text_BuyButton , driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . getText ( ) ) ; driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_SendTo ) ) . isDisplayed ( ) ) ; Action . inputRelationshipOnPDP ( PackageSubscriptionPage . Text_RelationshipSister , PackageSubscriptionPage . Text_FirstName , PackageSubscriptionPage . Text_LastName , PackageSubscriptionPage . Text_Zip ) ; Action . datePickerOnSubPDP ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; Action . inputAddressOnPDP ( PackageSubscriptionPage . Data_Address , PackageSubscriptionPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step4 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . BillingPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepFourPP ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step3 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . RecipientPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectDelivrySchedulePage ) ) ; String vef = driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_EveryMonth ) ) . getText ( ) ; System . out . println ( vef ) ; assertEquals ( PackageSubscriptionPage . EveryMonth , vef ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Discount20 ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step1 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectCollectionSize ) ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_SizeIsSelected ) ) . isEnabled ( ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepOne ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . ConciergeServices ) ) ; } ", "comments": ["Test"], "method name": "ultimate Gift Verify Back"}
{"id": 440, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; assertTrue ( selenium . isTextPresent ( \"Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient\" ) ) ; Thread . sleep ( 8000 ) ; Action . selectVieoMesaage ( true ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"(Video ▁ Message ▁ Added)\" ) ) ; Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; String orderNum ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNum = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; Email . setEmail ( orderNum ) ; driver . findElement ( By . linkText ( orderNum ) ) . click ( ) ; assertEquals ( AccountSetting . Text_OrderDetail + orderNum , driver . findElement ( By . cssSelector ( AccountSetting . CssSelector_Array ) ) . getText ( ) ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_EditButtonOnOrderHistory ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_cancelButtonOnOrderHistoy ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( \"Please ▁ confirm ▁ cancellation ▁ of ▁ the ▁ order.\" , closeAlertAndGetItsText ( ) ) ; assertFalse ( selenium . isTextPresent ( \"Edit ▁ Video ▁ Message\" ) ) ; } ", "comments": ["Test"], "method name": "cancel Order Check Order History Video"}
{"id": 441, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 2000 ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; String setscroll = \"document.documentElement.scrollTop=3000\" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; driver . findElement ( By . linkText ( FreeBouqPage . LinkText_wholeSale ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( \" // img[@alt='Rose ▁ - ▁ 40cm ▁ - ▁ Red']\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( FreeBouqPage . Text_BuyThisButton ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareFacebookLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareTwitterLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_SharePinterestLink ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ChekoutGiftCard ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"This ▁ field ▁ is ▁ required.\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( \"wholesale ▁ first\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( \"wholesale ▁ last\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . sendKeys ( \"5300 ▁ steven ▁ creek ▁ blvd\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . sendKeys ( \"san ▁ jose\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( \"95129\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_SelectRelationshipWholeSale ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_California ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . sendKeys ( \"8212345678\" ) ; Thread . sleep ( 2000 ) ; String deliverDate , dte , dateText ; int i ; Thread . sleep ( 1000 ) ; System . out . println ( selenium . getText ( \" // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p\" ) ) ; dateText = selenium . getText ( \" // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p\" ) ; dte = dateText . substring ( 22 , 24 ) ; System . out . println ( dte ) ; i = Integer . valueOf ( dte ) . intValue ( ) ; deliverDate = Integer . toString ( i ) ; System . out . println ( deliverDate ) ; driver . findElement ( By . linkText ( deliverDate ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException e ) { driver . findElement ( By . xpath ( CheckoutPage . Xpth_OkButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 3000 ) ; String deliverDateEdit , dteEdit , dateTextEdit ; int iEdit ; Thread . sleep ( 1000 ) ; System . out . println ( selenium . getText ( \" // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p\" ) ) ; dateTextEdit = selenium . getText ( \" // div[@class='pro-intro-sm ▁ clearfix ▁ hidden-xs']/div[3]/p\" ) ; dteEdit = dateTextEdit . substring ( 22 , 24 ) ; System . out . println ( dteEdit ) ; iEdit = Integer . valueOf ( dteEdit ) . intValue ( ) ; deliverDateEdit = Integer . toString ( iEdit ) ; System . out . println ( \"After ▁ edit\" ) ; System . out . println ( dteEdit ) ; System . out . println ( iEdit ) ; System . out . println ( deliverDateEdit ) ; driver . findElement ( By . linkText ( deliverDateEdit ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } ", "comments": [" wholesale pay with PP", "Test"], "method name": "wholesale Pay With PP"}
{"id": 442, "website": "bigquery", "code": " public void function ( ) throws Exception { String arr [ ] = { \"lei\" , \"li\" , \"5300 ▁ stevens ▁ creek ▁ blvd\" , \"san ▁ jose\" , \"California\" , \"95129\" , \"13565211111\" } ; String rel [ ] [ ] = { { \"Mom\" , \"Katrina\" } , { \"Dad\" , \"Jim\" } , { \"Son\" , \"Tom\" } , { \"Friend\" , \"Lily\" } , { \"Sister\" , \"Lucy\" } } ; String coupon = \"Relationship ▁ Reward\" ; String balance = \"$5.00\" ; driver . get ( baseUrl ) ; Thread . sleep ( 2000 ) ; Action . globalRegist ( ) ; Actions act = new Actions ( driver ) ; act . moveToElement ( driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) ) . perform ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_AccountSetting ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ManageRelationship . toUpperCase ( ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; for ( int i = 0 ; i <= 4 ; i ++ ) { driver . findElement ( By . xpath ( AccountSetting . Xpath_AddNewRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectRelationshipType ) ) . click ( ) ; driver . findElement ( By . linkText ( rel [ i ] [ 0 ] ) ) . click ( ) ; driver . findElement ( By . id ( AccountSetting . Id_RelationshipName ) ) . clear ( ) ; driver . findElement ( By . id ( AccountSetting . Id_RelationshipName ) ) . sendKeys ( rel [ i ] [ 1 ] ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SaveButtonOnRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectOccasionType ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . OccasionBirthday ) ) . click ( ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( \"var ▁ date=document.getElementById('occasion_date');date.value='12/29';\" ) ; driver . findElement ( By . cssSelector ( AccountSetting . CssSelector_Occasion ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertEquals ( AccountSetting . OccasionBirthday , driver . findElement ( By . xpath ( AccountSetting . Xpath_OccasionListLabel1 ) ) . getText ( ) ) ; assertEquals ( \"12/29\" , driver . findElement ( By . xpath ( AccountSetting . Xpath_OccasionListLabel2 ) ) . getText ( ) ) ; System . out . println ( \"Occasion ▁ birthday ▁ is ▁ added ▁ with ▁ 12/29\" ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectOccasionType ) ) . click ( ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectMotherDay ) ) . click ( ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SaveButtonOnRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; System . out . println ( \"Occasion ▁ mother's ▁ day ▁ is ▁ added.\" ) ; driver . findElement ( By . xpath ( \" // label[@for='bouq_style-1']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"tabcat-62\" ) ) . click ( ) ; driver . findElement ( By . id ( \"tabcat-15\" ) ) . click ( ) ; driver . findElement ( By . id ( \"tabcat-11\" ) ) . click ( ) ; System . out . println ( \"Flower ▁ choosed!\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( arr [ 0 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( arr [ 1 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Address ) ) . sendKeys ( arr [ 2 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_City ) ) . sendKeys ( arr [ 3 ] ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_State_InputAddressPage ) ) . click ( ) ; driver . findElement ( By . linkText ( arr [ 4 ] ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( arr [ 5 ] ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Phone ) ) . sendKeys ( arr [ 6 ] ) ; driver . findElement ( By . id ( AccountSetting . Id_AddAddressOnRelationship ) ) . click ( ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_NoUseOriginal ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_OkButtonOnRelationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; System . out . println ( \"address ▁ added!\" ) ; } for ( int i = 0 ; i <= 4 ; i ++ ) { int j = i + 2 ; assertEquals ( rel [ i ] [ 0 ] + \", ▁ \" + rel [ i ] [ 1 ] , driver . findElement ( By . xpath ( \" // form[@id='relationship_form']/div/div[\" + j + \"]/div[2]\" ) ) . getText ( ) ) ; } System . out . println ( \"5 ▁ relatives ▁ added!\" ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ vouchers ▁ / ▁ store ▁ credits\" . toUpperCase ( ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; for ( int i = 1 ; i <= 4 ; i ++ ) { assertEquals ( coupon , driver . findElement ( By . xpath ( \" // table/tbody/tr[\" + i + \"]/td[2]\" ) ) . getText ( ) ) ; assertEquals ( balance , driver . findElement ( By . xpath ( \" // table/tbody/tr[\" + i + \"]/td[3]\" ) ) . getText ( ) ) ; } System . out . println ( \"Four ▁ store ▁ credit ▁ code ▁ with ▁ each ▁ $5 ▁ shown.\" ) ; } ", "comments": ["Test"], "method name": "add Five Relationship"}
{"id": 444, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Subscription . Xpth_SubscriptionsOnHeader ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( Subscription . Xpath_SelectRegularSubscription ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step1 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectCollectionSize ) ) ; driver . findElement ( By . cssSelector ( Subscription . Css_TheFarmersMarket ) ) . click ( ) ; driver . findElement ( By . xpath ( Subscription . Xpath_OriginalOnSubs ) ) . click ( ) ; driver . findElement ( By . id ( Subscription . Id_NextButtonOnSubs ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . dateOnSubsPage ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; driver . findElement ( By . id ( Subscription . Id_ThirdOnSubs ) ) . click ( ) ; driver . findElement ( By . xpath ( Subscription . Xpath_NextButtonOnSubs ) ) . click ( ) ; Action . inputInfoOnSubsPage ( FreeBouqPage . Text_RelationshipSelf , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_Address , FreeBouqPage . Data_ZipCode , \"SAN ▁ JOSE\" , FreeBouqPage . Text_California , \"18212345678\" ) ; driver . findElement ( By . xpath ( Subscription . Xpath_NextButtonOnSubs ) ) . click ( ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_NoUseOriginal ) ) . click ( ) ; Action . payWithPPOnSubCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; driver . findElement ( By . xpath ( Subscription . Xpath_SelectBookedSubs ) ) . click ( ) ; driver . findElement ( By . id ( Subscription . Id_EditButtonOnSubs ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_selectRelationship ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_RelationshipWife ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Zip ) ) . sendKeys ( FreeBouqPage . Data_ZipCode ) ; driver . findElement ( By . id ( FreeBouqPage . Id_RelationshipNextBtton ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( \"Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient\" ) ) ; } ", "comments": ["Test"], "method name": "check Book Subs With Video"}
{"id": 445, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; assertTrue ( selenium . isTextPresent ( \"Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient\" ) ) ; Thread . sleep ( 8000 ) ; Action . selectVieoMesaage ( true ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"(Video ▁ Message ▁ Added)\" ) ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_RelationshipNextBtton ) ) . click ( ) ; Thread . sleep ( 10000 ) ; assertTrue ( selenium . isTextPresent ( \"Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient\" ) ) ; boolean vf = driver . findElement ( By . name ( \"giftpixel-isgift\" ) ) . isSelected ( ) ; System . out . println ( \"first ▁ edit ▁ video ▁ message ▁ status ▁ = ▁ ▁ \" + vf ) ; driver . findElement ( By . name ( \"giftpixel-isgift\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertFalse ( selenium . isTextPresent ( \"(Video ▁ Message ▁ Added)\" ) ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 8000 ) ; assertTrue ( selenium . isTextPresent ( \"Add ▁ a ▁ video ▁ message ▁ for ▁ your ▁ recipient\" ) ) ; boolean vff = driver . findElement ( By . name ( \"giftpixel-isgift\" ) ) . isSelected ( ) ; System . out . println ( \"second ▁ edit ▁ video ▁ message ▁ status ▁ = ▁ ▁ \" + vff ) ; Action . selectVieoMesaage ( true ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"(Video ▁ Message ▁ Added)\" ) ) ; Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; Action . checkOrderHistory ( ) ; assertFalse ( selenium . isTextPresent ( \"Edit ▁ Video ▁ Message\" ) ) ; } ", "comments": ["Test"], "method name": "check Book Order With Video"}
{"id": 443, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Thread . sleep ( 5000 ) ; String setscroll = \"document.documentElement.scrollTop=3000\" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; driver . findElement ( By . linkText ( FreeBouqPage . LinkText_GiftCards ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . CssSelector_GiftCards ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( FreeBouqPage . Text_BuyThisButton ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareFacebookLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_ShareTwitterLink ) ) ; assertTrue ( selenium . isElementPresent ( FreeBouqPage . Xpath_SharePinterestLink ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ChekoutGiftCard ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpth_selectRelationship ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( FreeBouqPage . Text_RelationshipWife ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( \"Giftcard ▁ first\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( \"Giftcard ▁ last\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_Message ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"Did ▁ you ▁ mean ▁ to ▁ send ▁ this ▁ email ▁ with ▁ out ▁ a ▁ message?\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_MessageClickNo ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; String txt ; txt = driver . findElement ( By . id ( \"errors-modal-body\" ) ) . getText ( ) ; if ( CheckoutPage . Text_ErrorTips . equals ( txt ) ) { assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_ErrorTips ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \" // div[@id='errors-modal']/div[2]/div/div/button\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 3000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_FirstName ) ) . sendKeys ( \"Giftcard ▁ firstEdit\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_LastName ) ) . sendKeys ( \"Giftcard ▁ lastEdit\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_AddCheckOut ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"Did ▁ you ▁ mean ▁ to ▁ send ▁ this ▁ email ▁ with ▁ out ▁ a ▁ message?\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_MessageClickYes ) ) . click ( ) ; Thread . sleep ( 2000 ) ; if ( CheckoutPage . Text_ErrorTips . equals ( txt ) ) { assertTrue ( selenium . isTextPresent ( CheckoutPage . Text_ErrorTips ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \" // div[@id='errors-modal']/div[2]/div/div/button\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; } ", "comments": ["Test"], "method name": "gift Card Buy With CC"}
{"id": 446, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 3000 ) ; driver . findElement ( By . linkText ( Regist_Login_Page . Link_ClosePOPUP ) ) . click ( ) ; String setscroll = \"document.documentElement.scrollTop=1000\" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_ArtisanFlorists ) ) . click ( ) ; assertTrue ( selenium . isVisible ( \"xpath= // div[@class='hero']\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanButton ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( \"This ▁ field ▁ is ▁ required.\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . sendKeys ( \"sjs\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanButton ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( \"Please ▁ enter ▁ only ▁ digits\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanZip ) ) . sendKeys ( \"89899\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ArtisanButton ) ) . click ( ) ; System . out . println ( driver . findElement ( By . xpath ( \" // div[@id='zipPopupFailed']/div/h4\" ) ) . getText ( ) ) ; assertTrue ( selenium . isTextPresent ( \"AW ▁ SHUCKS! ▁ Same ▁ day ▁ delivery ▁ is ▁ not ▁ yet ▁ available ▁ for ▁ that ▁ area.\" ) ) ; assertTrue ( selenium . isTextPresent ( \"Check ▁ another ▁ zip ▁ code ▁ or ▁ shop ▁ our ▁ Farm ▁ To ▁ Table ▁ Bouqs.\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . sendKeys ( \"9512\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCodeButton2 ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( \"Please ▁ enter ▁ at ▁ least ▁ 5 ▁ characters.\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . sendKeys ( \"76442\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCodeButton2 ) ) . click ( ) ; System . out . println ( driver . findElement ( By . xpath ( \" // div[@id='zipPopupFailed']/div/h4\" ) ) . getText ( ) ) ; assertTrue ( selenium . isTextPresent ( \"AW ▁ SHUCKS! ▁ Same ▁ day ▁ delivery ▁ is ▁ not ▁ yet ▁ available ▁ for ▁ that ▁ area.\" ) ) ; assertTrue ( selenium . isTextPresent ( \"Check ▁ another ▁ zip ▁ code ▁ or ▁ shop ▁ our ▁ Farm ▁ To ▁ Table ▁ Bouqs.\" ) ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCode2 ) ) . sendKeys ( \"60604\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_ZipCodeButton2 ) ) . click ( ) ; assertTrue ( selenium . isVisible ( \"xpath= // ul[@class='product-frame ▁ row']\" ) ) ; } ", "comments": ["Test"], "method name": "test Home Page"}
{"id": 448, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; orderNum = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td/a\" ) ) . getText ( ) ; Email . setEmail ( orderNumUpsell ) ; Email . setReferralByUser ( orderNum ) ; orderNum = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td/a\" ) ) . getText ( ) ; System . out . println ( \"orderNumUpsell ▁ = ▁ \" + orderNumUpsell ) ; System . out . println ( \"orderNum ▁ = ▁ \" + orderNum ) ; } ", "comments": ["Test"], "method name": "c Cancel Main Bouq"}
{"id": 447, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; orderNum = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td/a\" ) ) . getText ( ) ; Email . setEmail ( orderNumUpsell ) ; Email . setReferralByUser ( orderNum ) ; orderNum = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td/a\" ) ) . getText ( ) ; System . out . println ( \"orderNumUpsell ▁ = ▁ \" + orderNumUpsell ) ; System . out . println ( \"orderNum ▁ = ▁ \" + orderNum ) ; } ", "comments": ["Test"], "method name": "a Cancel Upsell Bouq"}
{"id": 449, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } ", "comments": ["Test"], "method name": "Create New Account"}
{"id": 451, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell , vf ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; Email . setEmail ( orderNumUpsell ) ; orderNum = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td/a\" ) ) . getText ( ) ; vf = driver . findElement ( By . xpath ( \" // table/tbody/tr[2]/td[4]\" ) ) . getText ( ) ; System . out . println ( vf ) ; if ( \"$18.00\" . equals ( vf ) ) { System . out . println ( \"orderNumUpsell ▁ = ▁ \" + orderNumUpsell ) ; System . out . println ( \"orderNum ▁ = ▁ \" + orderNum ) ; driver . findElement ( By . linkText ( orderNumUpsell ) ) . click ( ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_EditButtonOnOrderHistory ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_cancelButtonOnOrderHistoy ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( \"Please ▁ confirm ▁ cancellation ▁ of ▁ the ▁ order.\" , closeAlertAndGetItsText ( ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( AccountSetting . Id_ReturnToOrderHistoryButton ) ) . click ( ) ; String status1 , status2 ; status1 = driver . findElement ( By . xpath ( \" // table/tbody/tr[2]/td[7]\" ) ) . getText ( ) ; status2 = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td[7]\" ) ) . getText ( ) ; assertTrue ( selenium . getText ( \" // table/tbody/tr[2]/td[7]\" ) . contains ( \"Canceled\" ) ) ; assertTrue ( selenium . getText ( \" // table/tbody/tr[3]/td[7]\" ) . contains ( \"Canceled\" ) ) ; System . out . println ( \"bouqs ▁ status ▁ = ▁ \" + status1 ) ; System . out . println ( \"upsell ▁ status ▁ = ▁ \" + status2 ) ; } else { System . out . println ( \"don't ▁ select ▁ upsell ▁ bouq.\" ) ; fail ( \"don't ▁ select ▁ upsell ▁ bouq.\" ) ; } } ", "comments": ["Test"], "method name": "a Custmoer Cancel Upsell Bouq"}
{"id": 450, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . BuyBouqsPayWithCC ( FreeBouqPage . Css_SelectBouqName ) ; Thread . sleep ( 2000 ) ; try { driver . findElement ( By . id ( \"gts-g-cl\" ) ) . click ( ) ; } catch ( NoSuchElementException e ) { e . printStackTrace ( ) ; } String setscroll = \"document.documentElement.scrollTop=1000\" ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( setscroll ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ContactUs ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_SelectRelationship ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_Relationship ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_IdContact ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Customer ▁ service\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( AccountSetting . Xpath_IdOrder ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[button/@data-id='id_order'] // li[2]/a\" ) ) . click ( ) ; driver . findElement ( By . id ( AccountSetting . Id_ContactMessage ) ) . click ( ) ; driver . findElement ( By . id ( AccountSetting . Id_ContactMessage ) ) . clear ( ) ; driver . findElement ( By . id ( AccountSetting . Id_ContactMessage ) ) . sendKeys ( \"This ▁ is ▁ email ▁ body.\" ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( AccountSetting . Id_SendButtonOnMessage ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "contact US Email"}
{"id": 452, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; String orderNum , orderNumUpsell , vf ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_OrderHistory . toUpperCase ( ) ) ) . click ( ) ; System . out . println ( AccountSetting . Text_VerifyOrderHistoryLinkShown ) ; orderNumUpsell = driver . findElement ( By . xpath ( AccountSetting . Xpth_OrderNum ) ) . getText ( ) ; orderNum = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td/a\" ) ) . getText ( ) ; Email . setEmail ( orderNum ) ; vf = driver . findElement ( By . xpath ( \" // table/tbody/tr[2]/td[4]\" ) ) . getText ( ) ; System . out . println ( vf ) ; if ( \"$18.00\" . equals ( vf ) ) { System . out . println ( \"orderNumUpsell ▁ = ▁ \" + orderNumUpsell ) ; System . out . println ( \"orderNum ▁ = ▁ \" + orderNum ) ; driver . findElement ( By . linkText ( orderNum ) ) . click ( ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_EditButtonOnOrderHistory ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( OrderConfirmationPage . Id_cancelButtonOnOrderHistoy ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( \"Please ▁ confirm ▁ cancellation ▁ of ▁ the ▁ order.\" , closeAlertAndGetItsText ( ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( AccountSetting . Id_ReturnToOrderHistoryButton ) ) . click ( ) ; String status1 , status2 ; status1 = driver . findElement ( By . xpath ( \" // table/tbody/tr[2]/td[7]\" ) ) . getText ( ) ; status2 = driver . findElement ( By . xpath ( \" // table/tbody/tr[3]/td[7]\" ) ) . getText ( ) ; assertTrue ( selenium . getText ( \" // table/tbody/tr[2]/td[7]\" ) . contains ( \"Canceled\" ) ) ; assertTrue ( selenium . getText ( \" // table/tbody/tr[3]/td[7]\" ) . contains ( \"Canceled\" ) ) ; System . out . println ( \"bouqs ▁ status ▁ = ▁ \" + status1 ) ; System . out . println ( \"upsell ▁ status ▁ = ▁ \" + status2 ) ; } else { System . out . println ( \"don't ▁ select ▁ upsell ▁ bouq.\" ) ; fail ( \"don't ▁ select ▁ upsell ▁ bouq.\" ) ; } } ", "comments": [" cancel main bouqs", " @throws Exception", "Test"], "method name": "c Custmoer Cancel Main Bouq"}
{"id": 453, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; driver . findElement ( By . xpath ( \" // tbody/tr[2]/td/a/img[@class= ▁ 'remove-icon']\" ) ) . click ( ) ; Action . useDiscountOnCartPage ( \"JM1000\" ) ; Thread . sleep ( 2000 ) ; String dis ; dis = driver . findElement ( By . xpath ( \" // tbody/tr[2]/td[2]\" ) ) . getText ( ) ; System . out . println ( \"JM1000 ▁ discount ▁ is ▁ 10%, ▁ expected ▁ = ▁ -$4.00 ▁ & ▁ actual ▁ = ▁ \" + dis ) ; assertTrue ( selenium . isTextPresent ( \"-$4.00\" ) ) ; driver . findElement ( By . xpath ( \" // tbody/tr[2]/td/a/img[@class= ▁ 'remove-icon']\" ) ) . click ( ) ; System . out . println ( \"remove ▁ Jm1000 ▁ discount\" ) ; Action . useDiscountOnCartPage ( \"GTB09N1000K\" ) ; Thread . sleep ( 2000 ) ; assertTrue ( selenium . isTextPresent ( \"Your ▁ Store ▁ Credits\" ) ) ; assertTrue ( selenium . isTextPresent ( \"Google ▁ Credit\" ) ) ; assertTrue ( selenium . isTextPresent ( \"-$40.00\" ) ) ; System . out . println ( \"store ▁ credit ▁ code ▁ 'GTB09N1000K' ▁ applied.\" ) ; } ", "comments": ["Test"], "method name": "upsell Bouq Apply Discount"}
{"id": 456, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; driver . quit ( ) ; } ", "comments": [" Regist in user that never bought bouq in prestashop system.", " @throws Exception", "Test"], "method name": "b Regist New Account"}
{"id": 455, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; System . out . println ( eml ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( AccountSetting . Link_Logout . toUpperCase ( ) ) ) . click ( ) ; driver . findElement ( By . xpath ( HomePage . Xpath_ShopOnHeader ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , true ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; try { boolean vel = driver . findElement ( By . id ( \"stick-with-original\" ) ) . isEnabled ( ) ; if ( vel == true ) { driver . findElement ( By . id ( \"stick-with-original\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ this ▁ button\" ) ; } assertFalse ( selenium . isTextPresent ( Subscription . Text_RomancePackage ) ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_SubscriptionDiscount15 ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . sendKeys ( eml ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . sendKeys ( Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpButton ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_RomancePackage ) ) ; } ", "comments": ["Test"], "method name": "Book Subs Upsell For Wife With Vase"}
{"id": 457, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipMom , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , true ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; try { boolean vel = driver . findElement ( By . id ( \"stick-with-original\" ) ) . isEnabled ( ) ; if ( vel == true ) { driver . findElement ( By . id ( \"stick-with-original\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ this ▁ button\" ) ; } assertFalse ( selenium . isTextPresent ( Subscription . Text_MotherlyLovePackage ) ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_SubscriptionDiscount15 ) ) ; Thread . sleep ( 2000 ) ; String eml = new Email ( ) . newEmail ( ) ; Email . setReferralByUser ( eml ) ; Action . inputNewEmailRegistFromCart ( CheckoutPage . Id_SignUpEmail , eml ) ; Action . inputPasswordRegistFromCart ( CheckoutPage . Id_SignUpPassword , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( CheckoutPage . Id_SignUpButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertFalse ( selenium . isTextPresent ( Subscription . Text_MotherlyLovePackage ) ) ; } ", "comments": ["Test"], "method name": "Book Subs Upsell For Mom With Vase"}
{"id": 454, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . get ( SiteInfo . adminUrl ( ) ) ; Thread . sleep ( 5000 ) ; String getEmail = Email . getEmail ( ) ; System . out . println ( \"account ▁ = ▁ \" + getEmail ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Email_Data ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Email_Data ) ) . sendKeys ( Email . adminEmail ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Password_Data ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_Password_Data ) ) . sendKeys ( Email . adminPasswd ) ; driver . findElement ( By . name ( \"Submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Customers\" ) ) . click ( ) ; driver . findElement ( By . name ( \"customerFilter_email\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"customerFilter_email\" ) ) . sendKeys ( getEmail ) ; driver . findElement ( By . id ( \"submitFilterButton_customer\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . xpath ( \" // img[@title ▁ = ▁ 'Edit']\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; new Select ( driver . findElement ( By . name ( \"id_default_group\" ) ) ) . selectByVisibleText ( \"VIP\" ) ; driver . findElement ( By . name ( \"submitAddcustomer\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . get ( baseUrl ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isElementPresent ( \"xpath= // i[@class='icon-logged-in']\" ) ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertFalse ( selenium . isTextPresent ( \"ADD ▁ A ▁ 2ND ▁ BOUQ ▁ FOR ▁ JUST ▁ $15\" ) ) ; assertFalse ( selenium . isElementPresent ( FreeBouqPage . Id_butonNoThanks ) ) ; System . out . println ( \"Upsell ▁ window ▁ not ▁ shown ▁ because ▁ of ▁ VIP ▁ account ▁ having ▁ discount.\" ) ; } ", "comments": ["Test"], "method name": "check Vip Account Not Upsell Shown"}
{"id": 460, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LoginLink_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; Action . inputFirstNameOnGlobal ( Regist_Login_Page . Id_SignUpName , Regist_Login_Page . strName ) ; String eml = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( eml ) ; Thread . sleep ( 3000 ) ; Email . setEmail ( eml ) ; System . out . println ( eml ) ; Action . inputPasswordOnRegistPage ( Regist_Login_Page . Id_SignUpPassword_Global , Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileMonths , Regist_Login_Page . strMonths_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileDays , Regist_Login_Page . strDays_Global ) ; Action . inputBirthdayOnGlobal ( Regist_Login_Page . Id_ProfileYears , Regist_Login_Page . strYears_Global ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 2000 ) ; } ", "comments": ["Test"], "method name": "Create New Account And Buy Bouqs"}
{"id": 459, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } driver . findElement ( By . linkText ( FreeBouqPage . link_Loginlink ) ) . click ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_BackToSignUp ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String emil = new Email ( ) . newEmail ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpEmail ) ) . sendKeys ( emil ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . clear ( ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SignUpPassword ) ) . sendKeys ( Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( CheckoutPage . Id_SignUpButton ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertTrue ( selenium . isElementPresent ( HomePage . Xpath_AccountIcon ) ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , true ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . selectUpsellBouq ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; driver . findElement ( By . linkText ( CheckoutPage . Link_EditOnCart ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . selectUpsellBouq ( \" // ul[@class= ▁ 'clearfix']/li[2]/a\" ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SaveChangesButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_UseThisAddressButton ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; Action . payWithPPOnCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertTrue ( selenium . isTextPresent ( OrderConfirmationPage . Text_OrderSucceed ) ) ; Thread . sleep ( 3000 ) ; } ", "comments": ["Test"], "method name": "edit Primary Bouq"}
{"id": 458, "website": "bigquery", "code": " public void function ( ) throws Exception { String add1 [ ] = { \"MeiMei\" , \"Han\" , \"5300 ▁ stevens ▁ creek ▁ blvd\" , \"SAN ▁ JOSE\" , \"California\" , \"95129\" , \"8212345678\" } ; driver . get ( baseUrl ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; String dateText , dte ; dateText = driver . findElement ( By . xpath ( FreeBouqPage . Xpath_SelectDeliveryDate ) ) . getText ( ) ; dte = dateText . substring ( 19 , 24 ) ; System . out . println ( dte ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Wedding ▁ Anniversary\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Action . payWithCCOnCartPage ( CheckoutPage . Data_CardNum , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardNum2 , CheckoutPage . Data_CardCode , CheckoutPage . Data_BillingZip ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ManageRelationship . toUpperCase ( ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // form[@id='relationship_form']/div/div[2] // button\" ) ) . click ( ) ; assertEquals ( FreeBouqPage . Text_RelationshipWife , driver . findElement ( By . xpath ( \" // button[@data-id='relationship_type']\" ) ) . getAttribute ( \"title\" ) ) ; assertEquals ( \"Wedding ▁ Anniversary\" , driver . findElement ( By . xpath ( \" // div[@id='occasion_list']/div/label[1]\" ) ) . getText ( ) ) ; System . out . println ( \"select ▁ date ▁ = ▁ \" + dte ) ; assertEquals ( dte , driver . findElement ( By . xpath ( \" // div[@id='occasion_list']/div/label[2]\" ) ) . getText ( ) ) ; System . out . println ( \"Wife ▁ with ▁ occasion ▁ 'Wedding ▁ aniversary' ▁ ,date ▁ 06/30 ▁ added!\" ) ; address1 = add1 [ 2 ] ; city1 = add1 [ 3 ] + \", ▁ \" + add1 [ 5 ] ; assertEquals ( \"Home\" , driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[1]\" ) ) . getText ( ) ) ; assertEquals ( address1 , driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[2]\" ) ) . getText ( ) ) ; assertEquals ( city1 , driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[3]\" ) ) . getText ( ) ) ; System . out . println ( driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[3]\" ) ) . getText ( ) ) ; System . out . println ( \"Address ▁ that ▁ user ▁ inputed ▁ is ▁ saved.\" ) ; driver . findElement ( By . xpath ( HomePage . Xpath_ShopOnHeader ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; Action . inputRelationshipOnPDP ( \"Dad\" , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Love\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; driver . findElement ( By . id ( CheckoutPage . Id_SubmitButton ) ) . click ( ) ; Thread . sleep ( 8000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; driver . findElement ( By . linkText ( AccountSetting . Link_ManageRelationship . toUpperCase ( ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // form[@id='relationship_form']/div/div[3] // button\" ) ) . click ( ) ; assertEquals ( \"Dad\" , driver . findElement ( By . xpath ( \" // button[@data-id='relationship_type']\" ) ) . getAttribute ( \"title\" ) ) ; try { assertEquals ( \"Love\" , driver . findElement ( By . xpath ( \" // div[@id='occasion_list']/div/label[1]\" ) ) . getText ( ) ) ; fail ( \"Love ▁ occasion ▁ is ▁ added!\" ) ; } catch ( NoSuchElementException e ) { } System . out . println ( \"'Love' ▁ occasion ▁ is ▁ not ▁ shown.\" ) ; assertEquals ( \"Home\" , driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[1]\" ) ) . getText ( ) ) ; assertEquals ( address1 , driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[2]\" ) ) . getText ( ) ) ; assertEquals ( city1 , driver . findElement ( By . xpath ( \" // div[@id='address_list']/p[3]\" ) ) . getText ( ) ) ; System . out . println ( \"Dad ▁ with ▁ correct ▁ delivery ▁ address.\" ) ; } ", "comments": ["Test"], "method name": "relationship Occasion From PDP"}
{"id": 463, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . enterPKGSubAfterRegist ( ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection2LearnMore ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection2Name ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . xpath ( PackageSubscriptionPage . Xpth_CollectionSize ) ) . size ( ) == 3 ) ; assertEquals ( PackageSubscriptionPage . Text_BuyButton , driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . getText ( ) ) ; driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_SendTo ) ) . isDisplayed ( ) ) ; Action . inputRelationshipOnPDP ( PackageSubscriptionPage . Text_RelationshipSister , PackageSubscriptionPage . Text_FirstName , PackageSubscriptionPage . Text_LastName , PackageSubscriptionPage . Text_Zip ) ; Action . datePickerOnSubPDP ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; Action . inputAddressOnPDP ( PackageSubscriptionPage . Data_Address , PackageSubscriptionPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step4 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . BillingPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepFourPP ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step3 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . RecipientPage ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectDelivrySchedulePage ) ) ; String vef = driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_EveryMonth ) ) . getText ( ) ; System . out . println ( vef ) ; assertEquals ( PackageSubscriptionPage . EveryMonth , vef ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Discount20 ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnPackageSubs ) ) . click ( ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . Step1 ) ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . SelectCollectionSize ) ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_SizeIsSelected ) ) . isEnabled ( ) ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpath_BackOnStepOne ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( PackageSubscriptionPage . ConciergeServices ) ) ; } ", "comments": ["Test"], "method name": "decorate Verify Back"}
{"id": 462, "website": "bigquery", "code": " public void function ( ) throws Exception { List < WebElement > ls ; driver . get ( baseUrl ) ; Action . globalRegist ( ) ; Action . enterPKGSubAfterRegist ( ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection1LearnMore ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_Collection1Name ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . xpath ( PackageSubscriptionPage . Xpth_CollectionSize ) ) . size ( ) == 3 ) ; assertEquals ( PackageSubscriptionPage . Text_BuyButton , driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . getText ( ) ) ; driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_SendTo ) ) . isDisplayed ( ) ) ; Action . inputRelationshipOnPDP ( PackageSubscriptionPage . Text_RelationshipSister , PackageSubscriptionPage . Text_FirstName , PackageSubscriptionPage . Text_LastName , PackageSubscriptionPage . Text_Zip ) ; Action . datePickerOnSubPDP ( PackageSubscriptionPage . Xpth_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerMonth , PackageSubscriptionPage . Text_DatePickerDay ) ; Action . inputAddressOnPDP ( PackageSubscriptionPage . Data_Address , PackageSubscriptionPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertEquals ( SubscriptionCheckoutPage . Text_ServiceNote , driver . findElement ( By . xpath ( SubscriptionCheckoutPage . Xpth_ServiceNote ) ) . getText ( ) . trim ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( SubscriptionCheckoutPage . Xpth_20off ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( SubscriptionCheckoutPage . Xpth_10off ) ) . isDisplayed ( ) ) ; Action . payWithPPOnSubCartPage ( CheckoutPage . Data_TestPayPalEmail , CheckoutPage . Data_TestPayPalPassword ) ; assertEquals ( PackageSubscriptionPage . Text_Active , driver . findElement ( By . cssSelector ( PackageSubscriptionPage . Css_Active ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( Subscription . Xpth_SubList ) ) . click ( ) ; Thread . sleep ( 2000 ) ; ls = driver . findElements ( By . xpath ( Subscription . Xpth_SubItem ) ) ; assertTrue ( ls . size ( ) != 0 ) ; driver . findElement ( By . xpath ( PackageSubscriptionPage . Xpth_FirstEditButton ) ) . click ( ) ; Thread . sleep ( 10000 ) ; assertTrue ( driver . findElement ( By . id ( PackageSubscriptionPage . Id_BuyBouqButton ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( PackageSubscriptionPage . Id_CancelButton ) ) . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "bouq Of The Month"}
{"id": 464, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; Thread . sleep ( 10000 ) ; Action . globalRegist ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_Shop ) ) . click ( ) ; driver . findElement ( By . cssSelector ( FreeBouqPage . Css_SelectBouqName ) ) . click ( ) ; Thread . sleep ( 5000 ) ; driver . findElement ( By . xpath ( FreeBouqPage . Xpath_OriginalSize ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( FreeBouqPage . Id_SendThisBouqButton ) ) . click ( ) ; Thread . sleep ( 2000 ) ; String vef ; try { vef = driver . findElement ( By . id ( FreeBouqPage . Id_butonNoThanks ) ) . getText ( ) ; System . out . println ( vef ) ; System . out . println ( \"this ▁ bouq ▁ has ▁ upsell.\" ) ; if ( \"NO ▁ THANKS\" . equals ( vef ) ) { driver . findElement ( By . xpath ( \" // ul[@class= ▁ 'clearfix']/li/a\" ) ) . click ( ) ; } else { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } } catch ( NoSuchElementException e ) { System . out . println ( \"not ▁ has ▁ upsell\" ) ; } Action . inputRelationshipOnPDP ( FreeBouqPage . Text_RelationshipWife , FreeBouqPage . Data_FirstName , FreeBouqPage . Data_LastName , FreeBouqPage . Data_ZipCode ) ; Action . inputOssasionAndHaveMessageOnPDP ( \"Birthday\" , false , FreeBouqPage . Data_Message , false , false ) ; Action . inputAddressOnPDP ( FreeBouqPage . Data_Address , FreeBouqPage . Data_PhoneNum ) ; Action . clickAddCheckOutOnButtonPDP ( ) ; Thread . sleep ( 5000 ) ; assertTrue ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; driver . findElement ( By . xpath ( \" // div[@class= ▁ 'cart-detail']/div[4]/div[2]/a\" ) ) . click ( ) ; Thread . sleep ( 5000 ) ; assertFalse ( selenium . isTextPresent ( \"2nd ▁ Bouq ▁ for ▁ $15\" ) ) ; List < WebElement > ls ; ls = driver . findElements ( By . xpath ( \" // div[@class= ▁ 'cart-item']\" ) ) ; System . out . println ( \"Bouqs ▁ number ▁ in ▁ cart ▁ = ▁ \" + ls ) ; assertTrue ( ls . size ( ) == 1 ) ; System . out . println ( \"only ▁ main ▁ bouq ▁ shown ▁ in ▁ cart.\" ) ; } ", "comments": ["Test"], "method name": "delete Upsell Bouq"}
{"id": 466, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . xpath ( \". // *[@id='q']\" ) ) . clear ( ) ; driver . findElement ( By . xpath ( \". // *[@id='q']\" ) ) . sendKeys ( \"asd\" ) ; driver . findElement ( By . xpath ( \". // *[@id='q']\" ) ) . sendKeys ( Keys . ENTER ) ; Thread . sleep ( 3000 ) ; if ( driver . getPageSource ( ) . contains ( \"No ▁ movies ▁ where ▁ found.\" ) ) { System . out . println ( \"MovieNotFound:done\" ) ; } else { System . out . println ( \"MovieNotFound:fail\" ) ; } Thread . sleep ( 5000 ) ; } ", "comments": ["Test"], "method name": "Movie Not Found"}
{"id": 467, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"conts/web/view/tutorial/interacting-with-controllers\" ; driver . get ( url ) ; assertionView . assertView ( \"tutorial13\" , null , HIDE_ELEMENTS ) ; } ", "comments": ["Test"], "method name": "test Capture Tutorial13"}
{"id": 468, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"conts/web/view/tutorial/menu\" ; driver . get ( url ) ; MrtWebElement e = ( MrtWebElement ) driver . findElement ( By . cssSelector ( \".wikimodel-freestanding\" ) ) ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( \"arguments[0].width=arguments[1]\" , e , e . getRect ( ) . getWidth ( ) ) ; jse . executeScript ( \"arguments[0].height=arguments[1]\" , e , e . getRect ( ) . getHeight ( ) ) ; jse . executeScript ( \"arguments[0].src=''\" , e ) ; assertionView . assertView ( \"tutorial13\" , null , HIDE_ELEMENTS ) ; } ", "comments": ["Test"], "method name": "test Capture Tutorial Top"}
{"id": 461, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; driver . findElement ( By . xpath ( \" // button[@onclick ▁ = ▁ 'welcomePopupMini()']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( Regist_Login_Page . Id_Login_Data ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_CreateAccount_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpName ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpName ) ) . sendKeys ( Regist_Login_Page . strName ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpEmail_Global ) ) . sendKeys ( new Email ( ) . newEmail ( ) ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpPassword_Global ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpPassword_Global ) ) . sendKeys ( Regist_Login_Page . strPassword ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_SignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMonths ) ) . sendKeys ( \"2\" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileDays ) ) . sendKeys ( \"32\" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileYears ) ) . sendKeys ( \"1988\" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileFemale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectPersonal_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 1000 ) ; System . out . println ( driver . findElement ( By . xpath ( \" // label[@class='input-invalid']\" ) ) . getText ( ) ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMonths ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMonths ) ) . sendKeys ( \"5\" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileDays ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileDays ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileYears ) ) . clear ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileYears ) ) . sendKeys ( \"2003\" ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_ProfileMale ) ) . click ( ) ; driver . findElement ( By . xpath ( Regist_Login_Page . Xpath_SelectBusiness_Global ) ) . click ( ) ; driver . findElement ( By . id ( Regist_Login_Page . Id_LastSignUpButton_Global ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertTrue ( selenium . isElementPresent ( HomePage . Xpath_AccountIcon ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( HomePage . Xpath_AccountIcon ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . linkText ( AccountSetting . Link_myPersonalInfo . toUpperCase ( ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; System . out . print ( selenium . isChecked ( AccountSetting . Id_male ) ) ; assertTrue ( selenium . isChecked ( AccountSetting . Id_male ) ) ; System . out . print ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorMonth ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorMonth ) ) . getText ( ) . contains ( \"May\" ) ) ; System . out . print ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorDay ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorDay ) ) . getText ( ) . contains ( \"30\" ) ) ; System . out . print ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorYear ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( AccountSetting . Xpth_SelectorYear ) ) . getText ( ) . contains ( \"2003\" ) ) ; } ", "comments": ["Test"], "method name": "Common User Regist"}
{"id": 469, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/admin/clear-index\" ) ; StringBuffer sb = new StringBuffer ( \"", "comments": ["Test"], "method name": "test Add And Update Index"}
{"id": 465, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . xpath ( \". // *[@id='content']/section/nav/ul/li[1]/div/div/a\" ) ) . click ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"Òåñòîâûé ▁ Ôèëüì\" ) ; driver . findElement ( By . name ( \"aka\" ) ) . sendKeys ( \"òåñò\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"60\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"9\" ) ; driver . findElement ( By . name ( \"trailer\" ) ) . sendKeys ( \"https: // youtu.be/4Hau3QZh7FY\" ) ; driver . findElement ( By . name ( \"notes\" ) ) . sendKeys ( \"test ▁ notes\" ) ; driver . findElement ( By . name ( \"taglines\" ) ) . sendKeys ( \"taglines\" ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . sendKeys ( \"plotoutline\" ) ; driver . findElement ( By . name ( \"plots\" ) ) . sendKeys ( \"plots\" ) ; driver . findElement ( By . name ( \"languages\" ) ) . sendKeys ( \"languages\" ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . sendKeys ( \"subtitles\" ) ; driver . findElement ( By . name ( \"audio\" ) ) . sendKeys ( \"audio\" ) ; driver . findElement ( By . name ( \"video\" ) ) . sendKeys ( \"video\" ) ; driver . findElement ( By . name ( \"country\" ) ) . sendKeys ( \"country\" ) ; driver . findElement ( By . name ( \"genres\" ) ) . sendKeys ( \"genres\" ) ; driver . findElement ( By . name ( \"director\" ) ) . sendKeys ( \"director\" ) ; driver . findElement ( By . name ( \"writer\" ) ) . sendKeys ( \"writer\" ) ; driver . findElement ( By . name ( \"producer\" ) ) . sendKeys ( \"producer\" ) ; driver . findElement ( By . name ( \"music\" ) ) . sendKeys ( \"music\" ) ; driver . findElement ( By . name ( \"cast\" ) ) . sendKeys ( \"cast\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; if ( driver . findElement ( By . name ( \"submit\" ) ) != null ) { System . out . println ( \"CreateMovieFail:done\" ) ; } else { System . out . println ( \"CreateMovieFail:fail\" ) ; } } ", "comments": ["Test"], "method name": "Create Movie Fail"}
{"id": 471, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/studies/\" ) ; new Select ( driver . findElement ( By . id ( \"studies-browse-sorter\" ) ) ) . selectByVisibleText ( \"Files\" ) ; driver . findElement ( By . cssSelector ( \".browse-study-title ▁ a\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 5 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#file-list_filter ▁ input\" ) ) ) ; driver . findElement ( By . cssSelector ( \"#file-list_filter ▁ input\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#file-list_filter ▁ input\" ) ) . sendKeys ( \"pdf\" ) ; assertEquals ( \"Showing ▁ 1 ▁ to ▁ 4 ▁ of ▁ 4 ▁ entries ▁ (filtered ▁ from ▁ 35 ▁ total ▁ entries)\" , driver . findElement ( By . cssSelector ( \"#file-list_info\" ) ) . getText ( ) ) ; } ", "comments": [" Not working with HtmlUnitDriver", "Test"], "method name": "test File Filter"}
{"id": 470, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/admin/clear-index\" ) ; StringBuffer sb = new StringBuffer ( \"", "comments": ["Test"], "method name": "test Delete Document"}
{"id": 472, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/studies\" ) ; String pages = driver . findElement ( By . cssSelector ( \".ae-stats\" ) ) . getText ( ) ; assertTrue ( pages . startsWith ( \"Showing ▁ 1\" ) ) ; } ", "comments": ["Test"], "method name": "test Page Stats"}
{"id": 474, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/admin/clear-index\" ) ; driver . get ( baseUrl + \"/studies/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 5 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"h2.alert\" ) ) ) ; driver . get ( baseUrl + \"/admin/reload-xml/\" ) ; assertTrue ( true ) ; } ", "comments": ["Test"], "method name": "test Clear Index"}
{"id": 473, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/studies/\" ) ; WebElement searchBox = driver . findElement ( By . id ( \"local-searchbox\" ) ) ; searchBox . click ( ) ; searchBox . sendKeys ( \"dna\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 5 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \".ac_inner\" ) ) ) ; List < WebElement > we = driver . findElements ( By . cssSelector ( \".ac_inner ▁ li\" ) ) ; assertTrue ( we . get ( 3 ) . getText ( ) . startsWith ( \"DNA\" ) ) ; } * / ", "comments": [" Does not work with <input type=\"search\"...", "Test"], "method name": "test Auto Complete"}
{"id": 476, "website": "bigquery", "code": " public void function ( String text ) throws Throwable { String url = baseUrl + page + \"?\" + queryString ; for ( WebDriver driver : driversManager . getDrivers ( ) ) { driver . get ( url ) ; Assert . assertEquals ( text , driver . findElement ( By . cssSelector ( \"h1\" ) ) . getText ( ) ) ; } } ", "comments": ["Then(\"^the header should read \\\"([^\\\"]*)\\\"$\")"], "method name": "the header should read"}
{"id": 475, "website": "bigquery", "code": " public void function ( ) throws Exception { int totalDocs = 100 ; driver . get ( baseUrl + \"/admin/clear-index\" ) ; StringBuffer sb = new StringBuffer ( \"", "comments": ["Test"], "method name": "test Large Index"}
{"id": 478, "website": "bigquery", "code": " public void function ( ) { driver . get ( serverUrl + applicationPath ) ; CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage cloudsettingsview = reviewsPage . navigateToSettings ( ) ; cloudsettingsview . switchToHanaCloudRemote ( ) ; cloudsettingsview . pressOk ( ) ; cloudsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( \"Default ▁ category ▁ does ▁ not ▁ match\" , \"All ▁ Categories\" , reviewsPage . getCategory ( ) ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } assertEquals ( \"Default ▁ product ▁ does ▁ not ▁ match\" , \"10\\\" ▁ Portable ▁ DVD ▁ player\" , reviewsPage . getProduct ( ) ) ; assertFalse ( \"First ▁ reviewer ▁ name ▁ is ▁ empty\" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( \"First ▁ review ▁ comment ▁ is ▁ empty\" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( \"Speakers\" ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . selectProduct ( \"Sound ▁ Booster\" ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"review-comment-text-area-id\" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( \"Good ▁ performance ▁ (\" + reviewId + \")\" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( \"James\" ) ; reviewCreationPage . setLastName ( \"Field\" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( \"James ▁ Field\" , reviewsPage . getFirstReviewer ( ) ) ; } ", "comments": [" TODO: Enable as soon as ESPM OData service bug for reviews case is fixed", " @Test"], "method name": "test Create Review With Cloud Backend"}
{"id": 477, "website": "bigquery", "code": " public void function ( ) { System . out . println ( \"Opening ▁ page ▁ \" + serverUrl + applicationPath ) ; driver . get ( serverUrl + applicationPath ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewsPage reviewsPage = CustomerReviewsPage . create ( driver ) ; SettingsPage abapsettingsview = reviewsPage . navigateToSettings ( ) ; abapsettingsview . switchToAbapBackend ( ) ; abapsettingsview . pressOk ( ) ; abapsettingsview . confirmRefresh ( ) ; try { Thread . sleep ( 5000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . waitForPageAfterRefresh ( ) ; assertEquals ( \"Default ▁ category ▁ does ▁ not ▁ match\" , \"All ▁ Categories\" , reviewsPage . getCategory ( ) ) ; try { Thread . sleep ( 400 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } assertEquals ( \"Default ▁ product ▁ does ▁ not ▁ match\" , \"10\\\" ▁ Portable ▁ DVD ▁ player\" , reviewsPage . getProduct ( ) ) ; assertFalse ( \"First ▁ reviewer ▁ name ▁ is ▁ empty\" , reviewsPage . getFirstReviewer ( ) . isEmpty ( ) ) ; assertFalse ( \"First ▁ review ▁ comment ▁ is ▁ empty\" , reviewsPage . getFirstReviewComment ( ) . isEmpty ( ) ) ; reviewsPage . selectCategory ( \"Speakers\" ) ; try { Thread . sleep ( 4000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } reviewsPage . selectProduct ( \"Sound ▁ Booster\" ) ; try { Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } CustomerReviewCreationPage reviewCreationPage = reviewsPage . writeCustomerReview ( ) ; WebElement myDynamicElement = ( new WebDriverWait ( driver , 20 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"review-comment-text-area-id\" ) ) ) ; String reviewId = UUID . randomUUID ( ) . toString ( ) ; reviewCreationPage . writeReviewComments ( \"Good ▁ performance ▁ (\" + reviewId + \")\" ) ; reviewCreationPage . setReviewRating ( 3 ) ; reviewCreationPage . setFirstName ( \"James\" ) ; reviewCreationPage . setLastName ( \"Field\" ) ; reviewsPage = reviewCreationPage . submitAndConfirmReview ( ) ; assertEquals ( 3 , reviewsPage . getFirstReviewRating ( ) ) ; assertTrue ( reviewsPage . getFirstReviewComment ( ) . contains ( reviewId ) ) ; assertEquals ( \"James ▁ Field\" , reviewsPage . getFirstReviewer ( ) ) ; } ", "comments": ["Test"], "method name": "test Create Review With Abap Backend"}
{"id": 479, "website": "bigquery", "code": " private void function ( ) { urlQueue . push ( \"\" ) ; urlQueue . poll ( ) ; inspectPage ( ) ; String nextPath = urlQueue . poll ( ) ; while ( nextPath != null ) { driver . get ( baseUrl + nextPath ) ; inspectPage ( ) ; nextPath = urlQueue . poll ( ) ; } } ", "comments": [], "method name": "inspect All Pages"}
{"id": 481, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"login\" ) ; driver . findElement ( By . name ( \"j_username\" ) ) . sendKeys ( \"john\" ) ; driver . findElement ( By . name ( \"j_password\" ) ) . sendKeys ( \"welcome1\" ) ; driver . findElement ( By . tagName ( \"form\" ) ) . submit ( ) ; String currentUrl = driver . getCurrentUrl ( ) ; assertEquals ( baseUrl , currentUrl ) ; } ", "comments": ["Test"], "method name": "test Correct Login"}
{"id": 480, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"My ▁ First ▁ Film\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"2014\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"120\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"120\" ) ; driver . findElement ( By . id ( \"own_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"seen_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Film"}
{"id": 483, "website": "bigquery", "code": " public void function ( String title , String url ) throws Throwable { Init . getDriver ( ) . navigate ( ) . to ( url ) ; Init . getPage ( title ) ; } ", "comments": ["Дано(\"^пользователь находится на странице \\\"(.*?)\\\" \\\"(.*?)\\\"$\")"], "method name": "пользователь находится на странице"}
{"id": 484, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"simpleTest.html\" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( \"fish\" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain"}
{"id": 482, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"login\" ) ; driver . findElement ( By . name ( \"j_username\" ) ) . sendKeys ( \"john\" ) ; driver . findElement ( By . name ( \"j_password\" ) ) . sendKeys ( \"john\" ) ; driver . findElement ( By . tagName ( \"form\" ) ) . submit ( ) ; int size = driver . findElements ( By . id ( \"login-error\" ) ) . size ( ) ; assertEquals ( 1 , size ) ; } ", "comments": ["Test"], "method name": "test Incorrect Login"}
{"id": 487, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({FIREFOX, IE, CHROME, SELENESE})"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 486, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"animals\" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" , \"/common/animals\" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Cookie Integrity"}
{"id": 488, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": [], "method name": "open Main Page"}
{"id": 489, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( url ) ; } ", "comments": ["Override"], "method name": "open Login Page"}
{"id": 491, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 492, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 490, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 493, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrlUkrNet ) ; driver . findElement ( By . id ( \"login\" ) ) . sendKeys ( \"ate569@ukr.net\" ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"US!pf.avg\" ) ; driver . findElement ( By . xpath ( \". // *[@id='login-form']/div[3]/button\" ) ) . click ( ) ; } ", "comments": [" ============= UKr.net ==================="], "method name": "Login Ukr Net"}
{"id": 494, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 495, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 485, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"\" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Get Cookie Does Not Retrive Beyond Current Domain"}
{"id": 496, "website": "bigquery", "code": " public void function ( URL url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( \"goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded\" , e ) ; return ; } } ", "comments": [" @param url", "            The URL.", "Override"], "method name": "go To Url"}
{"id": 498, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . id ( \"q\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"AAA\" ) ; try { assertTrue ( isElementPresent ( By . cssSelector ( \"img[alt=\\\"AAA\\\"]\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"q\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"CCC\" ) ; try { assertTrue ( isElementPresent ( By . xpath ( \" // *[@id='results']/div[1]\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Film Search"}
{"id": 499, "website": "bigquery", "code": " public WebDriverController function ( String url ) { webDriver ( ) . get ( url ) ; return this ; } ", "comments": ["Override", "Monitor", "RetryFailure(retryCount=3)"], "method name": "go To Target Host"}
{"id": 501, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"111.111.111-11\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Signin Notificador"}
{"id": 497, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='content']/section/nav/ul/li[1]/div // img\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . xpath ( \" // *[@id='updateform']/table/tbody/tr[2]/td[2]/input\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"AAA\" ) ; driver . findElement ( By . name ( \"aka\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"aka\" ) ) . sendKeys ( \"BBB\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"2000\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"120\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"own_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"seen_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loaned_yes\" ) ) . click ( ) ; driver . findElement ( By . name ( \"loanname\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"loanname\" ) ) . sendKeys ( \"XXX\" ) ; driver . findElement ( By . name ( \"notes\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"notes\" ) ) . sendKeys ( \"Very ▁ good!\" ) ; driver . findElement ( By . name ( \"taglines\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"taglines\" ) ) . sendKeys ( \"AAA\" ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . sendKeys ( \"AAA\" ) ; driver . findElement ( By . name ( \"plots\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"plots\" ) ) . sendKeys ( \"AAA\" ) ; driver . findElement ( By . id ( \"text_languages_0\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"text_languages_0\" ) ) . sendKeys ( \"Russian\" ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . sendKeys ( \"No\" ) ; driver . findElement ( By . name ( \"audio\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"audio\" ) ) . sendKeys ( \"MP3\" ) ; driver . findElement ( By . name ( \"video\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"video\" ) ) . sendKeys ( \"MP4\" ) ; driver . findElement ( By . name ( \"country\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"country\" ) ) . sendKeys ( \"Russia\" ) ; driver . findElement ( By . name ( \"genres\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"genres\" ) ) . sendKeys ( \"AAA\" ) ; driver . findElement ( By . name ( \"director\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"director\" ) ) . sendKeys ( \"XYZ\" ) ; driver . findElement ( By . name ( \"writer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"writer\" ) ) . sendKeys ( \"QWE\" ) ; driver . findElement ( By . name ( \"producer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"producer\" ) ) . sendKeys ( \"ASD\" ) ; driver . findElement ( By . name ( \"music\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"music\" ) ) . sendKeys ( \"ZXC\" ) ; driver . findElement ( By . name ( \"cast\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"cast\" ) ) . sendKeys ( \"RTY\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . xpath ( \" // img[@alt='Remove']\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . xpath ( \" // img[@alt='Remove']\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; } ", "comments": ["Test"], "method name": "test Add Film"}
{"id": 503, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"222.222.222-22\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Signin Notificador"}
{"id": 500, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"111.111.111-11\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='dashboard-menu']/li[2]/a/span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"obito-tipoObito\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"obito-tipoObito\" ) ) ) . selectByVisibleText ( \"PCR\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"PCR\\\"]\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"obito-paciente-documentoSocial-tipoDocumentoComFoto\" ) ) ) . selectByVisibleText ( \"RG\" ) ; driver . findElement ( By . id ( \"obito-paciente-documentoSocial-documento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-documentoSocial-documento\" ) ) . sendKeys ( \"3546545333\" ) ; driver . findElement ( By . id ( \"obito-paciente-nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-nome\" ) ) . sendKeys ( \"Notificacao ▁ de ▁ obito\" ) ; driver . findElement ( By . id ( \"obito-paciente-dataNascimento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-dataNascimento\" ) ) . sendKeys ( \"12/04/1985\" ) ; driver . findElement ( By . id ( \"obito-paciente-dataInternacao\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-dataInternacao\" ) ) . sendKeys ( \"10/08/2015\" ) ; driver . findElement ( By . cssSelector ( \"span.checked\" ) ) . click ( ) ; driver . findElement ( By . id ( \"obito-paciente-sexo:0\" ) ) . click ( ) ; driver . findElement ( By . id ( \"obito-paciente-nomeMae\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-nomeMae\" ) ) . sendKeys ( \"Mae ▁ do ▁ obito\" ) ; driver . findElement ( By . id ( \"obito-paciente-numeroSUS\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-numeroSUS\" ) ) . sendKeys ( \"156234434345\" ) ; driver . findElement ( By . id ( \"obito-paciente-numeroProntuario\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-paciente-numeroProntuario\" ) ) . sendKeys ( \"2564554643\" ) ; driver . findElement ( By . id ( \"descricaoComentario\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"descricaoComentario\" ) ) . sendKeys ( \"comentario ▁ 1\" ) ; driver . findElement ( By . id ( \"btn-next\" ) ) . click ( ) ; driver . findElement ( By . id ( \"obito-dataObito\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-dataObito\" ) ) . sendKeys ( \"13/08/2015\" ) ; driver . findElement ( By . id ( \"horarioObito\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"horarioObito\" ) ) . sendKeys ( \"10:21\" ) ; new Select ( driver . findElement ( By . id ( \"obito-setor\" ) ) ) . selectByVisibleText ( \"CIRURGIA ▁ GERAL\" ) ; new Select ( driver . findElement ( By . id ( \"obito-corpoEncaminhamento\" ) ) ) . selectByVisibleText ( \"IML\" ) ; driver . findElement ( By . xpath ( \" // div[@id='uniform-obito-aptoDoacao:0']/span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"obito-aptoDoacao:0\" ) ) . click ( ) ; driver . findElement ( By . id ( \"obito-primeiraCausaMortis\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-primeiraCausaMortis\" ) ) . sendKeys ( \"causa ▁ 1\" ) ; driver . findElement ( By . id ( \"obito-segundaCausaMortis\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-segundaCausaMortis\" ) ) . sendKeys ( \"causa ▁ 2\" ) ; driver . findElement ( By . id ( \"obito-terceiraCausaMortis\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-terceiraCausaMortis\" ) ) . sendKeys ( \"causa ▁ 3\" ) ; driver . findElement ( By . id ( \"obito-quartaCausaMortis\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"obito-quartaCausaMortis\" ) ) . sendKeys ( \"causa ▁ 4\" ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Notificacao Obito"}
{"id": 502, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"333.333.333-33\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.settings.hidden-phone ▁ > ▁ a\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='dashboard-menu']/li[2]/a/span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"h4.aba-centralizada\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='analista-table_wrapper']/div/div/div[3]/a\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . sendKeys ( analista . getNome ( ) ) ; driver . findElement ( By . id ( \"senha\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"senha\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"confirmar-senha\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"confirmar-senha\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"cpf\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpf\" ) ) . sendKeys ( analista . getCpf ( ) ) ; driver . findElement ( By . id ( \"documentoSocial-documento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"documentoSocial-documento\" ) ) . sendKeys ( analista . getDocumentoSocial ( ) . getDocumento ( ) ) ; new Select ( driver . findElement ( By . id ( \"documentoSocial-tipoDocumentoComFoto\" ) ) ) . selectByVisibleText ( analista . getDocumentoSocial ( ) . getTipoDocumentoComFoto ( ) . name ( ) ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( analista . getEmail ( ) ) ; new Select ( driver . findElement ( By . name ( \"admin\" ) ) ) . selectByVisibleText ( \"Não\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-estado-id\" ) ) ) . selectByVisibleText ( analista . getEndereco ( ) . getEstado ( ) . getNome ( ) ) ; new Select ( driver . findElement ( By . id ( \"endereco-cidade-id\" ) ) ) . selectByVisibleText ( analista . getEndereco ( ) . getCidade ( ) . getNome ( ) ) ; new Select ( driver . findElement ( By . id ( \"endereco-bairro-id\" ) ) ) . selectByVisibleText ( analista . getEndereco ( ) . getBairro ( ) . getNome ( ) ) ; driver . findElement ( By . id ( \"endereco-logradouro\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-logradouro\" ) ) . sendKeys ( analista . getEndereco ( ) . getLogradouro ( ) ) ; driver . findElement ( By . id ( \"endereco-numero\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-numero\" ) ) . sendKeys ( analista . getEndereco ( ) . getNumero ( ) ) ; driver . findElement ( By . id ( \"endereco-complemento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-complemento\" ) ) . sendKeys ( analista . getEndereco ( ) . getComplemento ( ) ) ; driver . findElement ( By . id ( \"endereco-cep\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-cep\" ) ) . sendKeys ( analista . getEndereco ( ) . getCep ( ) ) ; driver . findElement ( By . id ( \"telefone-numero\" ) ) . sendKeys ( analista . getTelefone ( ) . getNumero ( ) ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Cadastro Analista"}
{"id": 505, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"555.555.555-55\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='dashboard-menu']/li[3]/a/span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@type='button']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . sendKeys ( \"cadastro ▁ de ▁ setor\" ) ; driver . findElement ( By . cssSelector ( \"button.btn-flat.default\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Cadastro Setor"}
{"id": 506, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"333.333.333-33\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Signin Notificador"}
{"id": 504, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"555.555.555-55\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.settings.hidden-phone ▁ > ▁ a\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='dashboard-menu']/li[2]/a/span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='dashboard-menu']/li[2]/a/span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='tabs']/li[3]/a/h4\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='captador-table_wrapper']/div/div/div[3]/a/i\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . sendKeys ( \"cadastro ▁ captador4\" ) ; driver . findElement ( By . id ( \"senha\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"senha\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"confirmar-senha\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"confirmar-senha\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"cpf\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpf\" ) ) . sendKeys ( \"182.180.980-12\" ) ; driver . findElement ( By . id ( \"documentoSocial-documento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"documentoSocial-documento\" ) ) . sendKeys ( \"3248728342039\" ) ; new Select ( driver . findElement ( By . id ( \"documentoSocial-tipoDocumentoComFoto\" ) ) ) . selectByVisibleText ( \"RG\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"cadastro@captador.com\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-estado-id\" ) ) ) . selectByVisibleText ( \"Espírito ▁ Santo\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-cidade-id\" ) ) ) . selectByVisibleText ( \"Serra\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-bairro-id\" ) ) ) . selectByVisibleText ( \"Chácara ▁ Parreiral\" ) ; driver . findElement ( By . id ( \"endereco-logradouro\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-logradouro\" ) ) . sendKeys ( \"rua\" ) ; driver . findElement ( By . id ( \"endereco-numero\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-numero\" ) ) . sendKeys ( \"84\" ) ; driver . findElement ( By . id ( \"endereco-complemento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-complemento\" ) ) . sendKeys ( \"casa\" ) ; driver . findElement ( By . id ( \"endereco-cep\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-cep\" ) ) . sendKeys ( \"32498-20\" ) ; driver . findElement ( By . id ( \"telefone-numero\" ) ) . sendKeys ( \"(27)2717-8186\" ) ; new Select ( driver . findElement ( By . id ( \"bancoOlhos-id\" ) ) ) . selectByVisibleText ( \"BANCO ▁ DE ▁ OLHOS ▁ 1\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Cadastro Captador"}
{"id": 507, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"555.555.555-55\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#dashboard-menu ▁ > ▁ li ▁ > ▁ a ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@type='button']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . sendKeys ( \"causa ▁ de ▁ nao ▁ doacao\" ) ; new Select ( driver . findElement ( By . id ( \"tipoNaoDoacao\" ) ) ) . selectByVisibleText ( \"PROBLEMAS_LOGISTICOS\" ) ; driver . findElement ( By . cssSelector ( \"button.btn-flat.default\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Cadastro Causa Nao Doacao"}
{"id": 510, "website": "bigquery", "code": " public void function ( ) { String url = getApiBaseUrl ( ) + \"oauth2/authorize?client_id=someclient&response_type=token\" ; getWebDriver ( ) . get ( url ) ; loginAtMujinaIfNeeded ( USER_ID ) ; giveUserConsentIfNeeded ( ) ; String pageSource = getWebDriver ( ) . getPageSource ( ) ; LOG . debug ( \"Response ▁ body ▁ is: ▁ \" + pageSource ) ; assertTrue ( \"Page ▁ should ▁ contain ▁ correct ▁ error ▁ message\" , pageSource . contains ( \"does ▁ not ▁ match ▁ one ▁ of ▁ the ▁ registered ▁ values\" ) ) ; assertFalse ( \"Page ▁ should ▁ not ▁ be ▁ a ▁ 500\" , pageSource . contains ( \"500\" ) ) ; } ", "comments": ["Test"], "method name": "no Redirect Uri Given"}
{"id": 509, "website": "bigquery", "code": " public void function ( ) throws Exception { OAuthService service = new ServiceBuilder ( ) . provider ( OpenConextApi20Implicit . class ) . apiKey ( OAUTH_KEY . concat ( UUID . randomUUID ( ) . toString ( ) ) ) . apiSecret ( OAUTH_SECRET . concat ( \"force_consent\" ) ) . callback ( OAUTH_CALLBACK_URL ) . scope ( OAUTH_OPENCONEXT_API_READ_SCOPE ) . build ( ) ; String authUrl = service . getAuthorizationUrl ( null ) ; LOG . debug ( \"Auth ▁ url: ▁ {}\" , authUrl ) ; getWebDriver ( ) . get ( authUrl ) ; loginAtMujinaIfNeeded ( USER_ID ) ; WebElement authorizeButton = getWebDriver ( ) . findElement ( By . id ( \"decline_terms_button\" ) ) ; authorizeButton . click ( ) ; URI uri = URI . create ( getWebDriver ( ) . getCurrentUrl ( ) ) ; LOG . debug ( \"URL ▁ is: ▁ \" + uri . toString ( ) ) ; LOG . debug ( \"Response ▁ body ▁ is: ▁ \" + getWebDriver ( ) . getPageSource ( ) ) ; callbackRequestFragment = uri . getFragment ( ) ; assertNotNull ( \"redirect ▁ URL ▁ should ▁ contain ▁ fragment.\" , callbackRequestFragment ) ; assertFalse ( \"redirect ▁ URL ▁ fragment ▁ should ▁ not ▁ contain ▁ access ▁ token\" , callbackRequestFragment . contains ( \"access_token=\" ) ) ; assertFalse ( \"redirect ▁ URL ▁ fragment ▁ should ▁ contain ▁ access ▁ token\" , callbackRequestFragment . contains ( \"access_token=\" ) ) ; } ", "comments": ["Test"], "method name": "implicit Grant With Deny"}
{"id": 508, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/sincap/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"555.555.555-55\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"abc123\" ) ; driver . findElement ( By . id ( \"botaoLogin\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='dashboard-menu']/li[4]/a/span\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='pad-wrapper']/div/div/a\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . sendKeys ( \"cadastro ▁ de ▁ hospital\" ) ; driver . findElement ( By . id ( \"sigla\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"sigla\" ) ) . sendKeys ( \"cdh\" ) ; driver . findElement ( By . id ( \"fantasia\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"fantasia\" ) ) . sendKeys ( \"hospital ▁ teste\" ) ; driver . findElement ( By . id ( \"cnes\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cnes\" ) ) . sendKeys ( \"564432\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"hospital@teste.com\" ) ; new Select ( driver . findElement ( By . id ( \"bancoOlhos-id\" ) ) ) . selectByVisibleText ( \"BANCO ▁ DE ▁ OLHOS ▁ 1\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-estado-id\" ) ) ) . selectByVisibleText ( \"Espírito ▁ Santo\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-cidade-id\" ) ) ) . selectByVisibleText ( \"Vitória\" ) ; new Select ( driver . findElement ( By . id ( \"endereco-bairro-id\" ) ) ) . selectByVisibleText ( \"República\" ) ; driver . findElement ( By . id ( \"endereco-logradrouro\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-logradrouro\" ) ) . sendKeys ( \"rua\" ) ; driver . findElement ( By . id ( \"endereco-numero\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-numero\" ) ) . sendKeys ( \"45\" ) ; driver . findElement ( By . id ( \"endereco-complemento\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-complemento\" ) ) . sendKeys ( \"complemento\" ) ; driver . findElement ( By . id ( \"endereco-cep\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"endereco-cep\" ) ) . sendKeys ( \"38198188\" ) ; driver . findElement ( By . id ( \"telefone-numero\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"telefone-numero\" ) ) . sendKeys ( \"273217819\" ) ; new Select ( driver . findElement ( By . id ( \"lsetores\" ) ) ) . selectByVisibleText ( \"CLINICA ▁ MEDICA\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Cadastro Hospital"}
{"id": 513, "website": "bigquery", "code": " public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = new DefaultHttpProxyServer ( port ) ; proxyServer . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( \"localhost:%d\" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = \"http: // www.yahoo.com/\" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } ", "comments": ["@Test"], "method name": "test With Web Driver"}
{"id": 512, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/customer/index\" ) ; driver . findElement ( By . cssSelector ( \"span\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"ADD ▁ NEW\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"accountTypeId\" ) ) ) . selectByVisibleText ( \"Direct ▁ Customer\" ) ; driver . findElement ( By . linkText ( \"SELECT\" ) ) . click ( ) ; driver . findElement ( By . id ( \"user.userName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"user.userName\" ) ) . sendKeys ( \"Test ▁ Customer1\" ) ; driver . findElement ( By . linkText ( \"SAVE ▁ CHANGES\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; driver . findElement ( By . linkText ( \"Customers\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"td ▁ > ▁ a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"CREATE ▁ ORDER\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ui-id-8\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"td ▁ > ▁ a.cell.double ▁ >strong\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#change--3-update-form ▁ > ▁ div.btn-box ▁ > ▁ a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"SAVE ▁ CHANGES\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Orders\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ >strong\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"GENERATE ▁ INVOICE\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Customers\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"MAKE ▁ PAYMENT\" ) ) . click ( ) ; driver . findElement ( By . name ( \"invoiceId\" ) ) . click ( ) ; driver . findElement ( By . id ( \"paymentMethod_0.processingOrder\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"paymentMethod_0.processingOrder\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . xpath ( \"( // input[@type='text'])[5]\" ) ) . clear ( ) ; driver . findElement ( By . xpath ( \"( // input[@type='text'])[5]\" ) ) . sendKeys ( \"Rahul\" ) ; driver . findElement ( By . xpath ( \"( // input[@type='text'])[6]\" ) ) . clear ( ) ; driver . findElement ( By . xpath ( \"( // input[@type='text'])[6]\" ) ) . sendKeys ( \"4111111111111152\" ) ; driver . findElement ( By . xpath ( \"( // input[@type='text'])[7]\" ) ) . clear ( ) ; driver . findElement ( By . xpath ( \"( // input[@type='text'])[7]\" ) ) . sendKeys ( \"12/2020\" ) ; driver . findElement ( By . linkText ( \"REVIEW ▁ PAYMENT\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"MAKE ▁ PAYMENT\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Payments\" ) ) . click ( ) ; Assert . assertEquals ( driver . getPageSource ( ) . contains ( \"Test ▁ Customer1\" ) , true ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Reports\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // strong[text()='Invoice ▁ Reports']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // strong[text()='Total ▁ Amount ▁ Invoiced']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"start_date\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"start_date\" ) ) . sendKeys ( \"10/8/2015\" ) ; driver . findElement ( By . id ( \"end_date\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"end_date\" ) ) . sendKeys ( \"10/8/2015\" ) ; new Select ( driver . findElement ( By . id ( \"period\" ) ) ) . selectByVisibleText ( \"Day\" ) ; new Select ( driver . findElement ( By . id ( \"format\" ) ) ) . selectByVisibleText ( \"View ▁ as ▁ HTML\" ) ; driver . findElement ( By . linkText ( \"RUN ▁ REPORT\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"format\" ) ) ) . selectByVisibleText ( \"Adobe ▁ PDF\" ) ; driver . findElement ( By . linkText ( \"RUN ▁ REPORT\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"format\" ) ) ) . selectByVisibleText ( \"Excel\" ) ; driver . findElement ( By . linkText ( \"RUN ▁ REPORT\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test S141 Test"}
{"id": 514, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Has A Header"}
{"id": 515, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 516, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 517, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 518, "website": "bigquery", "code": " public void function ( String url , String browserName , String pageElementFinderName ) { browser = BrowserProvider . provideBrowserByName ( browserName ) ; finder = IndexPageElementFinderProvider . provideIndexPageElementFinderByName ( pageElementFinderName , browser ) ; wait = new FluentWait < WebDriver > ( browser ) . withTimeout ( 30 , TimeUnit . SECONDS ) . pollingEvery ( 1 , TimeUnit . SECONDS ) . ignoring ( StaleElementReferenceException . class ) ; browser . get ( url ) ; deleteAllItems ( ) ; } ", "comments": ["BeforeTest", "Parameters({ \"url\", \"browser\", \"pageElementFinder\" })"], "method name": "prepare Browser And Page"}
{"id": 519, "website": "bigquery", "code": " public void function ( ) throws Exception { logger . info ( \"Starting ▁ web ▁ service ▁ response ▁ testing...\" ) ; webDriver . manage ( ) . window ( ) . maximize ( ) ; webDriver . get ( baseUrl ) ; loginPage . logoutWithOutLink ( ) ; loginPage . login ( loginName0 , loginPassword0 , false ) ; StringBuilder urlTest1 = new StringBuilder ( baseUrl ) ; urlTest1 . append ( \"/ajax\" ) ; webDriver . get ( urlTest1 . toString ( ) ) ; JavascriptExecutor js = ( JavascriptExecutor ) webDriver ; js . executeScript ( \"document.getElementById('ajaxGet').setAttribute('style', ▁ 'display: ▁ block');\" ) ; webDriverWait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"ajaxGet\" ) , \"true\" ) ) ; String response = webDriver . findElement ( By . id ( \"ajaxGet\" ) ) . getText ( ) ; Assert . assertEquals ( \"true\" , response ) ; Thread . sleep ( 2000 ) ; loginPage . logoutWithOutLink ( ) ; logger . info ( \"testing ▁ web ▁ service ▁ complete...\" ) ; } ", "comments": ["Test"], "method name": "test Web Service Response"}
{"id": 520, "website": "bigquery", "code": " public void function ( ) { logger . info ( \"Selenium ▁ testing ▁ logout ▁ starting...\" ) ; webDriver . get ( baseUrl + \"/user/logout\" ) ; logger . info ( \"Selenium ▁ testing ▁ logout ▁ complete...\" ) ; } ", "comments": [" For use on any page, whether the logout link exists or not.  This is useful for Selenium based tests that want", " to reset conditions like logins before completing execution."], "method name": "logout With Out Link"}
{"id": 522, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 521, "website": "bigquery", "code": " private String function ( String url ) throws Exception { System . out . println ( \"--->crawlUsenix_Simple_Page..............\" ) ; driver . get ( url ) ; try { org . openqa . selenium . WebElement element = driver . findElement ( By . xpath ( \" // body\" ) ) ; String abs = \"\" ; String [ ] elements = element . getText ( ) . split ( \" \\n \" ) ; int length = element . getText ( ) . split ( \" \\n \" ) . length ; boolean flag = false ; for ( int i = 0 ; i < length ; i ++ ) { if ( \"Abstract\" . equals ( elements [ i ] . trim ( ) ) ) { flag = true ; } if ( elements [ i ] . trim ( ) . startsWith ( \"Download ▁ the ▁ full ▁ text\" ) ) { flag = false ; break ; } if ( flag ) { abs += elements [ i ] . trim ( ) ; } } if ( ! flag ) return \"\" . equals ( abs ) ? null : abs . replaceFirst ( \"Abstract\" , \"\" ) ; } catch ( NoSuchElementException e ) { throw new Exception ( \"Abstract ▁ Not ▁ Found\" ) ; } return null ; } ", "comments": [], "method name": "crawlUsenix Simple Page"}
{"id": 523, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 525, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String username = \"username\" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( \"admin\" ) ; String password = \"password\" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( \".button>div>a>img\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".required.error\" ) ) ) ; driver . findElement ( By . cssSelector ( \"input[name='name']\" ) ) . clear ( ) ; driver . findElement ( By . cssSelector ( \"input[name='year']\" ) ) . clear ( ) ; driver . findElements ( By . cssSelector ( \"input[type='submit']\" ) ) . get ( 1 ) . click ( ) ; AssertJUnit . assertTrue ( \"Поле ▁ год ▁ не ▁ заполнено\" , driver . findElement ( By . cssSelector ( \"label[for='year']\" ) ) . getText ( ) . equals ( \"This ▁ field ▁ is ▁ required\" ) ) ; AssertJUnit . assertTrue ( \"Поле ▁ название ▁ фильма ▁ не ▁ заполнено\" , driver . findElement ( By . cssSelector ( \"label[for='name']\" ) ) . getText ( ) . equals ( \"This ▁ field ▁ is ▁ required\" ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "add In Sum Film Not"}
{"id": 526, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String username = \"username\" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( \"admin\" ) ; String password = \"password\" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( \".button>div>a>img\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".required.error\" ) ) ) ; driver . findElement ( By . cssSelector ( \"input[name='name']\" ) ) . sendKeys ( \"NewFilm2\" ) ; driver . findElement ( By . cssSelector ( \"input[name='year']\" ) ) . clear ( ) ; driver . findElements ( By . cssSelector ( \"input[type='submit']\" ) ) . get ( 1 ) . click ( ) ; AssertJUnit . assertTrue ( \"Поле ▁ год ▁ не ▁ заполнено\" , driver . findElement ( By . cssSelector ( \"label[for='year']\" ) ) . getText ( ) . equals ( \"This ▁ field ▁ is ▁ required\" ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "add In Sum Film Not Year"}
{"id": 524, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String username = \"username\" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( \"admin\" ) ; String password = \"password\" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( \".center>nav>ul>li>a\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".movie_box\" ) ) ) ; int kol = driver . findElements ( By . cssSelector ( \".title\" ) ) . size ( ) ; String elmovi = driver . findElements ( By . cssSelector ( \".movie_box\" ) ) . get ( 0 ) . getAttribute ( \"id\" ) ; driver . findElements ( By . cssSelector ( \".title\" ) ) . get ( 0 ) . click ( ) ; driver . findElement ( By . linkText ( \"Remove\" ) ) . click ( ) ; driver . switchTo ( ) . alert ( ) . accept ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".movie_box\" ) ) ) ; Assert . assertEquals ( kol - 1 , driver . findElements ( By . cssSelector ( \".title\" ) ) . size ( ) ) ; AssertJUnit . assertFalse ( \"Фильм ▁ удален\" , driver . findElements ( By . cssSelector ( \".movie_box\" ) ) . get ( 0 ) . getAttribute ( \"id\" ) . equals ( elmovi ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "delet Sum Film"}
{"id": 528, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 529, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 527, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String username = \"username\" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( \"admin\" ) ; String password = \"password\" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( \".button>div>a>img\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".required.error\" ) ) ) ; driver . findElement ( By . cssSelector ( \"input[name='year']\" ) ) . sendKeys ( \"2010\" ) ; driver . findElements ( By . cssSelector ( \"input[type='submit']\" ) ) . get ( 1 ) . click ( ) ; AssertJUnit . assertTrue ( \"Поле ▁ название ▁ фильма ▁ не ▁ заполнено\" , driver . findElement ( By . cssSelector ( \"label[for='name']\" ) ) . getText ( ) . equals ( \"This ▁ field ▁ is ▁ required\" ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "add In Sum Film Not Title"}
{"id": 531, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; AssertJUnit . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Has A Header"}
{"id": 532, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String username = \"username\" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( \"admin\" ) ; String password = \"password\" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"sdflksdhgsd\" ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( Keys . ENTER ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".content\" ) ) ) ; Assert . assertTrue ( driver . findElement ( By . cssSelector ( \".content\" ) ) . getText ( ) . equals ( \"No ▁ movies ▁ where ▁ found.\" ) , \"Нет ▁ такого ▁ фильма\" ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "searsh Film Null"}
{"id": 533, "website": "bigquery", "code": " public void function ( ) throws Exception { app . getNavigationHelper ( ) . gotoAddFilmPage ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".required.error\" ) ) ) ; driver . findElement ( By . cssSelector ( \"input[name='name']\" ) ) . sendKeys ( \"FilmNew\" ) ; driver . findElement ( By . cssSelector ( \"input[name='year']\" ) ) . sendKeys ( \"2010\" ) ; driver . findElements ( By . cssSelector ( \"input[type='submit']\" ) ) . get ( 1 ) . click ( ) ; String elurl = \"movie_\" + driver . getCurrentUrl ( ) . substring ( 39 ) ; driver . findElements ( By . cssSelector ( \".center>nav>ul>li>a\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".title\" ) ) ) ; Assert . assertTrue ( driver . findElement ( By . id ( elurl ) ) . getAttribute ( \"id\" ) . equals ( elurl ) , \"Нет ▁ такого ▁ идентифекатора ▁ фильма\" ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "add In Sum Film"}
{"id": 534, "website": "bigquery", "code": " public void function ( ) throws Exception { final List < JavaScriptError > expectedErrors = Arrays . asList ( errorWithNestedFrameHtml , errorSimpleHtml ) ; final WebDriver driver = buildFFDriver ( ) ; driver . get ( urlWithNestedFrameHtml ) ; final List < JavaScriptError > jsErrors = JavaScriptError . readErrors ( driver ) ; assertEquals ( expectedErrors . toString ( ) , jsErrors . toString ( ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "error In Nested Frame"}
{"id": 530, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; String username = \"username\" ; driver . findElement ( By . id ( username ) ) . clear ( ) ; driver . findElement ( By . id ( username ) ) . sendKeys ( \"admin\" ) ; String password = \"password\" ; driver . findElement ( By . name ( password ) ) . clear ( ) ; driver . findElement ( By . name ( password ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElements ( By . cssSelector ( \".button>div>a>img\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".required.error\" ) ) ) ; driver . findElement ( By . cssSelector ( \"input[name='name']\" ) ) . sendKeys ( \"FilmForSearsh\" ) ; driver . findElement ( By . cssSelector ( \"input[name='year']\" ) ) . sendKeys ( \"2016\" ) ; driver . findElements ( By . cssSelector ( \"input[type='submit']\" ) ) . get ( 1 ) . click ( ) ; driver . findElements ( By . cssSelector ( \".center>nav>ul>li>a\" ) ) . get ( 0 ) . click ( ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".movie_box\" ) ) ) ; int kol = driver . findElements ( By . cssSelector ( \".title\" ) ) . size ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"Film\" ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( Keys . ENTER ) ; ( new WebDriverWait ( driver , 30 , 1 ) ) . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"results\" ) ) ) ; if ( driver . findElements ( By . cssSelector ( \".title\" ) ) . size ( ) < kol ) { Assert . assertTrue ( driver . findElement ( By . cssSelector ( \".title\" ) ) . getText ( ) . equals ( \"FilmForSearsh\" ) , \"Такого ▁ фильма ▁ нет\" ) ; } else Assert . fail ( \"Количество ▁ фильмов ▁ осталось ▁ прежним\" ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "searsh Film Ok"}
{"id": 535, "website": "bigquery", "code": " public void function ( ) throws Exception { final List < JavaScriptError > expectedErrors = Arrays . asList ( errorPopupHtml ) ; final WebDriver driver = buildFFDriver ( ) ; driver . get ( urlWithPopupHtml ) ; driver . findElement ( By . tagName ( \"button\" ) ) . click ( ) ; final List < JavaScriptError > jsErrors = JavaScriptError . readErrors ( driver ) ; assertEquals ( expectedErrors . toString ( ) , jsErrors . toString ( ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "error In Popup"}
{"id": 536, "website": "bigquery", "code": " public void function ( ) throws Exception { final List < JavaScriptError > expectedErrors = Arrays . asList ( errorExternalJs ) ; final WebDriver driver = buildFFDriver ( ) ; driver . get ( urlWithExternalJs ) ; final List < JavaScriptError > jsErrors = JavaScriptError . readErrors ( driver ) ; assertEquals ( expectedErrors . toString ( ) , jsErrors . toString ( ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "error In External JS"}
{"id": 537, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 538, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 540, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 539, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 541, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 542, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 544, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 545, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 543, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 546, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 547, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE, QTWEBKIT},"], "method name": "handle Form With Javascript Action"}
{"id": 548, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 550, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 549, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 551, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 552, "website": "bigquery", "code": " public void function ( ) { String url = \"qtwidget: // TypingTestWidget\" ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"result\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 554, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 553, "website": "bigquery", "code": " public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = \"qtwidget: // TypingTestWidget\" ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"result\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 555, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE, QTWEBKIT})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 557, "website": "bigquery", "code": " public function ( String redmineUrl ) { this . redmineURL = redmineUrl ; aDriver = new FirefoxDriver ( ) ; aDriver . get ( redmineUrl ) ; wait = new WebDriverWait ( aDriver , 10 ) ; } ", "comments": [], "method name": "Red Mine GUI"}
{"id": 556, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 559, "website": "bigquery", "code": " private void function ( ) { driver . get ( baseUrl + \"/php4dvd/\" ) ; loginPage = PageFactory . initElements ( driver , LoginPage . class ) ; somePage = PageFactory . initElements ( driver , InternalPage . class ) ; } ", "comments": [], "method name": "go To Main Page"}
{"id": 558, "website": "bigquery", "code": " public void function ( User aUser , Project aProject , List < Role > roles ) { String urlForProjectMembership = redmineURL + String . format ( \"/users/%d/edit?tab=memberships\" , aUser . getId ( ) ) ; aDriver . get ( urlForProjectMembership ) ; WebElement addButton = wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"div#tab-content-memberships ▁ form ▁ input[type='submit']\" ) ) ) ; Select projects = new Select ( aDriver . findElement ( By . id ( \"membership_project_id\" ) ) ) ; projects . selectByValue ( String . valueOf ( aProject . getId ( ) ) ) ; for ( Role aRole : roles ) { WebElement roleCheckBox = aDriver . findElement ( By . cssSelector ( \"input#membership_role_ids_[value='\" + aRole . getId ( ) + \"']\" ) ) ; if ( ! roleCheckBox . isSelected ( ) ) { roleCheckBox . click ( ) ; } } addButton . click ( ) ; } ", "comments": [], "method name": "allocate User To Project And Roles"}
{"id": 561, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\\\s\\\\S]$\" ) ) ; } ", "comments": ["Test"], "method name": "test Log In Out"}
{"id": 511, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/login/auth\" ) ; driver . findElement ( By . id ( \"j_username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"j_password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"j_password\" ) ) . sendKeys ( \"123qwe\" ) ; WebElement selectCompany = driver . findElement ( By . id ( \"j_client_id\" ) ) ; List < WebElement > companies = selectCompany . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : companies ) { if ( \"Prancing ▁ Pony\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . get ( baseUrl + \"/product/editCategory?add=true\" ) ; driver . findElement ( By . id ( \"description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"description\" ) ) . sendKeys ( \"Test ▁ Category\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.active ▁ > ▁ a ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"li.active ▁ > ▁ a ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.edit ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"description\" ) ) . sendKeys ( \"New ▁ Test ▁ Category\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"#column2 ▁ > ▁ div.btn-box ▁ > ▁ a.submit.add ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"product.number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.number\" ) ) . sendKeys ( \"Test ▁ Code\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( \"img[alt='remove']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"product.descriptions[0].content\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.descriptions[0].content\" ) ) . sendKeys ( \"Test ▁ Code ▁ Description\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"li.active ▁ > ▁ a ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"#column2 ▁ > ▁ div.btn-box ▁ > ▁ a.submit.add ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"img[alt='remove']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"product.descriptions[0].content\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.descriptions[0].content\" ) ) . sendKeys ( \"Test ▁ Code ▁ Description ▁ 1\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( \"product.number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.number\" ) ) . sendKeys ( \"Test ▁ Code ▁ 1\" + new Date ( ) . getSeconds ( ) ) ; WebElement select = driver . findElement ( By . id ( \"model.0.type\" ) ) ; List < WebElement > priceModelOptions = select . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : priceModelOptions ) { if ( \"Metered\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( \"model.0.rateAsDecimal\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"model.0.rateAsDecimal\" ) ) . sendKeys ( \"12.00\" ) ; WebElement currencyCode = driver . findElement ( By . id ( \"model.0.currencyId\" ) ) ; List < WebElement > currencyOptions = currencyCode . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : currencyOptions ) { if ( \"United ▁ States ▁ Dollar\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Products\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#category-2400 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"#product-3200 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"#column2 ▁ > ▁ div.btn-box ▁ > ▁ a.submit.edit ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"product.number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.number\" ) ) . sendKeys ( \"New ▁ Test ▁ Code\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( \"product.descriptions[0].content\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.descriptions[0].content\" ) ) . sendKeys ( \"New ▁ Test ▁ Code ▁ Description ▁ \" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( \"product.percentageAsDecimal\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"product.percentageAsDecimal\" ) ) . sendKeys ( \"15\" ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Customers\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a[href='/jbilling/customer/edit']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"user.userName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"user.userName\" ) ) . sendKeys ( \"Ashish\" + new Date ( ) . getSeconds ( ) ) ; driver . findElement ( By . id ( \"newPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"newPassword\" ) ) . sendKeys ( \"12345\" ) ; driver . findElement ( By . id ( \"verifiedPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"verifiedPassword\" ) ) . sendKeys ( \"12345\" ) ; driver . findElement ( By . id ( \"contact-2.email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.email\" ) ) . sendKeys ( \"ashishs@360logica.com\" ) ; WebElement countryCode = driver . findElement ( By . id ( \"contact-2.countryCode\" ) ) ; List < WebElement > countryCodeOptions = countryCode . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : countryCodeOptions ) { if ( \"India\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.edit ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( \"contact-2.email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.email\" ) ) . sendKeys ( \"ashishs@gmail.com\" ) ; driver . findElement ( By . id ( \"contact-2.address1\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.address1\" ) ) . sendKeys ( \"Jaipur\" ) ; driver . findElement ( By . id ( \"contact-2.address2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.address2\" ) ) . sendKeys ( \"Elements ▁ Mall\" ) ; driver . findElement ( By . id ( \"contact-2.stateProvince\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.stateProvince\" ) ) . sendKeys ( \"Rajasthan\" ) ; driver . findElement ( By . id ( \"contact-2.city\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.city\" ) ) . sendKeys ( \"Jaipur\" ) ; driver . findElement ( By . id ( \"contact-2.postalCode\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"contact-2.postalCode\" ) ) . sendKeys ( \"302021\" ) ; driver . findElement ( By . cssSelector ( \"a.btn-open ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( \"creditCard.name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"creditCard.name\" ) ) . sendKeys ( \"Ashish\" ) ; driver . findElement ( By . id ( \"creditCard.number\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"creditCard.number\" ) ) . sendKeys ( \"4111111111111152\" ) ; driver . findElement ( By . id ( \"expiryMonth\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"expiryMonth\" ) ) . sendKeys ( \"12\" ) ; driver . findElement ( By . id ( \"expiryYear\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"expiryYear\" ) ) . sendKeys ( \"2020\" ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.submit.order ▁ > ▁ span\" ) ) . click ( ) ; WebElement selectOrder = driver . findElement ( By . id ( \"period\" ) ) ; List < WebElement > order = selectOrder . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : order ) { if ( \"Monthly\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } WebElement selectTypeid = driver . findElement ( By . id ( \"billingTypeId\" ) ) ; List < WebElement > typeid = selectTypeid . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : typeid ) { if ( \"pre ▁ paid\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } WebElement selectStatusid = driver . findElement ( By . id ( \"statusId\" ) ) ; List < WebElement > statusid = selectStatusid . findElements ( By . tagName ( \"option\" ) ) ; for ( WebElement option : statusid ) { if ( \"Active\" . equals ( option . getText ( ) ) ) { option . click ( ) ; break ; } } driver . findElement ( By . id ( \"activeSince\" ) ) . click ( ) ; driver . findElement ( By . id ( \"activeSince\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"activeSince\" ) ) . sendKeys ( \"01/01/2010\" ) ; driver . findElement ( By . xpath ( \" // form[@id='order-details-form']/div/div[4]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Products')]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"filterBy\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"filterBy\" ) ) . sendKeys ( \"New ▁ Test ▁ Code\" ) ; driver . findElement ( By . cssSelector ( \"strong\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.submit.save ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.submit.order ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.payment ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( \"processNow\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"a.submit.payment ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.payment ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Unlink\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[2]\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.submit.delete ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[4]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Invoices\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( \"a.submit.delete ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[4]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='navigation']/ul/li[8]/a/span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Orders\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( \"a.submit.delete ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[2]\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Products\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"#category-2400 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( \"#product-3200 ▁ > ▁ td ▁ > ▁ a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( \"a.submit.delete ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[6]\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Customers\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . cssSelector ( \"a.cell.double ▁ > ▁ strong\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( \"a.submit.delete ▁ > ▁ span\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[2]\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . linkText ( \"Logout\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; } ", "comments": ["Test"], "method name": "test Jbilling Sanity Test"}
{"id": 562, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\\\s\\\\S]$\" ) ) ; } ", "comments": ["Test"], "method name": "test Log In Out"}
{"id": 563, "website": "bigquery", "code": " private void function ( ) { driver . get ( baseUrl + \"/php4dvd/\" ) ; } ", "comments": [], "method name": "go To Main Page"}
{"id": 564, "website": "bigquery", "code": " private void function ( ) { driver . get ( baseUrl + \"/php4dvd/\" ) ; } ", "comments": [], "method name": "go To Main Page"}
{"id": 565, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"conts/web/view/tutorial/interacting-with-controllers\" ; driver . get ( url ) ; assertionView . assertView ( \"tutorial13\" , null , HIDE_ELEMENTS ) ; } ", "comments": ["Test"], "method name": "test Capture Tutorial13"}
{"id": 567, "website": "bigquery", "code": " private void function ( String url ) { driver . navigate ( ) . to ( url ) ; } ", "comments": [], "method name": "go To URL"}
{"id": 568, "website": "bigquery", "code": " public void function ( ) { browser . open ( sampleUrl ) ; verify ( mocked_webDriver ) . get ( sampleUrl ) ; } ", "comments": ["Test"], "method name": "test Open Site"}
{"id": 566, "website": "bigquery", "code": " public void function ( ) throws Exception { String url = \"conts/web/view/tutorial/menu\" ; driver . get ( url ) ; PtlWebElement e = ( PtlWebElement ) driver . findElement ( By . cssSelector ( \".wikimodel-freestanding\" ) ) ; JavascriptExecutor jse = ( JavascriptExecutor ) driver ; jse . executeScript ( \"arguments[0].width=arguments[1]\" , e , e . getRect ( ) . getWidth ( ) ) ; jse . executeScript ( \"arguments[0].height=arguments[1]\" , e , e . getRect ( ) . getHeight ( ) ) ; jse . executeScript ( \"arguments[0].src=''\" , e ) ; assertionView . assertView ( \"tutorial13\" , null , HIDE_ELEMENTS ) ; } ", "comments": ["Test"], "method name": "test Capture Tutorial Top"}
{"id": 560, "website": "bigquery", "code": " public void function ( ) throws Exception { package com . example . tests ; import java . util . regex . Pattern ; import java . util . concurrent . TimeUnit ; import org . junit . * ; import static org . junit . Assert . * ; import static org . hamcrest . CoreMatchers . * ; import org . openqa . selenium . * ; import org . openqa . selenium . firefox . FirefoxDriver ; import org . openqa . selenium . support . ui . Select ; public class RenameEmail { private WebDriver driver ; private String baseUrl ; private boolean acceptNextAlert = true ; private StringBuffer verificationErrors = new StringBuffer ( ) ; @ Before public void setUp ( ) throws Exception { driver = new FirefoxDriver ( ) ; baseUrl = \"http: // localhost/\" ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 30 , TimeUnit . SECONDS ) ; } @ Test public void testUntitled2 ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ profile\" ) ) . click ( ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"admin@admin.ru\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . name ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"email\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\\\s\\\\S]$\" ) ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; } @ After public void tearDown ( ) throws Exception { driver . quit ( ) ; String verificationErrorString = verificationErrors . toString ( ) ; if ( ! \"\" . equals ( verificationErrorString ) ) { fail ( verificationErrorString ) ; } } private boolean isElementPresent ( By by ) { try { driver . findElement ( by ) ; return true ; } catch ( NoSuchElementException e ) { return false ; } } private boolean isAlertPresent ( ) { try { driver . switchTo ( ) . alert ( ) ; return true ; } catch ( NoAlertPresentException e ) { return false ; } } private String closeAlertAndGetItsText ( ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; String alertText = alert . getText ( ) ; if ( acceptNextAlert ) { alert . accept ( ) ; } else { alert . dismiss ( ) ; } return alertText ; } finally { acceptNextAlert = true ; } } } } ", "comments": ["Test"], "method name": "test Rename Email"}
{"id": 569, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; assertTrue ( isElementPresent ( By . linkText ( \"Conheça ▁ os ▁ Deputados\" ) ) ) ; driver . findElement ( By . linkText ( \"Conheça ▁ os ▁ Deputados\" ) ) . click ( ) ; assertEquals ( \"Pesquisa ▁ de ▁ Deputados\" , driver . findElement ( By . xpath ( \" // div[@id='content']/div/div[2]/h6\" ) ) . getText ( ) ) ; assertEquals ( \"Pesquisar\" , driver . findElement ( By . id ( \"Pesquisa2\" ) ) . getAttribute ( \"value\" ) ) ; driver . findElement ( By . id ( \"nome\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"nome\" ) ) . sendKeys ( \"Tiririca\" ) ; new Select ( driver . findElement ( By . id ( \"uf\" ) ) ) . selectByVisibleText ( \"SP\" ) ; driver . findElement ( By . id ( \"Pesquisa2\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ civil: ▁ FRANCISCO ▁ EVERARDO ▁ OLIVEIRA ▁ SILVA\" . equals ( driver . findElement ( By . cssSelector ( \"ul.visualNoMarker ▁ > ▁ li\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"Projetos ▁ de ▁ sua ▁ autoria\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Data ▁ de ▁ apresentação: ▁ 7/6/2011 \\n Ementa: ▁ Altera ▁ a ▁ Lei ▁ nº ▁ 10.753, ▁ de ▁ 30 ▁ de ▁ outubro ▁ de ▁ 2003, ▁ que ▁ institui ▁ a ▁ Política ▁ Nacional ▁ do ▁ Livro, ▁ para ▁ dispor ▁ sobre ▁ a ▁ criação ▁ do ▁ Vale-Livro.\" . equals ( driver . findElement ( By . xpath ( \" // form[@id='frmListaProp']/table/tbody[21]/tr[2]/td[2]/p[2]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"próxima\" ) ) . click ( ) ; assertTrue ( driver . getCurrentUrl ( ) . matches ( \"^http: // www\\\\.camara\\\\.gov\\\\.br/internet/sileg/Prop_lista\\\\.asp[\\\\s\\\\S]Pagina=2&Autor=530193&Limite=N$\" ) ) ; driver . navigate ( ) . back ( ) ; driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ civil: ▁ FRANCISCO ▁ EVERARDO ▁ OLIVEIRA ▁ SILVA\" . equals ( driver . findElement ( By . cssSelector ( \"ul.visualNoMarker ▁ > ▁ li\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"Discursos ▁ em ▁ plenário\" ) ) . click ( ) ; try { assertEquals ( \"Discursos ▁ e ▁ Notas ▁ Taquigráficas\" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . linkText ( \"Retorna ▁ a ▁ pesquisa.\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ civil: ▁ FRANCISCO ▁ EVERARDO ▁ OLIVEIRA ▁ SILVA\" . equals ( driver . findElement ( By . cssSelector ( \"ul.visualNoMarker ▁ > ▁ li\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"Biografia\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"SILVA, ▁ Francisco ▁ Everardo ▁ Oliveira ▁ (Co-autor). ▁ As ▁ Piadas ▁ fantárdigas ▁ do ▁ Tiririca. ▁ São ▁ Paulo: ▁ Matrix, ▁ 2006.\" . equals ( driver . findElement ( By . xpath ( \" // div[@id='bioDeputado']/div[9]/div[2]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . cssSelector ( \"a[title=\\\"Proposições ▁ Transformadas ▁ em ▁ Norma ▁ Jurídica\\\"] ▁ > ▁ b\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"PL ▁ 4682/2012\" . equals ( driver . findElement ( By . cssSelector ( \"span.nomeProposicao\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . xpath ( \"( // a[contains(text(),'Atividade ▁ Legislativa')])[2]\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Agenda\" . equals ( driver . findElement ( By . cssSelector ( \"a[alt=\\\"Agenda\\\"]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Comissões\" . equals ( driver . findElement ( By . cssSelector ( \"a[alt=\\\"Comissões\\\"]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Conheça ▁ o ▁ Processo ▁ Legislativo\" . equals ( driver . findElement ( By . cssSelector ( \"a[alt=\\\"Conheça ▁ o ▁ Processo ▁ Legislativo\\\"]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Cenario Um"}
{"id": 572, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 573, "website": "bigquery", "code": " public void function ( ) { this . driver . get ( urlInvest ) ; List < WebElement > totals = driver . findElements ( By . xpath ( tableInvestTotals ) ) ; List < WebElement > names = driver . findElements ( By . xpath ( tableInvestNames ) ) ; Hashtable < String , String > finalList = new Hashtable < String , String > ( ) ; for ( WebElement total : totals ) { for ( WebElement name : names ) { finalList . put ( name . getText ( ) , total . getText ( ) ) ; } } System . out . println ( \"Now, ▁ the ▁ final ▁ act: ▁ \" + Arrays . toString ( finalList . entrySet ( ) . toArray ( ) ) ) ; } ", "comments": [" @params", " ", " By now, this function doesn't return anything, just prints in screen the", " invest name and the amount of money in it."], "method name": "do Fetch Invest"}
{"id": 574, "website": "bigquery", "code": " public List < String > function ( String url ) throws Exception { List < String > news = new ArrayList < String > ( ) ; this . webDriver . get ( url ) ; List < WebElement > listTitle1 = this . webDriver . findElements ( By . cssSelector ( \"h1[id='title']\" ) ) ; List < WebElement > listTitle2 = this . webDriver . findElements ( By . cssSelector ( \"span[id='title']\" ) ) ; if ( listTitle1 . size ( ) == 1 ) { this . title = listTitle1 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( listTitle2 . size ( ) == 1 ) { this . title = listTitle2 . get ( 0 ) . getText ( ) . trim ( ) ; } else { this . title = this . webDriver . getTitle ( ) ; } List < WebElement > listTime1 = this . webDriver . findElements ( By . cssSelector ( \"span[id='pubtime']\" ) ) ; List < WebElement > listTime2 = this . webDriver . findElements ( By . cssSelector ( \"span[class='time']\" ) ) ; List < WebElement > listTime3 = this . webDriver . findElements ( By . cssSelector ( \"div[id='pubtimeandfrom']\" ) ) ; List < WebElement > listTime4 = this . webDriver . findElements ( By . cssSelector ( \"td[class='gray ▁ fs12']\" ) ) ; if ( listTime1 . size ( ) == 1 ) { this . time = listTime1 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( listTime2 . size ( ) == 1 ) { this . time = listTime2 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( listTime3 . size ( ) == 1 ) { this . time = listTime3 . get ( 0 ) . getText ( ) . trim ( ) . substring ( 0 , 19 ) ; } else if ( listTime4 . size ( ) == 1 ) { this . time = listTime4 . get ( 0 ) . getText ( ) . trim ( ) . substring ( 0 , 20 ) ; } else { this . time = \"null\" ; } List < WebElement > list1 = this . webDriver . findElements ( By . cssSelector ( \"div[id='content']\" ) ) ; List < WebElement > list2 = this . webDriver . findElements ( By . cssSelector ( \"div[id='Content']\" ) ) ; List < WebElement > list3 = this . webDriver . findElements ( By . cssSelector ( \"div[id='contentblock']\" ) ) ; List < WebElement > list4 = this . webDriver . findElements ( By . cssSelector ( \"div[class='article']\" ) ) ; List < WebElement > list5 = this . webDriver . findElements ( By . cssSelector ( \"span[id='content']\" ) ) ; List < WebElement > list6 = this . webDriver . findElements ( By . cssSelector ( \"div[class='bai14']\" ) ) ; if ( list1 . size ( ) == 1 ) { this . content = list1 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list2 . size ( ) == 1 ) { this . content = list2 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list3 . size ( ) == 1 ) { this . content = list3 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list4 . size ( ) == 1 ) { this . content = list4 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list5 . size ( ) == 1 ) { this . content = list5 . get ( 0 ) . getText ( ) . trim ( ) ; } else if ( list6 . size ( ) == 1 ) { this . content = list6 . get ( 0 ) . getText ( ) . trim ( ) ; } else { this . content = \"null\" ; } news . add ( this . title ) ; news . add ( this . time ) ; news . add ( this . content ) ; return news ; } ", "comments": [" È¡µÃÐÂÎÅ±êÌâ_Ê±¼ä_ÕýÎÄµÄlist", " @param url ÐÂÎÅurl", " @return Ò»ÌõÐÂÎÅ±êÌâ_Ê±¼ä_ÕýÎÄµÄlist£¬0£º±êÌâ1£ºÊ±¼ä2£ºÕýÎÄ", " @throws Exception"], "method name": "getTitle Time Content"}
{"id": 570, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Conheça ▁ os ▁ Deputados\" . equals ( driver . findElement ( By . linkText ( \"Conheça ▁ os ▁ Deputados\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"Conheça ▁ os ▁ Deputados\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"TIRIRICA\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ TIRIRICA ▁ - ▁ PR/SP\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"JEAN ▁ WYLLYS\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ JEAN ▁ WYLLYS ▁ - ▁ PSOL/RJ\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"JOÃO ▁ ARRUDA\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ JOÃO ▁ ARRUDA ▁ - ▁ PMDB/PR\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ZOINHO\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ZOINHO ▁ - ▁ PR/RJ\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ANTHONY ▁ GAROTINHO\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ANTHONY ▁ GAROTINHO ▁ - ▁ PR/RJ\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ARIOSTO ▁ HOLANDA\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ARIOSTO ▁ HOLANDA ▁ - ▁ PROS/CE\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ARTUR ▁ BRUNO\" ) ; driver . findElement ( By . id ( \"rbDeputado6\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ARTUR ▁ BRUNO ▁ - ▁ PT/CE\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Cenario Dois"}
{"id": 576, "website": "bigquery", "code": " public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select schoolSelect = new Select ( driver . findElement ( By . id ( \"schoolSelect\" ) ) ) ; schoolSelect . selectByVisibleText ( \"Illinois ▁ PS145\" ) ; Select courseSelect = new Select ( driver . findElement ( By . id ( \"courseSelect\" ) ) ) ; courseSelect . selectByVisibleText ( \"Algebra\" ) ; Select sectionSelect = new Select ( driver . findElement ( By . id ( \"sectionSelect\" ) ) ) ; sectionSelect . selectByVisibleText ( \"Section1\" ) ; WebElement textDiv = driver . findElement ( By . id ( \"studentDiv\" ) ) ; String studentText = textDiv . getText ( ) ; assertTrue ( studentText . contains ( \"Dawson ▁ Deborah\" ) ) ; assertFalse ( studentText . contains ( \"Random ▁ name\" ) ) ; sectionSelect = new Select ( driver . findElement ( By . id ( \"sectionSelect\" ) ) ) ; sectionSelect . selectByVisibleText ( \"Section2\" ) ; WebElement temp = driver . findElement ( By . id ( \"studentDiv\" ) ) ; studentText = temp . getText ( ) ; assertTrue ( studentText . contains ( \"Marks ▁ Hector\" ) ) ; assertFalse ( studentText . contains ( \"Dawson ▁ Deborah\" ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } ", "comments": ["Test"], "method name": "test Student List Page"}
{"id": 577, "website": "bigquery", "code": " public void function ( ) { try { driver . get ( studentListUrl + usernameParamPrefix + userA ) ; Select userASchoolSelect = new Select ( driver . findElement ( By . id ( \"schoolSelect\" ) ) ) ; String userASchoolItem = userASchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; driver . get ( studentListUrl + usernameParamPrefix + userB ) ; Select userBSchoolSelect = new Select ( driver . findElement ( By . id ( \"schoolSelect\" ) ) ) ; String userBSchoolItem = userBSchoolSelect . getOptions ( ) . get ( 1 ) . getText ( ) ; assertFalse ( userBSchoolItem . equals ( userASchoolItem ) ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; } finally { driver . close ( ) ; } } ", "comments": ["Test"], "method name": "test Users Have Diff Lists"}
{"id": 578, "website": "bigquery", "code": " public void function ( ) { driver . get ( loginUrl ) ; WebElement username = driver . findElement ( By . name ( \"username\" ) ) ; username . sendKeys ( testBadUser ) ; WebElement errorMessage = driver . findElement ( By . name ( \"errorMessage\" ) ) ; assertTrue ( errorMessage . getCssValue ( \"display\" ) . equalsIgnoreCase ( \"none\" ) ) ; WebElement loginForm = driver . findElement ( By . name ( \"loginForm\" ) ) ; loginForm . submit ( ) ; errorMessage = driver . findElement ( By . name ( \"errorMessage\" ) ) ; assertTrue ( errorMessage . getCssValue ( \"display\" ) . equalsIgnoreCase ( \"block\" ) ) ; username = driver . findElement ( By . name ( \"username\" ) ) ; username . sendKeys ( testUser ) ; loginForm = driver . findElement ( By . name ( \"loginForm\" ) ) ; loginForm . submit ( ) ; WebElement body = driver . findElement ( By . tagName ( \"body\" ) ) ; String bodyText = body . getText ( ) ; assertTrue ( bodyText . contains ( \"Select ▁ an ▁ application\" ) ) ; driver . close ( ) ; } ", "comments": ["Test"], "method name": "test Login Page"}
{"id": 575, "website": "bigquery", "code": " public static List < List < String > > function ( List < String > source ) { List < List < String > > listIfengText = null ; listIfengText = new ArrayList < List < String > > ( ) ; String NBAUrl = \"http: // 3g.ifeng.com/sports/nba/nbai?vt=5∣=8Z5kpx\" ; String zongheUrl = \"http: // 3g.ifeng.com/sports/zonghetiyu/dir?vt=5&cid=148∣=8Z5kpx\" ; String pinglunUrl = \"http: // 3g.ifeng.com/sports/titanpinglun/dir?vt=5&cid=150∣=8Z5kpx\" ; WebDriver webDriver = new FirefoxDriver ( ) ; List < WebElement > ulList = null ; List < WebElement > headline = null ; List < WebElement > time = null ; List < WebElement > comment = null ; for ( int i = 0 ; i < source . size ( ) ; i ++ ) { List < String > listUrls = null ; List < String > listText = null ; listUrls = new ArrayList < String > ( ) ; listText = new ArrayList < String > ( ) ; if ( source . get ( i ) . equals ( NBAUrl ) ) { webDriver . get ( source . get ( i ) ) ; ulList = webDriver . findElements ( By . cssSelector ( \"ul[class='slLis']\" ) ) ; listUrls . addAll ( getPartUrls ( ulList ) ) ; for ( String url : listUrls ) { StringBuffer sb = null ; sb = new StringBuffer ( ) ; webDriver . get ( url ) ; headline = webDriver . findElements ( By . cssSelector ( \"div[class='acTxtTit']>h1\" ) ) ; time = webDriver . findElements ( By . cssSelector ( \"div[class='acTxtTit']>div>div\" ) ) ; comment = webDriver . findElements ( By . cssSelector ( \"div[class='acCmtAll']\" ) ) ; if ( ( headline . size ( ) == 1 ) && ( time . size ( ) == 1 ) && ( comment . size ( ) == 1 ) ) { sb . append ( headline . get ( 0 ) . getText ( ) + \"\\t\" ) . append ( time . get ( 0 ) . getText ( ) + \"\\t\" ) . append ( comment . get ( 0 ) . getText ( ) ) ; listText . add ( sb . toString ( ) ) ; } } listIfengText . add ( listText ) ; } else if ( source . get ( i ) . equals ( pinglunUrl ) ) { webDriver . get ( source . get ( i ) ) ; List < WebElement > divList = webDriver . findElements ( By . cssSelector ( \"div[class='nlist']\" ) ) ; for ( int j = 0 ; j < divList . size ( ) ; j ++ ) { List < WebElement > list = divList . get ( j ) . findElements ( By . tagName ( \"ul\" ) ) . get ( 0 ) . findElements ( By . tagName ( \"li\" ) ) ; for ( int k = 0 ; k < list . size ( ) ; k ++ ) { listUrls . add ( list . get ( k ) . findElements ( By . tagName ( \"a\" ) ) . get ( 0 ) . getAttribute ( \"href\" ) ) ; } } for ( String url : listUrls ) { StringBuffer sb = null ; sb = new StringBuffer ( ) ; webDriver . get ( url ) ; headline = webDriver . findElements ( By . cssSelector ( \"div[class='titpics']>p[class='titin']\" ) ) ; time = webDriver . findElements ( By . cssSelector ( \"div[class='titpics']>p[class='titcc']\" ) ) ; comment = webDriver . findElements ( By . cssSelector ( \"form[name='plForm']>div>a[href]\" ) ) ; if ( ( headline . size ( ) == 1 ) && ( time . size ( ) == 1 ) && ( comment . size ( ) == 1 ) ) { sb . append ( headline . get ( 0 ) . getText ( ) + \"\\t\" ) . append ( time . get ( 0 ) . getText ( ) + \"\\t\" ) ; comment . get ( 0 ) . click ( ) ; List < WebElement > elements = webDriver . findElements ( By . cssSelector ( \"div[class='pnpage']>span[class='font1']\" ) ) ; if ( elements . size ( ) == 1 ) { sb . append ( elements . get ( 0 ) . getText ( ) ) ; } listText . add ( sb . toString ( ) ) ; } } listIfengText . add ( listText ) ; } else if ( source . get ( i ) . equals ( zongheUrl ) ) { webDriver . get ( source . get ( i ) ) ; List < WebElement > divList = webDriver . findElements ( By . cssSelector ( \"div[class='nlist']\" ) ) ; for ( int j = 0 ; j < divList . size ( ) ; j ++ ) { List < WebElement > list = divList . get ( j ) . findElements ( By . tagName ( \"ul\" ) ) . get ( 0 ) . findElements ( By . tagName ( \"li\" ) ) ; for ( int k = 0 ; k < list . size ( ) ; k ++ ) { listUrls . add ( list . get ( k ) . findElements ( By . tagName ( \"a\" ) ) . get ( 0 ) . getAttribute ( \"href\" ) ) ; } } for ( String url : listUrls ) { StringBuffer sb = null ; sb = new StringBuffer ( ) ; webDriver . get ( url ) ; headline = webDriver . findElements ( By . cssSelector ( \"div[class='titpics']>p[class='titin']\" ) ) ; time = webDriver . findElements ( By . cssSelector ( \"div[class='titpics']>p[class='titcc']\" ) ) ; comment = webDriver . findElements ( By . cssSelector ( \"form[name='plForm']>div>a[href]\" ) ) ; if ( ( headline . size ( ) == 1 ) && ( time . size ( ) == 1 ) && ( comment . size ( ) == 1 ) ) { sb . append ( headline . get ( 0 ) . getText ( ) + \"\\t\" ) . append ( time . get ( 0 ) . getText ( ) + \"\\t\" ) ; comment . get ( 0 ) . click ( ) ; List < WebElement > elements = webDriver . findElements ( By . cssSelector ( \"div[class='pnpage']>span[class='font1']\" ) ) ; if ( elements . size ( ) == 1 ) { sb . append ( elements . get ( 0 ) . getText ( ) ) ; } listText . add ( sb . toString ( ) ) ; } } listIfengText . add ( listText ) ; } else { webDriver . get ( source . get ( i ) ) ; ulList = webDriver . findElements ( By . cssSelector ( \"ul[class='report_alive']>li>div\" ) ) ; listText = getPartText ( ulList ) ; listIfengText . add ( listText ) ; } } webDriver . close ( ) ; return listIfengText ; } ", "comments": [" ·ï»ËÏà¹ØÆµµÀµÄÐÂÎÅ±êÌâ¡¢Ê±¼ä¡¢ÆÀÂÛÊý", " @param source Ïà¹ØÆµµÀµØÖ·", " @return ·ï»ËÍø¼¸¸öÆµµÀÐÂÎÅµÄ¼¯ºÏ"], "method name": "get Ifeng Text"}
{"id": 579, "website": "bigquery", "code": " private List < String > function ( HashSet < String > midSet ) { ArrayList < String > mailList = new ArrayList < > ( ) ; for ( String mid : midSet ) { String urlT = \"http: // m0.mail.sina.com.cn/classic/readmail.php?webmail=1&fid=new∣=\" + mid ; driver . get ( urlT ) ; Document mailDoc = Jsoup . parseBodyFragment ( driver . getPageSource ( ) ) ; Element mailBody = mailDoc . body ( ) ; String mailContent = mailBody . text ( ) ; if ( filter == null || ! filter . filter ( mailContent ) ) { continue ; } mailList . add ( mailBody . text ( ) ) ; } return mailList ; } ", "comments": [], "method name": "parse All Email"}
{"id": 571, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Conheça ▁ os ▁ Deputados\" . equals ( driver . findElement ( By . linkText ( \"Conheça ▁ os ▁ Deputados\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"Conheça ▁ os ▁ Deputados\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"TIRIRICA\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ TIRIRICA ▁ - ▁ PR/SP\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Relatório ▁ de ▁ Votações ▁ em ▁ Plenário\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"JEAN ▁ WYLLYS\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ JEAN ▁ WYLLYS ▁ - ▁ PSOL/RJ\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Relatório ▁ de ▁ Votações ▁ em ▁ Plenário\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"JOÃO ▁ ARRUDA\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ JOÃO ▁ ARRUDA ▁ - ▁ PMDB/PR\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ZOINHO\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ZOINHO ▁ - ▁ PR/RJ\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Relatório ▁ de ▁ Votações ▁ em ▁ Plenário\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ANTHONY ▁ GAROTINHO\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ANTHONY ▁ GAROTINHO ▁ - ▁ PR/RJ\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Relatório ▁ de ▁ Votações ▁ em ▁ Plenário\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ARIOSTO ▁ HOLANDA\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ARIOSTO ▁ HOLANDA ▁ - ▁ PROS/CE\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Relatório ▁ de ▁ Votações ▁ em ▁ Plenário\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . navigate ( ) . back ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Legislatura ▁ Atual ▁ - ▁ Deputados ▁ em ▁ exercício\" . equals ( driver . findElement ( By . cssSelector ( \"h6.header\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Pesquisar\" . equals ( driver . findElement ( By . id ( \"Pesquisa\" ) ) . getAttribute ( \"value\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( driver . findElement ( By . id ( \"deputado\" ) ) ) . selectByVisibleText ( \"ARTUR ▁ BRUNO\" ) ; driver . findElement ( By . id ( \"rbDeputado5\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Pesquisa\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Nome ▁ Parlamentar: ▁ ARTUR ▁ BRUNO ▁ - ▁ PT/CE\" . equals ( driver . findElement ( By . cssSelector ( \"#content ▁ > ▁ h3\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Relatório ▁ de ▁ Votações ▁ em ▁ Plenário\" . equals ( driver . getTitle ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Cenario Tres"}
{"id": 581, "website": "bigquery", "code": " public void function ( ) { FirefoxDriver driver = new FirefoxDriver ( ) ; driver . get ( baseUrl ) ; List < WebElement > inputs = driver . findElementsByCssSelector ( \"input\" ) ; WebElement roomInput = inputs . get ( 0 ) ; roomInput . sendKeys ( \"13\" ) ; WebElement loginInput = inputs . get ( 1 ) ; loginInput . sendKeys ( \"test\" ) ; driver . findElementByCssSelector ( \"button\" ) . click ( ) ; String url = driver . getCurrentUrl ( ) ; assertTrue ( url != baseUrl ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Login Action"}
{"id": 580, "website": "bigquery", "code": " public void function ( ) { FirefoxDriver driver = new FirefoxDriver ( ) ; driver . get ( baseUrl ) ; int numberOfInputs = 2 ; List < WebElement > inputs = driver . findElementsByCssSelector ( \"input\" ) ; WebElement button = driver . findElementByCssSelector ( \"button\" ) ; assertTrue ( inputs . size ( ) == numberOfInputs && button != null ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "check If There Are Fields"}
{"id": 582, "website": "bigquery", "code": " public String function ( HiringPageData hiringPageData ) { PhantomJSDriver driver = createConfiguredDriver ( ) ; loginToConfluence ( driver ) ; driver . get ( confluenceUrl + CREATE_HIRING_PAGE_FROM_TEMPLATE_URL ) ; logger . info ( \"At ▁ page ▁ \" + driver . getCurrentUrl ( ) ) ; sleep ( 1000L ) ; driver . findElement ( By . name ( \"title\" ) ) . sendKeys ( hiringPageData . getFullName ( ) ) ; fillPageWithCandidateData ( driver , hiringPageData ) ; driver . findElement ( By . name ( \"confirm\" ) ) . click ( ) ; String newPageUrl = driver . getCurrentUrl ( ) ; logger . info ( \"New ▁ page ▁ created ▁ at ▁ \" + newPageUrl ) ; return newPageUrl ; } ", "comments": [], "method name": "create Hiring Page"}
{"id": 583, "website": "bigquery", "code": " public List < ContactTableRow > function ( ) { PhantomJSDriver driver = createConfiguredDriver ( ) ; loginToConfluence ( driver ) ; driver . get ( confluenceUrl + CONTACTS_PAGE_URL ) ; logger . info ( \"Extracting ▁ contacts ▁ data ▁ from ▁ \" + driver . getCurrentUrl ( ) ) ; List < ContactTableRow > contacts = extractContactsData ( driver ) ; return contacts ; } ", "comments": [], "method name": "get Contact Data"}
{"id": 585, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 586, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 587, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 584, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 588, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . name ( \"imdbid\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"imdbid\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"film\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"input[class=\\\"required ▁ digits ▁ error\\\"]\" ) ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Creation Film Without Year"}
{"id": 589, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.movie_cover\" ) ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"input#imdbsearch\" ) ) ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"ertretretretersdfdsfdsfds\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"div.content\" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( \"div.content ▁ > ▁ div\" ) ) . findElements ( By . tagName ( \"tr\" ) ) . size ( ) ; assertEquals ( count1 , 0 ) ; System . out . println ( \"Íàéäåíî ▁ ôèëüìîâ ▁ -\" + count1 + \"øò\" ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"abfdgfddfgfdgdf\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"div.content\" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( \"div.content ▁ > ▁ div\" ) ) . findElements ( By . tagName ( \"tr\" ) ) . size ( ) ; assertEquals ( count2 , 0 ) ; System . out . println ( \"Íàéäåíî ▁ ôèëüìîâ ▁ -\" + count2 + \"øò\" ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Search Film Not Found"}
{"id": 590, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.movie_cover\" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( \"div#results\" ) ) . findElements ( By . tagName ( \"a\" ) ) . size ( ) ; System . out . println ( \"count1\" + - count1 ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . name ( \"imdbid\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"imdbid\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"film222\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"2015\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"img[alt=\\\"Edit\\\"]\" ) ) ) ; driver . findElement ( By . linkText ( \"Home\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.movie_cover\" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( \"div#results\" ) ) . findElements ( By . tagName ( \"a\" ) ) . size ( ) ; System . out . println ( \"count2\" + - count2 ) ; int res = count2 - count1 ; System . out . println ( \"res\" + - res ) ; assertEquals ( res , 1 ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Creation Film Success"}
{"id": 591, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.movie_cover\" ) ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"input#imdbsearch\" ) ) ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"a\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"table.imdbmovies\" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( \"table.imdbmovies\" ) ) . findElements ( By . tagName ( \"tr\" ) ) . size ( ) ; assertNotEquals ( count1 , 0 ) ; System . out . println ( \"Íàéäåíî ▁ ôèëüìîâ\" + - count1 + \"øò\" ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"ab\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"table.imdbmovies\" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( \"table.imdbmovies\" ) ) . findElements ( By . tagName ( \"tr\" ) ) . size ( ) ; assertNotEquals ( count2 , 0 ) ; System . out . println ( \"Íàéäåíî ▁ ôèëüìîâ\" + - count2 + \"øò\" ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Search Film Found"}
{"id": 594, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": [], "method name": "open Main Page"}
{"id": 595, "website": "bigquery", "code": " public static void function ( String url ) { webDriver . get ( url ) ; } ", "comments": [], "method name": "go To Url"}
{"id": 592, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . get ( baseUrl + \"/php4dvd/?go=movie&id=40\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.movie_cover\" ) ) ) ; int count1 = driver . findElement ( By . cssSelector ( \"div#results\" ) ) . findElements ( By . tagName ( \"a\" ) ) . size ( ) ; System . out . println ( \"count1\" + - count1 ) ; driver . findElement ( ( By . cssSelector ( \"div.movie_cover\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.movie_cover\" ) ) ) ; int count2 = driver . findElement ( By . cssSelector ( \"div#results\" ) ) . findElements ( By . tagName ( \"a\" ) ) . size ( ) ; System . out . println ( \"count2\" + - count2 ) ; int res = count1 - count2 ; System . out . println ( \"res\" + - res ) ; assertEquals ( res , 1 ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Delete First Film"}
{"id": 596, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; } ", "comments": ["When(\"eu acesso a pagina que exibe informacoes do test result\")"], "method name": "when Eu Acesso A Pagina Que Exibe Informacoes Do Test Result"}
{"id": 597, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; } ", "comments": ["When(\"desejo obter informacoes sobre esse test result\")"], "method name": "when Desejo Obter Informacoes Sobre Esse Test Result"}
{"id": 598, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; } ", "comments": ["When(\"eu entro na pagina que exibe informacoes do testResult    \")"], "method name": "when Eu Entro Na Pagina Que Exibe Informacoes Do Test Result"}
{"id": 593, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"dfd\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"dfdf\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"input[class=\\\"required ▁ digits ▁ error\\\"]\" ) ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Creation Film With Not Valid Number"}
{"id": 600, "website": "bigquery", "code": " public String function ( String url ) throws Exception { if ( SessionContext . isAuthoizationFailed ) { throw new AssertionError ( \"*******AUTHORIZATION ▁ ISSUE ▁ *****DO ▁ NOT ▁ PROCEEED ▁ ***\" ) ; } String url_postProcessed = Lib_Utils . alterGotoUrl ( url , user , password ) ; try { driver . get ( url_postProcessed ) ; } catch ( WebDriverException e ) { log . error ( \"Encountered ▁ WebDriver ▁ Exception ▁ while ▁ goto ▁ - ▁ relaunching\" + url ) ; throw new UnexpectedWebDriverException ( ) ; } String title = driver . getTitle ( ) ; log . trace ( url_postProcessed ) ; if ( title . contains ( \"not ▁ authorized\" ) ) { SessionContext . isAuthoizationFailed = true ; } return title ; } ", "comments": [], "method name": "go To Page"}
{"id": 599, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; WebDriverWait wait = new WebDriverWait ( driver , 1 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( homepage . HEADER_LOCATOR ) ) ) ; wait . until ( ExpectedConditions . visibilityOf ( homepage . header ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( homepage . sameHeaderBy ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( homepage . sameHeader ) ) ; wait . until ( ExpectedConditions . elementToBeSelected ( homepage . sameHeaderBy ) ) ; wait . until ( ExpectedConditions . elementToBeSelected ( homepage . header ) ) ; wait . until ( ExpectedConditions . textToBePresentInElement ( homepage . header , \"Header\" ) ) ; wait . until ( ExpectedConditions . stalenessOf ( homepage . header ) ) ; wait . until ( ExpectedConditions . titleContains ( \"Header\" ) ) ; Assert . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["@Test"], "method name": "test Home Page Has A Header"}
{"id": 601, "website": "bigquery", "code": " private boolean function ( String url , int timeout ) { try { driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( timeout , TimeUnit . SECONDS ) ; driver . get ( url ) ; return true ; } catch ( TimeoutException e ) { return false ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( maxLoadTime , TimeUnit . SECONDS ) ; } } ", "comments": [" 跳转到指定的URL并且返回是否跳转完整的结果。", " ", " @param url", "            想要打开的网址", " @param timeout", "            多少秒之后算超时", " @return 是否成功加载"], "method name": "navigate And Load"}
{"id": 602, "website": "bigquery", "code": " public HashSet < ProductUrl > function ( String searchUrl ) { String productUrlReg = \"http: // www.amazon.cn/. */ dp/.*\" ; HashSet < ProductUrl > products = new HashSet < ProductUrl > ( ) ; HtmlUnitDriver driver = new HtmlUnitDriver ( ) ; driver . get ( searchUrl ) ; List < WebElement > link = driver . findElements ( By . cssSelector ( \"[href]\" ) ) ; for ( WebElement webElement : link ) { String href = webElement . getAttribute ( \"href\" ) ; if ( href . matches ( productUrlReg ) && products . add ( new ProductUrl ( href ) ) ) { System . out . println ( webElement . getText ( ) + '\\t' + href ) ; } } System . out . println ( \"get ▁ product ▁ url ▁ over=================================================================\" ) ; System . out . println ( \"product ▁ size: ▁ \" + products . size ( ) ) ; driver . close ( ) ; return products ; } ", "comments": [" 获取网页中所有指向商品的超链接", " @param searchUrl", "            搜索后的网页", " @return 商品url的集合"], "method name": "get Product Page"}
{"id": 605, "website": "bigquery", "code": " public void function ( ) throws IOException { String pathFirefoxDrive = \"firebug-1.8.1.xpi\" ; File file = new File ( pathFirefoxDrive ) ; file . deleteOnExit ( ) ; try ( FileOutputStream o = new FileOutputStream ( file ) ) { ByteStreams . copy ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( pathFirefoxDrive ) , o ) ; } FirefoxProfile firefoxProfile = new FirefoxProfile ( ) ; firefoxProfile . addExtension ( file ) ; firefoxProfile . setPreference ( \"extensions.firebug.currentVersion\" , \"1.8.1\" ) ; WebDriver driver = new FirefoxDriver ( firefoxProfile ) ; String url = \"http: // haiivl.com/video/176200\" ; driver . get ( url ) ; WebElement e = driver . findElement ( By . xpath ( \" // article // div[@class='video-frame ▁ mecloud']\" ) ) ; String source = driver . getPageSource ( ) ; Pattern pattern = Pattern . compile ( \"", "comments": [" Created by tuanlhd on 7/15/15.", "Test"], "method name": "test Some Functions"}
{"id": 603, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; try { assertEquals ( \"Mylla\" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"start-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"2\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"3\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"5\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"6\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"8\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"7\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"9\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; try { assertTrue ( isElementPresent ( By . id ( \"replay-button\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Player1 Win"}
{"id": 606, "website": "bigquery", "code": " public void function ( ) throws IOException { String pathChromeDrive = \"chromedriver\" ; File file = new File ( pathChromeDrive ) ; file . deleteOnExit ( ) ; try ( FileOutputStream o = new FileOutputStream ( file ) ) { ByteStreams . copy ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( pathChromeDrive ) , o ) ; } file . setExecutable ( true ) ; System . setProperty ( \"webdriver.chrome.driver\" , pathChromeDrive ) ; WebDriver driver = new ChromeDriver ( ) ; String url = \"http: // haiivl.com/video/176200\" ; driver . get ( url ) ; WebElement e = driver . findElement ( By . xpath ( \" // article\" ) ) ; } ", "comments": ["Test"], "method name": "test Chrome Driver"}
{"id": 604, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; try { assertEquals ( \"Mylla\" , driver . getTitle ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"start-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"2\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"3\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"5\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"move\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"move\" ) ) . sendKeys ( \"8\" ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; try { assertTrue ( isElementPresent ( By . id ( \"replay-button\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Player2 Win"}
{"id": 609, "website": "bigquery", "code": " public void function ( String baseUrl ) { driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( baseUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 30 , TimeUnit . SECONDS ) ; driver . manage ( ) . window ( ) . maximize ( ) ; } ", "comments": [], "method name": "load Base URL"}
{"id": 610, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 611, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 608, "website": "bigquery", "code": " public void function ( String userId , int userNum ) { Thread th = new Thread ( ) ; String urlFirst = \"https: // www.joysound.com/utasuki/userpage/myartist.htm?usr=\" ; StringBuilder urlBuilder = new StringBuilder ( ) ; urlBuilder . append ( urlFirst ) ; urlBuilder . append ( userId ) ; String url = urlBuilder . toString ( ) ; ArrayList < WebElement > favArtistList ; ph . getDriver ( ) . get ( url ) ; try { th . sleep ( waitTime ) ; String favArtistStr = ph . getDriver ( ) . findElementByTagName ( \"em\" ) . getText ( ) ; String favArtistNum = favArtistStr . substring ( 0 , favArtistStr . length ( ) - 1 ) ; int favArtistInt = Integer . parseInt ( favArtistNum ) ; String artist ; WebElement ele ; int j = 0 ; int p = 0 ; for ( int i = 0 ; i < favArtistInt - 1 ; i ++ , j ++ ) { if ( i % 20 == 0 && i != 0 ) { p ++ ; System . out . println ( \"マイアーティスト\" + p + \"ページ目読み込み終了\" ) ; ph . getDriver ( ) . get ( url + \"&startIndex=\" + ( i + 1 ) + \"&orderBy=0&sortOrder=desc\" ) ; th . sleep ( waitTime ) ; j = 0 ; } favArtistList = ( ArrayList < WebElement > ) ph . getDriver ( ) . findElementsByXPath ( \" // span[@class='usk-bold-txt ▁ usk-sbig-txt ▁ usk-break']\" ) ; try { ele = favArtistList . get ( j ) ; } catch ( Exception e ) { break ; } artist = ele . getText ( ) ; if ( userNum == 1 ) { artistSet . add ( artist ) ; } else { if ( artistMap . containsKey ( artist ) ) { artistMap . put ( artist , artistMap . get ( artist ) + 10 ) ; } else { artistMap . put ( artist , 10 ) ; } } } System . out . println ( \"マイアーティスト読み込み完了\" ) ; } catch ( InterruptedException e1 ) { e1 . printStackTrace ( ) ; } } ", "comments": [], "method name": "fav Artist Run"}
{"id": 613, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement dynamicElement1 = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"username\" ) ) ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . get ( baseUrl + \"/php4dvd/#!/sort/name%20asc/\" ) ; WebElement dynamicElement = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; isTextMatch ( ( By . xpath ( \" // label\" ) ) , ( \"This ▁ field ▁ is ▁ required\" ) ) ; isTextMatch ( ( By . xpath ( \" // tr[4]/td[2]/label\" ) ) , ( \"This ▁ field ▁ is ▁ required\" ) ) ; driver . findElement ( By . cssSelector ( \"h1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\\\s\\\\S]$\" ) ) ; } ", "comments": ["Test(priority=2)"], "method name": "empty Fields Add Group"}
{"id": 614, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": [], "method name": "go To Home Page"}
{"id": 612, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . get ( baseUrl + \"/php4dvd/#!/sort/name%20asc/\" ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; WebElement dynamicElement = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"imdbsearch\" ) ) ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"http: // www.imdb.com/title/tt1403865/?ref_=fn_al_tt_1\" ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"True ▁ Grit\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year1\" ) ) . sendKeys ( \"2010\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; isTextMatch ( ( By . xpath ( \" // h2\" ) ) , ( \"True ▁ Grit ▁ (2010)\" ) ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement dynamicElement1 = ( new WebDriverWait ( driver , 10 ) ) . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@id='results']/a\" ) ) ) ; isTextMissing ( ( By . id ( \"results\" ) ) , ( \"True ▁ Grit\" ) ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ log ▁ out[\\\\s\\\\S]$\" ) ) ; } ", "comments": ["Test(priority=1)"], "method name": "positive Add Group"}
{"id": 615, "website": "bigquery", "code": " public void function ( ) { WebDriver driver = null ; String strUrl = \"https: // credit-cardapply.asda.com/apply/applyjourney.html?promotionalCode=&brandCode=asda&responseCode=ASD030∅_guid=true\" ; String strBrowserTitle = \"\" ; try { driver = new FirefoxDriver ( ) ; driver . get ( strUrl ) ; strBrowserTitle = driver . getTitle ( ) ; assertEquals ( \"Title ▁ do ▁ not ▁ match ▁ with ▁ expected\" , \"Asda ▁ Apply ▁ Journey-Invalid\" , strBrowserTitle ) ; Thread . sleep ( 4000 ) ; } catch ( Exception ex ) { System . out . println ( \"Exception ▁ thrown:\" + ex . getMessage ( ) ) ; } finally { driver . quit ( ) ; } } ", "comments": ["Test", "Ignore"], "method name": "Apply Asda CC"}
{"id": 607, "website": "bigquery", "code": " public void function ( String userId , int userNum ) { Thread th = new Thread ( ) ; String urlFirst = \"https: // www.joysound.com/utasuki/userpage/mysong.htm?usr=\" ; StringBuilder urlBuilder = new StringBuilder ( ) ; urlBuilder . append ( urlFirst ) ; urlBuilder . append ( userId ) ; String url = urlBuilder . toString ( ) ; ArrayList < WebElement > favMusicList ; ph . getDriver ( ) . get ( url ) ; try { th . sleep ( waitTime ) ; String favMusicStr = ph . getDriver ( ) . findElementByTagName ( \"em\" ) . getText ( ) ; String favMusicNum = favMusicStr . substring ( 0 , favMusicStr . length ( ) - 1 ) ; int favMusicInt = Integer . parseInt ( favMusicNum ) ; String songUrl , id , songwordstitle , name , artist , relation ; Vector < Music > v ; ArrayList < String > musicURL = new ArrayList < String > ( ) ; Music m ; int j = 0 ; int p = 0 ; favMusicList = ( ArrayList < WebElement > ) ph . getDriver ( ) . findElementsByClassName ( \"usk-block-link\" ) ; for ( WebElement e : favMusicList ) { musicURL . add ( e . getAttribute ( \"href\" ) ) ; } for ( int i = 0 ; i < favMusicInt - 1 ; i ++ , j ++ ) { if ( i % 20 == 0 && i != 0 ) { p ++ ; System . out . println ( \"マイうた\" + p + \"ページ目読み込み終了\" ) ; ph . getDriver ( ) . get ( url + \"&startIndex=\" + ( i + 1 ) + \"&orderBy=0&sortOrder=desc\" ) ; th . sleep ( waitTime ) ; favMusicList = ( ArrayList < WebElement > ) ph . getDriver ( ) . findElementsByClassName ( \"usk-block-link\" ) ; musicURL . clear ( ) ; for ( WebElement e : favMusicList ) { musicURL . add ( e . getAttribute ( \"href\" ) ) ; } j = 0 ; } songUrl = musicURL . get ( j ) ; id = songUrl . substring ( 41 , songUrl . indexOf ( \"?\" ) ) ; v = JoyDAO . getInstance ( ) . select ( id ) ; if ( ! v . isEmpty ( ) ) { m = v . get ( 0 ) ; if ( userNum == 1 ) { nameSet . add ( m . getName ( ) + \" ▁ // ▁ \" + m . getArtist ( ) ) ; artistSet . add ( m . getArtist ( ) ) ; if ( ! m . getRelation ( ) . equals ( \"\" ) ) { relationSet . add ( m . getRelation ( ) ) ; } } else { if ( nameMap . containsKey ( m . getName ( ) + \" ▁ // ▁ \" + m . getArtist ( ) ) ) { nameMap . put ( m . getName ( ) + \" ▁ // ▁ \" + m . getArtist ( ) , nameMap . get ( m . getName ( ) + \" ▁ // ▁ \" + m . getArtist ( ) ) + 5 ) ; } else { nameMap . put ( m . getName ( ) + \" ▁ // ▁ \" + m . getArtist ( ) , 5 ) ; } if ( artistMap . containsKey ( m . getArtist ( ) ) ) { artistMap . put ( m . getArtist ( ) , artistMap . get ( m . getArtist ( ) ) + 2 ) ; } else { artistMap . put ( m . getArtist ( ) , 2 ) ; } if ( ! m . getRelation ( ) . equals ( \"\" ) ) { if ( relationMap . containsKey ( m . getRelation ( ) ) ) { relationMap . put ( m . getRelation ( ) , relationMap . get ( m . getRelation ( ) ) + 3 ) ; } else { relationMap . put ( m . getRelation ( ) , 3 ) ; } } } } else { ph . getDriver ( ) . get ( songUrl ) ; th . sleep ( waitTime ) ; try { songwordstitle = ph . getDriver ( ) . findElementByXPath ( \" // div[@class='jp-cmp-song-words-title ▁ ng-binding']\" ) . getText ( ) ; } catch ( Exception e ) { ph . getDriver ( ) . navigate ( ) . back ( ) ; th . sleep ( waitTime ) ; continue ; } name = songwordstitle . substring ( 0 , songwordstitle . length ( ) - 3 ) ; name = name . substring ( 1 , name . length ( ) - 1 ) ; artist = ph . getDriver ( ) . findElementByClassName ( \"jp-cmp-table-column-001\" ) . getText ( ) ; try { relation = ph . getDriver ( ) . findElementByXPath ( \" // div[@data-ng-repeat='tieup ▁ in ▁ detail.tieupList']\" ) . getText ( ) ; } catch ( Exception e1 ) { relation = \"\" ; } JoyDAO . getInstance ( ) . insert ( id , name , artist , relation ) ; if ( userNum == 1 ) { nameSet . add ( name + \" ▁ // ▁ \" + artist ) ; artistSet . add ( artist ) ; if ( ! relation . equals ( \"\" ) ) { relationSet . add ( relation ) ; } } else { if ( nameMap . containsKey ( name + \" ▁ // ▁ \" + artist ) ) { nameMap . put ( name + \" ▁ // ▁ \" + artist , nameMap . get ( name + \" ▁ // ▁ \" + artist ) + 5 ) ; } else { nameMap . put ( name + \" ▁ // ▁ \" + artist , 5 ) ; } if ( artistMap . containsKey ( artist ) ) { artistMap . put ( artist , artistMap . get ( artist ) + 2 ) ; } else { artistMap . put ( artist , 2 ) ; } if ( ! relation . equals ( \"\" ) ) { if ( relationMap . containsKey ( relation ) ) { relationMap . put ( relation , relationMap . get ( relation ) + 3 ) ; } else { relationMap . put ( relation , 3 ) ; } } } } } System . out . println ( \"マイうた読み込み完了\" ) ; } catch ( InterruptedException e1 ) { e1 . printStackTrace ( ) ; } } ", "comments": [], "method name": "fav Music Run"}
{"id": 616, "website": "bigquery", "code": " public void function ( ) { WebDriver driver = null ; String strUrl = \"http: // www.tesco.com/\" ; try { driver = new FirefoxDriver ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 20 , TimeUnit . SECONDS ) ; driver . manage ( ) . window ( ) . maximize ( ) ; driver . navigate ( ) . to ( strUrl ) ; ( driver . findElement ( By . cssSelector ( \"#searchBox\" ) ) ) . sendKeys ( \"Flower\" ) ; Thread . sleep ( 3000 ) ; driver . navigate ( ) . refresh ( ) ; String htmlSource = driver . getPageSource ( ) ; System . out . println ( \"Html ▁ : ▁ \" + htmlSource ) ; Set < String > windowHandles = driver . getWindowHandles ( ) ; System . out . println ( \"Window ▁ Handles ▁ Before ▁ clicking ▁ twitter ▁ image:\" + windowHandles ) ; WebElement imgTwitter = driver . findElement ( By . cssSelector ( \".twitter\" ) ) ; imgTwitter . click ( ) ; Thread . sleep ( 2000 ) ; windowHandles = driver . getWindowHandles ( ) ; Object windowHandlesArray [ ] = windowHandles . toArray ( ) ; String strPopUpWH = windowHandlesArray [ windowHandlesArray . length - 1 ] . toString ( ) ; driver . switchTo ( ) . window ( strPopUpWH ) ; String strCurrentUrl = driver . getCurrentUrl ( ) ; System . out . println ( \"------------------------------------------\" ) ; System . out . println ( \"Twitter ▁ window ▁ url:\" + strCurrentUrl ) ; WebElement txtFullName = driver . findElement ( By . cssSelector ( \"input[name='user[name]']\" ) ) ; Thread . sleep ( 2000 ) ; txtFullName . sendKeys ( \"Harish ▁ Renukunta\" ) ; Thread . sleep ( 3000 ) ; System . out . println ( \"Window ▁ Handles:\" + windowHandles ) ; driver . close ( ) ; Thread . sleep ( 3000 ) ; } catch ( Exception ex ) { System . out . println ( \"Exception ▁ thrown:\" + ex . getMessage ( ) ) ; } finally { driver . quit ( ) ; } } ", "comments": ["Test"], "method name": "Driver Methods Example"}
{"id": 617, "website": "bigquery", "code": " public void function ( ) { try { driver . navigate ( ) . to ( \"http: // www.google.com\" ) ; driver . get ( strUrl ) ; WebElement txtItem = driver . findElement ( By . cssSelector ( \"input[data-bind*='value:itemToAdd']\" ) ) ; WebElement btnAdd = driver . findElement ( By . xpath ( \" // button[text()='Add']\" ) ) ; WebElement btnRemove = driver . findElement ( By . xpath ( \" // button[text()='Remove']\" ) ) ; WebElement btnSort = driver . findElement ( By . xpath ( \" // button[text()='Sort']\" ) ) ; WebElement lstItems = driver . findElement ( By . cssSelector ( \"select[multiple='multiple'][data-bind*='selectedOptions:selectedItems']\" ) ) ; List < String > mismatches = new ArrayList < String > ( ) ; if ( ! txtItem . isDisplayed ( ) ) { mismatches . add ( \"Item ▁ textbox ▁ not ▁ displayed\" ) ; } if ( ! btnAdd . isDisplayed ( ) ) { mismatches . add ( \"Add ▁ button ▁ not ▁ displayed\" ) ; } if ( ! btnRemove . isDisplayed ( ) ) { mismatches . add ( \"Remove ▁ button ▁ not ▁ displayed\" ) ; } if ( ! btnSort . isDisplayed ( ) ) { mismatches . add ( \"Sort ▁ button ▁ not ▁ displayed\" ) ; } if ( ! lstItems . isDisplayed ( ) ) { mismatches . add ( \"Items ▁ listbox ▁ not ▁ displayed\" ) ; } assertTrue ( mismatches . isEmpty ( ) , \"Objects ▁ not ▁ displayed:\" + mismatches ) ; } catch ( Exception ex ) { System . out . println ( \"Exception: ▁ \" + ex . getMessage ( ) ) ; fail ( \"Exception ▁ : ▁ \" + ex . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "verify UI Objects"}
{"id": 618, "website": "bigquery", "code": " public void function ( String jQueryVersion , String browserVersion ) throws Exception { String html = \"", "comments": [], "method name": "do Test Loading J Query"}
{"id": 619, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . cssSelector ( \"button.headerbutton\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"hbakker\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . id ( \"login_button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Management/Home\\\"']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Change ▁ Password\" ) ) . click ( ) ; driver . findElement ( By . name ( \"old_password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"old_password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . name ( \"new_password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"new_password\" ) ) . sendKeys ( \"password\" ) ; driver . findElement ( By . name ( \"rep_new_password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rep_new_password\" ) ) . sendKeys ( \"password\" ) ; WebElement dragElement = driver . findElement ( By . className ( \"clippy\" ) ) ; Actions builder = new Actions ( driver ) ; builder . dragAndDropBy ( dragElement , 100 , 0 ) . build ( ) . perform ( ) ; driver . findElement ( By . id ( \"management_save\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Account/Logout\\\"']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Management Change Password"}
{"id": 621, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . cssSelector ( \"button.headerbutton\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"hbakker\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . id ( \"login_button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Management/Home\\\"']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ Account\" ) ) . click ( ) ; driver . findElement ( By . name ( \"addition\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"addition\" ) ) . sendKeys ( \"a\" ) ; WebElement dragElement = driver . findElement ( By . className ( \"clippy\" ) ) ; Actions builder = new Actions ( driver ) ; builder . dragAndDropBy ( dragElement , 100 , 0 ) . build ( ) . perform ( ) ; driver . findElement ( By . id ( \"management_save\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Account/Logout\\\"']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Management Edit Account"}
{"id": 620, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . cssSelector ( \"button.headerbutton\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"hbakker\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . id ( \"login_button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Management/Home\\\"']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_pending\\\"]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#with_selected_confirm ▁ > ▁ p\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Reviews\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_pending\\\"]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='with_selected_confirm']/img[2]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Projects\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_pending\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"with_selected_confirm\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Account/Logout\\\"']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Management Acceptance Pending"}
{"id": 622, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . cssSelector ( \"button.headerbutton\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"hbakker\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . id ( \"login_button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Management/Home\\\"']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_declined\\\"]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#with_selected_confirm ▁ > ▁ p\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Reviews\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_declined\\\"]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='with_selected_confirm']/img[2]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Projects\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_declined\\\"]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#with_selected_confirm ▁ > ▁ p\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Account/Logout\\\"']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Management Acceptance Declined"}
{"id": 623, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . cssSelector ( \"button.headerbutton\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"hbakker\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"password\" ) ; driver . findElement ( By . id ( \"login_button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Management/Home\\\"']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Change ▁ Password\" ) ) . click ( ) ; driver . findElement ( By . name ( \"old_password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"old_password\" ) ) . sendKeys ( \"password\" ) ; driver . findElement ( By . name ( \"new_password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"new_password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . name ( \"rep_new_password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rep_new_password\" ) ) . sendKeys ( \"p@ssword\" ) ; WebElement dragElement = driver . findElement ( By . className ( \"clippy\" ) ) ; Actions builder = new Actions ( driver ) ; builder . dragAndDropBy ( dragElement , 100 , 0 ) . build ( ) . perform ( ) ; driver . findElement ( By . id ( \"management_save\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Account/Logout\\\"']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Management Change Password"}
{"id": 626, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 625, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 627, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 628, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 629, "website": "bigquery", "code": " private void function ( WebDriver driver ) throws Exception { LOGGER . debug ( \"Getting ▁ login ▁ URL ▁ ...\" ) ; String loginUrl = STUPID_GAME_LOGIN_URL ; LOGGER . debug ( \"Login ▁ URL ▁ is: ▁ <\" + loginUrl + \">\" ) ; driver . get ( loginUrl ) ; LOGGER . debug ( \"Login ▁ Page ▁ loaded, ▁ title ▁ is: ▁ \" + driver . getTitle ( ) ) ; WebElement loginElement = driver . findElement ( By . name ( \"username\" ) ) ; WebElement passwordElement = driver . findElement ( By . name ( \"password\" ) ) ; WebElement loginButton = driver . findElement ( By . className ( \"button-ok\" ) ) ; loginElement . sendKeys ( LOGIN ) ; passwordElement . sendKeys ( PASSWORD ) ; loginButton . click ( ) ; LOGGER . debug ( \"Post ▁ Login ▁ Page ▁ loaded, ▁ title ▁ is: ▁ \" + driver . getTitle ( ) ) ; Utils . readRessource ( \"/StupidGameHelpers.js\" ) ; driver . get ( STUPID_GAME_HARVEST_URL ) ; } ", "comments": [], "method name": "stupid Game Login"}
{"id": 630, "website": "bigquery", "code": " public void function ( ) { DriverManager . INSTANCE . startDriver ( ) ; DriverManager . INSTANCE . get ( testUrl ) ; Assertions . assertThat ( DriverManager . INSTANCE . getTitle ( ) ) . isEqualTo ( \"Test\" ) ; DriverManager . INSTANCE . get ( GOOGLE_URL ) ; Assertions . assertThat ( DriverManager . INSTANCE . getCurrentUrl ( ) ) . contains ( GOOGLE_URL ) ; Assertions . assertThat ( DriverManager . INSTANCE . getNumberOfDrivers ( ) ) . isEqualTo ( 2 ) ; DriverManager . INSTANCE . stopDriver ( ) ; Assertions . assertThat ( DriverManager . INSTANCE . getNumberOfDrivers ( ) ) . isEqualTo ( 1 ) ; Assertions . assertThat ( DriverManager . INSTANCE . getCurrentUrl ( ) ) . isEqualTo ( testUrl ) ; } ", "comments": ["Test"], "method name": "open Multiple Browser Windows"}
{"id": 624, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . cssSelector ( \"button.headerbutton\" ) ) . click ( ) ; driver . findElement ( By . name ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"username\" ) ) . sendKeys ( \"hbakker\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"p@ssword\" ) ; driver . findElement ( By . id ( \"login_button\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Management/Home\\\"']\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_approved\\\"]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#with_selected_confirm ▁ > ▁ p\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Reviews\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_approved\\\"]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@id='with_selected_confirm']/img[2]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Projects\" ) ) . click ( ) ; driver . findElement ( By . id ( \"checkall\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"apply_to_all\" ) ) ) . selectByVisibleText ( \"With ▁ Selected:\" ) ; driver . findElement ( By . cssSelector ( \"option[value=\\\"status_approved\\\"]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#with_selected_confirm ▁ > ▁ p\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@onclick='location.href ▁ = ▁ \\\"/Account/Logout\\\"']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Management Acceptance Approved"}
{"id": 631, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . xpath ( \" // a[@href='/library']/div[@class='nav-item']\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . id ( \"playlist-dropdown-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"create-set-item\" ) ) . click ( ) ; driver . findElement ( By . id ( \"set_name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"set_name\" ) ) . sendKeys ( \"ashish\" ) ; driver . findElement ( By . id ( \"save_playlist\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . id ( \"delete-set\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button // i[@class='icon-bars']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Delete Playlist"}
{"id": 632, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . xpath ( \" // a[@href='/library']/div[@class='nav-item']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button // i[@class='icon-bars']\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Dragand Dropplaylist"}
{"id": 633, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . xpath ( \" // button // i[@class='icon-bars']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@class='nav-item'][contains(text(),'My ▁ Subscriptions')]\" ) ) . click ( ) ; assertEquals ( \"MCAT ▁ Biology\" , driver . findElement ( By . xpath ( \" // div[@id='purchase-container'] // td[contains(text(),'MCAT ▁ Biology')]\" ) ) . getText ( ) ) ; assertEquals ( \"INACTIVE\" , driver . findElement ( By . xpath ( \" // descendant::span[@class ▁ = ▁ 'status'][2]\" ) ) . getText ( ) ) ; assertTrue ( isElementPresent ( By . xpath ( \"( // a[contains(text(),'SUBSCRIBE')])[2]\" ) ) ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'SUBSCRIBE')])[2]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test My Subscription For MCAT"}
{"id": 634, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . xpath ( \" // button // i[@class='icon-bars']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // div[@class='nav-item'][contains(text(),'My ▁ Subscriptions')]\" ) ) . click ( ) ; try { assertEquals ( \"Picmonic ▁ for ▁ Medicine\" , driver . findElement ( By . xpath ( \" // div[@id='purchase-container'] // td[contains(text(),'Picmonic ▁ for ▁ Medicine')]\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . xpath ( \"( // a[contains(text(),'SUBSCRIBE')])[2]\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test My Subscription For Medicine"}
{"id": 635, "website": "bigquery", "code": " public void function ( ) { try { driver . get ( baseUrl ) ; } catch ( UnreachableBrowserException e ) { System . out . println ( \"driver.get() ▁ threw ▁ an ▁ exception.\" ) ; e . printStackTrace ( ) ; } } ", "comments": [], "method name": "get Base URL"}
{"id": 636, "website": "bigquery", "code": " public void function ( ) { webDriver . get ( baseUrl + \"/businesses\" ) ; final Optional < WebElement > correctRow = findRowInTableRowsWithField ( BUSINESS_ROWS_LOCATOR , BUSINESS_ROW_NAME_LOCATOR , EXISTING_BUSINESS_NAME ) ; assertThat ( \"There ▁ is ▁ a ▁ business ▁ named ▁ Business ▁ 1\" , correctRow . isPresent ( ) , is ( true ) ) ; final List < String > businessNames = allFieldValuesInTable ( BUSINESS_ROWS_LOCATOR , BUSINESS_ROW_NAME_LOCATOR ) ; checkIfNamesAreSorted ( businessNames ) ; } ", "comments": ["Test"], "method name": "it Should Return Businesses"}
{"id": 637, "website": "bigquery", "code": " public void function ( ) { webDriver . get ( baseUrl + \"/businesses\" ) ; final Optional < WebElement > correctRow = findRowInTableRowsWithField ( BUSINESS_ROWS_LOCATOR , BUSINESS_ROW_NAME_LOCATOR , EXISTING_BUSINESS_NAME ) ; if ( correctRow . isPresent ( ) ) { correctRow . get ( ) . findElement ( By . className ( \"business-show-link\" ) ) . click ( ) ; String fullBusinessId = findElementByLocator ( By . className ( \"business-id\" ) ) . getText ( ) ; assertThat ( \"Business ▁ Id ▁ contains ▁ correct ▁ ID\" , fullBusinessId . contains ( \"#1\" ) , is ( true ) ) ; } else { fail ( \"Business ▁ named ▁ Business ▁ 1 ▁ wasn't ▁ found\" ) ; } } ", "comments": ["Test"], "method name": "it Should Open Business"}
{"id": 638, "website": "bigquery", "code": " public void function ( ) { webDriver . get ( baseUrl + \"/businesses\" ) ; findElementByLocator ( By . className ( \"business-name-field\" ) ) . sendKeys ( \"New ▁ name\" ) ; findElementByLocator ( By . className ( \"business-add-button\" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( \"alert\" ) ) ; assertThat ( \"Business ▁ Id ▁ contains ▁ correct ▁ ID\" , alertElement . getText ( ) . contains ( \"Business ▁ added ▁ successfully\" ) , is ( true ) ) ; } ", "comments": ["Test"], "method name": "it Should Add Business"}
{"id": 639, "website": "bigquery", "code": " public void function ( ) { webDriver . get ( baseUrl + \"/businesses\" ) ; findElementByLocator ( By . className ( \"business-name-field\" ) ) . sendKeys ( \"Exists\" ) ; findElementByLocator ( By . className ( \"business-add-button\" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( \"alert\" ) ) ; assertThat ( \"Validation ▁ problem ▁ alert ▁ is ▁ displayed\" , alertElement . getText ( ) . contains ( \"name ▁ already ▁ exists\" ) , is ( true ) ) ; } ", "comments": ["Test"], "method name": "it Should Not Add Existing Business"}
{"id": 640, "website": "bigquery", "code": " public void function ( ) { webDriver . get ( baseUrl + \"/businesses/2\" ) ; findElementByLocator ( By . className ( \"business-delete-button\" ) ) . click ( ) ; WebElement alertElement = findElementByLocator ( By . className ( \"alert\" ) ) ; assertThat ( \"Business ▁ removed ▁ message ▁ present\" , alertElement . getText ( ) . contains ( \"removed\" ) , is ( true ) ) ; } ", "comments": ["Test"], "method name": "it Should Remove Business"}
{"id": 642, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"AutoDock-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"AutoDock\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Input-File-DPF\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File-DAT\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"HSG1-Maps-FLD\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"cpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Auto Dock BR2"}
{"id": 643, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gamess-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gamess_Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Version\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Version\" ) ) . sendKeys ( \"00\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"PPN\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"PPN\" ) ) . sendKeys ( \"4\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"development\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gamess Stampede"}
{"id": 641, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"PhastaP-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Phasta_P\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Parasolid-Geometric-Model\" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT1 ) ; driver . findElement ( By . id ( \"Problem-Definition\" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT2 ) ; driver . findElement ( By . id ( \"Mesh-Description-File\" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT3 ) ; driver . findElement ( By . id ( \"Solver-Input-Parameters\" ) ) . sendKeys ( ExpFileReadUtils . PHASTA_INPUT4 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Phasta P Stampede"}
{"id": 644, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gamess-Karst\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gamess\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Version\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Version\" ) ) . sendKeys ( \"01\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"PPN\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"PPN\" ) ) . sendKeys ( \"4\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"karst.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"batch\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gamess Karst"}
{"id": 645, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"DFTB-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"DFTB+\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"DFTB-Input\" ) ) . sendKeys ( ExpFileReadUtils . DFTB_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test DFTB Stampede"}
{"id": 646, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"NwChem-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"NWChem\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Water-Molecule-Input\" ) ) . sendKeys ( ExpFileReadUtils . NWCHEM_INPUT1 ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Nw Chem Comet"}
{"id": 647, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"AutoDockVina-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"AutoDock_Vina\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Receptor-File\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Ligand-File\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Config-File\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCKVINA_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Auto Dock Vina Stampede"}
{"id": 649, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gromacs-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gromacs\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Portable-Input-Binary-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Coordinate-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gromacs Comet"}
{"id": 648, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gaussian-Karst\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gaussian\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"karst.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"batch\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gaussian Karst"}
{"id": 651, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gaussian-Bridges\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gaussian\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bridges.psc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"RM\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gaussian Bridges"}
{"id": 650, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Lammps-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Lammps_BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Friction-Simulation-Input\" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"gpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Lammps BR2"}
{"id": 652, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Abacus-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Abaqus\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Abacus-INP-File\" ) ) . sendKeys ( ExpFileReadUtils . ABAQUS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"ABQ_JOB\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"ABQ_JOB\" ) ) . sendKeys ( \"$abq_job\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Scratch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Scratch\" ) ) . sendKeys ( \"$PWD\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"CPUs\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"CPUs\" ) ) . sendKeys ( \"4\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Memory\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Memory\" ) ) . sendKeys ( \"80%\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"MP_MODE\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"MP_MODE\" ) ) . sendKeys ( \"threads\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Interactive\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Interactive\" ) ) . sendKeys ( \"interactive\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"User_Sub_Option\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"User_Sub_Option\" ) ) . sendKeys ( \"' ▁ '\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Restart_Option\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Restart_Option\" ) ) . sendKeys ( \"' ▁ '\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Datach\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Datach\" ) ) . sendKeys ( \"' ▁ '\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Double\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Double\" ) ) . sendKeys ( \"double\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Abaqus Comet"}
{"id": 653, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Project\" ) ) . click ( ) ; driver . findElement ( By . id ( \"create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"project-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"project-name\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"project-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"project-description\" ) ) . sendKeys ( projectDescription ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( \"save\" ) ) . click ( ) ; waitTime ( 750 ) ; driver . findElement ( By . cssSelector ( \"span.glyphicon.glyphicon-pencil\" ) ) . click ( ) ; driver . findElement ( By . id ( \"project-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"project-description\" ) ) . sendKeys ( projectDescription + \"_MODIFIED_2016\" ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( \"save\" ) ) . click ( ) ; waitTime ( 500 ) ; driver . findElement ( By . linkText ( \"Project\" ) ) . click ( ) ; driver . findElement ( By . id ( \"browse\" ) ) . click ( ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"search-value\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"search-value\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( \"search\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"View\" ) ) . click ( ) ; waitTime ( 500 ) ; } ", "comments": ["Test"], "method name": "test Create Modify Search Project"}
{"id": 654, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"CP2K-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"CP2K\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File-INP\" ) ) . sendKeys ( ExpFileReadUtils . CP2K_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"compute\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test CP2K Comet"}
{"id": 655, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gamess-Gordon\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gamess\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Version\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Version\" ) ) . sendKeys ( \"00\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"PPN\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"PPN\" ) ) . sendKeys ( \"4\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"gordon.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gamess Gordon"}
{"id": 657, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"QEspresso-Bridges\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Quantum_Espresso\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"AI-Pseudopotential-File\" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"AI-Primitive-Cell\" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bridges.psc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"RM\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Quantum Espresso Bridges"}
{"id": 656, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gaussian-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gaussian\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"cpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gaussian BR2"}
{"id": 659, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"QChem-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Qchem\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"IN-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . QCHEM_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"compute\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Q Chem Comet"}
{"id": 660, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"AmberSander-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Amber_Sander\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Heat-Restart-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Production-Control-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Parameter-Topology-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"cpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Amber Sander BR2"}
{"id": 658, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"AmberSander-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Amber_Sander\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Heat-Restart-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Production-Control-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Parameter-Topology-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Amber Sander Comet"}
{"id": 661, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gamess-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gamess\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Version\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Version\" ) ) . sendKeys ( \"00\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"PPN\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"PPN\" ) ) . sendKeys ( \"4\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gamess Comet"}
{"id": 662, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gromacs-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gromacs\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Portable-Input-Binary-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Coordinate-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"cpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gromacs BR2"}
{"id": 663, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Lammps-Karst\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Lammps\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Friction-Simulation-Input\" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"karst.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"batch\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Lammps Karst"}
{"id": 664, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gaussian-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gaussian\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"60\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gaussian Comet"}
{"id": 665, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Abinit-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Abinit\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Tbase-Input-File-1\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Tbase-Input-File-2\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Pspgth-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"cpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Abinit BR2"}
{"id": 666, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Lammps-Gordon\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Lammps\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Friction-Simulation-Input\" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"gordon.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Lammps Gordon"}
{"id": 667, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"DDSCat-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"DDSCat\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"PAR-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . DDSCAT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"TAB-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . DDSCAT_INPUT2 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"compute\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"24\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"180\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test DDS Cat Comet"}
{"id": 668, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"QEspresso-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Quantum_Espresso\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"AI-Pseudopotential-File\" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"AI-Primitive-Cell\" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Quantum Espresso Stampede"}
{"id": 669, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"AutoDock-Karst\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"AutoDock\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Input-File-DPF\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File-DAT\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"HSG1-Maps-FLD\" ) ) . sendKeys ( ExpFileReadUtils . AUTODOCK_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"karst.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"batch\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Auto Dock Karst"}
{"id": 670, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Molcas-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Molcas\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Molcas-Input\" ) ) . sendKeys ( ExpFileReadUtils . MOLCAS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"development\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"4\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"10\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Molcas Stampede"}
{"id": 671, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"CP2K-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"CP2K\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File-INP\" ) ) . sendKeys ( ExpFileReadUtils . CP2K_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test CP2K Stampede"}
{"id": 672, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gamess-BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gamess_BR2\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAMESS_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Version\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Version\" ) ) . sendKeys ( \"01\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Processes-Per-Job\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Processes-Per-Job\" ) ) . sendKeys ( \"16\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"PPN\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"PPN\" ) ) . sendKeys ( \"16\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bigred2.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"cpu\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gamess BR2"}
{"id": 673, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gromacs-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gromacs\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Portable-Input-Binary-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Coordinate-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gromacs Stampede"}
{"id": 674, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Abinit-Bridges\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Abinit\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Tbase-Input-File-1\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Tbase-Input-File-2\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Pspgth-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"bridges.psc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"RM\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Abinit Bridges"}
{"id": 676, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"AmberSander-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Amber_Sander\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Heat-Restart-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Production-Control-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Parameter-Topology-File\" ) ) . sendKeys ( ExpFileReadUtils . AMBER_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Amber Sander Stampede"}
{"id": 675, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Lammps-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Lammps\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Friction-Simulation-Input\" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Lammps Stampede"}
{"id": 677, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"QEspresso-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Quantum_Espresso\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"AI-Pseudopotential-File\" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"AI-Primitive-Cell\" ) ) . sendKeys ( ExpFileReadUtils . ESPRESSO_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Quantum Espresso Comet"}
{"id": 678, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gromacs-Karst\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gromacs\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Portable-Input-Binary-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Coordinate-File\" ) ) . sendKeys ( ExpFileReadUtils . GROMACS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"karst.uits.iu.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"batch\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Gromacs Karst"}
{"id": 679, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"NwChem-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"NWChem\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Water-Molecule-Input\" ) ) . sendKeys ( ExpFileReadUtils . NWCHEM_INPUT1 ) ; waitTime ( 200 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 500 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Nw Chem Stampede"}
{"id": 681, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"TinkerMonte-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Tinker_Monte\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"xyzf\" ) ) . sendKeys ( ExpFileReadUtils . TINKER_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"keyf\" ) ) . sendKeys ( ExpFileReadUtils . TINKER_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"stps\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"stps\" ) ) . sendKeys ( \"20000\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Ctc\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Ctc\" ) ) . sendKeys ( \"C\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"stpsZ\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"stpsZ\" ) ) . sendKeys ( \"3.0\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"temp\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"temp\" ) ) . sendKeys ( \"298\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Rconv\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Rconv\" ) ) . sendKeys ( \"0.01\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Tinker Monte Stampede"}
{"id": 680, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Lammps-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Lammps\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Friction-Simulation-Input\" ) ) . sendKeys ( ExpFileReadUtils . LAMMPS_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"shared\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Lammps Comet"}
{"id": 682, "website": "bigquery", "code": " public void function ( ) throws Exception { String username = null ; String password = null ; try { username = ExpFileReadUtils . readProperty ( \"new.pga.username\" ) ; password = ExpFileReadUtils . readProperty ( \"new.pga.password\" ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } if ( username == null || username . trim ( ) . equals ( \"\" ) || password == null || password . trim ( ) . equals ( \"\" ) ) throw new RuntimeException ( \"PGS ▁ user ▁ name ▁ or ▁ password ▁ in ▁ exp.properties ▁ file ▁ is ▁ invalid ▁ !\" ) ; username = username . trim ( ) ; password = password . trim ( ) ; driver . get ( baseUrl ) ; driver . findElement ( By . linkText ( \"Create ▁ account\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( username ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( password ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"confirm_password\" ) ) . sendKeys ( password ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"pgauser@gmail.com\" ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"first_name\" ) ) . sendKeys ( \"PGA\" ) ; waitTime ( 500 ) ; driver . findElement ( By . id ( \"last_name\" ) ) . sendKeys ( \"User\" ) ; waitTime ( 500 ) ; driver . findElement ( By . name ( \"Submit\" ) ) . click ( ) ; waitTime ( 5000 ) ; } ", "comments": ["Test"], "method name": "test Create User Login"}
{"id": 683, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"CPMD-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"CPMD\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"INP-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . CPMD_INPUT1 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"compute\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test CPMD Comet"}
{"id": 684, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"VinaMultiple-Stampede\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Vina_Multiple\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Receptor-File\" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Multi-Ligand-Zip-File\" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Config-File\" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"stampede.tacc.xsede.org\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Vina Multiple Stampede"}
{"id": 686, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"VinaMultiple-Comet\" ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Vina_Multiple\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Receptor-File\" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Multi-Ligand-Zip-File\" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Config-File\" ) ) . sendKeys ( ExpFileReadUtils . VINAMULTIPLE_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"compute\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Vina Multiple Comet"}
{"id": 685, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Gaussian-Gordon\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Gaussian\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Input-File\" ) ) . sendKeys ( ExpFileReadUtils . GAUSSIAN_INPUT2 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"gordon.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"normal\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Gaussian Gordon"}
{"id": 689, "website": "bigquery", "code": " private void function ( String url ) { driver . get ( url ) ; seleniumInteractions . takeScreenshot ( ) ; } ", "comments": [], "method name": "go To Url"}
{"id": 688, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Página ▁ Inicial\" ) ) ; driver . findElement ( By . id ( \"buscar\" ) ) . sendKeys ( \"darf\" ) ; driver . findElement ( By . className ( \"searchButton\" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ darf\" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li\" ) ) . size ( ) , is ( 20 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li ▁ h3\" ) ) . get ( 0 ) . getText ( ) , is ( \"Documento ▁ de ▁ Arrecadação ▁ de ▁ Receitas ▁ Federais ▁ (Darf)\" ) ) ; assertThat ( driver . findElement ( By . id ( \"buscar\" ) ) . getAttribute ( \"value\" ) , is ( \"darf\" ) ) ; driver . findElement ( By . id ( \"buscar\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"buscar\" ) ) . sendKeys ( \"prouni\" ) ; driver . findElement ( By . className ( \"searchButton\" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ prouni\" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li\" ) ) . size ( ) , is ( 20 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li ▁ h3\" ) ) . get ( 0 ) . getText ( ) , is ( \"ProUni ▁ — ▁ Programa ▁ Universidade ▁ para ▁ Todos\" ) ) ; driver . findElement ( By . cssSelector ( \"#resultados-busca ▁ li ▁ a\" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ ProUni ▁ — ▁ Programa ▁ Universidade ▁ para ▁ Todos\" ) ) ; } ", "comments": ["Test"], "method name": "busca Simples Por Darf"}
{"id": 691, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement userNameElement = driver . findElement ( By . id ( \"username\" ) ) ; userNameElement . clear ( ) ; userNameElement . sendKeys ( \"admin\" ) ; WebElement passwordElement = driver . findElement ( By . name ( \"password\" ) ) ; passwordElement . clear ( ) ; passwordElement . sendKeys ( \"admin\" ) ; } ", "comments": ["Test"], "method name": "Do Login Test"}
{"id": 690, "website": "bigquery", "code": " private String function ( String email , String pw , String client_id , String redirect_uri , String scope ) { Property staticToken = property ( \"authToken\" ) ; if ( staticToken . exists ( ) ) { return staticToken . getPropertyValue ( ) ; } String requestTokenUrl = String . format ( \"%s?response_type=token&client_id=%s&redirect_uri=%s&scope=%s\" , GOOGLE_OAUTH2_REQUEST_TOKEN_URL , client_id , redirect_uri , scope ) ; String cacheKey = email + \":\" + requestTokenUrl ; if ( tokenCache . containsKey ( cacheKey ) ) { return tokenCache . get ( cacheKey ) ; } driver . manage ( ) . deleteAllCookies ( ) ; driver . get ( requestTokenUrl ) ; try { driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( email ) ; driver . findElement ( By . id ( \"Passwd\" ) ) . sendKeys ( pw ) ; driver . findElement ( By . id ( \"signIn\" ) ) . submit ( ) ; } catch ( NoSuchElementException nsee ) { String errMsg = driver . getCurrentUrl ( ) + \" ▁ ----- ▁ \" + driver . getPageSource ( ) ; throw new NoSuchElementException ( nsee . toString ( ) + \" ▁ ----- ▁ \" + errMsg ) ; } try { WebElement button = driver . findElement ( By . id ( \"submit_approve_access\" ) ) ; Graphene . waitModel ( driver ) . withTimeout ( 5 , TimeUnit . SECONDS ) . until ( ) . element ( button ) . is ( ) . enabled ( ) ; button . click ( ) ; } catch ( NoSuchElementException e ) { } String redirectUrlWithToken = driver . getCurrentUrl ( ) . replace ( \"#access_token=\" , \"?access_token=\" ) ; List < NameValuePair > params ; try { params = URLEncodedUtils . parse ( new URI ( redirectUrlWithToken ) , \"UTF-8\" ) ; } catch ( URISyntaxException urise ) { throw new IllegalStateException ( urise ) ; } String accessToken = null ; for ( NameValuePair param : params ) { if ( param . getName ( ) . equals ( \"access_token\" ) ) { accessToken = param . getValue ( ) ; } } assertNotNull ( \"Token ▁ is ▁ null:\" + driver . getCurrentUrl ( ) + \" ▁ ----- ▁ \" + driver . getPageSource ( ) , accessToken ) ; tokenCache . put ( cacheKey , accessToken ) ; return accessToken ; } ", "comments": [" This can get a single scope only.  Unable to automate requesting token for multiple scopes."], "method name": "get Google Access Token"}
{"id": 692, "website": "bigquery", "code": " public void function ( ) throws Exception { iAmDoingLitleAuth ( ) ; iAmLoggedInAsWithThePassword ( \"abc@gmail.com\" , \"password\" ) ; iHaveInMyCart ( \"vault\" ) ; iCheckOutWith ( \"Visa\" , \"4100000000000001\" ) ; iLogOutAsUser ( ) ; iAmLoggedInAsAnAdministrator ( ) ; iView ( \"Sales\" , \"Orders\" ) ; iClickOnTheTopRowInOrders ( ) ; iPressInvoice ( ) ; iSelectNameFromSelect ( \"Capture ▁ Online\" , \"invoice[capture_case]\" ) ; iPressSubmitInvoice ( \"The ▁ invoice ▁ has ▁ been ▁ created.\" , null ) ; iView ( \"Sales\" , \"Transactions\" ) ; WebElement table = driver . findElement ( By . id ( \"order_transactions_table\" ) ) ; List < WebElement > rows = table . findElement ( By . tagName ( \"tbody\" ) ) . findElements ( By . tagName ( \"tr\" ) ) ; assertEquals ( 2 , rows . size ( ) ) ; WebElement firstRow = rows . get ( 0 ) ; firstRow . click ( ) ; String parentUrl = verifyTransactionDetailTable ( \"capture\" ) ; driver . get ( parentUrl ) ; verifyTransactionDetailTable ( \"authorization\" ) ; iLogOutAsAdministrator ( ) ; } ", "comments": ["Test"], "method name": "transaction Detail Has Links To Litle"}
{"id": 687, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Experiment\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.dropdown.open ▁ > ▁ ul.dropdown-menu ▁ > ▁ li ▁ > ▁ #create\" ) ) . click ( ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-name\" ) ) . sendKeys ( expName + \"Abinit-Comet\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"experiment-description\" ) ) . sendKeys ( \"Test ▁ Experiment\" ) ; new Select ( driver . findElement ( By . id ( \"project\" ) ) ) . selectByVisibleText ( ExpFileReadUtils . readProperty ( \"project.name\" ) ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"application\" ) ) ) . selectByVisibleText ( \"Abinit\" ) ; waitTime ( 200 ) ; driver . findElement ( By . name ( \"continue\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Tbase-Input-File-1\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT1 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Tbase-Input-File-2\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT2 ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"Pspgth-Input-File\" ) ) . sendKeys ( ExpFileReadUtils . ABINIT_INPUT3 ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"compute-resource\" ) ) ) . selectByVisibleText ( \"comet.sdsc.edu\" ) ; waitTime ( 200 ) ; new Select ( driver . findElement ( By . id ( \"select-queue\" ) ) ) . selectByVisibleText ( \"compute\" ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"node-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"node-count\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"cpu-count\" ) ) . sendKeys ( \"16\" ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"wall-time\" ) ) . sendKeys ( \"30\" ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"memory-count\" ) ) . sendKeys ( \"0\" ) ; driver . findElement ( By . id ( \"enableEmail\" ) ) . click ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"emailAddresses\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email1\" ) ) ; driver . findElement ( By . xpath ( \"( // button[@type='button'])[3]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@name='emailAddresses[]'])[2]\" ) ) . sendKeys ( ExpFileReadUtils . readProperty ( \"email2\" ) ) ; waitTime ( 200 ) ; driver . findElement ( By . id ( \"expLaunch\" ) ) . click ( ) ; waitTime ( 200 ) ; } ", "comments": ["Test"], "method name": "test Abinit Comet"}
{"id": 695, "website": "bigquery", "code": " public void function ( String url ) throws Throwable { webDriver . get ( BASE_URL + url ) ; waitAndTakeScreenshot ( 10000 ) ; } ", "comments": ["When(\"^the User navigates to \\\"(.*?)\\\"$\")"], "method name": "the User navigates to"}
{"id": 694, "website": "bigquery", "code": " void function ( ) { String url = driver . findElement ( By . xpath ( \"/html/body/div[2]/div[3]/div/div/div[2]/div/div[3]/div[2]/div/div/div/table/tbody/tr\" ) ) . getAttribute ( \"title\" ) ; driver . get ( url ) ; waitFor ( By . id ( \"comments_block\" ) ) ; } ", "comments": [], "method name": "i Click On The Top Row In Invoices"}
{"id": 696, "website": "bigquery", "code": " public void function ( String url ) throws Throwable { driver = new FirefoxDriver ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . get ( url ) ; } ", "comments": ["Dado(\"^que el usuario ingreso a \\\"([^\\\"]*)\\\"$\")"], "method name": "que el usuario ingreso a"}
{"id": 693, "website": "bigquery", "code": " void function ( String email ) { if ( \"New ▁ Order ▁ / ▁ Orders ▁ / ▁ Sales ▁ / ▁ Magento ▁ Admin\" . equals ( driver . getTitle ( ) ) ) { WebElement e = driver . findElement ( By . id ( \"sales_order_create_customer_grid_table\" ) ) ; e = e . findElement ( By . tagName ( \"tbody\" ) ) ; List < WebElement > rows = e . findElements ( By . tagName ( \"tr\" ) ) ; WebElement rowToClick = null ; for ( WebElement row : rows ) { WebElement emailCol = row . findElements ( By . tagName ( \"td\" ) ) . get ( 2 ) ; String colValue = emailCol . getText ( ) . trim ( ) ; if ( colValue . equals ( email ) ) { rowToClick = row ; } } assertNotNull ( \"Couldn't ▁ find ▁ customer ▁ with ▁ email ▁ \" + email , rowToClick ) ; rowToClick . click ( ) ; waitFor ( By . id ( \"submit_order_top_button\" ) ) ; } else { WebElement e = driver . findElement ( By . id ( \"customerGrid_table\" ) ) ; e = e . findElement ( By . tagName ( \"tbody\" ) ) ; List < WebElement > rows = e . findElements ( By . tagName ( \"tr\" ) ) ; String url = null ; for ( WebElement row : rows ) { WebElement emailCol = row . findElements ( By . tagName ( \"td\" ) ) . get ( 3 ) ; String colName = emailCol . getText ( ) . trim ( ) ; if ( colName . equals ( email ) ) { url = row . getAttribute ( \"title\" ) ; } } assertNotNull ( \"Couldn't ▁ find ▁ customer ▁ with ▁ email ▁ \" + email , url ) ; driver . get ( url ) ; waitFor ( By . id ( \"customer_info_tabs\" ) ) ; } } ", "comments": [], "method name": "i Click On The Customer With Email"}
{"id": 699, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"Admin\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Login As Admin"}
{"id": 697, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . sendKeys ( \"Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . sendKeys ( \"Multnomah ▁ Falls ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . sendKeys ( \"Santiam ▁ State ▁ Forest ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . sendKeys ( \"Silver ▁ Falls ▁ State ▁ Park ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . sendKeys ( \"Zion ▁ National ▁ Park ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Delete Locations"}
{"id": 698, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . sendKeys ( \"36.0553\" ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . sendKeys ( \"-112.1218\" ) ; driver . findElement ( By . id ( \"Description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Description\" ) ) . sendKeys ( \"The ▁ Grand ▁ Canyon ▁ is ▁ a ▁ steep-sided ▁ canyon ▁ carved ▁ by ▁ the ▁ Colorado ▁ River ▁ in ▁ the ▁ state ▁ of ▁ Arizona ▁ in ▁ the ▁ United ▁ States.\" ) ; new Select ( driver . findElement ( By . id ( \"Difficulty\" ) ) ) . selectByVisibleText ( \"Easy\" ) ; driver . findElement ( By . id ( \"RecOptions_0__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"Multnomah ▁ Falls ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . sendKeys ( \"45.5760\" ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . sendKeys ( \"-122.1154\" ) ; driver . findElement ( By . id ( \"Description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Description\" ) ) . sendKeys ( \"Multnomah ▁ Falls ▁ is ▁ a ▁ waterfall ▁ on ▁ the ▁ Oregon ▁ side ▁ of ▁ the ▁ Columbia ▁ River ▁ Gorge, ▁ located ▁ east ▁ of ▁ Troutdale, ▁ between ▁ Corbett ▁ and ▁ Dodson, ▁ along ▁ the ▁ Historic ▁ Columbia ▁ River ▁ Highway.\" ) ; driver . findElement ( By . id ( \"RecOptions_0__IsChecked\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"Difficulty\" ) ) ) . selectByVisibleText ( \"Medium\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"Santiam ▁ State ▁ Forest ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . sendKeys ( \"44.7165\" ) ; driver . findElement ( By . id ( \"Description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Description\" ) ) . sendKeys ( \"Santiam ▁ State ▁ Forest ▁ is ▁ one ▁ of ▁ six ▁ state ▁ forests ▁ managed ▁ by ▁ the ▁ Oregon ▁ Department ▁ of ▁ Forestry. ▁ The ▁ forest ▁ is ▁ located ▁ approximately ▁ 25 ▁ miles ▁ (40 ▁ km) ▁ southeast ▁ of ▁ Salem, ▁ Oregon, ▁ and ▁ includes ▁ 47,871 ▁ acres ▁ (193.73 ▁ km2).\" ) ; new Select ( driver . findElement ( By . id ( \"Difficulty\" ) ) ) . selectByVisibleText ( \"Hard\" ) ; driver . findElement ( By . id ( \"RecOptions_0__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . id ( \"RecOptions_1__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"Silver ▁ Falls ▁ State ▁ Park ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . sendKeys ( \"44.8512\" ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . sendKeys ( \"-122.6462\" ) ; driver . findElement ( By . id ( \"Description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Description\" ) ) . sendKeys ( \"Silver ▁ Falls ▁ State ▁ Park ▁ is ▁ a ▁ state ▁ park ▁ in ▁ the ▁ U.S. ▁ state ▁ of ▁ Oregon, ▁ located ▁ near ▁ Silverton, ▁ about ▁ 20 ▁ miles ▁ (32 ▁ km) ▁ east-southeast ▁ of ▁ Salem. ▁ It ▁ is ▁ the ▁ largest ▁ state ▁ park ▁ in ▁ Oregon ▁ with ▁ an ▁ area ▁ of ▁ more ▁ than ▁ 9,000 ▁ acres ▁ (36 ▁ km2).\" ) ; new Select ( driver . findElement ( By . id ( \"Difficulty\" ) ) ) . selectByVisibleText ( \"Varies\" ) ; driver . findElement ( By . id ( \"RecOptions_1__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"Zion ▁ National ▁ Park ▁ (Testing)\" ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Latitude\" ) ) . sendKeys ( \"37.2026\" ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Longitude\" ) ) . sendKeys ( \"-112.9878\" ) ; driver . findElement ( By . id ( \"Description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Description\" ) ) . sendKeys ( \"Zion ▁ National ▁ Park ▁ is ▁ located ▁ in ▁ the ▁ Southwestern ▁ United ▁ States, ▁ near ▁ Springdale, ▁ Utah. ▁ A ▁ prominent ▁ feature ▁ of ▁ the ▁ 229-square-mile ▁ (590 ▁ km2) ▁ park ▁ is ▁ Zion ▁ Canyon, ▁ which ▁ is ▁ 15 ▁ miles ▁ (24 ▁ km) ▁ long ▁ and ▁ up ▁ to ▁ half ▁ a ▁ mile ▁ (800 ▁ m) ▁ deep.\" ) ; new Select ( driver . findElement ( By . id ( \"Difficulty\" ) ) ) . selectByVisibleText ( \"NA\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Create Locations"}
{"id": 701, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"asenner\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"first\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Rating\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . sendKeys ( \"This ▁ is ▁ a ▁ nice ▁ canyon.\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jgarcia2\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Write ▁ New ▁ Review\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // input[@id='Rating'])[2]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . sendKeys ( \"I ▁ don't ▁ like ▁ canyons.\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"acarson\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Write ▁ New ▁ Review\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Rating\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . sendKeys ( \"I ▁ go ▁ here ▁ every ▁ year ▁ with ▁ my ▁ parents.\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jpetersen\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Grand ▁ Canyon ▁ National ▁ Park ▁ (Testing)\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Write ▁ New ▁ Review\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Rating\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Comment\" ) ) . sendKeys ( \"Sometimes ▁ I ▁ wish ▁ we'd ▁ all ▁ just ▁ get ▁ along.\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Add Reviews"}
{"id": 700, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"registerLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"asenner\" ) ; driver . findElement ( By . id ( \"Email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( \"asenner@fake.com\" ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . sendKeys ( \"April\" ) ; driver . findElement ( By . id ( \"LastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"LastName\" ) ) . sendKeys ( \"Senner\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"Private\" ) ) . click ( ) ; driver . findElement ( By . id ( \"RecOptions_0__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . id ( \"RecOptions_1__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"registerLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"acarson\" ) ; driver . findElement ( By . id ( \"Email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( \"acarson@fake.com\" ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . sendKeys ( \"Aaron\" ) ; driver . findElement ( By . id ( \"LastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"LastName\" ) ) . sendKeys ( \"Carson\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"RecOptions_0__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"registerLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jpetersen\" ) ; driver . findElement ( By . id ( \"Email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( \"jpetersen@fake.com\" ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . sendKeys ( \"Jared\" ) ; driver . findElement ( By . id ( \"LastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"LastName\" ) ) . sendKeys ( \"Petersen\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"RecOptions_1__IsChecked\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"registerLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jgarcia\" ) ; driver . findElement ( By . id ( \"Email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( \"jgarcia@fake.com\" ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"FirstName\" ) ) . sendKeys ( \"J.J.\" ) ; driver . findElement ( By . id ( \"LastName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"LastName\" ) ) . sendKeys ( \"Garcia\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"Private\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jgarcia2\" ) ; driver . findElement ( By . id ( \"Email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( \"jgarcia2@fake.com\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"ConfirmPassword\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; } ", "comments": [" Create some users.", " @throws Exception", "Test"], "method name": "test Create Users"}
{"id": 703, "website": "bigquery", "code": " public void function ( String title ) { driver . get ( baseUrl + \"/Location\" ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . id ( \"dropdownMenu1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"All\" ) ) . click ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"searchString\" ) ) . sendKeys ( title ) ; driver . findElement ( By . id ( \"btn\" ) ) . click ( ) ; if ( ! driver . getTitle ( ) . contains ( title ) ) { fail ( \"title ▁ of ▁ page ▁ must ▁ contain ▁ \" + title ) ; } } ", "comments": [], "method name": "assert Page Title Contains Search Query"}
{"id": 702, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"asenner\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Hello ▁ asenner!\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ Reviews\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jgarcia2\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Hello ▁ jgarcia2!\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ Reviews\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"acarson\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Hello ▁ acarson!\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ Reviews\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"jpetersen\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Hello ▁ jpetersen!\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"My ▁ Reviews\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Log ▁ off\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Remove Reviews"}
{"id": 706, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Has A Header"}
{"id": 705, "website": "bigquery", "code": " private String function ( String nextUrl ) { driver . navigate ( ) . to ( nextUrl ) ; try { Thread . sleep ( TimeUnit . SECONDS . toMillis ( BROWSER_TIME_OUT ) ) ; } catch ( InterruptedException e ) { log . error ( \"Interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ browser ▁ to ▁ render\" ) ; Thread . currentThread ( ) . interrupt ( ) ; } return driver . getPageSource ( ) ; } ", "comments": [], "method name": "from Web Driver"}
{"id": 708, "website": "bigquery", "code": " public static void function ( WebDriver driver ) throws Exception { try { driver . findElement ( By . xpath ( \" // nav\" ) ) ; } catch ( Exception e ) { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; } } ", "comments": [], "method name": "may Be Login"}
{"id": 709, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 704, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"loginLink\" ) ) . click ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"UserName\" ) ) . sendKeys ( \"Admin\" ) ; driver . findElement ( By . id ( \"Password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Password\" ) ) . sendKeys ( \"Password1!\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"TempLocation\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add ▁ New\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Label\" ) ) . sendKeys ( \"MergedLocation\" ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Hello ▁ Admin!\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Join ▁ Locations\" ) ) . click ( ) ; driver . findElement ( By . id ( \"SearchStringA\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"SearchStringA\" ) ) . sendKeys ( \"TempLocation\" ) ; driver . findElement ( By . cssSelector ( \"div ▁ > ▁ p ▁ > ▁ input[type=\\\"submit\\\"]\" ) ) . click ( ) ; driver . findElement ( By . id ( \"SearchStringB\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"SearchStringB\" ) ) . sendKeys ( \"MergedLocation\" ) ; driver . findElement ( By . xpath ( \" // input[@value='Search ▁ Location ▁ B']\" ) ) . click ( ) ; assertEquals ( \"TempLocation\" , driver . findElement ( By . xpath ( \" // td[2]\" ) ) . getText ( ) ) ; assertEquals ( \"MergedLocation\" , driver . findElement ( By . xpath ( \" // div[2]/table/tbody/tr[2]/td[2]\" ) ) . getText ( ) ) ; driver . findElement ( By . name ( \"LocationA\" ) ) . click ( ) ; driver . findElement ( By . name ( \"LocationB\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; assertEquals ( \"MergedLocation ▁ - ▁ tents ▁ n ▁ trails\" , driver . getTitle ( ) ) ; assertEquals ( \"Location ▁ A ▁ has ▁ been ▁ merged ▁ into ▁ Location ▁ B.\" , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; driver . findElement ( By . linkText ( \"Locations\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \"( // a[contains(text(),'Delete')])[3]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.btn.btn-default\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Merge Locations"}
{"id": 710, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 707, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"q\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"Sunshine\" ) ; driver . findElement ( By . cssSelector ( \"input#q\" ) ) . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . cssSelector ( \"div#container ▁ a[href='./?go=movie&id=12']\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . cssSelector ( \"div.title\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; driver . findElement ( By . id ( \"q\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"Sunshine\" ) ; driver . findElement ( By . cssSelector ( \"input#q\" ) ) . sendKeys ( Keys . ENTER ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( isElementPresent ( By . cssSelector ( \"div#container ▁ a[href='./?go=movie&id=12']\" ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Delete Film"}
{"id": 712, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 713, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 714, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 715, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . isFirefox ( driver ) && TestUtilities . isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 716, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 711, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"Le ▁ jouet\" ) ; driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"1976\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"120\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"5\" ) ; driver . findElement ( By . name ( \"trailer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"trailer\" ) ) . sendKeys ( \"http: // www.kinopoisk.ru/film/57004/video/124770/\" ) ; driver . findElement ( By . name ( \"notes\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"notes\" ) ) . sendKeys ( \"Pierre ▁ Richar\" ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . sendKeys ( \"Comedy\" ) ; driver . findElement ( By . id ( \"text_languages_0\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"text_languages_0\" ) ) . sendKeys ( \"French\" ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . sendKeys ( \"NO\" ) ; driver . findElement ( By . name ( \"country\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"country\" ) ) . sendKeys ( \"France\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Home\" ) ) . click ( ) ; driver . get ( baseUrl + \"/php4dvd/#!/sort/name%20asc/\" ) ; driver . findElement ( By . cssSelector ( \"div.title\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; driver . quit ( ) ; } ", "comments": ["Test"], "method name": "test Add Movie"}
{"id": 717, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 719, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, CHROME, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE},"], "method name": "handle Form With Javascript Action"}
{"id": 720, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 718, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 721, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 723, "website": "bigquery", "code": " public void function ( ) throws IOException { ChromeDriverService driverService = factory . createService ( ) ; driverService . start ( ) ; WebDriver webDriver = factory . createWebDriver ( driverService ) ; String url = \"http: // localhost:\" + httpServer . getAddress ( ) . getPort ( ) + \"/webdriverTest\" ; webDriver . get ( url ) ; String currentUrl = webDriver . getCurrentUrl ( ) ; assertThat ( currentUrl ) . isEqualTo ( url ) ; driverService . stop ( ) ; } ", "comments": ["Test"], "method name": "start And Stop"}
{"id": 722, "website": "bigquery", "code": " public void function ( ) throws IOException { PhantomJSDriverService driverService = factory . createService ( ) ; driverService . start ( ) ; try { WebDriver webDriver = factory . createWebDriver ( driverService ) ; String url = \"http: // localhost:\" + httpServer . getAddress ( ) . getPort ( ) + \"/webdriverTest\" ; webDriver . get ( url ) ; String currentUrl = webDriver . getCurrentUrl ( ) ; assertThat ( currentUrl ) . isEqualTo ( url ) ; } finally { driverService . stop ( ) ; } } ", "comments": ["Test"], "method name": "start And Stop"}
{"id": 724, "website": "bigquery", "code": " public void function ( ) throws IOException { ChromeDriverConfiguration driverConfiguration = new ChromeDriverConfiguration ( ) ; ChromeDriverServiceFactory factory = new ChromeDriverServiceFactory ( driverConfiguration ) ; driverConfiguration . setUserDir ( temporaryFolder . newFolder ( ) . getAbsolutePath ( ) ) ; driverService = factory . createService ( ) ; driverService . start ( ) ; String url = \"chrome: // version\" ; By selector = By . id ( \"profile_path\" ) ; WebDriver driver1 = factory . createWebDriver ( driverService ) ; driver1 . get ( url ) ; String profilePath1 = driver1 . findElement ( selector ) . getText ( ) ; driverService . stop ( ) ; driverService . start ( ) ; WebDriver driver2 = factory . createWebDriver ( driverService ) ; driver2 . get ( url ) ; String profilePath2 = driver2 . findElement ( selector ) . getText ( ) ; assertThat ( profilePath1 ) . isEqualTo ( profilePath2 ) ; } ", "comments": ["Test"], "method name": "test Using Custom Userprofile"}
{"id": 725, "website": "bigquery", "code": " public void function ( ) { driver . get ( applicationUrl ) ; driver . findElement ( By . partialLinkText ( \"Product\" ) ) . click ( ) ; driver . findElement ( By . partialLinkText ( \"Create ▁ new ▁ product\" ) ) . click ( ) ; driver . findElement ( By . id ( \"name\" ) ) . sendKeys ( \"JBoss ▁ Developer ▁ Studio\" ) ; driver . findElement ( By . cssSelector ( \"input[value='Save']\" ) ) . click ( ) ; assertTrue ( \"Product ▁ should ▁ be ▁ created!\" , driver . findElement ( By . className ( \"alert_success\" ) ) != null ) ; } ", "comments": ["Test", "RunAsClient"], "method name": "can Add Product"}
{"id": 726, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; long time = System . currentTimeMillis ( ) ; String articleUrl = \"selenium\" + time ; String articleTitle = \"Selenium ▁ Article\" + time ; String articleContent = \"This ▁ is ▁ a ▁ testing ▁ article ▁ content. ▁ \" + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( \"Wait ▁ for ▁ item ▁ to ▁ be ▁ deployed\" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; String articleFilePath = seleniumProperties . getProperty ( \"craftercms.preview.deployer.path\" ) + \"/site/website/\" + articleUrl + \"/index.xml\" ; String contentTypeTag = \"", "comments": ["Test"], "method name": "change Template To Article Test"}
{"id": 729, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { final String updatedTitle = schedulePage ( ) ; logout ( ) ; useAdminUser ( ) ; login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ Go ▁ Live ▁ Queue ▁ widget\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"GoLiveQueue-body\" ) ) . getText ( ) . contains ( updatedTitle ) ; } } ) ; logger . info ( \"Check ▁ item\" ) ; By checkInputBy = By . xpath ( \" // div[@id='GoLiveQueue'] // input[@id='\" + seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) + \"']\" ) ; CStudioSeleniumUtil . clickOn ( driver , checkInputBy ) ; logger . info ( \"Select ▁ Reject\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( \" // a[text()='Reject']\" ) ) ; logger . info ( \"Confirm ▁ Rejection\" ) ; By goLiveSubmitBy = By . id ( \"golivesubmitButton\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , goLiveSubmitBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , goLiveSubmitBy ) ; By okBy = By . id ( \"acnOKButton\" ) ; logger . info ( \"Waiting ▁ for ▁ rejection ▁ to ▁ complete...\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , okBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , okBy ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; logger . info ( \"Open ▁ file ▁ in ▁ live ▁ folder ▁ and ▁ check ▁ content ▁ was ▁ not ▁ updated\" ) ; String filePath = seleniumProperties . getProperty ( \"craftercms.live.deployer.path\" ) + seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) ; assertFalse ( CStudioSeleniumUtil . readFileContents ( filePath , updatedTitle ) ) ; } ", "comments": ["Test"], "method name": "reject Workflow Test"}
{"id": 727, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { logger . info ( \"Login ▁ as ▁ admin\" ) ; CStudioSeleniumUtil . tryLogin ( driver , seleniumProperties . getProperty ( \"craftercms.admin.username\" ) , seleniumProperties . getProperty ( \"craftercms.admin.password\" ) , true ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; long time = System . currentTimeMillis ( ) ; String url = \"selenium\" + time ; String content = \"Article ▁ main ▁ content ▁ \" + time ; String articlePath = \"/site/website/\" + url + \"/index.xml\" ; logger . info ( \"Create ▁ article\" ) ; createArticle ( url , content , url ) ; logger . info ( \"Check ▁ content ▁ exists\" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( seleniumProperties . getProperty ( \"craftercms.preview.deployer.path\" ) + articlePath , content ) ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Select ▁ new ▁ article\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"MyRecentActivity-\" + articlePath ) ) ; logger . info ( \"Click ▁ Delete ▁ option\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( \" // a[text()='Delete']\" ) ) ; logger . info ( \"Confirm ▁ deletion\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( \"input.do-delete\" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( \"#acnVersionWrapper ▁ input[value=\\\"OK\\\"]\" ) ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ content ▁ does ▁ not ▁ exist ▁ anymore\" ) ; File contentFile = new File ( seleniumProperties . getProperty ( \"craftercms.preview.deployer.path\" ) + articlePath ) ; new FluentWait < File > ( contentFile ) . withTimeout ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) . until ( new Predicate < File > ( ) { @ Override public boolean apply ( File file ) { return ! file . exists ( ) ; } } ) ; } ", "comments": ["Test"], "method name": "delete Page Test"}
{"id": 730, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Create ▁ article\" ) ; long time = System . currentTimeMillis ( ) ; String articleTitle = \"Article ▁ to ▁ copy/paste ▁ \" + time ; String articleContent = \"This ▁ is ▁ the ▁ content ▁ of ▁ the ▁ article ▁ to ▁ be ▁ copied/pasted.\" + time ; String articleUrl = \"to_copy_paste_\" + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( \"Copy ▁ and ▁ paste ▁ page\" ) ; pageOptionAndPaste ( articleTitle , articleUrl , articleContent , \"Copy\" ) ; logger . info ( \"Check ▁ original ▁ article ▁ still ▁ exists\" ) ; checkPageFileExists ( \"\" , articleUrl , true ) ; } ", "comments": ["Test"], "method name": "copy Paste Page Test"}
{"id": 732, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Create ▁ Tout\" ) ; long time = System . currentTimeMillis ( ) ; String toutName = \"seleniumTout\" + time ; String headline = \"Selenium ▁ tout ▁ headline ▁ \" + time ; String internalName = \"Selenium ▁ Tout ▁ \" + time ; createTout ( toutName , headline , internalName ) ; logger . info ( \"Copy ▁ and ▁ paste ▁ component\" ) ; componentOptionAndPaste ( internalName , toutName , headline , \"Copy\" ) ; logger . info ( \"Check ▁ original ▁ article ▁ still ▁ exists\" ) ; checkComponentFileExists ( \"touts\" , toutName , true ) ; } ", "comments": ["Test"], "method name": "copy Paste Component Test"}
{"id": 731, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Create ▁ article\" ) ; long time = System . currentTimeMillis ( ) ; String articleTitle = \"Article ▁ to ▁ cut/paste ▁ \" + time ; String articleContent = \"This ▁ is ▁ the ▁ content ▁ of ▁ the ▁ article ▁ to ▁ be ▁ copied/pasted.\" + time ; String articleUrl = \"to_cut_paste_\" + time ; createArticle ( articleTitle , articleContent , articleUrl ) ; logger . info ( \"Cut ▁ and ▁ paste ▁ page\" ) ; pageOptionAndPaste ( articleTitle , articleUrl , articleContent , \"Cut\" ) ; logger . info ( \"Check ▁ original ▁ article ▁ no ▁ longer ▁ exists\" ) ; checkPageFileExists ( \"\" , articleUrl , false ) ; } ", "comments": ["Test"], "method name": "cut Paste Page Test"}
{"id": 728, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { final String updatedTitle = schedulePage ( ) ; logout ( ) ; useAdminUser ( ) ; login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ Go ▁ Live ▁ Queue ▁ widget\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"GoLiveQueue-body\" ) ) . getText ( ) . contains ( updatedTitle ) ; } } ) ; logger . info ( \"Check ▁ item\" ) ; By checkInputBy = By . xpath ( \" // div[@id='GoLiveQueue'] // input[@id='\" + seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) + \"']\" ) ; CStudioSeleniumUtil . clickOn ( driver , checkInputBy ) ; logger . info ( \"Select ▁ Go ▁ Live ▁ Now\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( \" // a[text()='Go ▁ Live ▁ Now']\" ) ) ; By setToNowBy = By . id ( \"globalSetToNow\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , setToNowBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , setToNowBy ) ; logger . info ( \"Confirm ▁ Go ▁ Live ▁ Now\" ) ; By goLiveSubmitBy = By . id ( \"golivesubmitButton\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , goLiveSubmitBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , goLiveSubmitBy ) ; By okBy = By . id ( \"acnOKButton\" ) ; logger . info ( \"Waiting ▁ for ▁ item ▁ to ▁ go-live...\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , 10 , okBy ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , okBy ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Waiting ▁ for ▁ item ▁ to ▁ deploy\" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; logger . info ( \"Open ▁ file ▁ in ▁ live ▁ folder ▁ and ▁ check ▁ content ▁ was ▁ updated\" ) ; String filePath = seleniumProperties . getProperty ( \"craftercms.live.deployer.path\" ) + seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( filePath , updatedTitle ) ) ; } ", "comments": ["Test"], "method name": "accept Workflow Test"}
{"id": 733, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Create ▁ Tout\" ) ; long time = System . currentTimeMillis ( ) ; String toutName = \"seleniumTout\" + time ; String headline = \"Selenium ▁ tout ▁ headline ▁ \" + time ; String internalName = \"Selenium ▁ Tout ▁ \" + time ; createTout ( toutName , headline , internalName ) ; logger . info ( \"Cut ▁ and ▁ paste ▁ component\" ) ; componentOptionAndPaste ( internalName , toutName , headline , \"Cut\" ) ; logger . info ( \"Check ▁ original ▁ article ▁ no ▁ longer ▁ exists\" ) ; checkComponentFileExists ( \"touts\" , toutName , false ) ; } ", "comments": ["Test"], "method name": "cut Paste Component Test"}
{"id": 734, "website": "bigquery", "code": " private void function ( String itemTitle , String itemUrl , String itemContent , String option ) throws InterruptedException { logger . info ( \"Create ▁ a ▁ folder ▁ to ▁ contain ▁ copy\" ) ; String folderName = createPageFolder ( ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Open ▁ context ▁ menu ▁ and ▁ click ▁ \" + option + \" ▁ for ▁ new ▁ article\" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , option , CStudioSeleniumUtil . findItemWithName ( driver , itemTitle ) ) ; logger . info ( \"Open ▁ context ▁ menu ▁ and ▁ click ▁ 'Paste' ▁ for ▁ new ▁ folder\" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , \"Paste\" , CStudioSeleniumUtil . findItemWithName ( driver , folderName ) ) ; checkPageFileExists ( folderName , itemUrl , true ) ; } ", "comments": [], "method name": "page Option And Paste"}
{"id": 735, "website": "bigquery", "code": " private void function ( String itemTitle , String itemUrl , String itemContent , String option ) throws InterruptedException { logger . info ( \"Create ▁ a ▁ folder ▁ to ▁ contain ▁ copy\" ) ; String folderName = createComponentFolder ( ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Open ▁ context ▁ menu ▁ and ▁ click ▁ \" + option + \" ▁ for ▁ new ▁ article\" ) ; CStudioSeleniumUtil . ensureComponentsTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , option , CStudioSeleniumUtil . findItemWithName ( driver , itemTitle ) ) ; logger . info ( \"Open ▁ context ▁ menu ▁ and ▁ click ▁ 'Paste' ▁ for ▁ new ▁ folder\" ) ; CStudioSeleniumUtil . ensureComponentsTreeIsExpanded ( driver ) ; CStudioSeleniumUtil . contextMenuOption ( driver , \"Paste\" , CStudioSeleniumUtil . findItemWithName ( driver , folderName ) ) ; checkComponentFileExists ( folderName , itemUrl , true ) ; } ", "comments": [], "method name": "component Option And Paste"}
{"id": 738, "website": "bigquery", "code": " public void function ( ) throws Exception { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Get ▁ file ▁ local ▁ path\" ) ; File file = new File ( CStudioSeleniumUtil . class . getClassLoader ( ) . getResource ( \"uploadFiles/javascript.js\" ) . toURI ( ) ) ; CStudioSeleniumUtil . ensureStaticAssetsTreeIsExpanded ( driver ) ; WebElement jsElement = CStudioSeleniumUtil . findItemWithName ( driver , \"js\" ) ; CStudioSeleniumUtil . uploadFile ( driver , file , jsElement ) ; String deployedFilePath = seleniumProperties . getProperty ( \"craftercms.preview.deployer.path\" ) + \"/static-assets/js/\" + file . getName ( ) ; logger . info ( \"Check ▁ file ▁ contents ▁ in ▁ preview ▁ deployer ▁ path\" ) ; String contentToCheck = \" /* ▁ This ▁ is ▁ an ▁ empty ▁ javascript ▁ file ▁ */ \" ; assertTrue ( CStudioSeleniumUtil . readFileContents ( deployedFilePath , contentToCheck ) ) ; } ", "comments": ["Test"], "method name": "Upload JS File Test"}
{"id": 736, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; String pageToUpdate = seleniumProperties . getProperty ( \"craftercms.page.to.schedule.to.delete\" ) ; String updateString = \"Resources ▁ \" + System . currentTimeMillis ( ) ; logger . info ( \"Edit ▁ page\" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , pageToUpdate , updateString ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement articleItem = CStudioSeleniumUtil . findItemWithName ( driver , updateString ) ; logger . info ( \"Choose ▁ delete ▁ in ▁ pages ▁ tree ▁ context ▁ menu\" ) ; CStudioSeleniumUtil . contextMenuOption ( driver , \"Delete\" , articleItem ) ; logger . info ( \"Schedule ▁ item ▁ and ▁ dependencies\" ) ; By datepickerBy = By . cssSelector ( \"#datepicker.date-picker\" ) ; By timepickerBy = By . cssSelector ( \"input.time-picker\" ) ; By scheduleTimeLinksBy = By . cssSelector ( \"#acnVersionWrapper ▁ a[checkid]\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , scheduleTimeLinksBy ) ; List < WebElement > scheduleTimeLinks = driver . findElements ( scheduleTimeLinksBy ) ; for ( WebElement scheduleTimeLink : scheduleTimeLinks ) { scheduleTimeLink . click ( ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , datepickerBy ) ; WebElement datepicker = driver . findElement ( datepickerBy ) ; datepicker . clear ( ) ; datepicker . sendKeys ( \"1/01/3001\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , timepickerBy ) ; WebElement timepicker = driver . findElement ( timepickerBy ) ; timepicker . sendKeys ( \"12:00:01 ▁ a.m.\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( \" // div[@id='acnVersionWrapper'] // a[text()='Done']\" ) ) ; } logger . info ( \"Click ▁ 'Delete' ▁ button\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( \"#acnVersionWrapper ▁ input.do-delete[type='submit']\" ) ) ; logger . info ( \"Wait ▁ for ▁ item ▁ to ▁ be ▁ scheduled\" ) ; Thread . sleep ( 2000 ) ; String baseUrl = seleniumProperties . getProperty ( \"craftercms.base.url\" ) ; String pageToEditUrl = seleniumProperties . getProperty ( \"craftercms.page.to.schedule.to.delete.url\" ) ; logger . info ( \"Navigate ▁ to ▁ '\" + pageToEditUrl + \"'\" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; logger . info ( \"Check ▁ item ▁ was ▁ scheduled ▁ to ▁ be ▁ deleted\" ) ; By statusIconBy = By . cssSelector ( \"#acn-active-content ▁ div.status-icon.deleted\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , statusIconBy ) ; WebElement statusIcon = driver . findElement ( statusIconBy ) ; assertTrue ( statusIcon . getText ( ) . contains ( \"Deleted\" ) ) ; } ", "comments": ["Test"], "method name": "schedule To Be Deleted Test"}
{"id": 737, "website": "bigquery", "code": " private void function ( String item , final String updateString ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( \"Login ▁ using ▁ admin ▁ credentials\" ) ; login ( ) ; logger . info ( \"navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Edit ▁ page\" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , item , updateString ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ my-recent ▁ activity ▁ widget\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"MyRecentActivity-body\" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; logger . info ( \"Check ▁ item ▁ and ▁ push ▁ it ▁ to ▁ schedule\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"MyRecentActivity-\" + item ) ) ; Thread . sleep ( 1000 ) ; logger . info ( \"Select ▁ Schedule\" ) ; driver . manage ( ) . window ( ) . maximize ( ) ; CStudioSeleniumUtil . clickOn ( driver , By . xpath ( \" // a[text()='Schedule']\" ) ) ; Thread . sleep ( 1000 ) ; logger . info ( \"Setting ▁ date ▁ and ▁ time ▁ fields\" ) ; WebElement element = driver . findElement ( By . id ( \"schedulingSelectionDatepickerOverlay\" ) ) ; element . click ( ) ; Thread . sleep ( 1000 ) ; By todayBy = By . cssSelector ( \"#calendarWrapper ▁ .today ▁ a\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , todayBy ) ; WebElement today = driver . findElement ( todayBy ) ; today . click ( ) ; element = driver . findElement ( By . id ( \"timepicker\" ) ) ; element . clear ( ) ; element . sendKeys ( \"11:59:59 ▁ p.m. \\n \" ) ; Thread . sleep ( 1000 ) ; logger . info ( \"Confirm ▁ Schedule\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"golivesubmitButton\" ) ) ; Thread . sleep ( 1000 ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"acnOKButton\" ) ) ; logger . info ( \"Waiting ▁ for ▁ item ▁ to ▁ get ▁ scheduled...\" ) ; Thread . sleep ( 1000 * TimeConstants . WAITING_SECONDS_DEPLOY ) ; logger . info ( \"refresh ▁ dashboard\" ) ; logout ( ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ approvedScheduledItems ▁ activity ▁ widget\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"approvedScheduledItems-body\" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; } ", "comments": [], "method name": "edit And Schedule Item"}
{"id": 739, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String baseUrl = seleniumProperties . getProperty ( \"craftercms.base.url\" ) ; final String pageToEditUrl = seleniumProperties . getProperty ( \"craftercms.page.to.edit.url\" ) ; logger . info ( \"Navigate ▁ to ▁ '\" + pageToEditUrl + \"'\" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; openTemplateEditor ( ) ; String pageTitle = driver . getTitle ( ) ; By titleBy = By . xpath ( \" // div[@id='editor-container'] // pre[text()='\" + pageTitle + \"'][1]\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleBy ) ; WebElement title = driver . findElement ( titleBy ) ; String sequence = \"\" ; for ( int i = 0 ; i < 8 ; i ++ ) { sequence += Keys . LEFT ; } for ( int i = 0 ; i < pageTitle . length ( ) ; i ++ ) { sequence += Keys . BACK_SPACE ; } final String newTitle = \"Global ▁ Integrity ▁ \" + System . currentTimeMillis ( ) ; sequence += newTitle ; logger . info ( \"Update ▁ page ▁ title\" ) ; new Actions ( driver ) . click ( title ) . sendKeys ( sequence ) . perform ( ) ; logger . info ( \"Click ▁ 'Update' ▁ button\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"template-editor-update-button\" ) ) ; logger . info ( \"Wait ▁ for ▁ title ▁ to ▁ update\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_DEPLOY ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver driver ) { driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; return newTitle . equals ( driver . getTitle ( ) ) ; } } ) ; } ", "comments": ["Test"], "method name": "in Context Edit Template Test"}
{"id": 741, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String updatedTitle = \"About ▁ Page ▁ workflow ▁ \" + System . currentTimeMillis ( ) ; String pageToSchedule = seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) ; logger . info ( \"Edit ▁ page, ▁ updating ▁ title ▁ to ▁ '\" + updatedTitle + \"'\" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , pageToSchedule , updatedTitle ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Selecting ▁ 'View' ▁ option ▁ in ▁ page ▁ tree ▁ under ▁ 'Site ▁ Content'\" ) ; CStudioSeleniumUtil . ensurePagesTreeIsExpanded ( driver ) ; WebElement pageElement = CStudioSeleniumUtil . findItemWithName ( driver , updatedTitle ) ; CStudioSeleniumUtil . contextMenuOption ( driver , \"View\" , pageElement ) ; logger . info ( \"Switch ▁ to ▁ 'View' ▁ window\" ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( \"Checking ▁ item ▁ name ▁ has ▁ been ▁ updated\" ) ; By internalNameBy = By . cssSelector ( \"#internal-name ▁ input.datum\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , internalNameBy ) ; WebElement internalName = driver . findElement ( internalNameBy ) ; assertTrue ( internalName . getAttribute ( \"value\" ) . equals ( updatedTitle ) ) ; logger . info ( \"Check ▁ input ▁ elements ▁ are ▁ disabled\" ) ; List < WebElement > inputs = driver . findElements ( By . cssSelector ( \"input\" ) ) ; for ( WebElement input : inputs ) { if ( input . isDisplayed ( ) && ! input . getAttribute ( \"type\" ) . equals ( \"button\" ) ) assertFalse ( input . isEnabled ( ) ) ; } } ", "comments": ["Test"], "method name": "view Page Test"}
{"id": 742, "website": "bigquery", "code": " public void function ( ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Wait ▁ for ▁ context ▁ navigation ▁ header ▁ to ▁ show\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . id ( \"authoringContextNavHeader\" ) ) ; logger . info ( \"Wait ▁ for ▁ logo ▁ link ▁ to ▁ show\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . id ( \"acn-wcm-logo-link\" ) ) ; logger . info ( \"Wait ▁ for ▁ dropdown ▁ toggler ▁ to ▁ show\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . id ( \"acn-dropdown-toggler\" ) ) ; WebElement element = driver . findElement ( By . id ( \"acn-dropdown-toggler\" ) ) ; assertTrue ( element . getText ( ) . equals ( \"Site ▁ Content\" ) ) ; element . click ( ) ; logger . info ( \"Ensure ▁ dropdown ▁ displays ▁ when ▁ toggler ▁ is ▁ clicked\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"acn-dropdown-menu-wrapper\" ) ) . isDisplayed ( ) ; } } ) ; } ", "comments": [" Test Dashboard Page Context Nav Functionality", "Test"], "method name": "test Context Nav"}
{"id": 743, "website": "bigquery", "code": " public void function ( ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ if ▁ title ▁ exists ▁ and ▁ match ▁ title ▁ with ▁ correct ▁ site ▁ value\" ) ; WebElement element = driver . findElement ( By . id ( \"pageTitle\" ) ) ; assertTrue ( element . getText ( ) . contains ( seleniumProperties . getProperty ( \"craftercms.sitetitle\" ) ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": [" Test Dashboard Page Title Functionality", "Test"], "method name": "test Site Dashboard Title"}
{"id": 744, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Edit ▁ and ▁ save ▁ page\" ) ; CStudioSeleniumUtil . editAndSavePage ( driver , seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) , getUpdateString ( ) ) ; logger . info ( \"Refresh ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Check ▁ my-recent-activity ▁ widget ▁ for ▁ edited ▁ page\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"MyRecentActivity-body\" ) ) . getText ( ) . contains ( getUpdateString ( ) ) ; } } ) ; } ", "comments": [" Test Dashboard Page My Recent Activity Functionality", " @throws InterruptedException", "Test"], "method name": "test My Recent Activity"}
{"id": 746, "website": "bigquery", "code": " public static void function ( WebDriver driver , String siteName , String url ) { driver . navigate ( ) . to ( url ) ; assertTrue ( driver . getCurrentUrl ( ) . equals ( String . format ( seleniumProperties . getProperty ( \"craftercms.site.dashboard.url\" ) , siteName ) ) ) ; } ", "comments": [" Try to access a page in Crafter Studio Site", " @param driver", " @param siteName"], "method name": "navigate To Url"}
{"id": 740, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; final String baseUrl = seleniumProperties . getProperty ( \"craftercms.base.url\" ) ; final String pageToEditUrl = seleniumProperties . getProperty ( \"craftercms.page.to.edit.url\" ) ; logger . info ( \"Navigate ▁ to ▁ '\" + pageToEditUrl + \"'\" ) ; driver . navigate ( ) . to ( baseUrl + pageToEditUrl ) ; openPreviewTools ( ) ; logger . info ( \"Turn ▁ on ▁ In-Context ▁ Edit\" ) ; By titlePencilBy = By . cssSelector ( \"#title ▁ img\" ) ; List < WebElement > titlePencilList = driver . findElements ( titlePencilBy ) ; boolean pencilVisible = false ; if ( titlePencilList . size ( ) > 0 ) { pencilVisible = titlePencilList . get ( 0 ) . isDisplayed ( ) ; } if ( ! pencilVisible ) { By toggleIceBy = By . xpath ( \" // div[@id='preview-tools-panel-container'] // span[contains(.,'In-Context ▁ Edit')]/preceding-sibling::*[1]\" ) ; CStudioSeleniumUtil . clickOn ( driver , toggleIceBy ) ; } logger . info ( \"Click ▁ on ▁ title ▁ ice ▁ pencil\" ) ; CStudioSeleniumUtil . clickOn ( driver , titlePencilBy ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . tagName ( \"iframe\" ) ) ; Thread . sleep ( 1000 ) ; driver . switchTo ( ) . frame ( \"in-context-edit-editor\" ) ; logger . info ( \"Update ▁ title\" ) ; String newTitle = \"Big ▁ Data ▁ for ▁ Risk ▁ Reduction ▁ \" + System . currentTimeMillis ( ) ; By titleInputBy = By . cssSelector ( \"#title ▁ input.datum\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleInputBy ) ; CStudioSeleniumUtil . waitForItemToBeEnabled ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleInputBy ) ; WebElement titleInput = driver . findElement ( titleInputBy ) ; titleInput . clear ( ) ; titleInput . sendKeys ( newTitle ) ; Thread . sleep ( 1000 ) ; logger . info ( \"Save ▁ And ▁ Close\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"cstudioSaveAndClose\" ) ) ; logger . info ( \"Check ▁ title ▁ has ▁ been ▁ updated\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , By . xpath ( \" // *[contains(., ▁ '\" + newTitle + \"')]\" ) ) ; } ", "comments": ["Test"], "method name": "edit Page Ice Pencil Test"}
{"id": 747, "website": "bigquery", "code": " public static void function ( WebDriver webDriver , String url ) { webDriver . navigate ( ) . to ( url ) ; waitForCurrentPageToLoad ( webDriver ) ; } ", "comments": [" Navigates to the given url and calls c", " @param webDriver", " @param url"], "method name": "navigate To And Wait For Page To Load"}
{"id": 745, "website": "bigquery", "code": " public void function ( ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; login ( ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; WebElement element = driver . findElement ( By . id ( \"icon-guide\" ) ) ; logger . info ( \"Scroll ▁ down ▁ to ▁ reach ▁ icon-guide\" ) ; driver . manage ( ) . window ( ) . setPosition ( new Point ( 0 , driver . manage ( ) . window ( ) . getSize ( ) . height ) ) ; logger . info ( \"Check ▁ icon-guide ▁ is ▁ displayed\" ) ; assertTrue ( element . isDisplayed ( ) ) ; logger . info ( \"Check ▁ icon-guide ▁ text\" ) ; assertTrue ( element . getText ( ) . contains ( \"Icon ▁ Guide\" ) ) ; } ", "comments": [" Test Dashboard Page Icon Guide", "Test"], "method name": "test Icon Guide"}
{"id": 749, "website": "bigquery", "code": " private String function ( String url ) { logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . createContentJS ( driver , \"/site/website\" , siteName ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( \"option[value=\\\"/page/selenium\\\"]\" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"submitWCMPopup\" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; String contentText = \"Selenium ▁ content ▁ type ▁ article ▁ main ▁ content ▁ \" + url ; logger . info ( \"Set ▁ values ▁ to ▁ fields\" ) ; setField ( \"div#file-name ▁ .datum\" , url ) ; setField ( \"div#internal-name ▁ .datum\" , url ) ; setField ( \"div#seleniumContent ▁ .datum\" , contentText ) ; logger . info ( \"Save ▁ & ▁ Close\" ) ; driver . findElement ( By . id ( \"cstudioSaveAndClose\" ) ) . click ( ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; CrafterContent content = new CrafterContent ( ) ; content . path = \"/site/website/\" + url ; content . uri = \"/site/website/\" + url + \"/index.xml\" ; content . browserUri = \"/\" + url ; getCreatedContent ( ) . add ( content ) ; return contentText ; } ", "comments": [], "method name": "create Selenium Content"}
{"id": 750, "website": "bigquery", "code": " private void function ( String contentType ) { logger . info ( \"Navigate ▁ to ▁ admin ▁ console\" ) ; driver . navigate ( ) . to ( adminConsoleUrl ) ; logger . info ( \"Click ▁ 'Content ▁ Types'\" ) ; By contentTypesBy = By . xpath ( \" // div[contains(@class,'cstudio-admin-console-item') ▁ and ▁ text()='Content ▁ Types']\" ) ; CStudioSeleniumUtil . clickOn ( driver , contentTypesBy ) ; logger . info ( \"Click ▁ 'Open ▁ Existing ▁ Type'\" ) ; By openTypeBy = By . xpath ( \" // div[@id='acn-bar'] // div[@class='acn-link']/a[text()='Open ▁ Existing ▁ Type']\" ) ; CStudioSeleniumUtil . clickOn ( driver , openTypeBy ) ; logger . info ( \"Choose ▁ article ▁ content ▁ type\" ) ; By articleContentTypeBy = By . cssSelector ( \"#wcm-content-types-dropdown ▁ option[value='\" + contentType + \"']\" ) ; CStudioSeleniumUtil . clickOn ( driver , articleContentTypeBy ) ; logger . info ( \"Confirm\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"submitWCMPopup\" ) ) ; logger . info ( \"Wait ▁ for ▁ content ▁ type ▁ to ▁ load\" ) ; By contentTypeContainerBy = By . cssSelector ( \"#content-type-canvas ▁ .content-type-visual-container\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , contentTypeContainerBy ) ; } ", "comments": [], "method name": "open Content Type"}
{"id": 748, "website": "bigquery", "code": " public void function ( ) { login ( ) ; String contentType = \"/page/article\" ; openContentType ( contentType ) ; logger . info ( \"Update ▁ content ▁ type ▁ title ▁ field\" ) ; String newTitle = \"Title ▁ \" + System . currentTimeMillis ( ) ; By titleVariableBy = By . xpath ( \" // div[@id='content-type-canvas'] // div[contains(@class,'content-type-visual-field-container')] // span[contains(@class,'content-field-variable') ▁ and ▁ text()='title']\" ) ; CStudioSeleniumUtil . clickOn ( driver , titleVariableBy ) ; By titleBy = By . xpath ( \" // div[@id='properties-container'] // div[contains(@class, ▁ 'property-wrapper')]/div[@class='property-label' ▁ and ▁ text()='Title']/following-sibling::input\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleBy ) ; WebElement titleInput = driver . findElement ( titleBy ) ; titleInput . clear ( ) ; titleInput . sendKeys ( newTitle ) ; logger . info ( \"Click ▁ 'Save'\" ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( \"#cstudio-admin-console-command-bar ▁ input.cstudio-button[value='Save']\" ) ) ; logger . info ( \"Wait ▁ for ▁ content ▁ type ▁ to ▁ be ▁ saved\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_SAVE ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver webDriver ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } ) ; logger . info ( \"Navigate ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; CStudioSeleniumUtil . createContentJS ( driver , \"/site/website\" , siteName ) ; CStudioSeleniumUtil . clickOn ( driver , By . cssSelector ( \"option[value=\\\"/page/article\\\"]\" ) ) ; CStudioSeleniumUtil . clickOn ( driver , By . id ( \"submitWCMPopup\" ) ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; By titleLabelBy = By . cssSelector ( \"#title ▁ span.label.cstudio-form-field-title\" ) ; CStudioSeleniumUtil . waitForItemToDisplay ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT , titleLabelBy ) ; WebElement titleLabelElement = driver . findElement ( titleLabelBy ) ; assertEquals ( newTitle , titleLabelElement . getText ( ) ) ; } ", "comments": ["Test"], "method name": "edit Content Type Field Title"}
{"id": 751, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( \"Login ▁ as ▁ admin\" ) ; login ( ) ; logger . info ( \"Navigate ▁ to ▁ Dashboard ▁ page\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Edit ▁ page\" ) ; CStudioSeleniumUtil . editContentJS ( driver , seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) , seleniumProperties . getProperty ( \"craftercms.page.content.type\" ) , siteName ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; logger . info ( \"Find ▁ internal-name ▁ field ▁ and ▁ edit\" ) ; driver . findElement ( By . cssSelector ( \"#internal-name ▁ .datum\" ) ) . clear ( ) ; driver . findElement ( By . cssSelector ( \"#internal-name ▁ .datum\" ) ) . sendKeys ( updateString ) ; logger . info ( \"Click ▁ Save&Close ▁ button ▁ and ▁ wait ▁ for ▁ change ▁ to ▁ complete\" ) ; driver . findElement ( By . id ( \"cstudioSaveAndClose\" ) ) . click ( ) ; CStudioSeleniumUtil . switchToMainWindow ( driver ) ; logger . info ( \"Navigate ▁ back ▁ to ▁ dashboard\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; assertTrue ( driver . getTitle ( ) . equals ( \"Crafter ▁ Studio\" ) ) ; logger . info ( \"Check ▁ my-recent-activity ▁ widget\" ) ; new WebDriverWait ( driver , TimeConstants . WAITING_SECONDS_WEB_ELEMENT ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . id ( \"MyRecentActivity-body\" ) ) . getText ( ) . contains ( updateString ) ; } } ) ; } ", "comments": [" Test Page Save and Close Functionality", " @throws InterruptedException", "Test"], "method name": "test Page Edit Save And Close"}
{"id": 753, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; String expectedTitle = \"Dienste ▁ A-Z ▁ | ▁ Südtiroler ▁ Bürgernetz\" ; String actualTitle = driver . getTitle ( ) ; Assert . assertEquals ( actualTitle , expectedTitle ) ; } ", "comments": ["Test"], "method name": "verify All Services"}
{"id": 754, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( \"this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address\" ) ; homePage . typePassword ( \"any ▁ password\" ) ; homePage . submitFormExpectingFailure ( ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Signin With An Invalid Email"}
{"id": 755, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; try { homePage . goToAccountPageViaMenu ( ) . goToAppPageViaMenu ( ) ; Assert . fail ( ) ; } catch ( IllegalStateException ex ) { } } * / ", "comments": [" This test have no more reason to exist due to the restructuration of the interface", "@Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Access To Other Pages Without Signin"}
{"id": 756, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create An Account Without Fill Form"}
{"id": 757, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Random rand = new Random ( ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; newAccountPage . typeEmailAddress ( \"john\" + rand . nextInt ( ) + \"@test.com\" ) ; newAccountPage . typeFirstName ( \"John\" ) ; newAccountPage . typeLastName ( \"Doe\" ) ; newAccountPage . typePassword ( \"pass\" ) ; newAccountPage . typePasswordConfirmation ( \"pass\" ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create An Acocunt With Weak Password"}
{"id": 759, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "successful Signin Should Bring User To Home Page"}
{"id": 758, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Random localrand = new Random ( ) ; HomePage homePage = new HomePage ( driver ) ; NewAccountPage newAccountPage = homePage . accessToNewAccount ( ) ; newAccountPage . typeEmailAddress ( \"john\" + localrand . nextInt ( ) + \"@test.com\" ) ; newAccountPage . typeFirstName ( \"John\" ) ; newAccountPage . typeLastName ( \"Doe\" ) ; newAccountPage . typePassword ( \"P4ssw0rd\" ) ; newAccountPage . typePasswordConfirmation ( \"D1ff3r3n7\" ) ; Assert . assertTrue ( newAccountPage . submitForm ( ) . containError ( ) ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create An Acocunt With Different Password"}
{"id": 760, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; RegisterNewAppPage newAppPage = firstPage . goToNewAppPage ( ) ; newAppPage . typeAppName ( \"RandomName\" ) ; newAppPage . typeAppDescription ( \"app ▁ description\" ) ; Assert . assertFalse ( newAppPage . submitForm ( ) . containError ( ) ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Be Possible To Register A New App"}
{"id": 762, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; firstPage . logout ( ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Be Possible To Logout"}
{"id": 763, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; AccountPage accountPage = firstPage . goToAccountPageViaMenu ( ) ; accountPage . submitForm ( ) ; homePage = accountPage . goToAppPageViaMenu ( ) . logout ( ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "edit Account Without Specify New Password Should Not Change Password"}
{"id": 752, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { driver . manage ( ) . timeouts ( ) . implicitlyWait ( TimeConstants . WAITING_SECONDS_WEB_ELEMENT , TimeUnit . SECONDS ) ; logger . info ( \"Login ▁ as ▁ admin\" ) ; login ( ) ; String mainWindowHandle = driver . getWindowHandle ( ) ; logger . info ( \"Navigate ▁ to ▁ Dashboard ▁ page\" ) ; driver . navigate ( ) . to ( dashboardUrl ) ; logger . info ( \"Edit ▁ page\" ) ; CStudioSeleniumUtil . editContentJS ( driver , seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) , seleniumProperties . getProperty ( \"craftercms.page.content.type\" ) , siteName ) ; CStudioSeleniumUtil . switchToEditWindow ( driver ) ; String editWindowHandle = driver . getWindowHandle ( ) ; logger . info ( \"Edit ▁ internal-name ▁ field\" ) ; WebElement internalNameElement = driver . findElement ( By . cssSelector ( \"#internal-name ▁ .datum\" ) ) ; internalNameElement . clear ( ) ; internalNameElement . sendKeys ( updateString ) ; Thread . sleep ( 1000 ) ; logger . info ( \"Click ▁ Save&Preview ▁ button ▁ and ▁ wait ▁ for ▁ change ▁ to ▁ complete\" ) ; driver . findElement ( By . id ( \"cstudioSaveAndPreview\" ) ) . click ( ) ; logger . info ( \"Switch ▁ back ▁ to ▁ first ▁ window\" ) ; driver . switchTo ( ) . window ( mainWindowHandle ) ; logger . info ( \"Wait ▁ for ▁ preview ▁ to ▁ load\" ) ; new WebDriverWait ( driver , 30 ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver webDriver ) { try { Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } ) ; String pageUrl = seleniumProperties . getProperty ( \"craftercms.base.url\" ) + seleniumProperties . getProperty ( \"craftercms.page.to.edit.url\" ) ; logger . info ( \"Check ▁ url ▁ match ▁ edited ▁ page ▁ url\" ) ; assertTrue ( driver . getCurrentUrl ( ) . equals ( pageUrl ) ) ; logger . info ( \"Check ▁ item ▁ content ▁ has ▁ changed\" ) ; assertTrue ( CStudioSeleniumUtil . readFileContents ( seleniumProperties . getProperty ( \"craftercms.preview.deployer.path\" ) + seleniumProperties . getProperty ( \"craftercms.page.to.edit\" ) , updateString ) ) ; logger . info ( \"Go ▁ back ▁ and ▁ close ▁ edit ▁ window ▁ so ▁ item ▁ is ▁ not ▁ locked\" ) ; driver . switchTo ( ) . window ( editWindowHandle ) ; driver . findElement ( By . cssSelector ( \"input[value=\\\"Cancel\\\"]\" ) ) . click ( ) ; List < WebElement > buttonConfirm = driver . findElements ( By . xpath ( \" // button[text()='Yes']\" ) ) ; if ( buttonConfirm . size ( ) > 0 ) buttonConfirm . get ( 0 ) . click ( ) ; } ", "comments": [" Test Page Save and Preview Functionality", " @throws InterruptedException", "Test"], "method name": "test Page Edit Save And Preview"}
{"id": 764, "website": "bigquery", "code": " public void function ( URL url ) { try { browser . navigate ( ) . to ( url ) ; Thread . sleep ( this . crawlWaitReload ) ; handlePopups ( ) ; } catch ( WebDriverException e ) { throwIfConnectionException ( e ) ; return ; } catch ( InterruptedException e ) { LOGGER . error ( \"goToUrl ▁ got ▁ interrupted ▁ while ▁ waiting ▁ for ▁ the ▁ page ▁ to ▁ be ▁ loaded\" , e ) ; return ; } } ", "comments": [" @param url", "            The URL.", "Override"], "method name": "go To Url"}
{"id": 761, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; homePage . typeEmailAddress ( email ) ; homePage . typePassword ( password ) ; AppsPage firstPage = ( AppsPage ) homePage . submitForm ( AppsPage . class ) ; RegisterNewAppPage newAppPage = firstPage . goToNewAppPage ( ) ; newAppPage . typeAppName ( \"\" ) ; newAppPage . typeAppDescription ( \"app ▁ description\" ) ; Assert . assertTrue ( newAppPage . submitForm ( ) . containError ( ) ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Register A New App Without Specified A Name"}
{"id": 767, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement userNameField = driver . findElement ( By . id ( \"username\" ) ) ; userNameField . clear ( ) ; userNameField . sendKeys ( \"admin\" ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"q\" ) ) ) ; WebElement search_field = driver . findElement ( By . id ( \"q\" ) ) ; search_field . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; search_field . sendKeys ( Keys . DELETE ) ; search_field . sendKeys ( \"Rob\" ) ; search_field . sendKeys ( Keys . ENTER ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"results\" ) ) ) ; String title = driver . findElement ( By . className ( \"content\" ) ) . getText ( ) ; Assert . assertEquals ( title , \"No ▁ movies ▁ where ▁ found.\" ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; } ", "comments": ["@Test"], "method name": "Film is not found"}
{"id": 765, "website": "bigquery", "code": " public void function ( ) throws Exception { AllTests . driver . get ( baseUrl + \"/\" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"\" . equals ( AllTests . driver . findElement ( By . id ( \"foot\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Least ▁ Noisy\" . equals ( AllTests . driver . findElement ( By . cssSelector ( \"option[value=\\\"least_noisy\\\"]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( AllTests . driver . findElement ( By . id ( \"weightingSelect\" ) ) ) . selectByVisibleText ( pathType ) ; AllTests . driver . findElement ( By . id ( vehicle ) ) . click ( ) ; AllTests . driver . findElement ( By . id ( \"fromInput\" ) ) . click ( ) ; AllTests . driver . findElement ( By . id ( \"fromInput\" ) ) . clear ( ) ; AllTests . driver . findElement ( By . id ( \"fromInput\" ) ) . sendKeys ( from ) ; AllTests . driver . findElement ( By . id ( \"toInput\" ) ) . clear ( ) ; AllTests . driver . findElement ( By . id ( \"toInput\" ) ) . sendKeys ( to ) ; AllTests . driver . findElement ( By . id ( \"searchButton\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( ! \"Search ▁ Route ▁ ...\" . equals ( AllTests . driver . findElement ( By . cssSelector ( \"#info ▁ > ▁ div\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } double distance = new Double ( AllTests . driver . findElement ( By . cssSelector ( \"#info ▁ > ▁ div\" ) ) . getText ( ) . split ( \"km\" ) [ 0 ] ) ; double minDistance = expectedDistance - ( expectedDistance * AllTests . distanceTolerance ) ; double maxDistance = expectedDistance + ( expectedDistance * AllTests . distanceTolerance ) ; Assert . assertTrue ( \"Distance ▁ check ▁ between ▁ \" + minDistance + \" ▁ and ▁ \" + maxDistance , ( minDistance <= distance && distance <= maxDistance ) ) ; if ( AllTests . checkPathChackpoint ) { boolean foundIntermediatePoint = false ; for ( WebElement we : AllTests . driver . findElements ( By . className ( \"instr_title\" ) ) ) { if ( we . getText ( ) . contains ( expectedIntermediatePoint ) ) { foundIntermediatePoint = true ; break ; } } Assert . assertTrue ( \"Intermediate ▁ path ▁ checkpoint ▁ to ▁ \" + expectedIntermediatePoint , foundIntermediatePoint ) ; } } ", "comments": ["Test"], "method name": "test Parameterized Path"}
{"id": 766, "website": "bigquery", "code": " public void function ( ) throws Exception { System . out . println ( \"Test\" ) ; DataSetGeneration . driver . get ( baseUrl + \"/\" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"\" . equals ( DataSetGeneration . driver . findElement ( By . id ( \"foot\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"Least ▁ Noisy\" . equals ( DataSetGeneration . driver . findElement ( By . cssSelector ( \"option[value=\\\"least_noisy\\\"]\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } new Select ( DataSetGeneration . driver . findElement ( By . id ( \"weightingSelect\" ) ) ) . selectByVisibleText ( pathType ) ; DataSetGeneration . driver . findElement ( By . id ( vehicle ) ) . click ( ) ; DataSetGeneration . driver . findElement ( By . id ( \"fromInput\" ) ) . click ( ) ; DataSetGeneration . driver . findElement ( By . id ( \"fromInput\" ) ) . clear ( ) ; DataSetGeneration . driver . findElement ( By . id ( \"fromInput\" ) ) . sendKeys ( from ) ; DataSetGeneration . driver . findElement ( By . id ( \"toInput\" ) ) . clear ( ) ; DataSetGeneration . driver . findElement ( By . id ( \"toInput\" ) ) . sendKeys ( to ) ; DataSetGeneration . driver . findElement ( By . id ( \"searchButton\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( ! \"Search ▁ Route ▁ ...\" . equals ( DataSetGeneration . driver . findElement ( By . cssSelector ( \"#info ▁ > ▁ div\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } double distance = new Double ( DataSetGeneration . driver . findElement ( By . cssSelector ( \"#info ▁ > ▁ div\" ) ) . getText ( ) . split ( \"km\" ) [ 0 ] ) ; Collection < WebElement > webElements = DataSetGeneration . driver . findElements ( By . className ( \"instr_title\" ) ) ; Random rand = new Random ( ) ; int randomNum = rand . nextInt ( webElements . size ( ) ) ; int i = 0 ; String intermediatePoint = \"\" ; for ( WebElement we : webElements ) { if ( i == randomNum ) { intermediatePoint = we . getText ( ) ; } i ++ ; } DataSetGeneration . appendToOutput ( from + \"; ▁ \" + to + \"; ▁ \" + distance + \"; ▁ \" + intermediatePoint + \"; ▁ \" + vehicle + \"; ▁ \" + pathType + \" \\n \" ) ; } ", "comments": ["Test"], "method name": "test Data Set Generator"}
{"id": 768, "website": "bigquery", "code": " public void function ( ) throws Exception { WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement userNameField = driver . findElement ( By . id ( \"username\" ) ) ; userNameField . clear ( ) ; userNameField . sendKeys ( \"admin\" ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // a[4]/div/div[2]\" ) ) ) ; driver . findElement ( By . xpath ( \" // a[4]/div/div[2]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // img[contains(@src,'delete.png')]\" ) ) ) ; driver . findElement ( By . xpath ( \" // img[contains(@src,'delete.png')]\" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // div[@id='results']\" ) ) ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; } ", "comments": ["Test"], "method name": "test Remove Film"}
{"id": 770, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 771, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 772, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 773, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 774, "website": "bigquery", "code": " public void function ( ) { submitRegistrationForm ( \"johny\" , \"John ▁ Doe\" , \"secretPassword\" ) ; browser . navigate ( ) . to ( deploymentUrl ) ; submitRegistrationForm ( \"johny\" , \"John ▁ Doe TABSYMBOL \" , \"secretPassword\" ) ; assertEquals ( \"Register ▁ New ▁ User\" , browser . getTitle ( ) ) ; assertTrue ( \"Error ▁ message ▁ did ▁ not ▁ appear\" , browser . getPageSource ( ) . contains ( \"messages\" ) ) ; } ", "comments": ["Test", "InSequence(2)"], "method name": "duplicate Username Test"}
{"id": 775, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "Login Test 1"}
{"id": 769, "website": "bigquery", "code": " public void function ( ) throws Exception { WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement userNameField = driver . findElement ( By . id ( \"username\" ) ) ; userNameField . clear ( ) ; userNameField . sendKeys ( \"admin\" ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(@href,\\\"./?go=add\\\")]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"name\" ) ) ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"My ▁ First ▁ Film\" ) ; driver . findElement ( By . name ( \"aka\" ) ) . sendKeys ( \"hfffg\" ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"2015\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"1000\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"10\" ) ; driver . findElement ( By . id ( \"own_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"seen_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loaned_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"movie\" ) ) ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; alert . accept ( ) ; } ", "comments": [], "method name": "test Add Film"}
{"id": 778, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( \"this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address\" ) ; loginPage . typePwd ( \"any ▁ password\" ) ; loginPage . submitFormExpectingFailure ( ) ; } ", "comments": ["Test", "@ProbeTest(tags = \"WebUI\")"], "method name": "can Not Log In With Invalid Email"}
{"id": 777, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . sendKeys ( \"2+2\" ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . sendKeys ( \" \\n \" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"4\" . equals ( driver . findElement ( By . id ( \"cwos\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test22 En Google"}
{"id": 779, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( \"toto@contoso.com\" ) ; loginPage . typePwd ( \"12345\" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } ", "comments": ["Test"], "method name": "a User Can Login With Valid Email"}
{"id": 776, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . sendKeys ( \"2+2\" ) ; try { assertEquals ( \"2+2\" , driver . findElement ( By . id ( \"gbqfq\" ) ) . getAttribute ( \"value\" ) ) ; driver . findElement ( By . id ( \"gbqfq\" ) ) . submit ( ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"gbqfq\" ) ) . sendKeys ( \"\" ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"2 ▁ + ▁ 2 ▁ =\" . equals ( driver . findElement ( By . id ( \"cwles\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) fail ( \"timeout\" ) ; try { if ( \"4\" . equals ( driver . findElement ( By . id ( \"cwos\" ) ) . getText ( ) ) ) break ; } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } } ", "comments": ["Test"], "method name": "test Dos Mas Dos Google"}
{"id": 780, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeName ( \"toto@contoso.com\" ) ; loginPage . typePwd ( \"12345\" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToAccountViaMenu ( ) . goToAppPageViaMenu ( ) ; Thread . sleep ( 2000 ) ; } ", "comments": ["Test"], "method name": "a User Should Be Able To Visit All Pages After Login"}
{"id": 782, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 783, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 781, "website": "bigquery", "code": " public void function ( ) throws Exception { String startUrl = baseUrl + \"/php4dvd/\" ; driver . get ( startUrl ) ; WebElement userNameElement = driver . findElement ( By . id ( \"username\" ) ) ; userNameElement . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; userNameElement . sendKeys ( Keys . DELETE ) ; userNameElement . sendKeys ( \"admin\" ) ; WebElement passwordElement = driver . findElement ( By . name ( \"password\" ) ) ; passwordElement . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; passwordElement . sendKeys ( Keys . DELETE ) ; passwordElement . sendKeys ( \"admin\" ) ; WebElement submitElement = driver . findElement ( By . name ( \"submit\" ) ) ; submitElement . click ( ) ; Assert . assertTrue ( driver . getCurrentUrl ( ) . contains ( startUrl + \"#!\" ) , \"Login ▁ wasn't\" ) ; initFilmFields ( ) ; } ", "comments": ["BeforeClass"], "method name": "Do Login Test"}
{"id": 785, "website": "bigquery", "code": " public void function ( ) { wait = new WebDriverWait ( driver , 10 ) ; driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; } ", "comments": ["BeforeClass"], "method name": "open Home Page"}
{"id": 787, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"thibaud.duchoud@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Thibaud\" ) ; registrationPage . typeLName ( \"Duchoud\" ) ; registrationPage . typeRPassword ( \"4321\" ) ; registrationPage . typePassword ( \"4321\" ) ; LoginPage loginPage = ( LoginPage ) registrationPage . submitForm ( LoginPage . class ) ; } ", "comments": ["--------------------------------------------------------------------------", " Registration page", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Correctly Create Account"}
{"id": 788, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"thibaud.duchoud1@heig-vd.ch\" ) ; registrationPage . typeLName ( \"Duchoud\" ) ; registrationPage . typeRPassword ( \"4321\" ) ; registrationPage . typePassword ( \"4321\" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create Account Without F Name"}
{"id": 789, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"thibaud.duchoud2@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Thibaud\" ) ; registrationPage . typeRPassword ( \"4321\" ) ; registrationPage . typePassword ( \"4321\" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create Account Without L Name"}
{"id": 790, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeFName ( \"Thibaud\" ) ; registrationPage . typeLName ( \"Duchoud\" ) ; registrationPage . typeRPassword ( \"4321\" ) ; registrationPage . typePassword ( \"4321\" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create Account Without Email"}
{"id": 791, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"thibaud.duchoud3@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Thibaud\" ) ; registrationPage . typeLName ( \"Duchoud\" ) ; registrationPage . typeRPassword ( \"4321\" ) ; registrationPage . typePassword ( \"1234\" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create Account2 Different Passwords"}
{"id": 784, "website": "bigquery", "code": " public void function ( ) throws Exception { String startUrl = baseUrl + \"/php4dvd/\" ; driver . get ( startUrl ) ; WebElement userNameElement = driver . findElement ( By . id ( \"username\" ) ) ; userNameElement . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; userNameElement . sendKeys ( Keys . DELETE ) ; userNameElement . sendKeys ( \"admin\" ) ; WebElement passwordElement = driver . findElement ( By . name ( \"password\" ) ) ; passwordElement . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; passwordElement . sendKeys ( Keys . DELETE ) ; passwordElement . sendKeys ( \"admin\" ) ; WebElement submitElement = driver . findElement ( By . name ( \"submit\" ) ) ; submitElement . click ( ) ; Assert . assertTrue ( driver . getCurrentUrl ( ) . contains ( startUrl + \"#!\" ) , \"Login ▁ wasn't\" ) ; initFilmFields ( ) ; } ", "comments": ["BeforeClass"], "method name": "Do Login Test"}
{"id": 792, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"thibaud.duchoud4@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Thibaud\" ) ; registrationPage . typeLName ( \"Duchoud\" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create Account Without Password"}
{"id": 794, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; loginPage . submitFormExpectingFailure ( ) ; } ", "comments": [" -------------------------------------------------------------------------", " Login Page", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Signin With An Invalid Email"}
{"id": 793, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPageTmp = new RegistrationPage ( driver ) ; registrationPageTmp . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPageTmp . typeFName ( \"Mario\" ) ; registrationPageTmp . typeLName ( \"Ferreira\" ) ; registrationPageTmp . typeRPassword ( \"1234\" ) ; registrationPageTmp . typePassword ( \"1234\" ) ; driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; RegistrationPage registrationPageF = ( RegistrationPage ) registrationPage . submitForm ( RegistrationPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create Account With Existant Email"}
{"id": 795, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "successful Signin Should Bring User To Home Page"}
{"id": 786, "website": "bigquery", "code": " public void function ( ) throws Exception { String host = System . getProperty ( \"seleniumhost\" ) ; String port = System . getProperty ( \"seleniumport\" ) ; String webserverHost = System . getProperty ( \"wildfly.http.host\" ) ; String webserverPort = System . getProperty ( \"wildfly.http.port\" ) ; if ( host == null || host . trim ( ) . isEmpty ( ) || port == null || port . trim ( ) . isEmpty ( ) ) { fail ( \"Property ▁ not ▁ set: ▁ seleniumhost: ▁ \" + host + \", ▁ seleniumport: ▁ \" + port ) ; } final String hub = \"http: // \" + host + \":\" + port + \"/wd/hub\" ; log . info ( \"Selenium ▁ connect ▁ to: ▁ \" + hub ) ; WebDriver driver = new RemoteWebDriver ( new URL ( hub ) , DesiredCapabilities . firefox ( ) ) ; final String url = \"http: // \" + webserverHost + \":\" + webserverPort + \"/BeispielDocker-web/index.jsf\" ; log . info ( \"GET ▁ \" + url ) ; driver . get ( url ) ; val headline = driver . findElement ( By . id ( \"headline\" ) ) ; assertEquals ( \"Überschrift ▁ 'Kleinanzeigen' ▁ nicht ▁ gefunden ▁ \" , \"Kleinanzeigen\" , headline . getText ( ) ) ; List < WebElement > anzeigen = driver . findElements ( By . id ( \"anzeige0\" ) ) ; assertTrue ( \"anzeige0 ▁ bereits ▁ vorhanden\" , anzeigen . isEmpty ( ) ) ; driver . findElement ( By . className ( \"titelinput\" ) ) . sendKeys ( \"Sony ▁ Bravia ▁ 50 ▁ Zoll\" ) ; driver . findElement ( By . className ( \"beschreibunginput\" ) ) . sendKeys ( \"Sony ▁ TV, ▁ sehr ▁ gut ▁ erhalten\" ) ; driver . findElement ( By . className ( \"preisinput\" ) ) . sendKeys ( \"20000\" ) ; driver . findElement ( By . className ( \"nameinput\" ) ) . sendKeys ( \"Max ▁ Mustermann\" ) ; driver . findElement ( By . className ( \"emailinput\" ) ) . sendKeys ( \"max@mustermann.net\" ) ; driver . findElement ( By . className ( \"passwortinput\" ) ) . sendKeys ( \"geheim\" ) ; driver . findElement ( By . className ( \"sendbutton\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 15 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"anzeige0\" ) ) ) ; log . info ( \"GET ▁ \" + url ) ; driver . get ( url ) ; anzeigen = driver . findElements ( By . id ( \"anzeige0\" ) ) ; assertEquals ( \"anzeige0 ▁ wurde ▁ nicht ▁ gespeichert ▁ oder ▁ zu ▁ viele\" , 1 , anzeigen . size ( ) ) ; WebElement anzeige = anzeigen . get ( 0 ) ; assertEquals ( \"Sony ▁ Bravia ▁ 50 ▁ Zoll\" , anzeige . findElement ( By . className ( \"titelanzeige\" ) ) . getText ( ) ) ; assertEquals ( \"Sony ▁ TV, ▁ sehr ▁ gut ▁ erhalten\" , anzeige . findElement ( By . className ( \"textanzeige\" ) ) . getText ( ) ) ; assertEquals ( \"Preis: ▁ 200.0€\" , anzeige . findElement ( By . className ( \"preisanzeige\" ) ) . getText ( ) ) ; assertEquals ( \"Verkäufer: ▁ Max ▁ Mustermann\" , anzeige . findElement ( By . className ( \"verkaeuferanzeige\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Anzeigen Anlegen"}
{"id": 796, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"editProfile\" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( \"Mario\" ) ; editProfilePage . typeLName ( \"Ferreira\" ) ; editProfilePage . typeRPassword ( \"5678\" ) ; editProfilePage . typePassword ( \"5678\" ) ; HomePage homePage = ( HomePage ) editProfilePage . submitForm ( HomePage . class ) ; } ", "comments": [" -------------------------------------------------------------------------", " Edit profile page", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Modify Profile"}
{"id": 797, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"editProfile\" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( \"Mario\" ) ; editProfilePage . typeLName ( \"Ferreira\" ) ; editProfilePage . typeRPassword ( \"5678\" ) ; editProfilePage . typePassword ( \"8765\" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Modify Account2 Different Passwords"}
{"id": 798, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"editProfile\" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeLName ( \"Ferreira\" ) ; editProfilePage . typeRPassword ( \"5678\" ) ; editProfilePage . typePassword ( \"5678\" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Modify Account Without F Name"}
{"id": 799, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"editProfile\" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( \"Mario\" ) ; editProfilePage . typeRPassword ( \"5678\" ) ; editProfilePage . typePassword ( \"5678\" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Modify Account Without L Name"}
{"id": 801, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"addApp\" ) ; CreateAppPage createAppPage = new CreateAppPage ( driver ) ; createAppPage . typeDescription ( \"Test ▁ Description\" ) ; createAppPage . typeName ( \"Test ▁ Name\" ) ; HomePage homePage = ( HomePage ) createAppPage . submitForm ( HomePage . class ) ; } ", "comments": ["----------------------------------------------------------------------------", " Create App", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Create App"}
{"id": 800, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"editProfile\" ) ; EditProfilePage editProfilePage = new EditProfilePage ( driver ) ; editProfilePage . typeFName ( \"Mario\" ) ; editProfilePage . typeLName ( \"Ferreira\" ) ; EditProfilePage editProfilePageF = ( EditProfilePage ) editProfilePage . submitForm ( EditProfilePage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Modify Account Without Password"}
{"id": 802, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"addApp\" ) ; CreateAppPage createAppPage = new CreateAppPage ( driver ) ; createAppPage . typeDescription ( \"Test ▁ Description\" ) ; CreateAppPage createAppPageF = ( CreateAppPage ) createAppPage . submitForm ( CreateAppPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Create App Without Name"}
{"id": 803, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"editApp\" ) ; EditAppPage editAppPage = new EditAppPage ( driver ) ; editAppPage . typeDescription ( \"Test ▁ Description\" ) ; editAppPage . typeName ( \"Test ▁ Name\" ) ; HomePage homePage = ( HomePage ) editAppPage . submitForm ( HomePage . class ) ; } ", "comments": ["--------------------------------------------------------------------------", " Edit App", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Modify App"}
{"id": 804, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"addApp\" ) ; EditAppPage editAppPage = new EditAppPage ( driver ) ; editAppPage . typeDescription ( \"Test ▁ Description\" ) ; EditAppPage editAppPageF = ( EditAppPage ) editAppPage . submitForm ( EditAppPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Modify App Without Name"}
{"id": 807, "website": "bigquery", "code": " public void function ( String url ) throws Throwable { webDriver . get ( BASE_URL + url ) ; waitAndTakeScreenshot ( 10000 ) ; } ", "comments": ["When(\"^the client navigates to \\\"(.*?)\\\"$\")"], "method name": "the client navigates to"}
{"id": 808, "website": "bigquery", "code": " public void function ( ) throws Exception { } ", "comments": [" tests if the servlet returns a 400er if only opened directly", " @throws Exception", " ", " DISABLED: Redirect to Index instead!"], "method name": "test Empty Path"}
{"id": 809, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/create/\" ) ; assertEquals ( \"Error ▁ 400: ▁ Error ▁ reported: ▁ 400\" , driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ) ; } ", "comments": ["Test", " test if servlet response is 400 if parameters are missing", " @throws Exception"], "method name": "test Create No Params"}
{"id": 806, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"home\" ) ; HomePage homePage = new HomePage ( driver ) ; ListUsersPage listUsersPage = ( ListUsersPage ) homePage . submitListUsers ( ListUsersPage . class ) ; } ", "comments": ["--------------------------------------------------------------------------", " Users List", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Display List Users"}
{"id": 805, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"registrationPage\" ) ; RegistrationPage registrationPage = new RegistrationPage ( driver ) ; registrationPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; registrationPage . typeFName ( \"Mario\" ) ; registrationPage . typeLName ( \"Ferreira\" ) ; registrationPage . typeRPassword ( \"1234\" ) ; registrationPage . typePassword ( \"1234\" ) ; driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"mario.ferreira@heig-vd.ch\" ) ; loginPage . typePassword ( \"1234\" ) ; loginPage . submitForm ( HomePage . class ) ; driver . get ( baseUrl + \"home\" ) ; HomePage homePage = new HomePage ( driver ) ; LoginPage loginPageC = ( LoginPage ) homePage . submitLogout ( LoginPage . class ) ; } ", "comments": ["--------------------------------------------------------------------------", " Logout", "Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Logout"}
{"id": 811, "website": "bigquery", "code": " public void function ( String test , Check check ) throws Exception { driver . get ( baseUrl + \"/\" ) ; try { check . check ( test , isElementPresent ( By . xpath ( \" // img[@alt='pictogramme_automobile_200x181']\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": [], "method name": "test Kereval Presentation"}
{"id": 810, "website": "bigquery", "code": " public void function ( ) throws Exception { String startUrl = baseUrl + \"/php4dvd/\" ; driver . get ( startUrl ) ; WebElement userNameElement = driver . findElement ( By . id ( \"username\" ) ) ; userNameElement . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; userNameElement . sendKeys ( Keys . DELETE ) ; userNameElement . sendKeys ( \"admin\" ) ; WebElement passwordElement = driver . findElement ( By . name ( \"password\" ) ) ; passwordElement . sendKeys ( Keys . CONTROL + \"a\" ) ; Thread . sleep ( 200 ) ; passwordElement . sendKeys ( Keys . DELETE ) ; passwordElement . sendKeys ( \"admin\" ) ; WebElement submitElement = driver . findElement ( By . name ( \"submit\" ) ) ; submitElement . click ( ) ; Assert . assertTrue ( driver . getCurrentUrl ( ) . contains ( startUrl + \"#!\" ) , \"Login ▁ wasn't\" ) ; initFilmFields ( ) ; } ", "comments": ["BeforeClass"], "method name": "Do Login Test"}
{"id": 814, "website": "bigquery", "code": " public void function ( String searchUrl , String baseUrl , String key ) { String url = searchUrl + pageNum ; driver . get ( url ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( \"a\" ) ) ; for ( WebElement link : links ) { getLinkFromOnclickElementInner_One ( link , baseUrl , initialUrls ) ; } for ( String [ ] curEntry : initialUrls ) { String pulledUrl = pullCompanyUrl ( curEntry , key ) ; if ( pulledUrl != null ) { urls . add ( pulledUrl ) ; System . out . println ( pulledUrl ) ; PersistenceImpl_WriteToFile . appendToFile ( fileOutput , pulledUrl + \" \\n \" ) ; } } } ", "comments": [], "method name": "get Links From Onclick"}
{"id": 815, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 816, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 817, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; loginPage . submitFormExpectingFailure ( ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "it Should Not Be Possible To Signin With An Invalid Email"}
{"id": 818, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"a@a.com\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "successful Signin Should Bring User To Home Page"}
{"id": 812, "website": "bigquery", "code": " public Queue function ( String intialPageUrl , String javascriptLinkIdentifier , String customAttributeLabel ) { driver . get ( intialPageUrl ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( \"a\" ) ) ; Queue < String [ ] > queue = new ConcurrentLinkedQueue < String [ ] > ( ) ; for ( WebElement link : links ) { String customAttribute = null ; try { customAttribute = link . getAttribute ( customAttributeLabel ) ; if ( customAttribute . contains ( javascriptLinkIdentifier ) ) { customAttribute = customLogic ( customAttribute ) ; String [ ] testEntry = new String [ sizeOfStringArrayEnum ] ; testEntry [ ThreadCommunicationBase . PageQueueEntries . BASE_URL . ordinal ( ) ] = intialPageUrl ; testEntry [ ThreadCommunicationBase . PageQueueEntries . CUSTOM_PARAM . ordinal ( ) ] = customAttribute ; queue . add ( testEntry ) ; } } catch ( Exception e ) { } } return queue ; } ", "comments": [" work in progress, meant to be called just after configure", " @param intialPageUrl", " @return"], "method name": "get Initial Javascript Links Add To Page Queue"}
{"id": 819, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/pages/about\" ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"a@a.com\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; AboutPage aboutPage = ( AboutPage ) loginPage . submitForm ( AboutPage . class ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "a User Trying To Get To About Page Should Be Redirected There After Signin"}
{"id": 813, "website": "bigquery", "code": " private static void function ( WebDriver driver , String searchUrl , String baseUrl , String key ) { String url = searchUrl + pageNum ; driver . get ( url ) ; List < WebElement > links ; List < String [ ] > initialUrls = new ArrayList < String [ ] > ( ) ; List < String > urls = new ArrayList < String > ( ) ; links = driver . findElements ( By . tagName ( \"a\" ) ) ; for ( WebElement link : links ) { String onclick = null ; try { onclick = link . getAttribute ( \"onclick\" ) ; if ( onclick . startsWith ( \"snap_to_marker\" ) ) { String title = link . getAttribute ( \"title\" ) ; sleep ( ) ; link . click ( ) ; String [ ] tmpArray = { convertToUrl ( baseUrl , title ) . toLowerCase ( ) , title . toLowerCase ( ) } ; initialUrls . add ( tmpArray ) ; } } catch ( Exception e ) { } } for ( String [ ] curEntry : initialUrls ) { String pulledUrl = pullCompanyUrl ( driver , curEntry , key ) ; if ( pulledUrl != null ) { urls . add ( pulledUrl ) ; System . out . println ( pulledUrl ) ; persistEntry ( pulledUrl ) ; } } } ", "comments": [], "method name": "get Link From Onclick Element"}
{"id": 820, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"a@a.com\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToBeersPageViaMenu ( ) . goToBeersPageViaMenu ( ) . goToAJAXPageViaMenu ( ) . goToGenerateTestDataPageViaMenu ( ) . goToCorporateInformationPageViaMenu ( ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "a User Should Be Able To Visit All Pages After Signin"}
{"id": 821, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"a@a.com\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; HomePage homePage = ( HomePage ) loginPage . submitForm ( HomePage . class ) ; homePage . goToCorporateInformationPageViaMenu ( ) . clickOnFirstCompanyLinkInCompaniesTable ( ) ; } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "a User Should Be Able To Get Details Information About A Company"}
{"id": 823, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"this ▁ is ▁ not ▁ a ▁ valid ▁ email ▁ address\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; loginPage . submitFormExpectingFailure ( ) ; } ", "comments": ["Test"], "method name": "it Should Not Be Possible To Signin With An Invalid Email"}
{"id": 824, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; loginPage . typeEmailAddress ( \"a@a.com\" ) ; loginPage . typePassword ( \"any ▁ password\" ) ; YourAppPage yourapppage = ( YourAppPage ) loginPage . submitForm ( YourAppPage . class ) ; } ", "comments": ["Test"], "method name": "successful Signin Should Bring User To Home Page"}
{"id": 825, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; LoginPage loginPage = new LoginPage ( driver ) ; AccountRegistrationPage accountregistrationpage = ( AccountRegistrationPage ) loginPage . submitForm ( AccountRegistrationPage . class ) ; } ", "comments": ["Test"], "method name": "Click Create Account Button Should Bring User To Account Registration Page"}
{"id": 826, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl + \"/pages/yourApps\" ) ; AccountRegistrationPage creatAccountPage = new AccountRegistrationPage ( driver ) ; creatAccountPage . typeEmailAddress ( \"a@a.com\" ) ; creatAccountPage . typeFirstname ( \"any ▁ firstname\" ) ; creatAccountPage . typeLastname ( \"any ▁ lastname\" ) ; creatAccountPage . typeLastname ( \"any ▁ lastname\" ) ; creatAccountPage . typePassword ( \"any ▁ password\" ) ; creatAccountPage . typeConfirmPassword ( \"any ▁ password\" ) ; YourAppPage yourapppage = ( YourAppPage ) creatAccountPage . submitForm ( YourAppPage . class ) ; } ", "comments": ["Test"], "method name": "successful Creat Account Should Bring User Toyour App Page"}
{"id": 827, "website": "bigquery", "code": " public static void function ( String subURL ) { checkInitialization ( ) ; TestEventManager . getInstance ( ) . addStimuli ( \"Loading ▁ \" + subURL ) ; driver . get ( baseUrl + \"/\" + subURL ) ; } ", "comments": [" Load the page relative to the base ur.", " @param subURL"], "method name": "goto Sub Page"}
{"id": 828, "website": "bigquery", "code": " public static void function ( String subURL ) { checkInitialization ( ) ; driver . get ( baseUrl + \"/\" + subURL ) ; } ", "comments": [" Load the page relative to the base url. Doesn't log the page reload", " @param subURL"], "method name": "reload Sub Page"}
{"id": 822, "website": "bigquery", "code": " public void function ( ) throws Exception { String authUrl = UrlUtils . getAuthUrl ( url , \"GET\" ) . toExternalForm ( ) ; Dimension innerSize = new Dimension ( 800 , 600 ) ; SeleniumUtils . setInnerSize ( driver , innerSize ) ; driver . get ( authUrl ) ; DoclogRecordBuilder builder = new DoclogRecordBuilder ( ) . setUrl ( authUrl ) . setBounds ( new Rectangle ( 0 , 0 , innerSize . width , innerSize . height ) ) ; Fingerprint newFingerprint = waitForFingerprint ( ) ; testReadyLog ( newFingerprint , builder ) ; testScrollVertically ( newFingerprint , builder ) ; testResize ( newFingerprint , builder ) ; for ( WebElement input : driver . findElements ( By . tagName ( \"input\" ) ) ) { if ( ! Arrays . asList ( \"text\" , \"search\" ) . contains ( input . getAttribute ( \"type\" ) ) ) continue ; testTyping ( newFingerprint , builder , input , \"a€\" ) ; } for ( WebElement input : driver . findElements ( By . tagName ( \"textarea\" ) ) ) { testTyping ( newFingerprint , builder , input , \"a€ ▁  \\n ABC\" ) ; } testBlur ( newFingerprint , builder ) ; List < WebElement > links = driver . findElements ( By . tagName ( \"a\" ) ) ; assertTrue ( \"The ▁ page ▁ does ▁ not ▁ contain ▁ any ▁ links. ▁ At ▁ least ▁ one ▁ link ▁ is ▁ needed ▁ to ▁ test ▁ the ▁ \" + DoclogAction . LINK + \" ▁ event\" , links . size ( ) > 0 ) ; WebElement randomLink = links . get ( ( int ) ( Math . random ( ) * ( links . size ( ) ) ) ) ; LOGGER . info ( \"Following ▁ link ▁ \" + randomLink . getAttribute ( \"href\" ) ) ; testLink ( newFingerprint , builder , randomLink ) ; testUnknown ( newFingerprint , builder ) ; } ", "comments": ["Test"], "method name": "check If Sends Data"}
{"id": 829, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . cssSelector ( \"div[class=\\\"title\\\"]\" ) ) . click ( ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"Comedy\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . linkText ( \"Remove\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; } ", "comments": ["Test"], "method name": "test Delete Movie"}
{"id": 831, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"q\" ) ) ) ; WebElement search = driver . findElement ( By . id ( \"q\" ) ) ; search . clear ( ) ; search . sendKeys ( \"somenotfoundmovie\" + Keys . RETURN ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( \"div.title\" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"div.content\" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"div.content\" ) , \"No ▁ movies ▁ where ▁ found.\" ) ) ; try { assertEquals ( \"No ▁ movies ▁ where ▁ found.\" , driver . findElement ( By . cssSelector ( \"div.content\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"q\" ) ) ) ; search . clear ( ) ; WebElement nftd = driver . findElement ( By . cssSelector ( \"div.content\" ) ) ; search . sendKeys ( \"test\" + Keys . RETURN ) ; wait . until ( ExpectedConditions . stalenessOf ( nftd ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"div.title\" ) ) ) ; WebElement title = driver . findElement ( By . cssSelector ( \"div.title\" ) ) ; try { assertTrue ( title . getAttribute ( \"innerText\" ) . matches ( \"Test\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"category-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"category-menu\" ) ) . findElement ( By . linkText ( \"Animation\" ) ) . click ( ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( \"div.title\" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"div.content\" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"div.content\" ) , \"No ▁ movies ▁ where ▁ found.\" ) ) ; try { assertEquals ( \"No ▁ movies ▁ where ▁ found.\" , driver . findElement ( By . cssSelector ( \"div.content\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"category-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"category-menu\" ) ) . findElement ( By . linkText ( \"Comedy\" ) ) . click ( ) ; wait . until ( ExpectedConditions . stalenessOf ( nftd ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"div.title\" ) ) ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( \"div.title\" ) ) . getAttribute ( \"innerText\" ) . matches ( \"Test\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } Thread . sleep ( 500 ) ; } ", "comments": ["Test"], "method name": "test Complex Search"}
{"id": 832, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.title\" ) ) ) ; int countorig = driver . findElements ( By . cssSelector ( \"div.title\" ) ) . size ( ) ; driver . findElement ( By . cssSelector ( \"div[class=\\\"title\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) ) ; acceptNextAlert = false ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; Thread . sleep ( 500 ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Remove\\\"]\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure ▁ you ▁ want ▁ to ▁ remove ▁ this[\\\\s\\\\S]$\" ) ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.title\" ) ) ) ; int countres = driver . findElements ( By . cssSelector ( \"div.title\" ) ) . size ( ) ; System . out . println ( countorig ) ; System . out . println ( countres ) ; if ( countres != countorig - 1 ) System . out . println ( \"Something ▁ is ▁ wrong\" ) ; else System . out . println ( \"All ▁ is ▁ OK\" ) ; } ", "comments": ["Test"], "method name": "test Delete Movie"}
{"id": 834, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"q\" ) ) ) ; driver . findElement ( By . id ( \"q\" ) ) . clear ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"q\" ) ) ) ; WebElement nftd = driver . findElement ( By . cssSelector ( \"div.content\" ) ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"test\" + Keys . RETURN ) ; wait . until ( ExpectedConditions . stalenessOf ( nftd ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"div.title\" ) ) ) ; WebElement note = driver . findElement ( By . cssSelector ( \"div.title\" ) ) ; Thread . sleep ( 500 ) ; try { assertTrue ( note . getAttribute ( \"innerText\" ) . matches ( \"Test\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Positive Search"}
{"id": 830, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( \"label[for=\\\"imdbsearch\\\"][class=\\\"error\\\"]\" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"", "comments": ["Test"], "method name": "test Find And Add2"}
{"id": 836, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement userField = driver . findElement ( By . id ( \"username\" ) ) ; userField . clear ( ) ; userField . sendKeys ( \"admin\" ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Login Test HTML"}
{"id": 835, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebElement userField = driver . findElement ( By . id ( \"username\" ) ) ; userField . clear ( ) ; userField . sendKeys ( \"admin\" ) ; WebElement passwordField = driver . findElement ( By . name ( \"password\" ) ) ; passwordField . clear ( ) ; passwordField . sendKeys ( \"admin\" ) ; driver . findElement ( By . name ( \"submit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Login Test HTML"}
{"id": 837, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"q\" ) ) ) ; driver . findElement ( By . id ( \"q\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"q\" ) ) . sendKeys ( \"somenotfoundmovie\" + Keys . RETURN ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( \"div.title\" ) ) ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"div.content\" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"div.content\" ) , \"No ▁ movies ▁ where ▁ found.\" ) ) ; try { assertEquals ( \"No ▁ movies ▁ where ▁ found.\" , driver . findElement ( By . cssSelector ( \"div.content\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } } ", "comments": ["Test"], "method name": "test Negative Search"}
{"id": 833, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.title\" ) ) ) ; int countorig = driver . findElements ( By . cssSelector ( \"div.title\" ) ) . size ( ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; driver . findElement ( By . name ( \"imdbid\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"imdbid\" ) ) . sendKeys ( \"9999999\" ) ; driver . findElement ( By . name ( \"name\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"label[for=\\\"name\\\"]\" ) ) ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( \"label[for=\\\"name\\\"]\" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"This ▁ field ▁ is ▁ required\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"New ▁ Movie\" ) ; driver . findElement ( By . name ( \"aka\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"aka\" ) ) . sendKeys ( \"New ▁ Movie ▁ by ▁ Yulia ▁ Belyakova\" ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . invisibilityOfElementLocated ( By . cssSelector ( \"label[for=\\\"name\\\"]\" ) ) ) ; try { assertFalse ( driver . findElement ( By . cssSelector ( \"label[for=\\\"name\\\"]\" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"label[for=\\\"year\\\"]\" ) ) ) ; try { assertTrue ( driver . findElement ( By . cssSelector ( \"label[for=\\\"year\\\"]\" ) ) . isDisplayed ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertTrue ( driver . findElement ( By . cssSelector ( \"BODY\" ) ) . getText ( ) . matches ( \"This ▁ field ▁ is ▁ required\" ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . name ( \"year\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"year\" ) ) . sendKeys ( \"2016\" ) ; driver . findElement ( By . name ( \"duration\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"duration\" ) ) . sendKeys ( \"20\" ) ; driver . findElement ( By . name ( \"rating\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"rating\" ) ) . sendKeys ( \"10\" ) ; driver . findElement ( By . id ( \"own_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"seen_no\" ) ) . click ( ) ; driver . findElement ( By . id ( \"loaned_yes\" ) ) . click ( ) ; driver . findElement ( By . name ( \"loanname\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"loanname\" ) ) . sendKeys ( \"2016-03-29\" ) ; driver . findElement ( By . id ( \"cover\" ) ) . clear ( ) ; File file = new File ( \"src/test/resource/images/new_movie.jpg\" ) ; driver . findElement ( By . id ( \"cover\" ) ) . sendKeys ( file . getAbsolutePath ( ) ) ; driver . findElement ( By . name ( \"trailer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"trailer\" ) ) . sendKeys ( \"https: // www.youtube.com/watch?v=ap_avaJApm8\" ) ; driver . findElement ( By . name ( \"notes\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"notes\" ) ) . sendKeys ( \"Personal ▁ notes ▁ test\" ) ; driver . findElement ( By . name ( \"taglines\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"taglines\" ) ) . sendKeys ( \"Taglines ▁ test\" ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"plotoutline\" ) ) . sendKeys ( \"Plot ▁ outline ▁ test\" ) ; driver . findElement ( By . name ( \"plots\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"plots\" ) ) . sendKeys ( \"Plots ▁ test\" ) ; driver . findElement ( By . id ( \"text_languages_0\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"text_languages_0\" ) ) . sendKeys ( \"EN, ▁ RU\" ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . sendKeys ( \"Subtitles ▁ test\" ) ; driver . findElement ( By . name ( \"audio\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"audio\" ) ) . sendKeys ( \"Audio ▁ test\" ) ; driver . findElement ( By . name ( \"video\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"video\" ) ) . sendKeys ( \"Video ▁ test\" ) ; driver . findElement ( By . name ( \"country\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"country\" ) ) . sendKeys ( \"RU\" ) ; driver . findElement ( By . name ( \"genres\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"genres\" ) ) . sendKeys ( \"Comedy\" ) ; driver . findElement ( By . name ( \"director\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"director\" ) ) . sendKeys ( \"Director ▁ test\" ) ; driver . findElement ( By . name ( \"writer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"writer\" ) ) . sendKeys ( \"Writer ▁ test\" ) ; driver . findElement ( By . name ( \"producer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"producer\" ) ) . sendKeys ( \"Producer ▁ test\" ) ; driver . findElement ( By . name ( \"music\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"music\" ) ) . sendKeys ( \"Music ▁ test\" ) ; driver . findElement ( By . name ( \"cast\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"cast\" ) ) . sendKeys ( \"Cast ▁ test\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"submit\" ) ) ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"h2\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"h1\" ) ) ) ; driver . findElement ( By . cssSelector ( \"h1\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.title\" ) ) ) ; int countres = driver . findElements ( By . cssSelector ( \"div.title\" ) ) . size ( ) ; System . out . println ( countorig ) ; System . out . println ( countres ) ; if ( countres != countorig + 1 ) System . out . println ( \"Something ▁ is ▁ wrong\" ) ; else System . out . println ( \"All ▁ is ▁ OK\" ) ; } ", "comments": ["Test"], "method name": "test New Movie"}
{"id": 839, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure[\\\\s\\\\S]$\" ) ) ; assertTrue ( driver . findElements ( By . linkText ( \"DelTopic\" ) ) . isEmpty ( ) ) ; } ", "comments": ["Test"], "method name": "test Del Topic Tc1"}
{"id": 841, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user3\" ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signup:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:username\" ) ) . sendKeys ( \"user3\" ) ; } ", "comments": ["Test"], "method name": "test Sign Up Tc2"}
{"id": 840, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user1\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . id ( \"formNewTopic:createNewTopic\" ) ) . click ( ) ; driver . findElement ( By . id ( \"CreateTopic:Title\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"CreateTopic:Title\" ) ) . sendKeys ( \"MyTopic\" ) ; driver . findElement ( By . id ( \"CreateTopic:Content\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"CreateTopic:Content\" ) ) . sendKeys ( \"MyContent\" ) ; driver . findElement ( By . id ( \"CreateTopic:Create\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . linkText ( \"user1\" ) ) . size ( ) > 0 ) ; } ", "comments": ["Test"], "method name": "test Create Topic TC1"}
{"id": 842, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; assertTrue ( \"The ▁ Username ▁ field ▁ is ▁ required.\" . equals ( driver . findElement ( By . id ( \"secondMessagePanel\" ) ) . findElement ( By . tagName ( \"td\" ) ) . getText ( ) . trim ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Sign In Tc3"}
{"id": 843, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user1\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"TestAddTopic1\" ) ) . click ( ) ; driver . findElement ( By . id ( \"formPost:content\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"formPost:content\" ) ) . sendKeys ( \"Message1\" ) ; assertTrue ( driver . findElements ( By . linkText ( \"Post\" ) ) . size ( ) > 0 ) ; } ", "comments": ["Test"], "method name": "test Add Post Tc1"}
{"id": 845, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signup:email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:email\" ) ) . sendKeys ( \"user4@user4.com\" ) ; driver . findElement ( By . id ( \"signup:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:username\" ) ) . sendKeys ( \"user4\" ) ; driver . findElement ( By . id ( \"signup:btnSignup\" ) ) . click ( ) ; WebElement web = driver . findElement ( By . id ( \"signup:messageUsername\" ) ) ; String t = web . getText ( ) ; } ", "comments": ["Test"], "method name": "test Sign Up Tc3"}
{"id": 846, "website": "bigquery", "code": " public void function ( ) throws InterruptedException { Thread . sleep ( 2000 ) ; driver . get ( baseUrl ) ; HomePage homePage = new HomePage ( driver ) ; Thread . sleep ( 2000 ) ; homePage . typeIncorrectCreditentials ( ) ; Thread . sleep ( 5000 ) ; if ( ! \"GoomY\" . equals ( driver . getTitle ( ) ) ) { throw new IllegalStateException ( \"This ▁ is ▁ not ▁ the ▁ correct ▁ page\" ) ; } } ", "comments": ["Test", "ProbeTest(tags = \"WebUI\")"], "method name": "a Wrong Login Stays To Home Page"}
{"id": 844, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user1\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . id ( \"formNewTopic:createNewTopic\" ) ) . click ( ) ; driver . findElement ( By . id ( \"CreateTopic:Content\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"CreateTopic:Content\" ) ) . sendKeys ( \"Test\" ) ; driver . findElement ( By . id ( \"CreateTopic:Create\" ) ) . click ( ) ; assertTrue ( \"The ▁ Title ▁ field ▁ is ▁ required.\" . equals ( driver . findElement ( By . id ( \"secondMessagePanel\" ) ) . findElement ( By . tagName ( \"td\" ) ) . getText ( ) . trim ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Create Topic Tc2"}
{"id": 847, "website": "bigquery", "code": " public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } ", "comments": ["Override"], "method name": "goto Test Course"}
{"id": 848, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 850, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 849, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 851, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 838, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/php4dvd/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.title\" ) ) ) ; int countorig = driver . findElements ( By . cssSelector ( \"div.title\" ) ) . size ( ) ; driver . findElement ( By . cssSelector ( \"img[alt=\\\"Add ▁ movie\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"imdbsearch\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . cssSelector ( \"input[type=\\\"submit\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . className ( \"title\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . linkText ( \"Test\" ) ) ) ; driver . get ( baseUrl + \"/php4dvd/?go=add&imdbid=2407380\" ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . name ( \"name\" ) ) ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"Test ▁ ymbelyakova\" ) ; driver . findElement ( By . name ( \"aka\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"aka\" ) ) . sendKeys ( \"Test ▁ ymbelyakova\" ) ; driver . findElement ( By . name ( \"name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"name\" ) ) . sendKeys ( \"Test\" ) ; driver . findElement ( By . id ( \"cover\" ) ) . clear ( ) ; File file = new File ( \"src/test/resource/images/test_cover.jpg\" ) ; driver . findElement ( By . id ( \"cover\" ) ) . sendKeys ( file . getAbsolutePath ( ) ) ; driver . findElement ( By . name ( \"notes\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"notes\" ) ) . sendKeys ( \"Personal ▁ notes ▁ test\" ) ; driver . findElement ( By . name ( \"taglines\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"taglines\" ) ) . sendKeys ( \"Taglines ▁ test\" ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"subtitles\" ) ) . sendKeys ( \"Subtitles ▁ test\" ) ; driver . findElement ( By . name ( \"country\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"country\" ) ) . sendKeys ( \"UK\" ) ; driver . findElement ( By . name ( \"genres\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"genres\" ) ) . sendKeys ( \"Comedy\" ) ; driver . findElement ( By . name ( \"director\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"director\" ) ) . sendKeys ( \"Director ▁ test\" ) ; driver . findElement ( By . name ( \"writer\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"writer\" ) ) . sendKeys ( \"Writer ▁ test\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"submit\" ) ) ) ; driver . findElement ( By . id ( \"submit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"h1\" ) ) ) ; driver . findElement ( By . cssSelector ( \"h1\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.title\" ) ) ) ; int countres = driver . findElements ( By . cssSelector ( \"div.title\" ) ) . size ( ) ; System . out . println ( countorig ) ; System . out . println ( countres ) ; if ( countres != countorig + 1 ) System . out . println ( \"Something ▁ is ▁ wrong\" ) ; else System . out . println ( \"All ▁ is ▁ OK\" ) ; } ", "comments": ["Test"], "method name": "test Find And Add"}
{"id": 852, "website": "bigquery", "code": " public ICoursePage function ( ) { driver . get ( baseUrl ) ; try { testCourseLink . click ( ) ; return PageFactory . initElements ( driver , CoursePage . class ) ; } catch ( NoSuchElementException e ) { return createTestCourse ( ) ; } } ", "comments": ["Override"], "method name": "goto Test Course"}
{"id": 853, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": [], "method name": "test Can Block Invalid Ssl Certificates"}
{"id": 854, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Ignore(value = {IE, SELENESE})"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 855, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 858, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 857, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = new FirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": [], "method name": "test Can Block Invalid Ssl Certificates"}
{"id": 859, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UsernamePasswordCredentials user = new UsernamePasswordCredentials ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; assertEquals ( \"authorized\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 860, "website": "bigquery", "code": " private void function ( String url , int sleepTime ) { driver . get ( url ) ; sleep ( sleepTime ) ; writeLogFile ( ) ; } ", "comments": [], "method name": "write Log File"}
{"id": 861, "website": "bigquery", "code": " public static void function ( UESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . cssSelector ( \".right ▁ > ▁ a\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console dashboard server", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 862, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 863, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 864, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork7.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement total = driver . findElement ( By . id ( \"total\" ) ) ; assertThat ( total . getText ( ) , is ( \"9000\" ) ) ; } ", "comments": [" 入門課題その7:「表示された値のチェックをしてみよう」", " 解答例", "Test"], "method name": "test Get And Check Text"}
{"id": 865, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork2.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement okButton = driver . findElement ( By . id ( \"ok_button\" ) ) ; okButton . click ( ) ; } ", "comments": [" 入門課題その2:「クリックしてみよう」", " 解答例", "Test"], "method name": "test Click OK Button"}
{"id": 866, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork8.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; Actions actions = new Actions ( driver ) ; WebElement lastButton = driver . findElement ( By . id ( \"last_button\" ) ) ; actions . moveToElement ( lastButton ) ; actions . perform ( ) ; } ", "comments": [" 入門課題その2:「クリックしてみよう」", "Test"], "method name": "test Click OK Button"}
{"id": 868, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork5.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement allowedCheck = driver . findElement ( By . id ( \"allowed_check\" ) ) ; if ( ! allowedCheck . isSelected ( ) ) { allowedCheck . click ( ) ; } } ", "comments": [" 入門課題その5:「チェックボックスを選択してみよう」", " 解答例", "Test"], "method name": "test Click Checkbox"}
{"id": 867, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork9.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement okButton = driver . findElement ( By . id ( \"ok_button\" ) ) ; okButton . click ( ) ; Wait < WebDriver > wait = new WebDriverWait ( driver , 10 ) ; WebElement clickedText = driver . findElement ( By . id ( \"clicked_text\" ) ) ; try { wait . until ( ExpectedConditions . visibilityOf ( clickedText ) ) ; } finally { assertThat ( clickedText . getText ( ) , is ( \"「OK」ボタンがクリックされました!\" ) ) ; } } ", "comments": [" 入門課題その9:「テキストが表示されるまで待機してみよう」", "Test"], "method name": "test Click OK Button"}
{"id": 869, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI, SELENESE, OPERA_MOBILE},"], "method name": "handle Form With Javascript Action"}
{"id": 870, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"missedJsReference.html\" ) ; driver . get ( url ) ; driver . switchTo ( ) . frame ( \"inner\" ) ; WebElement first = driver . findElement ( By . id ( \"oneline\" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement element = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"return ▁ frames[0].document.getElementById('oneline');\" ) ; driver . switchTo ( ) . frame ( \"inner\" ) ; WebElement second = driver . findElement ( By . id ( \"oneline\" ) ) ; checkIdEqualityIfRemote ( first , element ) ; checkIdEqualityIfRemote ( second , element ) ; } ", "comments": ["JavascriptEnabled", "Ignore(value = {ANDROID, IPHONE, SELENESE, OPERA, OPERA_MOBILE},", "Test"], "method name": "test An Element Found In A Different Frame Via Js Should Have Same Id"}
{"id": 872, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Ignore(value = {IE, SELENESE})", "Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 871, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"missedJsReference.html\" ) ; driver . get ( url ) ; try { driver . switchTo ( ) . frame ( \"inner\" ) ; WebElement first = driver . findElement ( By . id ( \"oneline\" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement element = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"return ▁ frames[0].document.getElementById('oneline');\" ) ; driver . switchTo ( ) . frame ( \"inner\" ) ; WebElement second = driver . findElement ( By . id ( \"oneline\" ) ) ; assertEquals ( first , element ) ; assertEquals ( second , element ) ; } finally { driver . switchTo ( ) . defaultContent ( ) ; } } ", "comments": ["JavascriptEnabled", "Ignore({ANDROID, IPHONE, OPERA, SELENESE, OPERA_MOBILE})", "Test"], "method name": "test An Element Found In A Different Frame Via Js Can Be Used"}
{"id": 873, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = waitFor ( alertToBePresent ( driver ) ) ; UserAndPassword user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; assertEquals ( \"authorized\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 875, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 874, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) ) ; String bookmarkedAsset = driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) . getText ( ) ; driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"btn-add-gadget\" ) ) ) ; driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"btn-add-gadget\" ) , \"Bookmarked\" ) ) ; assertEquals ( \"Bookmarked\" , driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . getText ( ) , \"Bookmarking ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Bookmarking\")"], "method name": "test ES Store Bookmark Test Case"}
{"id": 856, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/design\" ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"pass\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"pass\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"loginButton\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( \"timeout\" ) ; } try { if ( isElementPresent ( By . linkText ( \"All ▁ Statistics\" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"All ▁ Statistics\" ) ) . click ( ) ; for ( int second = 0 ; ; second ++ ) { if ( second >= 60 ) { fail ( \"timeout\" ) ; } try { if ( isElementPresent ( By . linkText ( \"API ▁ Response ▁ Times\" ) ) ) { break ; } } catch ( Exception e ) { } Thread . sleep ( 1000 ) ; } driver . findElement ( By . linkText ( \"API ▁ Response ▁ Times\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Usage ▁ by ▁ Resource ▁ Path\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Usage ▁ by ▁ User\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Browse\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Subscriptions\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Statistics\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Subscriptions\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Usage\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Response ▁ Times\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"API ▁ Last ▁ Access ▁ Times\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Browse\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Browse\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; } ", "comments": ["Test(groups = \"\", description = \"\")"], "method name": "test WSO2 Format Test Case"}
{"id": 876, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( \"Gadget\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . getText ( ) , \"Gadget ▁ Menu ▁ missing\" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( \" // a[contains(text(),\" + \"'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . getText ( ) , \"Gadgets ▁ missing\" ) ; firstAsset = driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ; assertEquals ( \"Recently ▁ Added\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets']/div/div[2]/div[1]/div/h4\" ) ) . getText ( ) , \"Recently ▁ Added ▁ section ▁ missing\" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . getText ( ) , \"Recently ▁ added ▁ Gadgets ▁ missing\" ) ; assertEquals ( \"Tags\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets']/div/div[2]/div[2]/div/h4\" ) ) . getText ( ) , \"Tags ▁ section ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"charts\" ) ) , \"Tags ▁ missing ▁ (charts ▁ tag)\" ) ; assertEquals ( \"All ▁ Categories\" , driver . findElement ( By . cssSelector ( \"div.breadcrumb-head\" ) ) . getText ( ) , \"Category ▁ drop ▁ down ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"i.icon-star\" ) ) , \"Popularity ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"i.icon-sort-alphabetical\" ) ) , \"Alphabetical ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"i.icon-calendar\" ) ) , \"Recent ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"search\" ) ) , \"Search ▁ tray ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page\")"], "method name": "test Gadget Page"}
{"id": 877, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( firstAsset , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Gadget ▁ list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Line ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) , \"Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Recently ▁ added ▁ list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . click ( ) ; WebElement element = driver . findElement ( By . xpath ( \" // h4[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) ; driver . findElement ( By . linkText ( \"pie\" ) ) . click ( ) ; wait . until ( ExpectedConditions . stalenessOf ( element ) ) ; assertEquals ( 1 , driver . findElements ( By . cssSelector ( \"div.span3.asset\" ) ) . size ( ) , \"Tags ▁ not ▁ working\" ) ; assertEquals ( \"Pie ▁ Chart\" , driver . findElement ( By . xpath ( \" // h4[contains(.,'Pie ▁ Chart')]\" ) ) . getText ( ) , \"Tags ▁ are ▁ not ▁ working\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page Links\","], "method name": "test Links From Page"}
{"id": 879, "website": "bigquery", "code": " public void function ( ) throws IOException { final String authUrl = deploymentUrl . toExternalForm ( ) + PATH_AUTHORIZE_WITH_REDIRECT ; log . info ( \"Starting ▁ URL: ▁ \" + authUrl ) ; driver . navigate ( ) . to ( authUrl ) ; performGitHubOAuth ( driver ) ; final String finalContent = driver . getPageSource ( ) ; String expected = \"{\\\"session_has_github_access_token\\\":true}\" ; log . info ( \"Response ▁ from ▁ verification ▁ after ▁ OAuth: ▁ \" + finalContent ) ; Assert . assertTrue ( finalContent . contains ( expected ) ) ; } ", "comments": ["Test"], "method name": "should Have Token Associated After O Auth"}
{"id": 880, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork3.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement subject = driver . findElement ( By . id ( \"subject\" ) ) ; subject . clear ( ) ; subject . sendKeys ( \"Selenium\" ) ; } ", "comments": [" 入門課題その3:「文字列を入力してみよう」", " 解答例", "Test"], "method name": "test Clear And Send Keys"}
{"id": 881, "website": "bigquery", "code": " public void function ( ) { File html = new File ( \"reserveApp/index.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; driver . findElement ( By . id ( \"reserve_year\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_year\" ) ) . sendKeys ( \"2013\" ) ; driver . findElement ( By . id ( \"reserve_month\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_month\" ) ) . sendKeys ( \"12\" ) ; driver . findElement ( By . id ( \"reserve_day\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_day\" ) ) . sendKeys ( \"7\" ) ; driver . findElement ( By . id ( \"reserve_term\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_term\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"headcount\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"headcount\" ) ) . sendKeys ( \"9\" ) ; driver . findElement ( By . id ( \"breakfast_on\" ) ) . click ( ) ; WebElement planA = driver . findElement ( By . id ( \"plan_a\" ) ) ; if ( ! planA . isSelected ( ) ) { planA . click ( ) ; } WebElement planB = driver . findElement ( By . id ( \"plan_b\" ) ) ; if ( ! planB . isSelected ( ) ) { planB . click ( ) ; } driver . findElement ( By . id ( \"guestname\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"guestname\" ) ) . sendKeys ( \"a\" ) ; driver . findElement ( By . id ( \"goto_next\" ) ) . click ( ) ; assertThat ( driver . findElement ( By . id ( \"price\" ) ) . getText ( ) , is ( \"105750\" ) ) ; assertThat ( driver . findElement ( By . id ( \"datefrom\" ) ) . getText ( ) , is ( \"2013年12月7日\" ) ) ; assertThat ( driver . findElement ( By . id ( \"dateto\" ) ) . getText ( ) , is ( \"2013年12月8日\" ) ) ; assertThat ( driver . findElement ( By . id ( \"dayscount\" ) ) . getText ( ) , is ( \"1\" ) ) ; assertThat ( driver . findElement ( By . id ( \"hc\" ) ) . getText ( ) , is ( \"9\" ) ) ; assertThat ( driver . findElement ( By . id ( \"bf_order\" ) ) . getText ( ) , is ( \"あり\" ) ) ; assertThat ( driver . findElement ( By . id ( \"plan_a_order\" ) ) . getText ( ) , is ( \"昼からチェックインプラン\" ) ) ; assertThat ( driver . findElement ( By . id ( \"plan_b_order\" ) ) . getText ( ) , is ( \"お得な観光プラン\" ) ) ; assertThat ( driver . findElement ( By . id ( \"gname\" ) ) . getText ( ) , is ( \"a\" ) ) ; driver . findElement ( By . id ( \"commit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Reserve With9 Members"}
{"id": 883, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork4.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement onRadio = driver . findElement ( By . id ( \"on_radio\" ) ) ; onRadio . click ( ) ; } ", "comments": [" 入門課題その4:「ラジオボタンを選択してみよう」", " 解答例", "Test"], "method name": "test Click Radio Button"}
{"id": 884, "website": "bigquery", "code": " public void function ( ) throws Exception { File html = new File ( \"introwork/introWork6.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; WebElement headCount = driver . findElement ( By . id ( \"head_count\" ) ) ; Select select = new Select ( headCount ) ; select . selectByValue ( \"5\" ) ; } ", "comments": [" 入門課題その6:「プルダウンを選択してみよう」", "Test"], "method name": "test Select Option By Value"}
{"id": 882, "website": "bigquery", "code": " public void function ( ) { File html = new File ( \"reserveApp/index.html\" ) ; String url = html . toURI ( ) . toString ( ) ; driver . get ( url ) ; Calendar immediateSaturday = CalendarUtility . getImmediateDayOfWeek ( Calendar . getInstance ( ) , Calendar . SATURDAY ) ; int reserveYear = immediateSaturday . get ( Calendar . YEAR ) ; int reserveMonth = immediateSaturday . get ( Calendar . MONTH ) + 1 ; int reserveDay = immediateSaturday . get ( Calendar . DAY_OF_MONTH ) ; driver . findElement ( By . id ( \"reserve_year\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_year\" ) ) . sendKeys ( Integer . toString ( reserveYear ) ) ; driver . findElement ( By . id ( \"reserve_month\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_month\" ) ) . sendKeys ( Integer . toString ( reserveMonth ) ) ; driver . findElement ( By . id ( \"reserve_day\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_day\" ) ) . sendKeys ( Integer . toString ( reserveDay ) ) ; driver . findElement ( By . id ( \"reserve_term\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reserve_term\" ) ) . sendKeys ( \"1\" ) ; driver . findElement ( By . id ( \"headcount\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"headcount\" ) ) . sendKeys ( \"9\" ) ; driver . findElement ( By . id ( \"breakfast_on\" ) ) . click ( ) ; WebElement planA = driver . findElement ( By . id ( \"plan_a\" ) ) ; if ( ! planA . isSelected ( ) ) { planA . click ( ) ; } WebElement planB = driver . findElement ( By . id ( \"plan_b\" ) ) ; if ( ! planB . isSelected ( ) ) { planB . click ( ) ; } driver . findElement ( By . id ( \"guestname\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"guestname\" ) ) . sendKeys ( \"a\" ) ; driver . findElement ( By . id ( \"goto_next\" ) ) . click ( ) ; Calendar checkoutSunday = ( Calendar ) immediateSaturday . clone ( ) ; checkoutSunday . add ( Calendar . DAY_OF_MONTH , 1 ) ; int checkoutYear = checkoutSunday . get ( Calendar . YEAR ) ; int checkoutMonth = checkoutSunday . get ( Calendar . MONTH ) + 1 ; int checkoutDay = checkoutSunday . get ( Calendar . DAY_OF_MONTH ) ; assertThat ( driver . findElement ( By . id ( \"price\" ) ) . getText ( ) , is ( \"105750\" ) ) ; assertThat ( driver . findElement ( By . id ( \"datefrom\" ) ) . getText ( ) , is ( reserveYear + \"年\" + reserveMonth + \"月\" + reserveDay + \"日\" ) ) ; assertThat ( driver . findElement ( By . id ( \"dateto\" ) ) . getText ( ) , is ( checkoutYear + \"年\" + checkoutMonth + \"月\" + checkoutDay + \"日\" ) ) ; assertThat ( driver . findElement ( By . id ( \"dayscount\" ) ) . getText ( ) , is ( \"1\" ) ) ; assertThat ( driver . findElement ( By . id ( \"hc\" ) ) . getText ( ) , is ( \"9\" ) ) ; assertThat ( driver . findElement ( By . id ( \"bf_order\" ) ) . getText ( ) , is ( \"あり\" ) ) ; assertThat ( driver . findElement ( By . id ( \"plan_a_order\" ) ) . getText ( ) , is ( \"昼からチェックインプラン\" ) ) ; assertThat ( driver . findElement ( By . id ( \"plan_b_order\" ) ) . getText ( ) , is ( \"お得な観光プラン\" ) ) ; assertThat ( driver . findElement ( By . id ( \"gname\" ) ) . getText ( ) , is ( \"a\" ) ) ; driver . findElement ( By . id ( \"commit\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Reserve With9 Members Using Calendar Utility"}
{"id": 885, "website": "bigquery", "code": " public void function ( ) throws Exception { loginAdmin ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { postConnectivityData ( ) ; webDriver . get ( baseUrl + USER_PROFILE_URL_SUFFIX ) ; WebElement logout = findElement ( By . name ( \"logout\" ) ) ; assertEquals ( \"button\" , logout . getTagName ( ) ) ; assertEquals ( \"submit\" , logout . getAttribute ( \"type\" ) ) ; } logout ( ) ; } ", "comments": [" Navigates to the \"Large Scale Connectivity\" page ten times.", " @throws Exception if something goes wrong"], "method name": "test Post Connectivity Data Ten Times"}
{"id": 878, "website": "bigquery", "code": " public static void function ( WebDriver driver , String baseUrl , String assetType , String assetName , String version , String category , String url , String description ) { driver . get ( baseUrl + \"/publisher/assets/\" + assetType + \"/list\" ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Add\" + assetType ) ) ) ; driver . findElement ( By . id ( \"Add\" + assetType ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( version ) ; if ( ! category . equals ( \"\" ) ) { new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( category ) ; } driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( url ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( description ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Add\" + assetType ) ) ) ; } ", "comments": [" Add a new asset", " @param driver      WebDriver instance", " @param baseUrl     base url of the server", " @param assetType   asset type", " @param assetName   asset name", " @param version     version"], "method name": "add New Asset"}
{"id": 887, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 888, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/asts/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test adding a new asset page in extensions\")"], "method name": "test ES Publisher Asset New Page Test Case"}
{"id": 890, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . linkText ( currentUserName ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Sign ▁ out\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"Sign ▁ in\" ) ) , \"Sign ▁ in ▁ link ▁ missing\" ) ; assertEquals ( \"Register\" , driver . findElement ( By . id ( \"btn-register\" ) ) . getText ( ) , \"Register ▁ button ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Store Logout\","], "method name": "test ES Store Logout"}
{"id": 889, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"My ▁ Items\" ) ) , \"My ▁ Items ▁ link ▁ missing\" ) ; assertTrue ( isElementPresent ( By . linkText ( currentUserName ) ) , \"Logged ▁ in ▁ user ▁ not ▁ shown\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Store Login\")"], "method name": "test ES Store Login"}
{"id": 891, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"span.publisherTitle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new asset type in extensions\")"], "method name": "test ES Publisher Added Asset Test Case"}
{"id": 886, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( userInfo . getUserName ( ) ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( ASSET_NAME ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( ASSET_CREATED_TIME ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . findElement ( By . cssSelector ( \"a.btn\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; driver . get ( baseUrl + STORE_URL ) ; driver . findElementPoll ( By . xpath ( \" // a[contains(.,'\" + ASSET_NAME + \"')]\" ) , 5 ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"div.asset-author-category ▁ > ▁ ul ▁ > ▁ li\" ) ) . click ( ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( ASSET_DESCRIPTION , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")"], "method name": "test ES Publish To Store"}
{"id": 893, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-sort-alphabetical\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . xpath ( \" // div[@id='assets-container']/div/div[3]/div/div/a/h4\" ) , BUBBLE_CHART ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; assertEquals ( BAR_CHART , driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[2]/div/div/a/h4\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on alphabetical order\")"], "method name": "test Store Sort On Alphabetical Order"}
{"id": 894, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-calendar\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , assetName ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Recent ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on created time\")"], "method name": "test Store Sort On Created Time"}
{"id": 895, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Google\" ) ) . click ( ) ; assertEquals ( GOOGLE_COUNT , driver . findElements ( By . cssSelector ( \"div.asset-details\" ) ) . size ( ) , \"Google ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category Google\")"], "method name": "test Category Google"}
{"id": 896, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"WSO2\" ) ) . click ( ) ; assertEquals ( WSO2_COUNT , driver . findElements ( By . cssSelector ( \"div.asset-details\" ) ) . size ( ) , \"WSO2 ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category WSO2\")"], "method name": "test Category WSO2"}
{"id": 897, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Templates\" ) ) . click ( ) ; assertEquals ( TEMPLATE_COUNT , driver . findElements ( By . cssSelector ( \"div.span3.asset\" ) ) . size ( ) , \"Templates ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category template\")"], "method name": "test Category Template"}
{"id": 892, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-star\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , popularAsset1 ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , popularAsset1 , \"Popularity ▁ Sort ▁ failed\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[2]/div/div/a/h4\" ) ) . getText ( ) , popularAsset2 , \"Popularity ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on popularity\")"], "method name": "test Store Sort On Popularity"}
{"id": 898, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-caret-down\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Templates\" ) ) . click ( ) ; assertEquals ( \"Templates\" , driver . findElement ( By . cssSelector ( \"div.breadcrumb-head\" ) ) . getText ( ) , \"Category ▁ drop ▁ down ▁ not ▁ showing ▁ selected ▁ category ▁ \" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category drop down\")"], "method name": "test Category Menu"}
{"id": 899, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertEquals ( \"Asset ▁ | ▁ WSO2 ▁ Enterprise ▁ Store ▁ back-office\" , driver . getTitle ( ) ) ; assertTrue ( isElementPresent ( By . linkText ( currentUserName ) ) , \"Logged ▁ in ▁ user ▁ not ▁ shown\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify login to ES Publisher\")"], "method name": "test Login To Publisher"}
{"id": 900, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( lifecycleUrl ) ; assertTrue ( isElementPresent ( By . id ( \"assetLifecyclePartial\" ) ) ) ; assertEquals ( driver . findElement ( By . id ( \"assetLifecyclePartial\" ) ) . getText ( ) , \"Asset ▁ Overridden ▁ Lifecycle ▁ through ▁ renderer\" ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a renderer in extensions\")"], "method name": "test ES Publisher Asset Override Renderer Test Case"}
{"id": 901, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/asts/servicex/new_caramel_page\" ) ; assertTrue ( isElementPresent ( By . linkText ( \"Overview\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Edit\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Life ▁ Cycle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new caramel page in extensions\")"], "method name": "test ES Publisher Asset Caramel Page Test Case"}
{"id": 902, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"h4\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"User ▁ Reviews\" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( \"socialIfr\" ) ) ) ; assertEquals ( \"Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review\" , driver . findElement ( By . cssSelector ( \"div.com-guest\" ) ) . getText ( ) ) ; assertEquals ( \"Be ▁ the ▁ first ▁ one ▁ to ▁ review!\" , driver . findElement ( By . cssSelector ( \"p.com-first-review\" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } ", "comments": ["Test(groups = \"wso2.es.store.ratings\", description = \"Test Start Add Rating\")"], "method name": "test Store Before Add Ratings"}
{"id": 903, "website": "bigquery", "code": " public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( \"Sign-out\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 904, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . partialLinkText ( \"NAME\" ) ) . click ( ) ; assertEquals ( NAME_SORT_ASSET_1 , driver . findElement ( By . xpath ( \" // tbody[@id='list-asset-table-body']/tr[1]/td[2]\" ) ) . getText ( ) , \"Sort ▁ on ▁ name ▁ failed\" ) ; assertEquals ( NAME_SORT_ASSET_2 , driver . findElement ( By . xpath ( \" // tbody[@id='list-asset-table-body']/tr[14]/td[2]\" ) ) . getText ( ) , \"Sort ▁ on ▁ name ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Test sort by name\")"], "method name": "test List Page Sort By Name"}
{"id": 907, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 906, "website": "bigquery", "code": " public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( port ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( \"localhost:%d\" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = \"http: // www.yahoo.com/\" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } ", "comments": [" @Test"], "method name": "test With Web Driver"}
{"id": 909, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 908, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 911, "website": "bigquery", "code": " public HomePage function ( ) { return WebDriverFactory . INSTANCE . ignoringDswid ( ( ) -> { driver . get ( hostUrl ) ; new BasePage ( driver ) . waitForAMoment ( ) . until ( ( Predicate < WebDriver > ) input -> new HomePage ( driver ) . isPageValid ( ) ) ; return new HomePage ( driver ) ; } ) ; } ", "comments": [], "method name": "go To Home"}
{"id": 910, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 912, "website": "bigquery", "code": " public DashboardBasePage function ( ) { return WebDriverFactory . INSTANCE . ignoringDswid ( ( ) -> { driver . get ( hostUrl + \"dashboard\" ) ; return new DashboardBasePage ( driver ) ; } ) ; } ", "comments": [], "method name": "go To Dashboard"}
{"id": 913, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( \" // select[@id='displayed-currency']/option[@value='\" + defaultCurrency + \"']\" ) ) ; List < WebElement > options = driver . findElements ( By . xpath ( \" // select[@id='displayed-currency']/option\" ) ) ; assertTrue ( options . size ( ) == currencies . size ( ) ) ; driver . close ( ) ; } ", "comments": [" confirm an option for each currency in data file"], "method name": "test Json Data Loaded"}
{"id": 905, "website": "bigquery", "code": " public void function ( ) throws Exception { ESUtil . login ( driver , baseUrl , \"publisher\" , userInfo . getUserName ( ) , userInfo . getPassword ( ) ) ; driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( assetAuthor ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( assetVersion ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( assetCreatedTime ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( assetCategory ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( assetURL ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( assetDescription ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; if ( isAlertPresent ( ) ) { String alert = closeAlertAndGetItsText ( ) ; log . warn ( alert + \": ▁ modal ▁ box ▁ appeared\" ) ; } driver . findElementPoll ( By . linkText ( assetName ) , 10 ) ; driver . findElement ( By . cssSelector ( \"a.btn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , assetName ) ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"div.pull-left\" ) , \"Lifecycle ▁ - ▁ \" + assetName ) ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"commentModalLabel\" ) , \"Add ▁ a ▁ comment\" ) ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( \"ok\" ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"state\" ) , \"IN-REVIEW\" ) ) ; assertEquals ( driver . findElement ( By . id ( \"state\" ) ) . getText ( ) , \"IN-REVIEW\" , \"Not ▁ Promoted ▁ to ▁ In-Review\" ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"commentModalLabel\" ) , \"Add ▁ a ▁ comment\" ) ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( \"ok\" ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"state\" ) , \"PUBLISHED\" ) ) ; assertEquals ( driver . findElement ( By . id ( \"state\" ) ) . getText ( ) , \"PUBLISHED\" , \"Not ▁ Promoted ▁ to ▁ Published\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Add asset\")//,", "dependsOnMethods = \"testESStoreSearchAssetsByName\")"], "method name": "test Add Asset"}
{"id": 915, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Add new Global page via extension test case\")"], "method name": "test ES Store New Global Page Test Case"}
{"id": 914, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( \" // select[@id='displayed-currency']/option[@value='\" + defaultCurrency + \"']\" ) ) ; for ( Entry < String , Map < String , String > > entry : membershipData . entrySet ( ) ) { String currency = entry . getKey ( ) ; Map < String , String > values = entry . getValue ( ) ; WebElement elt = driver . findElement ( By . xpath ( \" // select[@id='displayed-currency']/option[@value='\" + currency + \"']\" ) ) ; elt . click ( ) ; for ( Entry < String , String > value : values . entrySet ( ) ) { String klass = \"msg-\" + value . getKey ( ) ; if ( displayClasses . contains ( klass ) ) { String amount = value . getValue ( ) ; WebElement span = driver . findElement ( By . className ( klass ) ) ; assertTrue ( span . getText ( ) . equals ( amount ) ) ; } } } driver . close ( ) ; } ", "comments": [" click on the \"Show all amounts in\" options and confirm updates on page"], "method name": "test Change Currency"}
{"id": 916, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , providerName , assetName , ASSET_VERSION , CREATED_TIME ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Check if subscriptions are created\")"], "method name": "test Subscription Creation"}
{"id": 917, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/asts/servicex/details\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOveriddenDetailsPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding existing page in extensions\")"], "method name": "test ES Publisher Asset Override Existing Page Test Case"}
{"id": 919, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( firstAsset , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , \"Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Gadget ▁ list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Line ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) , \"Cannot ▁ view ▁ selected ▁ Gadget's ▁ page ▁ through ▁ Recently ▁ added ▁ list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"pie\" ) ) . click ( ) ; assertEquals ( 1 , driver . findElements ( By . cssSelector ( \"div.span3.asset\" ) ) . size ( ) , \"Tags ▁ not ▁ working\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page Links\","], "method name": "test Links From Page"}
{"id": 920, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( providerName ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( ASSET_CREATED_TIME ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 918, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertEquals ( \"Gadget\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . getText ( ) , \"Gadget ▁ Menu ▁ missing\" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( \" // a[contains(text(),\" + \"'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . getText ( ) , \"Gadgets ▁ missing\" ) ; firstAsset = driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ; assertEquals ( \"Recently ▁ Added\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets']/div/div[2]/div[1]/div/h4\" ) ) . getText ( ) , \"Recently ▁ Added ▁ section ▁ missing\" ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . getText ( ) , \"Recently ▁ added ▁ Gadgets ▁ missing\" ) ; assertEquals ( \"Tags\" , driver . findElement ( By . xpath ( \" // div[@id='container-assets']/div/div[2]/div[2]/div/h4\" ) ) . getText ( ) , \"Tags ▁ section ▁ missing\" ) ; assertTrue ( isElementPresent ( By . linkText ( \"charts\" ) ) , \"Tags ▁ missing ▁ (charts ▁ tag)\" ) ; assertEquals ( \"All ▁ Categories\" , driver . findElement ( By . cssSelector ( \"div.breadcrumb-head\" ) ) . getText ( ) , \"Category ▁ drop ▁ down ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"i.icon-star\" ) ) , \"Popularity ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"i.icon-sort-alphabetical\" ) ) , \"Alphabetical ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"i.icon-calendar\" ) ) , \"Recent ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( By . id ( \"search\" ) ) , \"Search ▁ tray ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page\")"], "method name": "test Gadget Page"}
{"id": 922, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( By . id ( \"assetOverriddenListingH1\" ) ) ) ; assertEquals ( driver . findElement ( By . id ( \"assetOverriddenListingH1\" ) ) . getText ( ) , \"New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a partial in extensions\")"], "method name": "test ES Publisher Asset Override Partial Test Case"}
{"id": 921, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( \"Overview\" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]\" ) ) . getText ( ) , providerName , \"Incorrect ▁ provider\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]\" ) ) . getText ( ) , assetName , \"Incorrect ▁ asset ▁ name\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]\" ) ) . getText ( ) , ASSET_VERSION , \"Incorrect ▁ version\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]\" ) ) . getText ( ) , \"WSO2\" , \"Incorrect ▁ Category\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]\" ) ) . getText ( ) , ASSET_URL_2 , \"Incorrect ▁ URL\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]\" ) ) . getText ( ) , ASSET_DESCRIPTION_2 , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\","], "method name": "test Edit Asset"}
{"id": 925, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[3]/li\" ) ) . click ( ) ; driver . findElementPoll ( By . id ( \"assetListingPageH1\" ) , POLL_COUNT ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"The new asset type list page extension in store Test Case\")"], "method name": "test ES Store Added Asset Test Case"}
{"id": 924, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/servicex/list\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Overriding list page via extensions test case\")"], "method name": "test ES Store Asset Override Existing Page Test Case"}
{"id": 923, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_TOP_ASSETS_PAGE ) ; driver . findElement ( By . xpath ( \" // i[@class='icon-cog']\" ) ) . click ( ) ; String bookmarkedAsset = driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[1]/div/div/a/h4\" ) ) . getText ( ) ; driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[1]/div/div/a/h4\" ) ) . click ( ) ; if ( isElementPresent ( By . linkText ( \"Sign ▁ in\" ) ) ) { driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . click ( ) ; } driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"btn-add-gadget\" ) , \"Bookmarked\" ) ) ; assertEquals ( \"Bookmarked\" , driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . getText ( ) , \"Bookmarking ▁ failed\" ) ; driver . findElement ( By . linkText ( \"My ▁ Items\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"strong\" ) ) ) ; assertEquals ( bookmarkedAsset , driver . findElement ( By . cssSelector ( \"strong\" ) ) . getText ( ) , \"Bookmarked ▁ asset ▁ not ▁ shown ▁ in ▁ My ▁ Items ▁ page\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a/li\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"My ▁ Assets\" ) ) , \"My ▁ Assets ▁ section ▁ missing\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-angle-down.pull-right\" ) ) . click ( ) ; assertEquals ( bookmarkedAsset , driver . findElement ( By . cssSelector ( \"strong ▁ > ▁ a\" ) ) . getText ( ) , \"Bookmarked ▁ asset ▁ not ▁ shown ▁ in ▁ My ▁ Assets ▁ section\" ) ; driver . findElement ( By . linkText ( \"View ▁ all\" ) ) . click ( ) ; assertEquals ( \"My ▁ Assets\" , driver . findElement ( By . cssSelector ( \"h3.asset-title-separator.asset-type-gadget\" ) ) . getText ( ) , \"View ▁ all ▁ not ▁ directing ▁ to ▁ My ▁ Items ▁ page\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Bookmarking\")"], "method name": "test ES Store Bookmark Test Case"}
{"id": 926, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-register\" ) ) . click ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . linkText ( \"My ▁ Items\" ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; assertTrue ( isElementPresent ( By . linkText ( NEW_USER_NAME ) ) , \"Login ▁ failed ▁ for ▁ Store\" ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( By . linkText ( NEW_USER_NAME ) ) , \"Login ▁ failed ▁ for ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing user registration\")"], "method name": "test ES Register User Test Case"}
{"id": 928, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[1]/li\" ) ) . click ( ) ; assertEquals ( LINE_PLUS_BAR_CHART , driver . findElement ( By . xpath ( \" // h4[contains(.,\" + LINE_PLUS_BAR_CHART + \"')]\" ) ) . getText ( ) , \"Gadgets ▁ Menu ▁ not ▁ working\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[2]/li\" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( \" // h4[contains(.,\" + AMAZON + \"')]\" ) ) . getText ( ) , \"Sites ▁ Menu ▁ not ▁ working\" ) ; driver . findElement ( By . cssSelector ( \"a.brand\" ) ) . click ( ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Anonymous Navigation from top menu\")"], "method name": "test Anon Navigation Top"}
{"id": 929, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . cssSelector ( \"a.brand\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Recent ▁ Gadgets\" ) ) . click ( ) ; assertEquals ( LINE_CHART , driver . findElement ( By . xpath ( \" // h4[contains(.,'\" + LINE_CHART + \"')]\" ) ) . getText ( ) , \"Recent ▁ Gadgets ▁ link ▁ not ▁ working\" ) ; driver . findElement ( By . cssSelector ( \"a.brand\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Recent ▁ Sites\" ) ) . click ( ) ; assertEquals ( AMAZON , driver . findElement ( By . xpath ( \" // h4[contains(.,'\" + AMAZON + \"')]\" ) ) . getText ( ) , \"Recent ▁ Sites ▁ link ▁ not ▁ working\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Anonymous Navigation page links\")"], "method name": "test Anon Navigation Links"}
{"id": 930, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( \"Add\" ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_provider\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_createdtime\" ) ) . sendKeys ( ASSET_CREATED_TIME ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 931, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; closeAlertAndGetItsText ( ) ; driver . findElement ( By . linkText ( \"Overview\" ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ provider\" ) ; assertEquals ( assetName , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[2]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ asset ▁ name\" ) ; assertEquals ( ASSET_VERSION , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[3]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[5]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ Category\" ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[6]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . xpath ( \" // div[@id='view']/div[2]/div/div/div[2]/table[2]/tbody/tr[7]/td[2]\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\", dependsOnMethods = \"testAddAsset\")"], "method name": "test Edit Asset"}
{"id": 932, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test adding a new global page in extensions\")"], "method name": "test ES Publisher New Global Page Test Case"}
{"id": 933, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/splash\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOverridenGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a global page in extensions\")"], "method name": "test ES Publisher Overriden Global Page Test Case"}
{"id": 935, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 936, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"New page added via extensions test case\")"], "method name": "test ES Store Asset New Page Test Case"}
{"id": 934, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , currentUserName , assetName , ASSET_VERSION , CREATED_TIME ) ; if ( isAlertPresent ( ) ) { closeAlertAndGetItsText ( ) ; } driver . get ( baseUrl + \"/carbon/\" ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ \" + \"tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"Check if subscriptions are created\", enabled = true)"], "method name": "test Subscription Creation"}
{"id": 927, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"a.brand\" ) ) , \"Home ▁ Page ▁ error: ▁ Logo ▁ missing\" ) ; assertEquals ( \"Sign ▁ in\" , driver . findElement ( By . linkText ( \"Sign ▁ in\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Sign ▁ in ▁ button ▁ missing\" ) ; assertTrue ( isElementPresent ( By . id ( \"btn-register\" ) ) , \"Home ▁ Page ▁ error: ▁ Register ▁ button ▁ missing\" ) ; assertEquals ( \"Gadget\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[1]/li\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Gadget ▁ menu ▁ missing\" ) ; assertEquals ( \"Site\" , driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[2]/li\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Site ▁ menu ▁ missing\" ) ; assertEquals ( \"Recent ▁ Gadgets\" , driver . findElement ( By . linkText ( \"Recent ▁ Gadgets\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Recent ▁ Gadgets ▁ links ▁ missing\" ) ; assertEquals ( \"Recent ▁ Sites\" , driver . findElement ( By . linkText ( \"Recent ▁ Sites\" ) ) . getText ( ) , \"Home ▁ Page ▁ error: ▁ Recent ▁ Sites ▁ links ▁ missing\" ) ; assertTrue ( isElementPresent ( By . id ( \"search\" ) ) , \"Home ▁ Page ▁ error: ▁ Search ▁ missing\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"div.span3.store-right ▁ > ▁ div.row ▁ > ▁ div.span3\" ) ) , \"Home ▁ Page ▁ error: ▁ Recent ▁ Added ▁ side ▁ list ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Anonymous User Home Page\")"], "method name": "test Anon Home Page"}
{"id": 937, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user1\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"TestAddTopic1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Post\" ) ) . click ( ) ; assertTrue ( \"The ▁ Content ▁ field ▁ is ▁ required.\" . equals ( driver . findElement ( By . id ( \"secondMessagePanel\" ) ) . findElement ( By . tagName ( \"td\" ) ) . getText ( ) . trim ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Add Post Tc2"}
{"id": 938, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"TestDelPost\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Delete\" ) ) . click ( ) ; assertTrue ( closeAlertAndGetItsText ( ) . matches ( \"^Are ▁ you ▁ sure[\\\\s\\\\S]$\" ) ) ; assertTrue ( driver . findElements ( By . linkText ( \"Delete\" ) ) . isEmpty ( ) ) ; } ", "comments": ["Test"], "method name": "test Del Post Tc1"}
{"id": 940, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user1\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"currentUsername\" ) ) . getText ( ) . trim ( ) . equals ( \"USER1\" ) ) ; } ", "comments": ["Test"], "method name": "test Sign In Tc1"}
{"id": 939, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"moderator\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"TestEditPost\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; driver . findElement ( By . id ( \"form:btnEdit\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"form:btnEdit\" ) ) . sendKeys ( \"PostChanged\" ) ; driver . findElement ( By . linkText ( \"Save\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Edit\" ) ) . click ( ) ; assertTrue ( \"PostChanged\" . equals ( driver . findElement ( By . id ( \"form:btnEdit\" ) ) . getText ( ) . trim ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Edit Post Tc1"}
{"id": 941, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"user1\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; assertTrue ( \"The ▁ Password ▁ field ▁ is ▁ required.\" . equals ( driver . findElement ( By . id ( \"secondMessagePanel\" ) ) . findElement ( By . tagName ( \"td\" ) ) . getText ( ) . trim ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Sign In Tc2"}
{"id": 943, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"moderator\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Pin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Unpin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Pin\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Pin Topic Tc1"}
{"id": 942, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signup:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:username\" ) ) . sendKeys ( \"user2\" ) ; driver . findElement ( By . id ( \"signup:email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:email\" ) ) . sendKeys ( \"user2@user2.com\" ) ; driver . findElement ( By . id ( \"signup:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signup:confirm\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signup:confirm\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . name ( \"signup:btnSignup\" ) ) . click ( ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 5 , TimeUnit . SECONDS ) ; assertTrue ( \"User ▁ was ▁ successfully ▁ created.\" . equals ( driver . findElement ( By . id ( \"messagePanel\" ) ) . findElement ( By . tagName ( \"td\" ) ) . getText ( ) . trim ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Sign Up Tc1"}
{"id": 945, "website": "bigquery", "code": " public void function ( WebDriver driver , String url ) { driver . get ( url ) ; System . out . println ( \"Start ▁ to ▁ open ▁ the ▁ url ▁ : ▁ \" + url ) ; } ", "comments": [], "method name": "Open Target URL"}
{"id": 944, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"Login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:username\" ) ) . sendKeys ( \"moderator\" ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"signin:password\" ) ) . sendKeys ( \"123456\" ) ; driver . findElement ( By . id ( \"signin:btnSignin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Categorie1\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Unpin\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Pin Topic Tc1"}
{"id": 946, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI, SELENESE, OPERA_MOBILE},"], "method name": "handle Form With Javascript Action"}
{"id": 947, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; final SetupPage setup = new SetupPage ( driver ) ; setup . initStep1 ( ) ; setup . initStep2 ( ) ; setup . initStep3 ( ) ; setup . initStep4 ( \"test_user\" , \"demo@encuestame.org\" , \"demo@encuestame.org\" , \"12345678\" , \"12345678\" ) ; setup . initStep5 ( ) ; setup . initStep6 ( ) ; assertEquals ( true , true ) ; } ", "comments": ["Test"], "method name": "test Initial Login"}
{"id": 948, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({IE, CHROME, SELENESE, IPHONE})"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 949, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"simpleTest.html\" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( \"fish\" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain"}
{"id": 950, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"\" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Get Cookie Does Not Retrive Beyond Current Domain"}
{"id": 952, "website": "bigquery", "code": " public void function ( ) { driver = new HtmlUnitDriver ( ) ; driver . get ( baseUrl ) ; } ", "comments": ["Given(\"^The home page url$\")"], "method name": "the home page url"}
{"id": 951, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"animals\" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" , \"/common/animals\" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } ", "comments": ["Ignore({SELENESE, IE})"], "method name": "test Cookie Integrity"}
{"id": 953, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"email\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( \"admin\" ) ; driver . findElement ( By . id ( \"signin\" ) ) . click ( ) ; } ", "comments": ["Given(\"^testSign$\")"], "method name": "test For Signin1"}
{"id": 955, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 957, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ESUtil . containsEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 954, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE},"], "method name": "handle Form With Javascript Action"}
{"id": 956, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_VERSION , \"\" , \"\" , \"\" ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . get ( baseUrl + \"/carbon/\" ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ \" + \"tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"Check if subscriptions are created\", enabled = true)"], "method name": "test Subscription Creation"}
{"id": 960, "website": "bigquery", "code": " public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( \"NCI ▁ Home\" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } ", "comments": ["Test // (testNCIHomeFooter)"], "method name": "test NCI Home Footer"}
{"id": 961, "website": "bigquery", "code": " public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( \"Policies\" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } ", "comments": ["Test // (testPoliciesFooter)"], "method name": "test Policies Footer"}
{"id": 962, "website": "bigquery", "code": " public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( \"Accessibility\" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } ", "comments": ["Test // (testAccessibilityFooter)"], "method name": "test Accessibility Footer"}
{"id": 963, "website": "bigquery", "code": " public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( \"FOIA\" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } ", "comments": ["Test // (testFOIAFooter)"], "method name": "test FOIA Footer"}
{"id": 958, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . linkText ( \"Add ▁ \" + ASSET_TYPE ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( ASSET_NAME ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Life ▁ Cycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"In-Review\" ) ) . click ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( \"Published\" ) ) . click ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"commentModalText\" ) ) . sendKeys ( LC_COMMENT ) ; driver . findElement ( By . id ( \"commentModalSave\" ) ) . click ( ) ; driver . get ( baseUrl + STORE_URL ) ; driver . findElementPoll ( By . xpath ( \" // a[contains(.,'\" + ASSET_NAME + \"')]\" ) , 5 ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"div.asset-author-category ▁ > ▁ ul ▁ > ▁ li\" ) ) . click ( ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) ) ; assertEquals ( ASSET_DESCRIPTION , driver . findElement ( By . cssSelector ( \"p\" ) ) . getText ( ) ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")"], "method name": "test ES Publish To Store"}
{"id": 964, "website": "bigquery", "code": " public void function ( ) throws Exception { String bodyText = null ; driver . get ( baseUrl ) ; Thread . sleep ( 1000 ) ; try { popUpWindow ( \"Contact ▁ Us\" ) ; assertTrue ( true ) ; } catch ( Exception ex ) { assertTrue ( false ) ; } } ", "comments": ["Test // (testContactUsFooter)"], "method name": "test Contact Us Footer"}
{"id": 959, "website": "bigquery", "code": " public void function ( ) throws Exception { try { driver . get ( baseUrl ) ; java . util . List < WebElement > links = driver . findElements ( By . tagName ( \"a\" ) ) ; HashSet hset = new HashSet ( ) ; int lcv = 0 ; for ( int i = 0 ; i < links . size ( ) ; i ++ ) { String href = links . get ( i ) . getAttribute ( \"href\" ) ; if ( href != null && href . length ( ) > 0 ) { if ( ! hset . contains ( href ) ) { hset . add ( href ) ; } } } Iterator it = hset . iterator ( ) ; while ( it . hasNext ( ) ) { String href = ( String ) it . next ( ) ; if ( ! href . startsWith ( baseUrl ) ) { lcv ++ ; int responseCode = getHTTPResponseCode ( href ) ; System . out . println ( \"(\" + lcv + \") ▁ \" + href + \" ▁ (response ▁ code: ▁ \" + responseCode + \")\" ) ; assertTrue ( responseCode == 200 ) ; } } } catch ( Exception ex ) { ex . printStackTrace ( ) ; assertTrue ( false ) ; } assertTrue ( true ) ; } ", "comments": ["Test //testBaseURLExternalLinks"], "method name": "test Base URL External Links"}
{"id": 967, "website": "bigquery", "code": " public static String function ( String url , Configuration conf ) { WebDriver driver = null ; try { driver = new FirefoxDriver ( ) ; driver . get ( url ) ; new WebDriverWait ( driver , 3 ) ; String innerHtml = driver . findElement ( By . tagName ( \"body\" ) ) . getAttribute ( \"innerHTML\" ) ; return innerHtml ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { if ( driver != null ) try { driver . quit ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ", "comments": [], "method name": "get Html Page"}
{"id": 968, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + StringUtils . join ( parameters , \"&\" ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 966, "website": "bigquery", "code": " static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( \"Firefox ▁ version ▁ \" + firefoxVersion + \" ▁ detected\" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + \"/firebug/\" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + \"firebug.xpi\" ; final String firepathPath = tempPath + \"firepath.xpi\" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( \"browser.download.folderList\" , 2 ) ; profile . setPreference ( \"browser.download.dir\" , downLoadsDir ) ; profile . setPreference ( \"browser.helperApps.alwaysAsk.force\" , false ) ; profile . setPreference ( \"browser.download.manager.showWhenStarting\" , false ) ; profile . setPreference ( \"browser.download.manager.showAlertOnComplete\" , false ) ; profile . setPreference ( \"browser.download.manager.closeWhenDone\" , true ) ; profile . setPreference ( \"app.update.auto\" , false ) ; profile . setPreference ( \"app.update.enabled\" , false ) ; profile . setPreference ( \"dom.max_script_run_time\" , 0 ) ; profile . setPreference ( \"dom.max_chrome_script_run_time\" , 0 ) ; profile . setPreference ( \"browser.helperApps.neverAsk.saveToDisk\" , \"application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain\" ) ; profile . setPreference ( \"network.proxy.type\" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 965, "website": "bigquery", "code": " public static void function ( PrintWriter out ) { out . println ( \" \\n \" ) ; out . println ( \" TABSYMBOL public ▁ void ▁ popUpWindow(String ▁ wndLabel) ▁ throws ▁ Exception ▁ {\" ) ; out . println ( \" TABSYMBOL TABSYMBOL driver.findElement(By.linkText(wndLabel)).click();\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Thread.sleep(8000);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ windowTitle= ▁ getCurrentWindowTitle();\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Thread.sleep(1000);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ mainWindow ▁ = ▁ getMainWindowHandle(driver);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Thread.sleep(1000);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL closeAllOtherWindows(mainWindow);\" ) ; out . println ( \" TABSYMBOL }\" ) ; out . println ( \"\" ) ; out . println ( \" TABSYMBOL public ▁ String ▁ getMainWindowHandle(WebDriver ▁ driver) ▁ {\" ) ; out . println ( \" TABSYMBOL TABSYMBOL return ▁ driver.getWindowHandle();\" ) ; out . println ( \" TABSYMBOL }\" ) ; out . println ( \"\" ) ; out . println ( \" TABSYMBOL public ▁ String ▁ getCurrentWindowTitle() ▁ {\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ windowTitle ▁ = ▁ driver.getTitle();\" ) ; out . println ( \" TABSYMBOL TABSYMBOL return ▁ windowTitle;\" ) ; out . println ( \" TABSYMBOL }\" ) ; out . println ( \"\" ) ; out . println ( \" TABSYMBOL public ▁ boolean ▁ closeAllOtherWindows(String ▁ openWindowHandle) ▁ {\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Set", "comments": [], "method name": "print Window Utils"}
{"id": 969, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 970, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 973, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 972, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, FIREFOX, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 974, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 971, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; waitFor ( WaitingConditions . pageTitleToBe ( driver , \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 975, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 977, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 976, "website": "bigquery", "code": " public String function ( final String url ) throws TimeoutException { phantomJsLogger . setLevel ( Level . OFF ) ; DesiredCapabilities desiredCapabilities = DesiredCapabilities . phantomjs ( ) ; desiredCapabilities . setCapability ( PhantomJSDriverService . PHANTOMJS_CLI_ARGS , new String [ ] { \"--ignore-ssl-errors=yes\" , \"--load-images=no\" , \"--disk-cache=true\" , \"--max-disk-cache-size=size=51200\" } ) ; final WebDriver driver = new PhantomJSDriver ( desiredCapabilities ) ; try { Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { driver . get ( url ) ; } } ) ; t . start ( ) ; try { t . join ( timeoutMillis ) ; } catch ( InterruptedException e ) { } if ( t . isAlive ( ) ) { System . out . println ( \"Timeout ▁ for ▁ HTTP ▁ GET ▁ to: ▁ \" + url ) ; t . interrupt ( ) ; throw new TimeoutException ( ) ; } String pageSource = driver . getPageSource ( ) ; return pageSource ; } finally { driver . quit ( ) ; } } ", "comments": [], "method name": "get Page Source"}
{"id": 978, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"kw\" ) ) . click ( ) ; driver . findElement ( By . id ( \"kw\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"kw\" ) ) . sendKeys ( \"selenium\" ) ; driver . findElement ( By . id ( \"su\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test First Demo"}
{"id": 979, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"kw\" ) ) . click ( ) ; driver . findElement ( By . id ( \"kw\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"kw\" ) ) . sendKeys ( \"selenium\" ) ; driver . findElement ( By . id ( \"su\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test First Demo"}
{"id": 981, "website": "bigquery", "code": " private void function ( ) { driver . get ( baseUrl + \"/WebTours/\" ) ; } ", "comments": [], "method name": "go To Main Page"}
{"id": 983, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Ignore(IE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 982, "website": "bigquery", "code": " public void function ( ) throws IOException { final String consoleUrl = this . getDeploymentUrl ( ) . toExternalForm ( ) ; log . info ( \"Request ▁ URL: ▁ \" + consoleUrl ) ; driver . navigate ( ) . to ( consoleUrl ) ; final File scrFile1 = ( ( TakesScreenshot ) driver ) . getScreenshotAs ( OutputType . FILE ) ; FileUtils . copyFile ( scrFile1 , new File ( \"target/\" + this . getClass ( ) . getSimpleName ( ) + \"-1-consoleBeforeSubmission.png\" ) ) ; final WebElement select = driver . findElement ( By . id ( \"flingSourceRepo\" ) ) ; final List < WebElement > options = select . findElements ( By . tagName ( \"option\" ) ) ; for ( final WebElement option : options ) { if ( option . getAttribute ( \"value\" ) . equals ( this . getSourceRepo ( ) ) ) { option . click ( ) ; break ; } } final WebElement submit = driver . findElement ( By . id ( \"flingSubmitButton\" ) ) ; submit . click ( ) ; GitHubResourceIT . performGitHubOAuth ( driver ) ; final File scrFile2 = ( ( TakesScreenshot ) driver ) . getScreenshotAs ( OutputType . FILE ) ; FileUtils . copyFile ( scrFile2 , new File ( \"target/\" + this . getClass ( ) . getSimpleName ( ) + \"-2-consoleAfterSubmission.png\" ) ) ; this . assertLanding ( driver ) ; } ", "comments": [" Ensures that a fling operation initiated from the HTML console", " is working as contracted", " @throws IOException", "Test", "RunAsClient", "InSequence(1)", "OperateOnDeployment(\"real\")"], "method name": "should Fling Via Catapult Console Button"}
{"id": 980, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"kw\" ) ) . click ( ) ; driver . findElement ( By . id ( \"kw\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"kw\" ) ) . sendKeys ( \"selenium\" ) ; driver . findElement ( By . id ( \"su\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test First Demo"}
{"id": 984, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . linkText ( \"inputLogin ▁ using ▁ your ▁ gmail ▁ account\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Email\" ) ) . sendKeys ( \"harshithachidanand\" ) ; driver . findElement ( By . id ( \"next\" ) ) . click ( ) ; driver . findElement ( By . id ( \"Passwd\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"Passwd\" ) ) . sendKeys ( \"\" ) ; driver . findElement ( By . id ( \"next\" ) ) . click ( ) ; driver . findElement ( By . id ( \"eventName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"eventName\" ) ) . sendKeys ( \"New ▁ events\" ) ; driver . findElement ( By . id ( \"eventTagline\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"eventTagline\" ) ) . sendKeys ( \"New ▁ is ▁ awesome\" ) ; driver . findElement ( By . xpath ( \" // table[@id='eventDate_table']/tbody/tr[3]/td[6]/div\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"button.btn-flat.picker__close\" ) ) . click ( ) ; driver . findElement ( By . id ( \"eventTime\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"eventTime\" ) ) . sendKeys ( \"9:00AM\" ) ; driver . findElement ( By . id ( \"duration\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"duration\" ) ) . sendKeys ( \"2 ▁ hours\" ) ; driver . findElement ( By . cssSelector ( \"input.select-dropdown.active\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"li.active ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.select-dropdown.active\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#select-options-815bcc23-dabb-d8e7-0c54-cc604715e2d4 ▁ > ▁ li.active ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.select-dropdown.active\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#select-options-091efa9b-6d5f-ef96-ae17-69722f5ba9b7 ▁ > ▁ li.active ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.select-dropdown.active\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#select-options-7ed503fc-e8cb-c3b8-0752-c157b27088ea ▁ > ▁ li.active ▁ > ▁ span\" ) ) . click ( ) ; driver . findElement ( By . id ( \"capacity\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"capacity\" ) ) . sendKeys ( \"90\" ) ; driver . findElement ( By . id ( \"location\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"location\" ) ) . sendKeys ( \"HFH\" ) ; driver . findElement ( By . id ( \"description\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"description\" ) ) . sendKeys ( \"yep! ▁ come ▁ n ▁ see ▁ what ▁ new\" ) ; driver . findElement ( By . id ( \"createrName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"createrName\" ) ) . sendKeys ( \"Harshitha\" ) ; driver . findElement ( By . id ( \"createrEmail\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"createrEmail\" ) ) . sendKeys ( \"har@gmail.com\" ) ; driver . findElement ( By . name ( \"action\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // ul[@id='nav-mobile']/li[3]/a\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"call_madeSignout\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Create Event J Unit4"}
{"id": 985, "website": "bigquery", "code": " public void function ( ) { System . out . println ( \" ▁ ****** ▁ ▁ GETTING ▁ BASE ▁ URL ▁ ******\" ) ; driver . get ( baseUrl ) ; HomePage enmeHomePage = new HomePage ( driver ) ; enmeHomePage . navHomeMenuLinks ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Navigation ▁ Home ▁ Links ▁ ******\" ) ; enmeHomePage . verifyEnmeLogoLink ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Enme ▁ Logo ▁ Link ▁ ******\" ) ; enmeHomePage . VerifiyElementsOnHomeItems ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Verify ▁ Elements ▁ on ▁ Home ▁ Items ▁ ******\" ) ; enmeHomePage . homeQuickSearch ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Home ▁ Quick ▁ Search ▁ ******\" ) ; enmeHomePage . verifyElementsOnPopularHashtagsBlock ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Verify ▁ Elements ▁ on ▁ Popular ▁ Hashtag ▁ Block ▁ ******\" ) ; enmeHomePage . verifiyElementsOnRatedUsersBlock ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Verify ▁ Elements ▁ on ▁ Rated ▁ Users ▁ Block ▁ ******\" ) ; System . out . println ( \" ▁ ****** ▁ ▁ GETTING ▁ BASE ▁ URL ▁ ******\" ) ; driver . get ( baseUrl ) ; LoginPage enmeLoginPage = new LoginPage ( driver ) ; enmeLoginPage . recoverPassword ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Recovering ▁ Password ▁ ▁ ******\" ) ; System . out . println ( \" ▁ ****** ▁ ▁ GETTING ▁ BASE ▁ URL ▁ ******\" ) ; driver . get ( baseUrl ) ; enmeLoginPage . createAccount ( ) ; System . out . println ( \" ▁ ****** ▁ Sign-up ▁ Create ▁ Account ▁ ******\" ) ; enmeLoginPage . loginToEncuestame ( ) ; System . out . println ( \" ▁ ****** ▁ Login ▁ To ▁ Encuestame ▁ ******\" ) ; TeamPage enmeTeamPage = new TeamPage ( driver ) ; enmeTeamPage . membersAdministrator ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Verify ▁ Members ▁ Administration ▁ Menu ▁ ******\" ) ; enmeTeamPage . addUserDirectly ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Add ▁ New ▁ User ▁ by ▁ Send ▁ Request ▁ ▁ ******\" ) ; enmeTeamPage . inviteUser ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Add ▁ new ▁ User ▁ by ▁ Invitation ▁ email ▁ ******\" ) ; enmeTeamPage . membersTablePagination ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Verify ▁ Members ▁ table ▁ Pagination ▁ ******\" ) ; enmeTeamPage . editUserPermissions ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Edit ▁ User ▁ Permissions ▁ ******\" ) ; enmeTeamPage . editUserPictureProfile ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Edit ▁ User ▁ Picture ▁ profile ▁ ******\" ) ; DashboardPage boardPage = new DashboardPage ( driver ) ; boardPage . addGadgetToDashboard ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Add ▁ Gadget ▁ to ▁ Dashboard ▁ ******\" ) ; boardPage . changeToLayoutA ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ A ▁ ******\" ) ; boardPage . changeToLayoutAA ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ AA ▁ ******\" ) ; boardPage . changeToLayoutAB ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ AB ▁ ******\" ) ; boardPage . changeToLayoutBA ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Change ▁ Dashboard ▁ Layout ▁ to ▁ Layout ▁ BA ▁ ******\" ) ; boardPage . createDashboard ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Create ▁ new ▁ Dashboard ▁ ▁ ******\" ) ; boardPage . notification ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Edit ▁ User ▁ Picture ▁ profile ▁ ******\" ) ; Profile profilePage = new Profile ( driver ) ; profilePage . settingsAccountConfiguration ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Profile ▁ Settings ▁ Configuration ▁ ******\" ) ; profilePage . uploadGravatarImage ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Upload ▁ profile ▁ gravatar ▁ Image ▁ ******\" ) ; profilePage . uploadImage ( ) ; System . out . println ( \" ▁ ****** ▁ ▁ Upload ▁ Profile ▁ image ▁ ******\" ) ; } ", "comments": [" Initial", "Test"], "method name": "test Initial Enme"}
{"id": 987, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Página ▁ Inicial\" ) ) ; driver . findElement ( By . id ( \"buscar\" ) ) . sendKeys ( \"darf\" ) ; driver . findElement ( By . className ( \"searchButton\" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ darf\" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li\" ) ) . size ( ) , is ( 20 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li ▁ h3\" ) ) . get ( 0 ) . getText ( ) , is ( \"Departamento ▁ de ▁ Polícia ▁ Rodoviária ▁ Federal ▁ (DPRF)\" ) ) ; assertThat ( driver . findElement ( By . id ( \"buscar\" ) ) . getAttribute ( \"value\" ) , is ( \"darf\" ) ) ; driver . findElement ( By . id ( \"buscar\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"buscar\" ) ) . sendKeys ( \"prouni\" ) ; driver . findElement ( By . className ( \"searchButton\" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Busca ▁ por ▁ prouni\" ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li\" ) ) . size ( ) , is ( 10 ) ) ; assertThat ( driver . findElements ( By . cssSelector ( \"#resultados-busca ▁ li ▁ h3\" ) ) . get ( 0 ) . getText ( ) , is ( \"Unidade ▁ de ▁ Pronto ▁ Atendimento ▁ (UPA ▁ 24h)\" ) ) ; driver . findElement ( By . cssSelector ( \"#resultados-busca ▁ li ▁ a\" ) ) . click ( ) ; assertThat ( driver . getTitle ( ) , is ( \"Portal ▁ de ▁ Serviços ▁ - ▁ Unidade ▁ de ▁ Pronto ▁ Atendimento ▁ (UPA ▁ 24h)\" ) ) ; } ", "comments": ["Test", "Ignore(\"Não está claro porque as vezes funciona, as vezes não, tem cara de ser relacionado ao WebDriver\")"], "method name": "busca Simples Por Darf"}
{"id": 989, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Log ▁ out\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test User Logout"}
{"id": 988, "website": "bigquery", "code": " public static void function ( PrintWriter out ) { out . println ( \" \\n \" ) ; out . println ( \" TABSYMBOL public ▁ void ▁ popUpWindow(String ▁ wndLabel) ▁ throws ▁ Exception ▁ {\" ) ; out . println ( \" TABSYMBOL TABSYMBOL driver.findElement(By.linkText(wndLabel)).click();\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Thread.sleep(8000);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ windowTitle= ▁ getCurrentWindowTitle();\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Thread.sleep(1000);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ mainWindow ▁ = ▁ getMainWindowHandle(driver);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Thread.sleep(1000);\" ) ; out . println ( \" TABSYMBOL TABSYMBOL closeAllOtherWindows(mainWindow);\" ) ; out . println ( \" TABSYMBOL }\" ) ; out . println ( \"\" ) ; out . println ( \" ▁ ▁ ▁ ▁ public ▁ String ▁ getPopupWindowBodyText(WebDriver ▁ driver) ▁ {\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ parentWindowHandler ▁ = ▁ driver.getWindowHandle();\" ) ; out . println ( \" TABSYMBOL TABSYMBOL String ▁ subWindowHandler ▁ = ▁ null;\" ) ; out . println ( \" TABSYMBOL TABSYMBOL Set", "comments": [], "method name": "print Window Utils"}
{"id": 990, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + subUrl ) ; authenticate ( driver ) ; driver . findElement ( By . linkText ( \"Project\" ) ) . click ( ) ; driver . findElement ( By . id ( \"browse\" ) ) . click ( ) ; new Select ( driver . findElement ( By . id ( \"search-key\" ) ) ) . selectByVisibleText ( \"Project ▁ Name\" ) ; driver . findElement ( By . id ( \"search-value\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"search-value\" ) ) . sendKeys ( projectName ) ; driver . findElement ( By . name ( \"search\" ) ) . click ( ) ; try { assertTrue ( isElementPresent ( By . cssSelector ( \"td\" ) ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } try { assertEquals ( projectName , driver . findElement ( By . cssSelector ( \"td\" ) ) . getText ( ) ) ; } catch ( Error e ) { verificationErrors . append ( e . toString ( ) ) ; } driver . findElement ( By . linkText ( \"View\" ) ) . click ( ) ; waitTime ( 30000 ) ; } ", "comments": ["Test"], "method name": "test Search Project Exp"}
{"id": 991, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; } ", "comments": ["Test"], "method name": "test Root Page"}
{"id": 992, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Has A Header"}
{"id": 994, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 986, "website": "bigquery", "code": " private void function ( String url ) { driver . navigate ( ) . to ( url ) ; } ", "comments": [], "method name": "go To URL"}
{"id": 993, "website": "bigquery", "code": " public void function ( ) throws Exception { int successCounter = 0 ; try { driver . get ( baseUrl + \"/\" ) ; successCounter ++ ; driver . findElement ( By . id ( \"login\" ) ) . click ( ) ; driver . findElement ( By . id ( \"login_field\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"login_field\" ) ) . sendKeys ( testUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( testUserPass ) ; driver . findElement ( By . name ( \"commit\" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . id ( \"showWriterBtn\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"pdf-reviewer\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"testing-review-pdf\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"test.pdf\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"(Myself) ▁ - ▁ pdf-reviewer\" ) ) . click ( ) ; driver . findElement ( By . id ( \"customTags\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"customTags\" ) ) . sendKeys ( \"[Selenium]\" ) ; driver . findElement ( By . id ( \"submitReview\" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . cssSelector ( \"button.close\" ) ) . click ( ) ; driver . findElement ( By . id ( \"showStatusBtn\" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . linkText ( \"Review ▁ Now\" ) ) . click ( ) ; File file = new File ( \"strangeAnnotations.pdf\" ) ; driver . findElement ( By . id ( \"pdf-file\" ) ) . sendKeys ( file . getAbsolutePath ( ) ) ; driver . findElement ( By . id ( \"upload\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"here\" ) ) . click ( ) ; successCounter ++ ; driver . findElement ( By . cssSelector ( \"a.js-selected-navigation-item.sunken-menu-item ▁ > ▁ span.octicon.octicon-issue-opened\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Selenium\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"input.js-check-all\" ) ) . click ( ) ; successCounter ++ ; } catch ( Exception e ) { e . printStackTrace ( ) ; } reportSuccesses ( successCounter ) ; } ", "comments": ["Test"], "method name": "test Upload Review"}
{"id": 996, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 998, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 997, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl ) ; SetupPage sp = new SetupPage ( driver ) ; RegisterPage rp = sp . createNewUser ( ) ; WelcomePage wp = rp . submitUserRegistration ( \"bsmith\" , \"Bob ▁ Smith\" , \"bsmith@email.com\" , \"roller123\" ) ; LoginPage lp = wp . doRollerLogin ( ) ; MainMenuPage mmp = lp . loginToRoller ( \"bsmith\" , \"roller123\" ) ; CreateWeblogPage cwp = mmp . createWeblog ( ) ; mmp = cwp . createWeblog ( \"Bob's ▁ Blog\" , \"bobsblog\" , \"bsmith@email.com\" ) ; driver . get ( baseUrl ) ; BlogHomePage bhp = sp . chooseFrontPageBlog ( ) ; String blogEntryTitle = \"My ▁ First ▁ Blog ▁ Entry\" ; String blogEntryContent = \"Welcome ▁ to ▁ my ▁ blog!\" ; EntryAddPage eap = bhp . createNewBlogEntry ( ) ; eap . setTitle ( blogEntryTitle ) ; eap . setText ( blogEntryContent ) ; EntryEditPage eep = eap . postBlogEntry ( ) ; SingleBlogEntryPage sbep = eep . viewBlogEntry ( ) ; System . out . println ( \"title/text: ▁ \" + sbep . getBlogTitle ( ) + \" ▁ / ▁ \" + sbep . getBlogText ( ) ) ; assertEquals ( blogEntryTitle , sbep . getBlogTitle ( ) ) ; assertEquals ( blogEntryContent , sbep . getBlogText ( ) ) ; } ", "comments": ["Test"], "method name": "test Initial Login"}
{"id": 1000, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; } ", "comments": ["Override"], "method name": "open Main Page"}
{"id": 1001, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 999, "website": "bigquery", "code": " public void function ( String url ) { driver . get ( baseUrl + url ) ; } ", "comments": ["Override"], "method name": "open Relative Url"}
{"id": 1002, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"simpleTest.html\" ) ; driver . get ( url ) ; Cookie cookie = options . getCookieNamed ( \"fish\" ) ; assertNull ( String . valueOf ( cookie ) , cookie ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Should Not Be Able To Set Domain To Something That Is Unrelated To The Current Domain"}
{"id": 1003, "website": "bigquery", "code": " public void function ( ) { Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"\" ) ; driver . get ( url ) ; Set < Cookie > cookies = options . getCookies ( ) ; assertFalse ( cookies . contains ( cookie1 ) ) ; } ", "comments": ["Ignore(SELENESE)"], "method name": "test Get Cookie Does Not Retrive Beyond Current Domain"}
{"id": 1005, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1006, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1004, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereElseIs ( \"animals\" ) ; driver . get ( url ) ; driver . manage ( ) . deleteAllCookies ( ) ; long time = System . currentTimeMillis ( ) + ( 60 * 60 * 24 ) ; Cookie cookie1 = new Cookie ( \"fish\" , \"cod\" , \"/common/animals\" , new Date ( time ) ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; Set < Cookie > cookies = options . getCookies ( ) ; Iterator < Cookie > iter = cookies . iterator ( ) ; Cookie retrievedCookie = null ; while ( iter . hasNext ( ) ) { Cookie temp = iter . next ( ) ; if ( cookie1 . equals ( temp ) ) { retrievedCookie = temp ; break ; } } assertNotNull ( retrievedCookie ) ; assertEquals ( cookie1 , retrievedCookie ) ; } ", "comments": ["Ignore({SELENESE, IE})"], "method name": "test Cookie Integrity"}
{"id": 1007, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 995, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1009, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1011, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1010, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1012, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1008, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1014, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1015, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1013, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1016, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; WebElement element = wait . until ( presenceOfElementLocated ( By . tagName ( \"h1\" ) ) ) ; assertEquals ( \"authorized\" , element . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 1017, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; WebElement element = driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/facebook.png']\" ) ) ; String facebookLink = element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"href\" ) ; assertTrue ( matchUrl ( correctFacebookLink , facebookLink ) , \"Facebook ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing facebook link in share tab\")"], "method name": "test Facebook Sharing"}
{"id": 1018, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; WebElement element = driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/google.png']\" ) ) ; String gplusLink = element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"href\" ) ; gplusLink = URLDecoder . decode ( gplusLink , \"UTF-8\" ) ; assertTrue ( matchUrl ( correctGplusLink , gplusLink ) , \"GPlus ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Google plus link in share tab\")"], "method name": "test G Plus Sharing"}
{"id": 1019, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/twitter.png']\" ) ) . click ( ) ; switchWindow ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , \"UTF-8\" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Twitter link in share tab\")"], "method name": "test Twitter Sharing"}
{"id": 1020, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/diggit.png']\" ) ) . click ( ) ; switchWindow ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , \"UTF-8\" ) ; assertTrue ( matchUrl ( correctDiggLink , diggLink ) , \"Digg ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Digg link in share tab\")"], "method name": "test Digg Sharing"}
{"id": 1021, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; assertAdminEvents . assertEvent ( realmId , OperationType . ACTION , AdminEventPaths . userResetPasswordPath ( userId ) ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"Account ▁ Management\" ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 1023, "website": "bigquery", "code": " public String function ( String serviceName ) { String url = getServiceUrl ( serviceName ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; return url ; } ", "comments": [" Navigates to the given service name in the current namespace", " @return the URL navigated to"], "method name": "navigate To Service"}
{"id": 1022, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({IE, CHROME, SELENESE, IPHONE})"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 1024, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1025, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( \"number1\" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( \"number2\" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( \"function\" ) ) ; functionList . findElement ( By . cssSelector ( \"option[value='\" + this . function + \"']\" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( \"calculate\" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"answer\" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } ", "comments": ["Test"], "method name": "test calculate two values"}
{"id": 1026, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 1027, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/servicex/details\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOveriddenDetailsPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Existing Page Test Case"}
{"id": 1028, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/servicex/lifecycle\" ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Renderer Test Case"}
{"id": 1029, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/servicex/list\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Asset Override Existing Page Test Case"}
{"id": 1030, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"servicexNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset New Page Test Case"}
{"id": 1031, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"not_found\" ) ; assertFalse ( isAlertPresent ( ) ) ; } ", "comments": ["Test"], "method name": "test Not Found No Alert"}
{"id": 1033, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"not_found\" ) ; assertFalse ( isAlertPresent ( ) ) ; } ", "comments": ["Test"], "method name": "test Not Found No Alert"}
{"id": 1032, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"not_found\" ) ; assertTrue ( isElementPresent ( By . id ( \"page-title\" ) ) ) ; } ", "comments": ["Test"], "method name": "test Failed Element Present"}
{"id": 1035, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/servicex/update\" ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Partial Test Case"}
{"id": 1034, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"not_found\" ) ; assertTrue ( isElementPresent ( By . id ( \"page-title\" ) ) ) ; } ", "comments": ["Test"], "method name": "test Failed Element Present"}
{"id": 1036, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[3]/li\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Added Asset Test Case"}
{"id": 1037, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/asts/servicex/new_caramel_page\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"span.publisherTitle\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Overview\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Edit\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Life ▁ Cycle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Caramel Page Test Case"}
{"id": 1038, "website": "bigquery", "code": " public void function ( ) throws Exception { HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( 0 ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( \"localhost:%d\" , proxyServer . getListenAddress ( ) . getPort ( ) ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = \"http: // www.yahoo.com/\" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertThat ( source . length ( ) , greaterThan ( 100 ) ) ; driver . close ( ) ; proxyServer . stop ( ) ; } ", "comments": [" @Test"], "method name": "test With Web Driver"}
{"id": 1040, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/asts/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Asset New Page Test Case"}
{"id": 1039, "website": "bigquery", "code": " public static String function ( String url , Configuration conf ) { WebDriver driver = null ; try { driver = new FirefoxDriver ( ) ; driver . get ( url ) ; new WebDriverWait ( driver , 3 ) ; String innerHtml = driver . findElement ( By . tagName ( \"body\" ) ) . getAttribute ( \"innerHTML\" ) ; return innerHtml ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { if ( driver != null ) try { driver . quit ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ", "comments": [], "method name": "get Html Page"}
{"id": 1041, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1042, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1044, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1043, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, OPERA, OPERA_MOBILE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1046, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1045, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1048, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1049, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({OPERA, OPERA_MOBILE, MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1047, "website": "bigquery", "code": " public void function ( ) throws Exception { int port = 9090 ; HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( port ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( \"localhost:%d\" , port ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = \"http: // www.yahoo.com/\" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertTrue ( source . length ( ) > 100 ) ; driver . close ( ) ; proxyServer . stop ( ) ; } ", "comments": [" @Test"], "method name": "test With Web Driver"}
{"id": 1050, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1051, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1052, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; WebElement element = driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/facebook.png']\" ) ) ; String facebookLink = element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"href\" ) ; assertTrue ( matchUrl ( correctFacebookLink , facebookLink ) , \"Facebook ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing facebook link in share tab\")"], "method name": "test Facebook Sharing"}
{"id": 1053, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; WebElement element = driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/google.png']\" ) ) ; String gplusLink = element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"href\" ) ; gplusLink = URLDecoder . decode ( gplusLink , \"UTF-8\" ) ; assertTrue ( matchUrl ( correctGplusLink , gplusLink ) , \"GPlus ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Google plus link in share tab\")"], "method name": "test G Plus Sharing"}
{"id": 1054, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/twitter.png']\" ) ) . click ( ) ; switchWindow ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , \"UTF-8\" ) ; System . out . println ( twitterLink ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Twitter link in share tab\")"], "method name": "test Twitter Sharing"}
{"id": 1055, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/diggit.png']\" ) ) . click ( ) ; switchWindow ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , \"UTF-8\" ) ; assertTrue ( matchUrl ( correctDiggLink , diggLink ) , \"Digg ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Digg link in share tab\")"], "method name": "test Digg Sharing"}
{"id": 1056, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1057, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1058, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1059, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1060, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1061, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1062, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1063, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1064, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1065, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1066, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, PHANTOMJS, SAFARI, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1067, "website": "bigquery", "code": " public void function ( By by , int pollCount ) { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } ", "comments": [" This method will keep refreshing/reloading the current url for a given number of poll-count", " until a given element is available", " @param by        Element that is expected to be present", " @param pollCount Number of time page need to be reloaded into webdriver"], "method name": "find Element Poll"}
{"id": 1068, "website": "bigquery", "code": " public void function ( String url ) throws UnreachableBrowserException { if ( url . toLowerCase ( ) . startsWith ( \"http: // \" ) || url . toLowerCase ( ) . startsWith ( \"https: // \" ) || url . toLowerCase ( ) . startsWith ( \"file:\" ) ) { webDriver . get ( url ) ; } else { webDriver . get ( \"http: // \" + url ) ; } } ", "comments": [" ", " Navigate to the given URl.", " ", " @param url", "            String url from the Website.", " ", " @throws UnreachableBrowserException", "             UnreachableBrowserException", " "], "method name": "navigate To URL"}
{"id": 1071, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1069, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1070, "website": "bigquery", "code": " public void function ( ) { driver . get ( url ) ; WebElement number1 = driver . findElement ( By . id ( \"number1\" ) ) ; number1 . sendKeys ( this . number1 ) ; WebElement number2 = driver . findElement ( By . id ( \"number2\" ) ) ; number2 . sendKeys ( this . number2 ) ; WebElement functionList = driver . findElement ( By . id ( \"function\" ) ) ; functionList . findElement ( By . cssSelector ( \"option[value='\" + this . function + \"']\" ) ) . click ( ) ; WebElement calculateButton = driver . findElement ( By . id ( \"calculate\" ) ) ; calculateButton . click ( ) ; WebElement answer = new WebDriverWait ( driver , 10 ) . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"answer\" ) ) ) ; assertThat ( answer . getText ( ) , is ( equalTo ( this . answer ) ) ) ; } ", "comments": ["Test"], "method name": "test calculate two values"}
{"id": 1072, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1074, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1076, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore(value = {IE, CHROME, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE, PHANTOMJS},", "Test"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 1075, "website": "bigquery", "code": " public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({ANDROID, IPHONE, OPERA, OPERA_MOBILE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1077, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1078, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1079, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1080, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1082, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 1081, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertEquals ( \"Keycloak ▁ Account ▁ Management\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 1073, "website": "bigquery", "code": " public static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( \"Firefox ▁ version ▁ \" + firefoxVersion + \" ▁ detected\" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + \"/firebug/\" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + \"firebug.xpi\" ; final String firepathPath = tempPath + \"firepath.xpi\" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( \"browser.download.folderList\" , 2 ) ; profile . setPreference ( \"browser.download.dir\" , downLoadsDir ) ; profile . setPreference ( \"browser.helperApps.alwaysAsk.force\" , false ) ; profile . setPreference ( \"browser.download.manager.showWhenStarting\" , false ) ; profile . setPreference ( \"browser.download.manager.showAlertOnComplete\" , false ) ; profile . setPreference ( \"browser.download.manager.closeWhenDone\" , true ) ; profile . setPreference ( \"app.update.auto\" , false ) ; profile . setPreference ( \"app.update.enabled\" , false ) ; profile . setPreference ( \"dom.max_script_run_time\" , 0 ) ; profile . setPreference ( \"dom.max_chrome_script_run_time\" , 0 ) ; profile . setPreference ( \"browser.helperApps.neverAsk.saveToDisk\" , \"application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain\" ) ; profile . setPreference ( \"network.proxy.type\" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ \" , e ) ; } } String url ; if ( System . getenv ( \"url\" ) != null ) { url = System . getenv ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ \" , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1085, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 1084, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test", "Ignore(MARIONETTE)"], "method name": "delete All Cookies"}
{"id": 1088, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1087, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1090, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1089, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1091, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1092, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1083, "website": "bigquery", "code": " public void function ( final String redirectUris , final String redirectUri ) throws Exception { showTitle ( \"OC5:FeatureTest-Displays ▁ Policy ▁ in ▁ Login ▁ Page\" ) ; List < ResponseType > responseTypes = Arrays . asList ( ResponseType . CODE ) ; String policyUri = \"http: // www.gluu.org/policy\" ; RegisterRequest registerRequest = new RegisterRequest ( ApplicationType . WEB , \"oxAuth ▁ test ▁ app\" , StringUtils . spaceSeparatedToList ( redirectUris ) ) ; registerRequest . setResponseTypes ( responseTypes ) ; registerRequest . setPolicyUri ( policyUri ) ; RegisterClient registerClient = new RegisterClient ( registrationEndpoint ) ; registerClient . setRequest ( registerRequest ) ; RegisterResponse registerResponse = registerClient . exec ( ) ; showClient ( registerClient ) ; assertEquals ( registerResponse . getStatus ( ) , 200 , \"Unexpected ▁ response ▁ code: ▁ \" + registerResponse . getEntity ( ) ) ; assertNotNull ( registerResponse . getClientId ( ) ) ; assertNotNull ( registerResponse . getClientSecret ( ) ) ; assertNotNull ( registerResponse . getRegistrationAccessToken ( ) ) ; assertNotNull ( registerResponse . getClientIdIssuedAt ( ) ) ; assertNotNull ( registerResponse . getClientSecretExpiresAt ( ) ) ; String clientId = registerResponse . getClientId ( ) ; List < String > scopes = Arrays . asList ( \"openid\" , \"profile\" , \"address\" , \"email\" ) ; String state = UUID . randomUUID ( ) . toString ( ) ; AuthorizationRequest authorizationRequest = new AuthorizationRequest ( responseTypes , clientId , scopes , redirectUri , null ) ; authorizationRequest . setState ( state ) ; String authorizationRequestUrl = getAuthorizationEndpoint ( ) + \"?\" + authorizationRequest . getQueryString ( ) ; AuthorizeClient authorizeClient = new AuthorizeClient ( getAuthorizationEndpoint ( ) ) ; authorizeClient . setRequest ( authorizationRequest ) ; try { startSelenium ( ) ; driver . navigate ( ) . to ( authorizationRequestUrl ) ; WebElement policy = driver . findElement ( By . xpath ( \" // a[@href='\" + policyUri + \"']\" ) ) ; assertNotNull ( policy ) ; } catch ( NoSuchElementException ex ) { fail ( \"Policy ▁ not ▁ found\" ) ; } finally { stopSelenium ( ) ; } } ", "comments": ["Parameters({\"redirectUris\", \"redirectUri\"})", "Test"], "method name": "displays Policy Url In Login Page"}
{"id": 1095, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1094, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1097, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1086, "website": "bigquery", "code": " public void function ( final String redirectUris , final String redirectUri ) throws Exception { showTitle ( \"OC5:FeatureTest-Displays ▁ Logo ▁ in ▁ Login ▁ Page\" ) ; List < ResponseType > responseTypes = Arrays . asList ( ResponseType . CODE ) ; String logoUri = \"http: // www.gluu.org/wp-content/themes/gluursn/images/logo.png\" ; RegisterRequest registerRequest = new RegisterRequest ( ApplicationType . WEB , \"oxAuth ▁ test ▁ app\" , StringUtils . spaceSeparatedToList ( redirectUris ) ) ; registerRequest . setResponseTypes ( responseTypes ) ; registerRequest . setLogoUri ( logoUri ) ; RegisterClient registerClient = new RegisterClient ( registrationEndpoint ) ; registerClient . setRequest ( registerRequest ) ; RegisterResponse registerResponse = registerClient . exec ( ) ; showClient ( registerClient ) ; assertEquals ( registerResponse . getStatus ( ) , 200 , \"Unexpected ▁ response ▁ code: ▁ \" + registerResponse . getEntity ( ) ) ; assertNotNull ( registerResponse . getClientId ( ) ) ; assertNotNull ( registerResponse . getClientSecret ( ) ) ; assertNotNull ( registerResponse . getRegistrationAccessToken ( ) ) ; assertNotNull ( registerResponse . getClientIdIssuedAt ( ) ) ; assertNotNull ( registerResponse . getClientSecretExpiresAt ( ) ) ; String clientId = registerResponse . getClientId ( ) ; List < String > scopes = Arrays . asList ( \"openid\" , \"profile\" , \"address\" , \"email\" ) ; String state = UUID . randomUUID ( ) . toString ( ) ; AuthorizationRequest authorizationRequest = new AuthorizationRequest ( responseTypes , clientId , scopes , redirectUri , null ) ; authorizationRequest . setState ( state ) ; String authorizationRequestUrl = getAuthorizationEndpoint ( ) + \"?\" + authorizationRequest . getQueryString ( ) ; AuthorizeClient authorizeClient = new AuthorizeClient ( getAuthorizationEndpoint ( ) ) ; authorizeClient . setRequest ( authorizationRequest ) ; try { startSelenium ( ) ; driver . navigate ( ) . to ( authorizationRequestUrl ) ; WebElement logo = driver . findElement ( By . xpath ( \" // img[@src='\" + logoUri + \"']\" ) ) ; assertNotNull ( logo ) ; } catch ( NoSuchElementException ex ) { fail ( \"Logo ▁ not ▁ found\" ) ; } finally { stopSelenium ( ) ; } } ", "comments": ["Parameters({\"redirectUris\", \"redirectUri\"})", "Test"], "method name": "displays Logo In Login Page"}
{"id": 1096, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1098, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1100, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1099, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1093, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1102, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; WebElement element = driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/facebook.png']\" ) ) ; String facebookLink = element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"href\" ) ; assertTrue ( matchUrl ( correctFacebookLink , facebookLink ) , \"Facebook ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing facebook link in share tab\")"], "method name": "test Facebook Sharing"}
{"id": 1103, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; WebElement element = driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/google.png']\" ) ) ; String gplusLink = element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"href\" ) ; gplusLink = URLDecoder . decode ( gplusLink , \"UTF-8\" ) ; assertTrue ( matchUrl ( correctGplusLink , gplusLink ) , \"GPlus ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Google plus link in share tab\")"], "method name": "test G Plus Sharing"}
{"id": 1106, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetOverriddenListingH1\" ) ) ) ; assertEquals ( driver . findElement ( By . id ( \"assetOverriddenListingH1\" ) ) . getText ( ) , \"New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a partial in extensions\")"], "method name": "test ES Publisher Asset Override Partial Test Case"}
{"id": 1104, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/twitter.png']\" ) ) . click ( ) ; switchWindow ( ) ; String twitterLink = driver . getCurrentUrl ( ) ; twitterLink = URLDecoder . decode ( twitterLink , \"UTF-8\" ) ; System . out . println ( twitterLink ) ; assertTrue ( twitterLink . contains ( correctTwitterLink ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; assertTrue ( twitterLink . contains ( correctTwitterLink2 ) , \"Twitter ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Twitter link in share tab\")"], "method name": "test Twitter Sharing"}
{"id": 1107, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 1108, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE},", "Test"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 1109, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, SAFARI, SELENESE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1110, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1111, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1105, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // a[contains(.,'Line ▁ Plus ▁ Bar ▁ Chart')]\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( \"Share\" ) ) . getText ( ) , \"Share\" ) ; driver . findElement ( By . linkText ( \"Share\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . xpath ( \" // h4[contains(.,'Social ▁ Sites')]\" ) ) . getText ( ) , \"Social ▁ Sites\" ) ; driver . findElement ( By . xpath ( \" // img[@src='/store/themes/store/img/diggit.png']\" ) ) . click ( ) ; switchWindow ( ) ; String diggLink = driver . getCurrentUrl ( ) ; diggLink = URLDecoder . decode ( diggLink , \"UTF-8\" ) ; assertTrue ( matchUrl ( correctDiggLink , diggLink ) , \"Digg ▁ sharing ▁ is ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing Digg link in share tab\")"], "method name": "test Digg Sharing"}
{"id": 1101, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-signin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Forgot ▁ your ▁ password?\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( USER ) ; driver . findElement ( By . id ( \"validationSubmit\" ) ) . click ( ) ; String resourceLocation = getResourceLocation ( ) ; smtpPropertyLocation = resourceLocation + SMTP_PROPERTY_FILE ; Thread . sleep ( 10000 ) ; String message = ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , RESET_MAIL_TITLE ) ; String resetUrl = message . split ( \"\" ) [ 5 ] . trim ( ) . substring ( \"https: // localhost:10343\" . length ( ) ) ; driver . get ( baseUrl + resetUrl ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( \"password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password2\" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( \"resetPassword\" ) ) . click ( ) ; ESUtil . login ( driver , baseUrl , STORE_APP , USER , NEW_PASSWORD ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing password recovery through email\")"], "method name": "test Password Recovery Email"}
{"id": 1112, "website": "bigquery", "code": " public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({OPERA, OPERA_MOBILE, MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1113, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1115, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1114, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1116, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, HTMLUNIT, IE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1118, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1121, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1119, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1120, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, OPERA, OPERA_MOBILE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1123, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1122, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"not tested\")"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1125, "website": "bigquery", "code": " public void function ( ) { driver . get ( baseUrl ) ; Assert . assertFalse ( \"\" . equals ( homepage . header . getText ( ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Has A Header"}
{"id": 1127, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 1126, "website": "bigquery", "code": " public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , \"ff\" ) . equals ( \"opera\" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , \"Open ▁ URL\" , false , \"Open ▁ \" + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } ", "comments": [], "method name": "open Test Url"}
{"id": 1128, "website": "bigquery", "code": " public String function ( String serviceName ) { String url = getServiceUrl ( serviceName ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; return url ; } ", "comments": [" Navigates to the given service name in the current namespace", " @return the URL navigated to"], "method name": "navigate To Service"}
{"id": 1124, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Start\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1130, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE},", "NotYetImplemented(HTMLUNIT)"], "method name": "handle Form With Javascript Action"}
{"id": 1129, "website": "bigquery", "code": " public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , \"ff\" ) . equals ( \"opera\" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , \"Open ▁ URL\" , false , \"Open ▁ \" + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } ", "comments": [], "method name": "open Test Url"}
{"id": 1131, "website": "bigquery", "code": " public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , \"ff\" ) . equals ( \"opera\" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , \"Open ▁ URL\" , false , \"Open ▁ \" + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } ", "comments": [], "method name": "open Test Url"}
{"id": 1132, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertEquals ( \"Keycloak ▁ Account ▁ Management\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 1117, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-signin\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Forgot ▁ your ▁ password?\" ) ) . click ( ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( USER ) ; driver . findElement ( By . id ( \"validationSubmit\" ) ) . click ( ) ; String resourceLocation = getResourceLocation ( ) ; smtpPropertyLocation = resourceLocation + SMTP_PROPERTY_FILE ; Thread . sleep ( 10000 ) ; String message = ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , RESET_MAIL_TITLE ) ; String resetUrl = message . split ( \"\" ) [ 5 ] . trim ( ) . substring ( \"https: // localhost:9443\" . length ( ) ) ; driver . get ( baseUrl + resetUrl ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( \"password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password2\" ) ) . sendKeys ( NEW_PASSWORD ) ; driver . findElement ( By . id ( \"resetPassword\" ) ) . click ( ) ; ESUtil . login ( driver , baseUrl , STORE_APP , USER , NEW_PASSWORD ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing password recovery through email\")"], "method name": "test Password Recovery Email"}
{"id": 1135, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test", "Ignore(value = {IE},"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1133, "website": "bigquery", "code": " public void function ( ) throws Exception { Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test"], "method name": "delete All Cookies"}
{"id": 1136, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1134, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1139, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1141, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; driver . get ( url ) ; assertThat ( driver . getTitle ( ) , equalTo ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI, OPERA_MOBILE, PHANTOMJS},", "Test"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 1142, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( TestUtilities . isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, SELENESE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1143, "website": "bigquery", "code": " public String function ( String serviceName ) { String url = getServiceUrl ( serviceName ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; return url ; } ", "comments": [" Navigates to the given service name in the current namespace", " @return the URL navigated to"], "method name": "navigate To Service"}
{"id": 1144, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1145, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1140, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1146, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1148, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1147, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1138, "website": "bigquery", "code": " static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( \"Firefox ▁ version ▁ \" + firefoxVersion + \" ▁ detected\" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + \"/firebug/\" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + \"firebug.xpi\" ; final String firepathPath = tempPath + \"firepath.xpi\" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( \"browser.download.folderList\" , 2 ) ; profile . setPreference ( \"browser.download.dir\" , downLoadsDir ) ; profile . setPreference ( \"browser.helperApps.alwaysAsk.force\" , false ) ; profile . setPreference ( \"browser.download.manager.showWhenStarting\" , false ) ; profile . setPreference ( \"browser.download.manager.showAlertOnComplete\" , false ) ; profile . setPreference ( \"browser.download.manager.closeWhenDone\" , true ) ; profile . setPreference ( \"app.update.auto\" , false ) ; profile . setPreference ( \"app.update.enabled\" , false ) ; profile . setPreference ( \"dom.max_script_run_time\" , 0 ) ; profile . setPreference ( \"dom.max_chrome_script_run_time\" , 0 ) ; profile . setPreference ( \"browser.helperApps.neverAsk.saveToDisk\" , \"application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain\" ) ; profile . setPreference ( \"network.proxy.type\" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ \" , e ) ; } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ \" , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1149, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1150, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1152, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1151, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1155, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1154, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1153, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1156, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1157, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1159, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1160, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1161, "website": "bigquery", "code": " private void function ( Class < ? > uiClass , Set < String > parameters ) { String url = getTestURL ( uiClass ) ; if ( isDebug ( ) ) { parameters . add ( \"debug\" ) ; } if ( LegacyApplication . class . isAssignableFrom ( uiClass ) ) { parameters . add ( \"restartApplication\" ) ; } if ( parameters . size ( ) > 0 ) { url += \"?\" + Joiner . on ( \"&\" ) . join ( parameters ) ; } driver . get ( url ) ; } ", "comments": [], "method name": "open Test URL"}
{"id": 1162, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( \" // select[@id='displayed-currency']/option[@value='\" + defaultCurrency + \"']\" ) ) ; List < WebElement > options = driver . findElements ( By . xpath ( \" // select[@id='displayed-currency']/option\" ) ) ; assertTrue ( options . size ( ) == currencies . size ( ) ) ; driver . close ( ) ; } ", "comments": [" confirm an option for each currency in data file"], "method name": "test Json Data Loaded"}
{"id": 1158, "website": "bigquery", "code": " public void function ( ) throws Exception { HttpProxyServer proxyServer = DefaultHttpProxyServer . bootstrap ( ) . withPort ( 0 ) . start ( ) ; Proxy proxy = new Proxy ( ) ; proxy . setProxyType ( Proxy . ProxyType . MANUAL ) ; String proxyStr = String . format ( \"localhost:%d\" , proxyServer . getListenAddress ( ) . getPort ( ) ) ; proxy . setHttpProxy ( proxyStr ) ; proxy . setSslProxy ( proxyStr ) ; DesiredCapabilities capability = DesiredCapabilities . firefox ( ) ; capability . setCapability ( CapabilityType . PROXY , proxy ) ; final String urlString = \"http: // www.yahoo.com/\" ; final WebDriver driver = new FirefoxDriver ( capability ) ; driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 30 , TimeUnit . SECONDS ) ; driver . get ( urlString ) ; final String source = driver . getPageSource ( ) ; assertThat ( source . length ( ) , greaterThan ( 100 ) ) ; driver . close ( ) ; proxyServer . abort ( ) ; } ", "comments": [" @Test"], "method name": "test With Web Driver"}
{"id": 1164, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } ", "comments": [], "method name": "test Can Navigate To A Given Url"}
{"id": 1165, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1137, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Start\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1163, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + paymentPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( \" // select[@id='displayed-currency']/option[@value='\" + defaultCurrency + \"']\" ) ) ; for ( Entry < String , Map < String , String > > entry : membershipData . entrySet ( ) ) { String currency = entry . getKey ( ) ; Map < String , String > values = entry . getValue ( ) ; WebElement elt = driver . findElement ( By . xpath ( \" // select[@id='displayed-currency']/option[@value='\" + currency + \"']\" ) ) ; elt . click ( ) ; for ( Entry < String , String > value : values . entrySet ( ) ) { String klass = \"msg-\" + value . getKey ( ) ; if ( displayClasses . contains ( klass ) ) { String amount = value . getValue ( ) ; WebElement span = driver . findElement ( By . className ( klass ) ) ; assertTrue ( span . getText ( ) . equals ( amount ) ) ; } } } driver . close ( ) ; } ", "comments": [" click on the \"Show all amounts in\" options and confirm updates on page"], "method name": "test Change Currency"}
{"id": 1166, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI, MARIONETTE})", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1168, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } ", "comments": [], "method name": "test Can Navigate To A Given Url"}
{"id": 1169, "website": "bigquery", "code": " public function ( ) throws Exception { driver = new FirefoxDriver ( ) ; driver . get ( baseUrl + \"/login\" ) ; } ", "comments": [], "method name": "Login Aspect Test"}
{"id": 1170, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1171, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( Constants . AUTH_SERVER_ROOT ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertEquals ( \"Keycloak ▁ Account ▁ Management\" , driver . getTitle ( ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 1173, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( updateUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetOverriddenListingH1\" ) ) ) ; assertEquals ( driver . findElement ( By . id ( \"assetOverriddenListingH1\" ) ) . getText ( ) , \"New ▁ Asset ▁ Update ▁ Partial ▁ of ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a partial in extensions\")"], "method name": "test ES Publisher Asset Override Partial Test Case"}
{"id": 1167, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, PHANTOMJS, SAFARI, SELENESE, OPERA_MOBILE},"], "method name": "handle Form With Javascript Action"}
{"id": 1174, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/list\" ) ; assertTrue ( isElementPresent ( driver , By . className ( \"assetOverriddenListingElement\" ) ) ) ; assertEquals ( driver . findElement ( By . className ( \"assetOverriddenListingElement\" ) ) . getText ( ) , \"New ▁ Asset ▁ List ▁ Partial ▁ of ▁ Publisher\" ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding listAssetTableBody partial in extensions\")"], "method name": "test ES Publisher Asset Override List Asset Body Partial Test Case"}
{"id": 1175, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1176, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test(enabled = false)", " @Ignore(value = { ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI,", " SELENESE, OPERA_MOBILE }, reason =", " \"Untested on all other browsers, fails on chrome, fails on IE.\", issues = {", " 3508 })"], "method name": "handle Form With Javascript Action"}
{"id": 1179, "website": "bigquery", "code": " private void function ( String url ) { getWebDriver ( ) . get ( url ) ; } ", "comments": [], "method name": "fake Type URL"}
{"id": 1177, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1180, "website": "bigquery", "code": " public void function ( ) { } ", "comments": [" @Ignore(value = {IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI,", " OPERA_MOBILE}, reason = \"Safari: does not support insecure SSL\")", "Test(enabled = false)"], "method name": "test Should Be Able To Access Pages With An Insecure Ssl Certificate"}
{"id": 1181, "website": "bigquery", "code": " public void function ( ) { } ", "comments": [" @Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE,", " SAFARI, SELENESE})", "Test(enabled = false)"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1182, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 1183, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; AssetUtil . updateAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_DESCRIPTION ) ; driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; boolean hasMail = ( ESUtil . readEmail ( smtpPropertyLocation , EMAIL_PWD , EMAIL , updateNotificationSubject ) != null ) ; assertTrue ( hasMail , \"Asset ▁ Update ▁ Notification ▁ failed ▁ for ▁ user:\" + currentUserName ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Testing mails for asset update event\","], "method name": "test Update Notification"}
{"id": 1178, "website": "bigquery", "code": " public void function ( ) throws Exception { Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test"], "method name": "delete All Cookies"}
{"id": 1185, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + membershipOverviewPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( \" // select[@id='displayed-currency']/option[@value='\" + defaultCurrency + \"']\" ) ) ; List < WebElement > options = driver . findElements ( By . xpath ( \" // select[@id='displayed-currency']/option\" ) ) ; assertTrue ( options . size ( ) == currencies . size ( ) ) ; driver . close ( ) ; } ", "comments": [" confirm an option for each currency in data file"], "method name": "test Json Data Loaded"}
{"id": 1187, "website": "bigquery", "code": " public void function ( ) throws Exception { String pageUrl = baseUrl + goodPage ; driver . get ( pageUrl ) ; sleepMS ( pageLoadWait ) ; assertTrue ( xpathsPresent ( bannerParaXpaths ) ) ; driver . close ( ) ; } ", "comments": [" confirm minimal content for page banner"], "method name": "test Banner Loaded"}
{"id": 1188, "website": "bigquery", "code": " public void function ( ) throws Exception { String pageUrl = baseUrl + goodPage ; driver . get ( pageUrl ) ; for ( int i = buttonMin ; i <= buttonMax ; ++ i ) { driver . findElement ( By . xpath ( String . format ( tabButtonFmt , i ) ) ) . click ( ) ; sleepMS ( clickWait ) ; assertTrue ( driver . findElement ( By . xpath ( String . format ( tabDivFmt , i ) ) ) . isDisplayed ( ) ) ; } driver . close ( ) ; } ", "comments": [" cycle through the tab buttons and confirm panel contents visibility"], "method name": "test Browse Buttons"}
{"id": 1186, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( currencies ) ) ; String pageUrl = baseUrl + membershipOverviewPage ; driver . get ( pageUrl ) ; waitOnXpathsPresent ( Arrays . asList ( \" // select[@id='displayed-currency']/option[@value='\" + defaultCurrency + \"']\" ) ) ; for ( Entry < String , Map < String , String > > entry : membershipData . entrySet ( ) ) { String currency = entry . getKey ( ) ; Map < String , String > values = entry . getValue ( ) ; WebElement elt = driver . findElement ( By . xpath ( \" // select[@id='displayed-currency']/option[@value='\" + currency + \"']\" ) ) ; elt . click ( ) ; for ( Entry < String , String > value : values . entrySet ( ) ) { String klass = value . getKey ( ) ; String amount = value . getValue ( ) ; WebElement span = driver . findElement ( By . className ( klass ) ) ; assertTrue ( span . getText ( ) . equals ( amount ) ) ; } } driver . close ( ) ; } ", "comments": [" click on the \"Show all amounts in\" options and confirm updates on page"], "method name": "test Change Currency"}
{"id": 1190, "website": "bigquery", "code": " public static void function ( ESWebDriver driver , String url ) { driver . get ( url + ADMIN_CONSOLE_SUFFIX ) ; driver . findElement ( By . linkText ( \"Sign-out\" ) ) . click ( ) ; } ", "comments": [" To logout from admin console", " @param driver WebDriver instance", " @param url    base url of the server"], "method name": "logout From Admin Console"}
{"id": 1191, "website": "bigquery", "code": " public void function ( ) throws Exception { for ( String p : pageNames200 ) { String url = baseUrl + pageRoot + p ; driver . get ( url ) ; sleepMS ( loadSleep ) ; WebElement pnfDiv = null ; try { pnfDiv = driver . findElement ( By . id ( pageNotFoundId ) ) ; } catch ( NoSuchElementException e ) { } assertTrue ( \"Not-found ▁ div ▁ found ▁ in ▁ page\" , pnfDiv == null ) ; } } ", "comments": [" confirm that the static pages load and are not the not-found page", " (which is returned with a 200 code)"], "method name": "test Page Load"}
{"id": 1189, "website": "bigquery", "code": " public void function ( ) throws Exception { String pageUrl = baseUrl + goodPage ; driver . get ( pageUrl ) ; sleepMS ( pageLoadWait ) ; WebElement form = driver . findElement ( By . xpath ( searchFormXpath ) ) ; WebElement input = driver . findElement ( By . xpath ( searchInputXpath ) ) ; assertTrue ( input . isDisplayed ( ) ) ; input . sendKeys ( searchText ) ; form . submit ( ) ; assertTrue ( driver . getTitle ( ) . equals ( searchResultsPageTitle ) ) ; String expectedUrlBasePath = baseUrl + searchUrlPath ; String actualUrlAll = driver . getCurrentUrl ( ) ; assertTrue ( actualUrlAll . length ( ) >= expectedUrlBasePath . length ( ) ) ; assertTrue ( actualUrlAll . substring ( 0 , expectedUrlBasePath . length ( ) ) . equals ( expectedUrlBasePath ) ) ; driver . close ( ) ; } ", "comments": [" confirm that the search page loads when the search form is submitted"], "method name": "test Search Form"}
{"id": 1192, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["Ignore(value = {SELENESE})", "Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1172, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . dismiss ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {ANDROID, HTMLUNIT, IPHONE, OPERA, PHANTOMJS, SAFARI, OPERA_MOBILE, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1194, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . linkText ( \"WSO2 ▁ Carbon ▁ Commits ▁ List ▁ Discussion\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) , \"Gadget ▁ Details\" , \"Cannot ▁ reach ▁ asset ▁ details ▁ page ▁ from ▁ gadget ▁ list ▁ page\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page Links\","], "method name": "test Links From Page"}
{"id": 1195, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1193, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( \"Gadgets\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"Gadgets\" ) ) , \"Gadgets ▁ heading ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( LINE_PLUS_BAR_CHART ) ) , LINE_PLUS_BAR_CHART + \" ▁ Gadgets ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( LINE_CHART ) ) , LINE_CHART + \" ▁ Gadgets ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"span.advanced-search-text\" ) ) , \"Advanced ▁ search ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"#sortDropdown ▁ > ▁ img\" ) ) , \"Sorting ▁ dropdown ▁ missing\" ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"span.sort-asset-info\" ) ) . getText ( ) , \"( ▁ Date/Time ▁ Created ▁ )\" ) ; driver . findElement ( By . cssSelector ( \"#sortDropdown ▁ > ▁ img\" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"POPULAR\" ) ) , \"Popular ▁ sort ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"NAME\" ) ) , \"Sort ▁ by ▁ name ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . linkText ( \"DATE/TIME ▁ CREATED\" ) ) , \"Sort ▁ by ▁ created ▁ date/time ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Gadgets Page\")"], "method name": "test Gadget Page"}
{"id": 1196, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1198, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {OPERA, OPERA_MOBILE}, reason = \"Opera: failed\")"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1197, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1200, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1184, "website": "bigquery", "code": " public void function ( ) throws Exception { String jsonUrl = baseUrl + jsonDataPath ; Map < String , Map < String , String > > membershipData = mapper . readValue ( new URL ( jsonUrl ) , Map . class ) ; assertTrue ( membershipData . keySet ( ) . containsAll ( plans ) ) ; String pageUrl = baseUrl + paymentPlanComparisonToolPage ; driver . get ( pageUrl ) ; WebElement btnCalculate = driver . findElement ( By . xpath ( calculateButtonXpath ) ) ; for ( PageResult r : pageResults ) { WebElement apy = driver . findElement ( By . xpath ( apyXpath ) ) ; apy . clear ( ) ; apy . sendKeys ( r . articlesPerYear ) ; WebElement pwd = driver . findElement ( By . xpath ( pwdXpath ) ) ; pwd . clear ( ) ; pwd . sendKeys ( r . percentageWithDeposits ) ; WebElement radio = null ; if ( r . under10m ) { radio = driver . findElement ( By . xpath ( under10mXpath ) ) ; } else { radio = driver . findElement ( By . xpath ( over10mXpath ) ) ; } radio . click ( ) ; btnCalculate . click ( ) ; sleepMS ( postClickSleepMS ) ; for ( int i = 0 ; i < plans . size ( ) ; ++ i ) { for ( int j = 0 ; j < columns . size ( ) ; ++ j ) { if ( r . error ) { assertTrue ( xpathsPresent ( r . errorXpaths ) ) ; } else { String xp = \" // tr[@id='\" + plans . get ( i ) + \"']/td[@class='\" + columns . get ( j ) + \"']\" ; WebElement cell = driver . findElement ( By . xpath ( xp ) ) ; String expected = r . table . get ( i ) . get ( j ) ; String got = cell . getText ( ) ; String msg = \"Table ▁ value ▁ for ▁ \" + xp + \" ▁ expected ▁ '\" + expected + \"' ▁ got ▁ '\" + got + \"'\" ; assertTrue ( msg , got . equals ( expected ) ) ; } } } btnCalculate . click ( ) ; } driver . close ( ) ; } ", "comments": [" click on the \"Show all amounts in\" options and confirm updates on page"], "method name": "test Change Currency"}
{"id": 1199, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test", "Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE}, reason"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1201, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test", "Ignore(MARIONETTE)"], "method name": "delete All Cookies"}
{"id": 1202, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 1204, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) ) ; String bookmarkedAsset = driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) . getText ( ) ; driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"btn-add-gadget\" ) ) ) ; driver . findElement ( By . id ( \"btn-add-gadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"main-bookmark\" ) , \"Bookmarked\" ) ) ; assertEquals ( \"Bookmarked\" , driver . findElement ( By . id ( \"main-bookmark\" ) ) . getText ( ) , \"Bookmarking ▁ failed\" ) ; driver . findElement ( By . cssSelector ( \".bookmark-link-text\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"div.ast-title ▁ a.ast-name\" ) ) ) ; assertEquals ( bookmarkedAsset , driver . findElement ( By . cssSelector ( \"div.ast-title ▁ a.ast-name\" ) ) . getText ( ) , \"Bookmarked ▁ asset ▁ not ▁ shown ▁ in ▁ My ▁ Items ▁ page\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Bookmarking\")"], "method name": "test ES Store Bookmark Test Case"}
{"id": 1205, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_VERSION , \"\" , \"\" , \"\" ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . get ( baseUrl + \"/carbon/\" ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( \"NAME\" ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( \"NAME\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ \" + \"tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"Check if subscriptions are created\", enabled = true)"], "method name": "test Subscription Creation"}
{"id": 1207, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; assertTrue ( ! isElementPresent ( driver , By . id ( \"Addgadget\" ) ) , \"User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ add ▁ \" + \"asset.\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify not being able to add asset\","], "method name": "test Restrict Add Asset As Reviewer"}
{"id": 1206, "website": "bigquery", "code": " public static void function ( WebDriver driver , String baseUrl , String assetType , String assetName , String version , String category , String url , String description ) { driver . get ( baseUrl + \"/publisher/assets/\" + assetType + \"/list\" ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Add\" + assetType ) ) ) ; driver . findElement ( By . id ( \"Add\" + assetType ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( version ) ; if ( ! category . equals ( \"\" ) ) { new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( category ) ; } driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( url ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( description ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Add\" + assetType ) ) ) ; } ", "comments": [" Add a new asset", " @param driver      WebDriver instance", " @param baseUrl     base url of the server", " @param assetType   asset type", " @param assetName   asset name", " @param version     version"], "method name": "add New Asset"}
{"id": 1208, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"h3.ast-name\" ) ) . click ( ) ; assertTrue ( ! isElementPresent ( driver , By . id ( \"Edit\" ) ) , \"User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ edit ▁ \" + \"asset.\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify not being able to edit asset\","], "method name": "test Restrict Edit Asset As Reviewer"}
{"id": 1209, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"h3.ast-name\" ) ) . click ( ) ; assertTrue ( ! isElementPresent ( driver , By . id ( \"Version\" ) ) , \"User ▁ who ▁ has ▁ only ▁ internal/reviewer ▁ role ▁ can ▁ version\" + \"asset.\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify not being able to version asset\","], "method name": "test Restrict Version Asset As Reviewer"}
{"id": 1210, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_TOP_ASSETS_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , MAX_POLL_COUNT ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"btn-signin\" ) ) ) ; driver . findElement ( By . id ( \"btn-signin\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) , \"You ▁ do ▁ not ▁ have ▁ permission ▁ to ▁ login ▁ to ▁ this\" + \" ▁ application.Please ▁ contact ▁ your ▁ administrator ▁ and ▁ request ▁ permission.\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify not being able to login to store\","], "method name": "test Restrict Login To Store As Reviewer"}
{"id": 1213, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"h3\" ) ) . getText ( ) , \"You ▁ do ▁ not ▁ have ▁ permission ▁ to ▁ login ▁ to ▁ this\" + \" ▁ application.Please ▁ contact ▁ your ▁ administrator ▁ and ▁ request ▁ permission.\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"verify not being able to login to publisher\","], "method name": "test Restrict Login To Publisher As Store Only User"}
{"id": 1212, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test"], "method name": "delete All Cookies"}
{"id": 1214, "website": "bigquery", "code": " public void function ( ) { String loginFormUrl = oauth . getLoginFormUrl ( ) + \"&login_hint=login-test\" ; driver . navigate ( ) . to ( loginFormUrl ) ; Assert . assertEquals ( \"login-test\" , loginPage . getUsername ( ) ) ; loginPage . login ( \"password\" ) ; Assert . assertEquals ( RequestType . AUTH_RESPONSE , appPage . getRequestType ( ) ) ; Assert . assertNotNull ( oauth . getCurrentQuery ( ) . get ( OAuth2Constants . CODE ) ) ; events . expectLogin ( ) . user ( userId ) . detail ( Details . USERNAME , \"login-test\" ) . assertEvent ( ) ; } ", "comments": ["Test"], "method name": "login Login Hint"}
{"id": 1211, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . findElement ( By . id ( \"Add\" + ASSET_TYPE ) ) . click ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( ASSET_NAME ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; driver . findElement ( By . id ( \"LifeCycle\" ) ) . click ( ) ; driver . findElement ( By . id ( \"lcActionPromote\" ) ) . click ( ) ; driver . get ( driver . getCurrentUrl ( ) ) ; driver . findElement ( By . id ( \"lcActionPromote\" ) ) . click ( ) ; driver . get ( baseUrl + STORE_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( ASSET_NAME ) ) . click ( ) ; assertEquals ( ASSET_NAME , driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing Publishing an asset to store\")"], "method name": "test ES Publish To Store"}
{"id": 1216, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/assets/servicex/new_page\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test adding a new asset page in extensions\")"], "method name": "test ES Publisher Asset New Page Test Case"}
{"id": 1217, "website": "bigquery", "code": " public void function ( ) { String userId = createUser ( \"user1\" , \"user1@localhost\" ) ; CredentialRepresentation cred = new CredentialRepresentation ( ) ; cred . setType ( CredentialRepresentation . PASSWORD ) ; cred . setValue ( \"password\" ) ; cred . setTemporary ( false ) ; realm . users ( ) . get ( userId ) . resetPassword ( cred ) ; assertAdminEvents . assertEvent ( realmId , OperationType . ACTION , AdminEventPaths . userResetPasswordPath ( userId ) ) ; String accountUrl = RealmsResource . accountUrl ( UriBuilder . fromUri ( getAuthServerRoot ( ) ) ) . build ( REALM_NAME ) . toString ( ) ; driver . navigate ( ) . to ( accountUrl ) ; assertEquals ( \"Log ▁ in ▁ to ▁ admin-client-test\" , driver . getTitle ( ) ) ; loginPage . login ( \"user1\" , \"password\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"Account ▁ Management\" ) ) ; } ", "comments": ["Test"], "method name": "reset User Password"}
{"id": 1215, "website": "bigquery", "code": " public static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( \"Firefox ▁ version ▁ \" + firefoxVersion + \" ▁ detected\" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + \"/firebug/\" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + \"firebug.xpi\" ; final String firepathPath = tempPath + \"firepath.xpi\" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( \"browser.download.folderList\" , 2 ) ; profile . setPreference ( \"browser.download.dir\" , downLoadsDir ) ; profile . setPreference ( \"browser.helperApps.alwaysAsk.force\" , false ) ; profile . setPreference ( \"browser.download.manager.showWhenStarting\" , false ) ; profile . setPreference ( \"browser.download.manager.showAlertOnComplete\" , false ) ; profile . setPreference ( \"browser.download.manager.closeWhenDone\" , true ) ; profile . setPreference ( \"app.update.auto\" , false ) ; profile . setPreference ( \"app.update.enabled\" , false ) ; profile . setPreference ( \"dom.max_script_run_time\" , 0 ) ; profile . setPreference ( \"dom.max_chrome_script_run_time\" , 0 ) ; profile . setPreference ( \"browser.helperApps.neverAsk.saveToDisk\" , \"application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain\" ) ; profile . setPreference ( \"network.proxy.type\" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ \" , e ) ; } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ \" , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1219, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Edit\" ) ) ) ; driver . findElement ( By . id ( \"Edit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_category\" ) ) ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)\" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\","], "method name": "test Edit Asset"}
{"id": 1203, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; driver . findElement ( By . id ( \"btn-register\" ) ) . click ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-username\" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"reg-password2\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . name ( \"reg-email\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-email\" ) ) . sendKeys ( NEW_USER_EMAIL ) ; driver . findElement ( By . name ( \"reg-first-name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-first-name\" ) ) . sendKeys ( NEW_USER_FNAME ) ; driver . findElement ( By . name ( \"reg-last-name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"reg-last-name\" ) ) . sendKeys ( NEW_USER_LNAME ) ; driver . findElement ( By . id ( \"registrationSubmit\" ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . id ( \"regFormSuc\" ) ) , \"User ▁ creation ▁ failed.\" ) ; driver . findElement ( By . id ( \"signInLink\" ) ) . click ( ) ; driver . findElementPoll ( By . id ( \"username\" ) , MAX_POLL_COUNT ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( NEW_USER_NAME ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( NEW_USER_PWD ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; WebElement userNameElement = driver . findElement ( By . id ( \"logedInUser\" ) ) ; assertEquals ( userNameElement . getText ( ) . trim ( ) , NEW_USER_NAME ) ; driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . id ( \"txtUserName\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"txtUserName\" ) ) . sendKeys ( adminUserName ) ; driver . findElement ( By . id ( \"txtPassword\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"txtPassword\" ) ) . sendKeys ( adminUserPwd ) ; driver . findElement ( By . cssSelector ( \"input.button\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Users ▁ and ▁ Roles\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Users\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#userTable ▁ tbody ▁ tr:last-child ▁ td:nth-child(2) ▁ a:nth-child(5)\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"default\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . cssSelector ( \".styledLeft ▁ tr:nth-child(7) ▁ input\" ) ) . getAttribute ( \"value\" ) , NEW_USER_EMAIL , \"Claims ▁ are ▁ not ▁ working ▁ properly.\" ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing user registration\")"], "method name": "test ES Register User Test Case"}
{"id": 1222, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/assets/servicex/details\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetOveriddenDetailsPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding existing page in extensions\")"], "method name": "test ES Publisher Asset Override Existing Page Test Case"}
{"id": 1221, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( assetName ) ) ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Edit\" ) ) ) ; driver . findElement ( By . id ( \"Edit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_category\" ) ) ) ; new Select ( driver . findElement ( By . name ( \"overview_category\" ) ) ) . selectByVisibleText ( ASSET_CATEGORY_2 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_2 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_2 ) ; driver . findElement ( By . id ( \"editAssetButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)\" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_CATEGORY_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_2 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing editing an asset\", dependsOnMethods = \"testAddAsset\")"], "method name": "test Edit Asset"}
{"id": 1220, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElement ( By . id ( \"Addgadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_name\" ) ) ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(3) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 1223, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; assertEquals ( \"Asset ▁ | ▁ WSO2 ▁ Enterprise ▁ Store ▁ Publisher\" , driver . getTitle ( ) ) ; assertEquals ( currentUserName , driver . findElement ( By . xpath ( \"/html/body/div/div[1]/header/div/div[2]/div/a/div/span\" ) ) . getText ( ) , \"Logged ▁ in ▁ user ▁ not ▁ shown\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"verify login to ES Publisher\")"], "method name": "test Login To Publisher"}
{"id": 1224, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; driver . get ( baseUrl + \"/publisher/assets/servicex/new_caramel_page\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; assertTrue ( isElementPresent ( driver , By . id ( \"Overview\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . id ( \"Edit\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new caramel page in extensions\")"], "method name": "test ES Publisher Asset Caramel Page Test Case"}
{"id": 1226, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT},"], "method name": "handle Form With Javascript Action"}
{"id": 1225, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; assertEquals ( \"Dryad ▁ Digital ▁ Repository ▁ - ▁ Dryad\" , driver . getTitle ( ) ) ; assertTrue ( \"recently ▁ published ▁ list\" , isElementPresent ( By . cssSelector ( \"li.ds-artifact-item.even\" ) ) ) ; } ", "comments": ["Test"], "method name": "test Home Page Display"}
{"id": 1228, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1227, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/\" ) ; driver . findElement ( By . id ( \"login-item\" ) ) . click ( ) ; driver . findElement ( By . id ( \"aspect_eperson_PasswordLogin_field_login_email\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"aspect_eperson_PasswordLogin_field_login_email\" ) ) . sendKeys ( \"seleniumtest@datadryad.org\" ) ; driver . findElement ( By . id ( \"aspect_eperson_PasswordLogin_field_login_password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"aspect_eperson_PasswordLogin_field_login_password\" ) ) . sendKeys ( \"seleniumtest\" ) ; WebElement loginBox = driver . findElement ( By . id ( \"aspect_eperson_PasswordLogin_div_login\" ) ) ; loginBox . findElement ( By . id ( \"aspect_eperson_PasswordLogin_field_submit\" ) ) . click ( ) ; driver . get ( baseUrl + \"/handle/10255/3/submit?journalID=MolEcol&manu=test-accept\" ) ; driver . findElement ( By . name ( \"license_accept\" ) ) . click ( ) ; driver . findElement ( By . id ( \"aspect_submission_StepTransformer_field_submit_next\" ) ) . click ( ) ; assertEquals ( \"Dryad ▁ Submission ▁ - ▁ Dryad\" , driver . getTitle ( ) ) ; assertTrue ( \"imported ▁ keywords ▁ contain ▁ Nummulites\" , idContains ( \"aspect_submission_StepTransformer_div_submit-describe-publication\" , \"Nummulites\" ) ) ; driver . findElement ( By . id ( \"aspect_submission_StepTransformer_field_submit_cancel\" ) ) . click ( ) ; driver . findElement ( By . id ( \"aspect_submission_submit_SaveOrRemoveStep_field_submit_remove\" ) ) . click ( ) ; } ", "comments": ["Test"], "method name": "test Journal Metadata Import"}
{"id": 1230, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UserAndPassword user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; assertEquals ( \"authorized\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 1229, "website": "bigquery", "code": " public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, SELENESE, OPERA, OPERA_MOBILE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1232, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Add new Global page via extension test case\")"], "method name": "test ES Store New Global Page Test Case"}
{"id": 1231, "website": "bigquery", "code": " public static void function ( WebDriver driver , String testUrl ) { driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . SETUP_URL_LOAD_WAIT_SECONDS , TimeUnit . SECONDS ) ; driver . get ( testUrl ) ; if ( ! System . getProperty ( SauceLabsWebDriverHelper . SAUCE_BROWSER_PROPERTY , \"ff\" ) . equals ( \"opera\" ) ) { driver . manage ( ) . window ( ) . maximize ( ) ; } WebDriverUtils . jGrowl ( driver , \"Open ▁ URL\" , false , \"Open ▁ \" + testUrl ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( WebDriverUtils . configuredImplicityWait ( ) , TimeUnit . SECONDS ) ; } ", "comments": [], "method name": "open Test Url"}
{"id": 1235, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1234, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"logedInUser\" ) ) ) ; driver . findElement ( By . id ( \"logedInUser\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \".dropdown-account ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"ul.navbar-right ▁ li:first-child ▁ span.ro-text\" ) ) ) ; assertEquals ( \"sign ▁ in\" , driver . findElement ( By . cssSelector ( \"ul.navbar-right ▁ li:first-child ▁ span.ro-text\" ) ) . getText ( ) . toLowerCase ( ) , \"Sign ▁ in ▁ link ▁ missing\" ) ; assertEquals ( \"register\" , driver . findElement ( By . cssSelector ( \"a#btn-register ▁ span.ro-text\" ) ) . getText ( ) . toLowerCase ( ) , \"Register ▁ button ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Store Logout\","], "method name": "test ES Store Logout"}
{"id": 1218, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_GADGET_LIST_PAGE ) ; WebDriverWait wait = new WebDriverWait ( driver , 60 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElement ( By . id ( \"Addgadget\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . name ( \"overview_name\" ) ) ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_name\" ) ) . sendKeys ( assetName ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_version\" ) ) . sendKeys ( ASSET_VERSION_1 ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_url\" ) ) . sendKeys ( ASSET_URL_1 ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . clear ( ) ; driver . findElement ( By . name ( \"overview_description\" ) ) . sendKeys ( ASSET_DESCRIPTION_1 ) ; driver . findElement ( By . name ( \"images_thumbnail\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/thumbnail.jpg\" ) ; driver . findElement ( By . name ( \"images_banner\" ) ) . sendKeys ( FrameworkPathUtil . getReportLocation ( ) + \"/../src/test/resources/images/banner.jpg\" ) ; driver . findElement ( By . id ( \"btn-create-asset\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"Addgadget\" ) ) ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; assertTrue ( isElementPresent ( driver , By . linkText ( assetName ) ) , \"Adding ▁ an ▁ asset ▁ failed ▁ for ▁ user:\" + currentUserName ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(2) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_VERSION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(3) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ version\" ) ; assertEquals ( ASSET_CATEGORY_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(4) ▁ div:nth-child(2)\" ) ) . getText ( ) ) ; assertEquals ( ASSET_URL_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(5) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ URL\" ) ; assertEquals ( ASSET_DESCRIPTION_1 , driver . findElement ( By . cssSelector ( \"#collapseOverview ▁ div:nth-child(6) ▁ div:nth-child(2)\" ) ) . getText ( ) , \"Incorrect ▁ description\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Testing adding a new asset\")"], "method name": "test Add Asset"}
{"id": 1237, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/details\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOveriddenDetailsPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Existing Page Test Case"}
{"id": 1236, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1239, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1238, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1233, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_URL ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"ul.navbar-right ▁ li:first-child ▁ a\" ) ) ) ; driver . findElement ( By . cssSelector ( \"ul.navbar-right ▁ li:first-child ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"username\" ) ) ) ; driver . findElement ( By . id ( \"username\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"username\" ) ) . sendKeys ( currentUserName ) ; driver . findElement ( By . id ( \"password\" ) ) . clear ( ) ; driver . findElement ( By . id ( \"password\" ) ) . sendKeys ( currentUserPwd ) ; driver . findElement ( By . xpath ( \" // button[@type='submit']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"logedInUser\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test Store Login\")"], "method name": "test ES Store Login"}
{"id": 1241, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1240, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1242, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1243, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1244, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( lifecycleUrl ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetLifecyclePartial\" ) ) ) ; assertEquals ( driver . findElement ( By . id ( \"assetLifecyclePartial\" ) ) . getText ( ) , \"Asset ▁ Overridden ▁ Lifecycle ▁ through ▁ renderer\" ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a renderer in extensions\")"], "method name": "test ES Publisher Asset Override Renderer Test Case"}
{"id": 1247, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/splash\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetOverridenGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test overriding a global page in extensions\")"], "method name": "test ES Publisher Overriden Global Page Test Case"}
{"id": 1248, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"div.app-logo ▁ a\" ) ) , \"Asset ▁ listing ▁ page ▁ error: ▁ Logo ▁ missing\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description= \"Test if a logged in super tenant user can navigate to the asset \" +"], "method name": "test Asset Listing Page"}
{"id": 1245, "website": "bigquery", "code": " public void function ( ) throws Exception { AssetUtil . addNewAsset ( driver , baseUrl , ASSET_TYPE , assetName , ASSET_VERSION , \"\" , \"\" , \"\" ) ; if ( isAlertPresent ( driver ) ) { closeAlertAndGetItsText ( driver , true ) ; } driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . linkText ( \"Gadgets\" ) ) . click ( ) ; driver . findElementPoll ( By . linkText ( assetName ) , MAX_POLL_COUNT ) ; driver . findElement ( By . linkText ( assetName ) ) . click ( ) ; String subscription1 = driver . findElement ( By . cssSelector ( \"#subscriptionsTable ▁ > ▁ tbody ▁ > ▁ tr.tableOddRow ▁ > ▁ td\" ) ) . getText ( ) ; String subscription2 = driver . findElement ( By . xpath ( \" // table[@id='subscriptionsTable']/tbody/tr[3]/td\" ) ) . getText ( ) ; String subscription1Name ; String subscription2Name ; if ( LC_SUBSCRIPTION . equalsIgnoreCase ( subscription1 ) ) { subscription1Name = LC_SUBSCRIPTION ; subscription2Name = UPDATE_SUBSCRIPTION ; } else { subscription1Name = UPDATE_SUBSCRIPTION ; subscription2Name = LC_SUBSCRIPTION ; } assertEquals ( subscription1Name , subscription1 ) ; assertEquals ( subscription2Name , subscription2 ) ; } ", "comments": ["Test(groups = \"wso2.es.notification\", description = \"Check if subscriptions are created\")"], "method name": "test Subscription Creation"}
{"id": 1249, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Test adding a new global page in extensions\")"], "method name": "test ES Publisher New Global Page Test Case"}
{"id": 1251, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Asset New Page Test Case"}
{"id": 1246, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + MANAGEMENT_CONSOLE_URL ) ; driver . findElement ( By . xpath ( \" // span[contains(.,'Configure')]\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Claim ▁ Management\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"http: // wso2.org/claims\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // span[contains(.,'Country')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[@href='update-claim.jsp?dialect=http: // wso2.org/claims&claimUri=http: // wso2.org/claims/country']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // input[@id='required']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // input[@value='Update']\" ) ) . click ( ) ; driver . get ( baseUrl + PUBLISHER_URL ) ; assertTrue ( isElementPresent ( driver , By . name ( \"reg-country\" ) ) , \"New ▁ claim ▁ is ▁ not ▁ shown ▁ up ▁ in ▁ sign ▁ up ▁ form\" ) ; } ", "comments": ["Test(groups = \"wso2.es.common\", description = \"Testing correctness of self sign up form\")"], "method name": "test Self Sign Up Form"}
{"id": 1250, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . findElementPoll ( By . linkText ( ASSET_NAME ) , MAX_POLL_COUNT ) ; driver . findElement ( By . cssSelector ( \"#dropdownMenu1 ▁ > ▁ img\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Name\" ) ) . click ( ) ; assertEquals ( NAME_SORT_ASSET_1 , driver . findElement ( By . xpath ( \"/html/body/div/div[3]/div/div[3]/div/div[1]/div/div/a/h3\" ) ) . getText ( ) , \"Sort ▁ on ▁ name ▁ failed\" ) ; assertEquals ( NAME_SORT_ASSET_2 , driver . findElement ( By . xpath ( \"/html/body/div/div[3]/div/div[3]/div/div[2]/div/div/a/h3\" ) ) . getText ( ) , \"Sort ▁ on ▁ name ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.publisher\", description = \"Test sort by name\", enabled = false)"], "method name": "test List Page Sort By Name"}
{"id": 1254, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/update\" ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Partial Test Case"}
{"id": 1252, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/service/list\" ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"The new asset type list page extension in store Test Case\")"], "method name": "test ES Store Added Asset Test Case"}
{"id": 1253, "website": "bigquery", "code": " public void function ( ) throws Exception { ESUtil . login ( driver , baseUrl , \"publisher\" , userInfo . getUserName ( ) , userInfo . getPassword ( ) ) ; AssetUtil . addNewAsset ( driver , baseUrl , assetType , assetName , assetVersion , assetCategory , assetURL , assetDescription ) ; driver . get ( baseUrl + \"/publisher/assets/gadget/list\" ) ; driver . findElementPoll ( By . linkText ( assetName ) , 10 ) ; AssetUtil . publishAssetToStore ( driver , assetName ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Add asset\")"], "method name": "test Add Asset"}
{"id": 1255, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/new_caramel_page\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"span.publisherTitle\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Overview\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Edit\" ) ) ) ; assertTrue ( isElementPresent ( By . linkText ( \"Life ▁ Cycle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Caramel Page Test Case"}
{"id": 1258, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on created time\")"], "method name": "test Store Sort On Created Time"}
{"id": 1256, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; driver . findElement ( By . cssSelector ( \"i.icon-star\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \"h4\" ) , popularAsset1 ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( \"h4\" ) ) . getText ( ) , popularAsset1 , \"Popularity ▁ Sort ▁ failed\" ) ; assertEquals ( driver . findElement ( By . xpath ( \" // div[@id='assets-container']/div/div[2]/div/div/a/h4\" ) ) . getText ( ) , popularAsset2 , \"Popularity ▁ Sort ▁ failed\" ) ; } * / ", "comments": ["TODO fix this part ones the UI is fixed for sort by popularity", " @Test(groups = \"wso2.es.store\", description = \"Testing sorting on popularity\")"], "method name": "test Store Sort On Popularity"}
{"id": 1257, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"sortDropdown\" ) ) ) ; driver . findElement ( By . cssSelector ( \"#sortDropdown ▁ > ▁ img\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"#ul-sort-assets ▁ li:nth-child(2) ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) ) ; assertEquals ( assetName , driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:first-child ▁ a.ast-name\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; assertEquals ( WSO2_JIRA , driver . findElement ( By . cssSelector ( \".assets-container ▁ section ▁ div.ctrl-wr-asset:nth-child(2) ▁ a.ast-name\" ) ) . getText ( ) , \"Alphabetical ▁ Sort ▁ failed\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing sorting on alphabetical order\")"], "method name": "test Store Sort On Alphabetical Order"}
{"id": 1259, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"advanced-search-btn\" ) ) ) ; driver . findElement ( By . id ( \"advanced-search-btn\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"search-button2\" ) ) ) ; driver . findElement ( By . id ( \"search-button2\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.ctrl-wr-asset\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"div.ctrl-wr-asset\" ) ) , \"Google ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category Google\")"], "method name": "test Category Google"}
{"id": 1262, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/lifecycle\" ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset Override Renderer Test Case"}
{"id": 1260, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"advanced-search-btn\" ) ) ) ; driver . findElement ( By . id ( \"advanced-search-btn\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"search-button2\" ) ) ) ; new Select ( driver . findElement ( By . id ( \"overview_category\" ) ) ) . selectByVisibleText ( \"WSO2\" ) ; driver . findElement ( By . id ( \"search-button2\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.ctrl-wr-asset\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"div.ctrl-wr-asset\" ) ) , \"WSO2 ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category WSO2\")"], "method name": "test Category WSO2"}
{"id": 1264, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/assets/servicex/new_page\" ) ; assertTrue ( isElementPresent ( By . id ( \"servicexNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Asset New Page Test Case"}
{"id": 1263, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + PUBLISHER_URL ) ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( 10 , TimeUnit . SECONDS ) ; driver . findElement ( By . id ( \"popoverExampleTwo\" ) ) . click ( ) ; assertEquals ( driver . findElement ( By . linkText ( ASSET_TYPE ) ) . getText ( ) , ASSET_TYPE ) ; driver . findElement ( By . linkText ( ASSET_TYPE ) ) . click ( ) ; assertTrue ( isElementPresent ( driver , By . linkText ( ASSET_TYPE_PLURAL ) ) ) ; assertTrue ( isElementPresent ( driver , By . xpath ( \" // h2[@class='app-title']\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Testing adding a new asset type in extensions\")"], "method name": "test ES Publisher Added Asset Test Case"}
{"id": 1265, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/servicex/list\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"Overriding list page via extensions test case\")"], "method name": "test ES Store Asset Override Existing Page Test Case"}
{"id": 1267, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/servicex/list\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Asset Override Existing Page Test Case"}
{"id": 1261, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"advanced-search-btn\" ) ) ) ; driver . findElement ( By . id ( \"advanced-search-btn\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . id ( \"search-button2\" ) ) ) ; new Select ( driver . findElement ( By . id ( \"overview_category\" ) ) ) . selectByVisibleText ( \"Templates\" ) ; driver . findElement ( By . id ( \"search-button2\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \"div.ctrl-wr-asset\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \"div.ctrl-wr-asset\" ) ) , \"WSO2 ▁ Category ▁ wrong\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Testing category template\")"], "method name": "test Category Template"}
{"id": 1266, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1268, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/servicex/new_page\" ) ; assertTrue ( isElementPresent ( driver , By . id ( \"assetNewPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es.extensions\", description = \"New page added via extensions test case\")"], "method name": "test ES Store Asset New Page Test Case"}
{"id": 1270, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . xpath ( \" // div[@id='container-search']/div/div/div/div/a[3]/li\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . id ( \"assetListingPageH1\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store Added Asset Test Case"}
{"id": 1271, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + STORE_GADGET_LIST_PAGE ) ; wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . cssSelector ( \".ctrl-wr-asset\" ) ) ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \".app-logo\" ) ) , \"Home ▁ Page ▁ error: ▁ Logo ▁ missing\" ) ; assertTrue ( isElementPresent ( driver , By . cssSelector ( \".ctrl-wr-asset\" ) ) , \"Home ▁ Page ▁ error: ▁ Gadgets ▁ list ▁ is ▁ not ▁ populated\" ) ; } ", "comments": ["Test(groups = \"wso2.es.store\", description = \"Test if the asset listing page loads when using /t/domain as anon \" +"], "method name": "test Anon Asset Listing Page"}
{"id": 1269, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/assets/gadget/list\" ) ; driver . findElement ( By . cssSelector ( \"i.icon-cog\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"h4\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"User ▁ Reviews\" ) ) . click ( ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( \"socialIfr\" ) ) ) ; assertEquals ( \"Please ▁ Sign ▁ in ▁ to ▁ add ▁ a ▁ Review\" , driver . findElement ( By . cssSelector ( \"div.com-guest\" ) ) . getText ( ) ) ; assertEquals ( \"Be ▁ the ▁ first ▁ one ▁ to ▁ review!\" , driver . findElement ( By . cssSelector ( \"p.com-first-review\" ) ) . getText ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } ", "comments": ["Test(groups = \"wso2.es.store.ratings\", description = \"Test Start Add Rating\")"], "method name": "test Store Before Add Ratings"}
{"id": 1273, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1274, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = waitFor ( alertToBePresent ( driver ) ) ; UserAndPassword user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; assertEquals ( \"authorized\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 1275, "website": "bigquery", "code": " private void function ( boolean needConsent ) { WebDriver webdriver = getWebDriver ( ) ; String responseType = \"token\" ; String clientId = \"it-test-client-grant\" ; String redirectUri = \"http: // localhost:8080/fourOhFour\" ; String url = String . format ( \"%s/oauth2/authorize?response_type=%s&client_id=%s&redirect_uri=%s\" , baseUrl ( ) , responseType , clientId , redirectUri ) ; webdriver . get ( url ) ; login ( webdriver , needConsent ) ; URI responseURI = URI . create ( webdriver . getCurrentUrl ( ) ) ; assertThat ( responseURI . getFragment ( ) , containsString ( \"access_token=\" ) ) ; assertThat ( responseURI . getPath ( ) , equalTo ( \"/fourOhFour\" ) ) ; assertThat ( responseURI . getHost ( ) , equalTo ( \"localhost\" ) ) ; } ", "comments": [], "method name": "perform Implicit Grant"}
{"id": 1272, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1276, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1278, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } ", "comments": ["Test"], "method name": "can Navigate To A Given Url"}
{"id": 1277, "website": "bigquery", "code": " public void function ( By by , int pollCount ) throws InterruptedException { int count = 0 ; while ( ! isElementPresent ( by ) && count < pollCount ) { Thread . sleep ( POLL_SLEEP_INTERVAL ) ; String url = driver . getCurrentUrl ( ) ; driver . get ( url ) ; count ++ ; } } ", "comments": [" This method will keep refreshing/reloading the current url for a given number of poll-count", " until a given element is available", " @param by        Element that is expected to be present", " @param pollCount Number of time page need to be reloaded into webDriver"], "method name": "find Element Poll"}
{"id": 1279, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; checking ( new Expectations ( ) { { one ( webdriver ) . get ( url ) ; } } ) ; context . goTo ( url ) ; } ", "comments": ["Test"], "method name": "can Navigate To A Given Url"}
{"id": 1280, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1282, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1281, "website": "bigquery", "code": " public void function ( ) { WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({ANDROID, IPHONE, OPERA, OPERA_MOBILE, MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1284, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher New Global Page Test Case"}
{"id": 1285, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1286, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1287, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1288, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1289, "website": "bigquery", "code": " public function ( WebDriver driver , String url ) { super ( driver ) ; driver . get ( url ) ; } ", "comments": [], "method name": "Reset Password Page"}
{"id": 1290, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/store/pages/servicex_global\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetNewGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Store New Global Page Test Case"}
{"id": 1291, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/pages/splash\" ) ; assertTrue ( isElementPresent ( By . id ( \"assetOverridenGlobalPage\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Overriden Global Page Test Case"}
{"id": 1292, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1295, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test", "Ignore(value = {IE},"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1294, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1283, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore({IE, HTMLUNIT})"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1296, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1297, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1293, "website": "bigquery", "code": " public void function ( ) throws Exception { driver . get ( baseUrl + \"/publisher/\" ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) ) ; driver . findElement ( By . cssSelector ( \"button.btn.dropdown-toggle\" ) ) . click ( ) ; driver . findElement ( By . linkText ( \"Service\" ) ) . click ( ) ; assertTrue ( isElementPresent ( By . cssSelector ( \"span.publisherTitle\" ) ) ) ; } ", "comments": ["Test(groups = \"wso2.es\", description = \"\")"], "method name": "test ES Publisher Added Asset Test Case"}
{"id": 1299, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; WebElement element = wait . until ( presenceOfElementLocated ( By . tagName ( \"h1\" ) ) ) ; assertEquals ( \"authorized\" , element . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 1300, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1302, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1301, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1304, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1303, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE}, reason = \"Chrome: failed\")", "SwitchToTopAfterTest"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1306, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1307, "website": "bigquery", "code": " public void function ( ) throws Exception { User user = makeTestUser ( ) ; String jsonUser = UserCookieEncoder . toCookieValue ( user ) ; driver . get ( baseUrl + \"blank.html\" ) ; driver . manage ( ) . addCookie ( new Cookie ( UserCookieEncoder . USER_COOKIE_NAME , jsonUser , \"/\" , new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 24 ) ) ) ; driver . get ( baseUrl ) ; waitForDefaultPerspective ( ) ; driver . get ( baseUrl + \"#\" + SecurityContextInfoScreen . class . getName ( ) ) ; WebElement userLabel = driver . findElement ( By . id ( \"gwt-debug-SecurityStatusScreen-userLabel\" ) ) ; assertEquals ( user . getIdentifier ( ) , userLabel . getText ( ) ) ; WebElement rolesLabel = driver . findElement ( By . id ( \"gwt-debug-SecurityStatusScreen-rolesLabel\" ) ) ; assertEquals ( user . getRoles ( ) . toString ( ) , rolesLabel . getText ( ) ) ; WebElement groupsLabel = driver . findElement ( By . id ( \"gwt-debug-SecurityStatusScreen-groupsLabel\" ) ) ; assertEquals ( user . getGroups ( ) . toString ( ) , groupsLabel . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Get Info From Security Context"}
{"id": 1308, "website": "bigquery", "code": " public void function ( ) throws Exception { User user = makeTestUser ( ) ; String jsonUser = UserCookieEncoder . toCookieValue ( user ) ; driver . get ( baseUrl + \"blank.html\" ) ; driver . manage ( ) . addCookie ( new Cookie ( UserCookieEncoder . USER_COOKIE_NAME , jsonUser , \"/\" , new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 24 ) ) ) ; driver . get ( baseUrl ) ; waitForDefaultPerspective ( ) ; driver . get ( baseUrl + \"#\" + InjectedUserScreen . class . getName ( ) ) ; WebElement userLabel = driver . findElement ( By . id ( \"gwt-debug-SecurityStatusScreen-userLabel\" ) ) ; assertEquals ( user . getIdentifier ( ) , userLabel . getText ( ) ) ; WebElement rolesLabel = driver . findElement ( By . id ( \"gwt-debug-SecurityStatusScreen-rolesLabel\" ) ) ; assertEquals ( user . getRoles ( ) . toString ( ) , rolesLabel . getText ( ) ) ; WebElement groupsLabel = driver . findElement ( By . id ( \"gwt-debug-SecurityStatusScreen-groupsLabel\" ) ) ; assertEquals ( user . getGroups ( ) . toString ( ) , groupsLabel . getText ( ) ) ; } ", "comments": ["Test"], "method name": "test Get Info From Injected User"}
{"id": 1309, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test"], "method name": "delete All Cookies"}
{"id": 1298, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1310, "website": "bigquery", "code": " public void function ( ) { proxy . newHar ( url . toString ( ) ) ; WebDriver driver = getDriver ( ) ; driver . navigate ( ) . to ( url ) ; JsonObject har = proxy . har ( ) ; assertNotNull ( har ) ; String firstUrlLoaded = har . getAsJsonObject ( \"log\" ) . getAsJsonArray ( \"entries\" ) . get ( 0 ) . getAsJsonObject ( ) . getAsJsonObject ( \"request\" ) . getAsJsonPrimitive ( \"url\" ) . getAsString ( ) ; assertEquals ( url . toString ( ) , firstUrlLoaded ) ; } ", "comments": ["Test"], "method name": "requests Processed By Proxy"}
{"id": 1311, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1313, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1314, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1305, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1316, "website": "bigquery", "code": " private List < UIData > function ( ) { List < UIData > uis = new ArrayList < UIData > ( ) ; getDriver ( ) . get ( jspUrl ) ; List < WebElement > rows = getDriver ( ) . findElements ( By . xpath ( \" // tr[@class='uirow']\" ) ) ; for ( WebElement row : rows ) { UIData data = new UIData ( ) ; List < WebElement > tds = row . findElements ( By . xpath ( \"./td\" ) ) ; data . serviceName = tds . get ( 0 ) . getText ( ) ; data . uiId = Integer . parseInt ( tds . get ( 2 ) . getText ( ) ) ; uis . add ( data ) ; } return uis ; } ", "comments": [], "method name": "get U Is"}
{"id": 1315, "website": "bigquery", "code": " public void function ( ) { assertUICount ( 0 ) ; getDriver ( ) . get ( integrationUrl ) ; assertUICount ( 1 ) ; getDriver ( ) . get ( integrationUrl ) ; List < UIData > twoUIs = getUIs ( ) ; assertEquals ( 2 , twoUIs . size ( ) ) ; assertNotEquals ( twoUIs . get ( 0 ) . uiId , twoUIs . get ( 1 ) . uiId ) ; assertEquals ( twoUIs . get ( 0 ) . serviceName , twoUIs . get ( 1 ) . serviceName ) ; getDriver ( ) . get ( appRunnerTestUrl ) ; List < UIData > threeUIs = getUIs ( ) ; assertEquals ( 3 , threeUIs . size ( ) ) ; Set < String > serviceNames = new HashSet < String > ( ) ; Set < Integer > uiIds = new HashSet < Integer > ( ) ; for ( UIData uiData : threeUIs ) { serviceNames . add ( uiData . serviceName ) ; uiIds . add ( uiData . uiId ) ; } assertGreaterOrEqual ( \"There ▁ should ▁ be ▁ at ▁ least ▁ two ▁ unique ▁ service ▁ names\" , serviceNames . size ( ) , 2 ) ; assertGreaterOrEqual ( \"There ▁ should ▁ be ▁ at ▁ least ▁ two ▁ unique ▁ ui ▁ ids\" , uiIds . size ( ) , 2 ) ; } ", "comments": ["Test"], "method name": "list Vaadin Sessions"}
{"id": 1318, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; UserAndPassword user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; assertEquals ( \"authorized\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 1319, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1320, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1321, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1322, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1312, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test", "Ignore(MARIONETTE)"], "method name": "delete All Cookies"}
{"id": 1323, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1324, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1325, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } ", "comments": ["Test"], "method name": "can Navigate To A Given Url"}
{"id": 1326, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } ", "comments": ["Test"], "method name": "can Navigate To A Given Url"}
{"id": 1328, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1329, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE, HTMLUNIT},"], "method name": "handle Form With Javascript Action"}
{"id": 1330, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"form_handling_js_submit.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"theForm\" ) ) ; element . submit ( ) ; Alert alert = driver . switchTo ( ) . alert ( ) ; String text = alert . getText ( ) ; alert . accept ( ) ; assertEquals ( \"Tasty ▁ cheese\" , text ) ; } ", "comments": ["Test", "Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},"], "method name": "handle Form With Javascript Action"}
{"id": 1331, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"not_existed_page.html\" ) ; driver . get ( url ) ; assertEquals ( url , driver . getCurrentUrl ( ) ) ; } ", "comments": ["Test"], "method name": "test Should Return URL On Not Existed Page"}
{"id": 1333, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds.html\" ) ; driver . get ( url ) ; WebElement button = driver . findElement ( By . id ( \"button\" ) ) ; try { button . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": [" See http://code.google.com/p/selenium/issues/attachmentText?id=2700", "Test"], "method name": "test Should Be Able To Click On An Element In The Viewport"}
{"id": 1332, "website": "bigquery", "code": " public void function ( ) { assumeTrue ( isLocal ( ) ) ; DesiredCapabilities requiredCaps = new DesiredCapabilities ( ) ; requiredCaps . setCapability ( ACCEPT_SSL_CERTS , false ) ; WebDriverBuilder builder = new WebDriverBuilder ( ) . setRequiredCapabilities ( requiredCaps ) ; localDriver = builder . get ( ) ; String url = appServer . whereIsSecure ( \"simpleTest.html\" ) ; localDriver . get ( url ) ; assertThat ( localDriver . getTitle ( ) , not ( \"Hello ▁ WebDriver\" ) ) ; } ", "comments": ["Ignore({CHROME, IE, PHANTOMJS, SAFARI, MARIONETTE})", "NotYetImplemented(HTMLUNIT)", "Test"], "method name": "should Be Able To Disable Accept Of Insecure Ssl Certs With Required Capability"}
{"id": 1317, "website": "bigquery", "code": " public void function ( ) throws Exception { assumeTrue ( domainHelper . checkHasValidAlternateHostname ( ) ) ; Cookie cookie1 = new Cookie . Builder ( \"fish1\" , \"cod\" ) . domain ( appServer . getHostName ( ) ) . build ( ) ; Cookie cookie2 = new Cookie . Builder ( \"fish2\" , \"tune\" ) . domain ( appServer . getAlternateHostName ( ) ) . build ( ) ; String url1 = domainHelper . getUrlForFirstValidHostname ( \"/common\" ) ; String url2 = domainHelper . getUrlForSecondValidHostname ( \"/common\" ) ; WebDriver . Options options = driver . manage ( ) ; options . addCookie ( cookie1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; options . addCookie ( cookie2 ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; driver . get ( url1 ) ; assertCookieIsPresentWithName ( cookie1 . getName ( ) ) ; assertCookieIsNotPresentWithName ( cookie2 . getName ( ) ) ; options . deleteAllCookies ( ) ; assertCookieIsNotPresentWithName ( cookie1 . getName ( ) ) ; driver . get ( url2 ) ; assertCookieIsPresentWithName ( cookie2 . getName ( ) ) ; } ", "comments": ["Test"], "method name": "delete All Cookies"}
{"id": 1334, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_too_big.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {MARIONETTE})"], "method name": "test Should Be Able To Click On An Element Greater Than Two Viewports"}
{"id": 1335, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( isFirefox ( driver ) && isNativeEventsEnabled ( driver ) ) ; String url = appServer . whereIs ( \"click_too_big_in_frame.html\" ) ; driver . get ( url ) ; WebElement frame = driver . findElement ( By . id ( \"iframe1\" ) ) ; driver . switchTo ( ) . frame ( frame ) ; WebElement element = driver . findElement ( By . id ( \"click\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test", "Ignore(value = {CHROME, MARIONETTE},"], "method name": "test Should Be Able To Click On An Element In Frame Greater Than Two Viewports"}
{"id": 1337, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScroll.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer"}
{"id": 1336, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_rtl.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"ar_link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"clicks\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On RTL Language Link"}
{"id": 1338, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"fixedFooterNoScrollQuirksMode.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"link\" ) ) ; element . click ( ) ; wait . until ( titleIs ( \"XHTML ▁ Test ▁ Page\" ) ) ; } ", "comments": ["Test"], "method name": "test Should Be Able To Click On Link In Absolutely Positioned Footer In Quirks Mode"}
{"id": 1339, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1340, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1342, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1341, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test", "Ignore({MARIONETTE})"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1344, "website": "bigquery", "code": " public void function ( ) { String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIs ( \"encoding\" ) ; driver . get ( url ) ; String text = driver . findElement ( By . tagName ( \"body\" ) ) . getText ( ) ; assertEquals ( shalom , text ) ; } ", "comments": ["NeedsFreshDriver", "Test", "Ignore(MARIONETTE)"], "method name": "test Should Be Able To Return The Text In A Page"}
{"id": 1345, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"visibility-css.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"suggest\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } ", "comments": ["Test"], "method name": "parent Node Visible When All Children Are Absolutely Positioned And Overflow Is Hidden"}
{"id": 1343, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1347, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"singleHidden\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "should Show Element Not Visible With Hidden Attribute"}
{"id": 1348, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"hidden.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . id ( \"child\" ) ) ; assertFalse ( element . isDisplayed ( ) ) ; } ", "comments": ["Test", "Ignore(IE)", "NotYetImplemented(HTMLUNIT)"], "method name": "test Should Show Element Not Visible When Parent Element Has Hidden Attribute"}
{"id": 1346, "website": "bigquery", "code": " public void function ( ) { assumeFalse ( TestUtilities . getEffectivePlatform ( driver ) . is ( ANDROID ) ) ; WebDriver . Window window = driver . manage ( ) . window ( ) ; Dimension originalSize = window . getSize ( ) ; try { window . setSize ( new Dimension ( 1024 , 500 ) ) ; String url = appServer . whereIs ( \"overflow-body.html\" ) ; driver . get ( url ) ; WebElement element = driver . findElement ( By . name ( \"resultsFrame\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; } finally { window . setSize ( originalSize ) ; } } ", "comments": ["Test"], "method name": "too Small A Window With Overflow Hidden Is Not A Problem"}
{"id": 1350, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"click_out_of_bounds_overflow.html\" ) ; driver . get ( url ) ; WebElement link = driver . findElement ( By . id ( \"link\" ) ) ; try { link . click ( ) ; } catch ( MoveTargetOutOfBoundsException e ) { fail ( \"Should ▁ not ▁ be ▁ out ▁ of ▁ bounds: ▁ \" + e . getMessage ( ) ) ; } } ", "comments": ["Test"], "method name": "test Should Scroll To Click On An Element Hidden By Overflow"}
{"id": 1349, "website": "bigquery", "code": " private WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } FirefoxProfile profile = new FirefoxProfile ( ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { } } String url ; if ( System . getProperty ( \"url\" ) != null ) { url = System . getProperty ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
{"id": 1352, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1353, "website": "bigquery", "code": " public void function ( ) { String url = appServer . whereIs ( \"basicAuth\" ) ; driver . get ( url ) ; Alert alert = wait . until ( alertIsPresent ( ) ) ; Credentials user = new UserAndPassword ( \"test\" , \"test\" ) ; alert . authenticateUsing ( user ) ; assertEquals ( \"authorized\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "comments": ["Test"], "method name": "can Authenticate Using Basic Authentication"}
{"id": 1354, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } ", "comments": ["Test"], "method name": "can Navigate To A Given Url"}
{"id": 1355, "website": "bigquery", "code": " public void function ( ) throws Exception { final String url = \"http: // www.example.com\" ; context . goTo ( url ) ; verify ( webdriver ) . get ( url ) ; } ", "comments": ["Test"], "method name": "can Navigate To A Given Url"}
{"id": 1356, "website": "bigquery", "code": " public void function ( ) { WebDriver d = getDriver ( ) ; d . get ( url ) ; Set < Cookie > newSessionCookies = d . manage ( ) . getCookies ( ) ; for ( Cookie c : sessionCookies ) { assertFalse ( newSessionCookies . contains ( c ) ) ; } for ( Cookie c : newSessionCookies ) { assertFalse ( sessionCookies . contains ( c ) ) ; } } ", "comments": ["Test"], "method name": "should Create A Separate Session With Every New Driver Instance"}
{"id": 1327, "website": "bigquery", "code": " public void function ( ) { FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setAcceptUntrustedCertificates ( false ) ; String url = GlobalTestEnvironment . get ( ) . getAppServer ( ) . whereIsSecure ( \"simpleTest.html\" ) ; WebDriver secondDriver = null ; try { secondDriver = newFirefoxDriver ( profile ) ; secondDriver . get ( url ) ; String gotTitle = secondDriver . getTitle ( ) ; assertFalse ( \"Hello ▁ WebDriver\" . equals ( gotTitle ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( \"Creating ▁ driver ▁ with ▁ untrusted ▁ certificates ▁ set ▁ to ▁ false ▁ failed.\" ) ; } finally { if ( secondDriver != null ) { secondDriver . quit ( ) ; } } } ", "comments": ["Test"], "method name": "can Block Invalid Ssl Certificates"}
{"id": 1351, "website": "bigquery", "code": " public static WebDriver function ( ) { WebDriver driver = null ; if ( driver == null ) { try { FirefoxBinary ffox = new FirefoxBinary ( ) ; if ( \"true\" . equals ( System . getenv ( \"TRAVIS\" ) ) ) { ffox . setEnvironmentProperty ( \"DISPLAY\" , \":99\" ) ; } int firefoxVersion = WebDriverManager . getFirefoxVersion ( ) ; LOG . info ( \"Firefox ▁ version ▁ \" + firefoxVersion + \" ▁ detected\" ) ; downLoadsDir = FileUtils . getTempDirectory ( ) . toString ( ) ; String tempPath = downLoadsDir + \"/firebug/\" ; downloadFireBug ( firefoxVersion , tempPath ) ; final String firebugPath = tempPath + \"firebug.xpi\" ; final String firepathPath = tempPath + \"firepath.xpi\" ; FirefoxProfile profile = new FirefoxProfile ( ) ; profile . setPreference ( \"browser.download.folderList\" , 2 ) ; profile . setPreference ( \"browser.download.dir\" , downLoadsDir ) ; profile . setPreference ( \"browser.helperApps.alwaysAsk.force\" , false ) ; profile . setPreference ( \"browser.download.manager.showWhenStarting\" , false ) ; profile . setPreference ( \"browser.download.manager.showAlertOnComplete\" , false ) ; profile . setPreference ( \"browser.download.manager.closeWhenDone\" , true ) ; profile . setPreference ( \"app.update.auto\" , false ) ; profile . setPreference ( \"app.update.enabled\" , false ) ; profile . setPreference ( \"dom.max_script_run_time\" , 0 ) ; profile . setPreference ( \"dom.max_chrome_script_run_time\" , 0 ) ; profile . setPreference ( \"browser.helperApps.neverAsk.saveToDisk\" , \"application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain\" ) ; profile . setPreference ( \"network.proxy.type\" , 0 ) ; profile . addExtension ( new File ( firebugPath ) ) ; profile . addExtension ( new File ( firepathPath ) ) ; driver = new FirefoxDriver ( ffox , profile ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ FireFox ▁ Driver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new ChromeDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ ChromeDriver ▁ \" , e ) ; } } if ( driver == null ) { try { driver = new SafariDriver ( ) ; } catch ( Exception e ) { LOG . error ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ SafariDriver ▁ \" , e ) ; } } String url ; if ( System . getenv ( \"url\" ) != null ) { url = System . getenv ( \"url\" ) ; } else { url = \"http: // localhost:8080\" ; } long start = System . currentTimeMillis ( ) ; boolean loaded = false ; driver . manage ( ) . timeouts ( ) . implicitlyWait ( AbstractZeppelinIT . MAX_IMPLICIT_WAIT , TimeUnit . SECONDS ) ; driver . get ( url ) ; while ( System . currentTimeMillis ( ) - start < 60 * 1000 ) { try { ( new WebDriverWait ( driver , 5 ) ) . until ( new ExpectedCondition < Boolean > ( ) { @ Override public Boolean apply ( WebDriver d ) { return d . findElement ( By . partialLinkText ( \"Create ▁ new ▁ note\" ) ) . isDisplayed ( ) ; } } ) ; loaded = true ; break ; } catch ( TimeoutException e ) { LOG . info ( \"Exception ▁ in ▁ WebDriverManager ▁ while ▁ WebDriverWait ▁ \" , e ) ; driver . navigate ( ) . to ( url ) ; } } if ( loaded == false ) { fail ( ) ; } return driver ; } ", "comments": [], "method name": "get Web Driver"}
