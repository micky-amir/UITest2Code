{
  "id": 355,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='sign ▁ up']\" ) ) . isDisplayed ( ) ) ; List < String > inputNames = new ArrayList < > ( Arrays . asList ( \"firstName\" , \"lastName\" , \"email\" , \"password\" ) ) ; for ( String name : inputNames ) { assertTrue ( driver . findElement ( By . cssSelector ( \"[name='\" + name + \"']\" ) ) . isDisplayed ( ) ) ; } } ",
  "Test Name": "Home Page - SignUp - Chrome",
  "Test Description": "The goal is to verify Signup functionality on Chrome",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. Press the man icon on top right corner 2.Verify that user is routed to fllowing url \"https://www.dictionary.com/sign-up?redirect=https://www.thesaurus.com/' 3.Verify that a Sign Up page is displayed User is routed to to a Sign Up page is displayed, including sections for first and last name, email and password"
}
{
  "id": 356,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[@data-testid='wotd']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( element . findElement ( By . tagName ( \"a\" ) ) . isDisplayed ( ) ) ; String date = element . findElement ( By . cssSelector ( \".colored-card ▁ div:nth-child(3) ▁ div:nth-child(2)\" ) ) . getText ( ) ; LocalDate currentDate = LocalDate . now ( ) ; String expectedDate = currentDate . format ( DateTimeFormatter . ofPattern ( \"MMM ▁ dd, ▁ yyyy\" , Locale . ENGLISH ) ) . toUpperCase ( ) ; assertEquals ( expectedDate , date ) ; } ",
  "Test Name": "HomePage - Check date",
  "Test Description": "The goal is to verify that current date is displayed under the 'Word of the day ' section",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down till Word of the day section on Thesaurus home page 2. Verify todays word is displayed and underneath a date is displayed Note that todays word will be difeent everyday 3. Verify that Todays dateand year is displayed in the following format 'Sep 01, 2021' Date format is MMM DD, YYYY"
}
{
  "id": 357,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='BROWSE ▁ THESAURUS.COM']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; List < WebElement > elementsList = element . findElements ( By . xpath ( \". // ancestor::section/descendant::ul[@data-linkid]/li/a\" ) ) ; for ( int i = 0 ; i < elementsList . size ( ) ; i ++ ) { String expected = ( char ) ( i + 64 ) + String . valueOf ( ( char ) ( i + 96 ) ) ; if ( i == 0 ) expected = \"#\" ; assertEquals ( expected , elementsList . get ( i ) . getText ( ) ) ; } } ",
  "Test Name": "HomePage - Full Upercase and lower case alphabets are displayed",
  "Test Description": "The goal is to verify that Full Upercase and lower case alphabets are displayed",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down till BROWSE THESAURUS.COM section on Thesaurus home page 2. Verify that  upercase and lower case alphabets are displayed preceeded by a # sign in the following format Aa Bb Cc…..Zz Upercase and lower case alphabets are displayed preceeded by a # sign in the following format Aa Bb Cc…..Zz"
}
{
  "id": 358,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='BROWSE ▁ THESAURUS.COM']/ancestor::section\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element . findElement ( By . xpath ( \". // descendant::a[text()='#']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) . contains ( \"NUMERALS ▁ & ▁ DIACRITICS\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='0']\" ) ) . click ( ) ; assertEquals ( \"0\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertEquals ( \"0\" , driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) . getAttribute ( \"value\" ) ) ; } ",
  "Test Name": "HomePage - List of numerals",
  "Test Description": "The goal is to verify the presence of all numerals when # option is selected",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down till BROWSE THESAURUS.COM section on Thesaurus home page 2. Select # option from the list of alphabets Verify yhe list contains NUMERALS & DIACRITICS 3. User selects 0. 4. Verify that Synonyms for 0 are displayed Search bar shows 0"
}
{
  "id": 359,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; assertEquals ( \"DICTIONARY.COM\" , driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . getText ( ) ) ; assertEquals ( \"THESAURUS.COM\" , driver . findElement ( By . id ( \"thesaurus-nav-tab\" ) ) . getText ( ) ) ; List < WebElement > navTitleElements = driver . findElements ( By . cssSelector ( \"[aria-label='Site ▁ Navigation'] ▁ ul ▁ > ▁ li[data-current-active] ▁ > ▁ button\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"MEANINGS\" , \"GAMES\" , \"LEARN\" , \"WRITING\" , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "HomePage - Top pannel",
  "Test Description": "The goal is to verify the presence of 7 elements in top pannel",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. Verify that  the following elements are present in top pannel on Thesaurus.com home page\n- Dictionary.com\n- Thesaurus.com\n- Meanings\n- Games\n- Learn\n- Writing\n- Word of the day All 7 elemnts are present on thesaurus home page pannel"
}
{
  "id": 360,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // ../descendant::ul/../..\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > navTitleElements = element . findElements ( By . xpath ( \". // ../descendant::ul/li/a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "HomePage - Top pannel- Meanings",
  "Test Description": "The goal is to verify the presence of pop up under meanings section",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Meanings option  from top pannel 3. Verify a pop up panel is displayed with the following options\n-Emoji\n-Slang\n-Acronyms\n-Pop Culture\n-Memes\n-Gender And Sexuality\n-Mixed-Up Meanings All options are displayed"
}
{
  "id": 361,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // ../descendant::ul/../..\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > navTitleElements = element . findElements ( By . xpath ( \". // ../descendant::ul/li/a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "HomePage - Top pannel- Games",
  "Test Description": "The goal is to verify the presence of pop up under games section",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Games option  from top pannel on home page 3. Verify a pop up panel is displayed with the following options\n- Word Puzzle\n-Quizzes\n-Crossword Solver\n-Scrabble Word Finder\n-Words With Friends Cheat\n-Daily Crossword Puzzle All options are displayed"
}
{
  "id": 362,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='LEARN']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // ../descendant::ul/../..\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > navTitleElements = element . findElements ( By . xpath ( \". // ../descendant::ul/li/a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Online ▁ Tutors\" , \"New ▁ Words\" , \"Trending ▁ Words\" , \"All ▁ About ▁ English\" , \"Science ▁ And ▁ Technology\" , \"Literature ▁ And ▁ Arts\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "HomePage - Top pannel- Learn",
  "Test Description": "The goal is to verify the presence of pop up under Learn section",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Learn option  from top pannel on home page 3. Verify a pop up panel is displayed with the following options\n- Word Lists\n-Online Tutors\n-New Words\n-Trending Words\n-All About English\n-Science And Technology\n-Literature And Arts"
}
{
  "id": 363,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='WRITING']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // ../descendant::ul/../..\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > navTitleElements = element . findElements ( By . xpath ( \". // ../descendant::ul/li/a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Grammar ▁ Coach\" , \"Writing ▁ Prompts\" , \"Grammar ▁ 101\" , \"Writing ▁ Tips\" , \"Ways ▁ To ▁ Say ▁ It ▁ Better\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "HomePage - Top pannel- Writing",
  "Test Description": "The goal is to verify the presence of pop up under Writing section",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Writing option  from top pannel on home page 3. Verify a pop up panel is displayed with the following options\n- Grammar Coach\n-Writing Prompts\n-Grammar 101\n-Writing Tips\n-Ways To Say It Better"
}
{
  "id": 364,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // ../descendant::ul/../..\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > navTitleElements = element . findElements ( By . xpath ( \". // ../descendant::ul/li/a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "HomePage - Top pannel- Word of the day",
  "Test Description": "The goal is to verify the presence of pop up under Word of the day",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Word of the day option  from top pannel on home page 3. Verify a pop up panel is displayed with the following options\n-Word Of The Day\n-Synonym Of The Day\n-Word Of The Year"
}
{
  "id": 365,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"active-synonyms\" ) ) ; element . click ( ) ; assertNotEquals ( \"max-height: ▁ 0px;\" , element . findElement ( By . xpath ( \" // *[@id='definitions-filter']/..\" ) ) . getAttribute ( \"style\" ) ) ; assertTrue ( element . findElement ( By . xpath ( \" // *[text()='DEFINITIONS']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "HomePage - Search bar drop down",
  "Test Description": "The aim is to verify the presence of drop down Synonyms on side of search bar",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects the v button against Synonyms 3. Verify thatdrop down expands 4. Verify that Definitions is present in drop-down Definitions is present"
}
{
  "id": 366,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='MOST ▁ SEARCHED ▁ WORDS']/ancestor::section/following-sibling::*\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; WebElement inputElement = element . findElement ( By . tagName ( \"input\" ) ) ; assertEquals ( \"Enter ▁ your ▁ email\" , inputElement . getAttribute ( \"aria-label\" ) ) ; inputElement . sendKeys ( \"testmanqa1@gmail.com\" ) ; actions . moveToElement ( element . findElement ( By . xpath ( \"./following-sibling::*\" ) ) ) . perform ( ) ; actions . moveToElement ( element . findElement ( By . tagName ( \"button\" ) ) ) . click ( ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"You've ▁ been ▁ subscribed. ▁ New ▁ words ▁ are ▁ on ▁ the ▁ way!\" , wait . until ( ExpectedConditions . presenceOfNestedElementLocatedBy ( element , By . xpath ( \" // *[contains(text(), ▁ 'subscribed')]\" ) ) ) . getText ( ) ) ; } ",
  "Test Name": "HomePage - Get more via Email",
  "Test Description": "The aim is to verify that user can subscribe to ThESAURUS.COM",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down under most searched words section 3. Verify that user is asked to enter valid email id to subscribe 4. User enters valid email id 'testmanqa1@gmail.com'and press I'M IN option against text field 5. Verify that the following text is displayed \"You've been subscribed.New words are on the way!"
}
{
  "id": 367,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='MOST ▁ SEARCHED ▁ WORDS']/ancestor::section/following-sibling::*[2]\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h2[text()='GRAMMAR ▁ & ▁ WRITING ▁ TIPS']\" ) ) ) ) ; List < WebElement > linkElements = driver . findElements ( By . cssSelector ( \"[data-testid='thumbnail-card'] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ways-to-say\" , \"plagiarism\" , \"gerund\" ) ) ; for ( int i = 0 ; i < linkElements . size ( ) ; i ++ ) { assertTrue ( linkElements . get ( i ) . getAttribute ( \"href\" ) . contains ( expectedTitles . get ( i ) ) ) ; } } ",
  "Test Name": "HomePage - Grammar & writing tips",
  "Test Description": "The aim is to verify that further three sections are displayed under Grammar & writing tips",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down under most searched words section 3.Verify that Grammar and writing tips section is displayed 4. Verify that further three sections are displayed\n-Ways To Say\n-Plagiarism\n-Gerunds Options are displayed \n-Ways To Say\n-Plagiarism\n-Gerunds"
}
{
  "id": 368,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"acrobat\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ acrobat\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#meanings ▁ [data-testid='word-grid-container'] ▁ li\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "HomePage - Search bar - Synonym ",
  "Test Description": "The aim is to verify that search bar can be used to search for Synonyms",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User writes word 'acrobat' in search bar and press magnifying glass icon 3. Veify that user is presented with word 'acrobat' synonym under the header SYNONYMS FOR acrobat"
}
{
  "id": 369,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"acrobat\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ acrobat\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#meanings ▁ [data-testid='word-grid-container'] ▁ li\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[aria-label='save ▁ word']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='sign ▁ up']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "HomePage - Synonym - Star Rating",
  "Test Description": "The aim is to verify that synonym searched can not be starred if not loggedIN",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User writes word 'acrobat' in search bar and press magnifying glass icon 3. Veify that user is presented with word 'acrobat' synonym under the header SYNONYMS FOR acrobat! 4. User press star icon  5. User is redirected to signup page as user is not logged in"
}
{
  "id": 370,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"active-synonyms\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \" // *[text()='DEFINITIONS']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"active-definitions\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"acrobat\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"dictionary-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; assertEquals ( \"a ▁ skilled ▁ performer ▁ of ▁ gymnastic ▁ feats, ▁ as ▁ walking ▁ on ▁ a ▁ tightrope ▁ or ▁ swinging ▁ on ▁ a ▁ trapeze.\" , driver . findElement ( By . cssSelector ( \"[value='1']\" ) ) . getText ( ) ) ; } ",
  "Test Name": "HomePage - Search bar - Definition ",
  "Test Description": "The aim is to verify that search bar can be used to search for definitions",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Definition from synonym drop down placedon side of search bar 3. Verify that Definitions is displayed along side search bar 4. User writes word 'acrobat' and pres magnigying plass 5. Verify that user is automatically routed to DICTIONARY.COM tab from top pannel 6. Verify that acrobat definition is displayed \"a skilled performer of gymnastic feats, as walking on a tightrope or swinging on a trapeze.\""
}
{
  "id": 371,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"active-synonyms\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \" // *[text()='DEFINITIONS']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"active-definitions\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"acrobat\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"dictionary-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; assertEquals ( \"a ▁ skilled ▁ performer ▁ of ▁ gymnastic ▁ feats, ▁ as ▁ walking ▁ on ▁ a ▁ tightrope ▁ or ▁ swinging ▁ on ▁ a ▁ trapeze.\" , driver . findElement ( By . cssSelector ( \"[value='1']\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'See')]\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; List < WebElement > synonymsElements = driver . findElements ( By . cssSelector ( \"#meanings ▁ [data-testid='word-grid-container'] ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"clown\" , \"dancer\" , \"gymnast\" , \"performer\" , \"tumbler\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : synonymsElements ) { if ( element . getCssValue ( \"background-color\" ) . equals ( \"rgba(244, ▁ 71, ▁ 37, ▁ 1)\" ) ) actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "Search bar - Definition -See synonyms for acrobat on Thesaurus.com",
  "Test Description": "The aim is to verify that search bar can be used to search for definitions and then for Synonyms",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Definition from synonym drop down placedon side of search bar 3. Verify that Definitions is displayed along side search bar 4. User writes word 'acrobat' and pres magnigying plass 5. Verify that user is automatically routed to DICTIONARY.COM tab from top pannel 6. Verify that acrobat definition is displayed \"a skilled performer of gymnastic feats, as walking on a tightrope or swinging on a trapeze.\" 7. User selects the link 'See synonyms for acrobat on Thesaurus.com' under the word 'Acrobat' 8. Verify user is routed to THESAURUS.COM tab from top pannel and Synonym for word 'acrobat' is displayed as \n*clown\n*dancer\n*gymnast\n*performer\n*tumbler\n\n"
}
{
  "id": 372,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . tagName ( \"footer\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element . findElement ( By . id ( \"facebook\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . attributeToBe ( By . tagName ( \"html\" ) , \"id\" , \"facebook\" ) ) ; assertEquals ( \"Thesaurus.com\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertEquals ( \"@thesauruscom\" , driver . findElement ( By . cssSelector ( \"a[data-hover]\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Homepage - Footer - Facebook",
  "Test Description": "The aim is to verify that user is routed to facebook page for Thesaurus.com ",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down to footer of thesaurus .com website 3. User press F icon for facebook application 4. User is redirected to Thesaurus.com\n@thesauruscom facebook page"
}
{
  "id": 373,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . tagName ( \"footer\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element . findElement ( By . id ( \"twitter\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'Twitter, ▁ Inc.')]\" ) ) ) ; assertEquals ( \"Thesaurus.com \\n @thesauruscom\" , driver . findElement ( By . cssSelector ( \"[data-testid='UserName']\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Homepage - Footer - Twitter",
  "Test Description": "The aim is to verify that user is routed to Twitter page for Thesaurus.com ",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down to footer of thesaurus .com website 3. User press bird icon for twitter application 4. User is redirected to Thesaurus.com\n@thesauruscom twitter page"
}
{
  "id": 374,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . tagName ( \"footer\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element . findElement ( By . id ( \"instagram\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // img[@alt='Instagram']\" ) ) ) ; assertEquals ( \"Thesaurus.com\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Homepage - Footer - Instagram",
  "Test Description": "The aim is to verify that user is routed to Instagram page for Thesaurus.com ",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down to footer of thesaurus .com website 3. User press camera icon for instagram application 4. User is redirected to Thesaurus.com instagram page"
}
{
  "id": 375,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . tagName ( \"footer\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element . findElement ( By . id ( \"pinterest\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h2\" ) , \"Pinterest\" ) ) ; assertEquals ( \"Thesaurus.com\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Homepage - Footer - Pinterest",
  "Test Description": "The aim is to verify that user is routed to Pinterest page for Thesaurus.com ",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down to footer of thesaurus .com website 3. User press P icon for Pinterest application 4. User is redirected to Thesaurus.com Pinterest page"
}
{
  "id": 376,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . tagName ( \"footer\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; WebElement inputElement = element . findElement ( By . tagName ( \"input\" ) ) ; assertEquals ( \"Enter ▁ your ▁ email\" , inputElement . getAttribute ( \"aria-label\" ) ) ; inputElement . sendKeys ( \"testmanqa1@gmail.com\" ) ; assertEquals ( \"Valid ▁ email ▁ address\" , driver . findElement ( By . cssSelector ( \"[opacity='1']\" ) ) . getText ( ) ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; actions . moveToElement ( element . findElement ( By . tagName ( \"button\" ) ) ) . click ( ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"You've ▁ been ▁ subscribed. ▁ New ▁ words ▁ are ▁ on ▁ the ▁ way!\" , wait . until ( ExpectedConditions . presenceOfNestedElementLocatedBy ( element , By . xpath ( \" // *[contains(text(), ▁ 'subscribed')]\" ) ) ) . getText ( ) ) ; } ",
  "Test Name": "Homepage - Footer -SIGN UP FOR WRITING INSPIRATION IN YOUR EMAIL - Correct Email",
  "Test Description": "The aim is to verify that user can signup for writing inspiration on Thesaurus.com",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down to footer of thesaurus .com website 3. User enters valid email id 'testmanqa1@gmail.com' under SIGN UP FOR WRITING INSPIRATION IN YOUR EMAIL 5. Verify that information message is displayed below text field \"Valid email address\" 4. User press I'M IN button placed by email text field 5. Verify following information message is displayed \"You've been subscribed. New words are on the way!\""
}
{
  "id": 377,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . tagName ( \"footer\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; WebElement inputElement = element . findElement ( By . tagName ( \"input\" ) ) ; assertEquals ( \"Enter ▁ your ▁ email\" , inputElement . getAttribute ( \"aria-label\" ) ) ; inputElement . sendKeys ( \"abcd123\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; actions . moveToElement ( element . findElement ( By . tagName ( \"button\" ) ) ) . click ( ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"Uh ▁ oh! ▁ We ▁ spotted ▁ an ▁ email ▁ error. ▁ Please ▁ re-enter!\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[opacity='1']\" ) ) ) . getText ( ) ) ; } ",
  "Test Name": "Homepage - Footer -SIGN UP FOR WRITING INSPIRATION IN YOUR EMAIL - Corroupted Email ",
  "Test Description": "The aim is to verify that the user get reject from signup for writing inspiration with corrupted email",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User scrolls down to footer of thesaurus .com website 3. User enters INvalid email id ''abcd123\" under SIGN UP FOR WRITING INSPIRATION IN YOUR EMAIL 4. User press I'M IN button placed by email text field 5. Verify following information message is displayed \"Uh oh! We spotted an email error. Please re-enter!\""
}
{
  "id": 378,
  "website": "Thesaurus",
  "code": " void function ( ) { WebDriverManager . edgedriver ( ) . setup ( ) ; EdgeDriver driver2 = new EdgeDriver ( ) ; driver2 . manage ( ) . window ( ) . maximize ( ) ; driver2 . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver2 , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='sign ▁ up']\" ) ) ) ; assertEquals ( \"https: // www.dictionary.com/sign-up?redirect=https: // www.thesaurus.com/\" , driver2 . getCurrentUrl ( ) ) ; driver2 . findElement ( By . cssSelector ( \"[name='firstName']\" ) ) . sendKeys ( \"test\" ) ; driver2 . findElement ( By . cssSelector ( \"[name='lastName']\" ) ) . sendKeys ( \"1\" ) ; driver2 . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver2 . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver2 . findElement ( By . cssSelector ( \"[aria-label='sign ▁ up']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver2 . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver2 . findElement ( By . cssSelector ( \"[data-access-menu]\" ) ) . getCssValue ( \"display\" ) ) ; assertEquals ( \"tamar.gur@outlook.co.il\" , driver2 . findElement ( By . cssSelector ( \"[data-email-display]\" ) ) . getText ( ) ) ; driver2 . quit ( ) ; } ",
  "Test Name": "The goal is to verify Signup functionality on Microsoft Edge The goal is to verify Signup functionality on Microsoft Edge",
  "Preconditions": "Navigate to https://www.thesaurus.com",
  "Steps": "1. Press the man icon on top right corner 2.Verify that user is routed to fllowing url \"https://www.dictionary.com/sign-up?redirect=https://www.thesaurus.com/' 3. Verify Signup page is displayed 4. Enter the following fields\n*First Name\n*Last Name\n*Your Email\n*Password 5. Press SignUp button 6. Verify user is logged in  7. Press man icon again and verify that user details testmanqa1 are displayed"
}
{
  "id": 379,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"people\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ people\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#meanings ▁ [data-testid='word-grid-container'] ▁ li\" ) ) . isDisplayed ( ) ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( driver . findElement ( By . cssSelector ( \"[aria-label='save ▁ word']\" ) ) ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( element , \"aria-label\" , \"delete ▁ word\" ) ) ; assertEquals ( \"rgba(255, ▁ 182, ▁ 0, ▁ 1)\" , element . findElement ( By . xpath ( \". /* \" ) ) . getCssValue ( \"color\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@data-access-menu] // a[text()='Word ▁ Lists']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Favorites']\" ) ) ) . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[@data-testid='word-wrapper'] /* [text()='people']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "HomePage - Synonym - Star",
  "Test Description": "The aim is to verify that synonym searched can be added to Favourite list",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password",
  "Steps": "1. User is on Thesaurus home page 2. User writes word people in search bar and press magnifying glass icon 3. Veify that user is presented with word 'people' synonym under the header SYNONYMS FOR people! 4. User press star icon  5. Verify that Star icon turns golden 6. User press man icon on top right corner and selects Word list 7. Verify that word people is added to favourites"
}
{
  "id": 380,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"acrobat\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ acrobat\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#meanings ▁ [data-testid='word-grid-container'] ▁ li\" ) ) . isDisplayed ( ) ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( driver . findElement ( By . cssSelector ( \"[aria-label='save ▁ word']\" ) ) ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( element , \"aria-label\" , \"delete ▁ word\" ) ) ; assertEquals ( \"rgba(255, ▁ 182, ▁ 0, ▁ 1)\" , element . findElement ( By . xpath ( \". /* \" ) ) . getCssValue ( \"color\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@data-access-menu] // a[text()='Word ▁ Lists']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"My ▁ Lists\" ) ) ; driver . findElement ( By . xpath ( \" // button[text()='New ▁ List']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h3[text()='Create ▁ a ▁ new ▁ list']\" ) ) ) ; driver . findElement ( By . cssSelector ( \"[name='listName']\" ) ) . sendKeys ( \"test\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Select ▁ a ▁ Category']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='General']\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"[name='listDescription']\" ) ) . sendKeys ( \"...\" ) ; Actions actions = new Actions ( driver ) ; element = driver . findElements ( By . cssSelector ( \"input[type='checkbox']\" ) ) . get ( 1 ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; driver . findElement ( By . cssSelector ( \"[data-testid='CreateListCTA']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='test']\" ) ) ) ; } ",
  "Test Name": "Create new word list",
  "Test Description": "The purpose is to test that new word lists can be created",
  "Steps": "1. User is on Thesaurus home page 2. User writes word people in search bar and press magnifying glass icon 3. Veify that user is presented with word 'acrobat' synonym under the header SYNONYMS FOR acrobat! 4. User press star icon  5. Verify that Star icon turns golden 6. User press man icon on top right corner and selects Word list 7. Verify user is routed to my list page 8. User press 'New List' 9. Verify that 'Create new list pop up is displayed 10 .Enter the mandatory fields:\n*List name\n*List Category\n*List Description\n*Color 11.Press Creat eList 12. Veify that a new list is created in a rectangular box ",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password"
}
{
  "id": 381,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@data-access-menu] // a[text()='Word ▁ Lists']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"My ▁ Lists\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='kebab ▁ menu']\" ) ) ) . click ( ) ; List < WebElement > menuButtonElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".floating-nav-enter-done ▁ > ▁ button\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Launch ▁ Flashcards\" , \"Take ▁ a ▁ Multiple ▁ Choice ▁ Quiz\" , \"Take ▁ a ▁ Spelling ▁ Quiz\" , \"Edit ▁ List ▁ Details\" , \"Copy ▁ Link\" , \"Delete ▁ List\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : menuButtonElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; menuButtonElements . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h3[text()='Edit ▁ list ▁ details']\" ) ) ) ; driver . findElement ( By . xpath ( \" // *[@for='listCategory']/.. /* [@tabindex]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Fun']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[text()='Save ▁ Changes']\" ) ) . click ( ) ; } ",
  "Test Name": "List-Setting",
  "Test Description": "The purpose is to test that new word lists can be amended",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password 3. User has already created a new list in SK_27",
  "Steps": "1. User is on  MY LISTS page 2. User seects setting button with 3 dots in vertical against an existing list 3.Verify user is presented with multiple options as below :\n*Launch Flashcards\n*Take a Multiple Choice Quiz\n*Take a Spelling Quiz\n*Edit List Details\n*Copy Link\n*Delete List 4. User selects Edit list details to make chnages 5. Verify thatEdit list details pop up is displayed 6. User press save changes after changing category of list"
}
{
  "id": 382,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@data-access-menu] // a[text()='Word ▁ Lists']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"My ▁ Lists\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='kebab ▁ menu']\" ) ) ) . click ( ) ; List < WebElement > menuButtonElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".floating-nav-enter-done ▁ > ▁ button\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Launch ▁ Flashcards\" , \"Take ▁ a ▁ Multiple ▁ Choice ▁ Quiz\" , \"Take ▁ a ▁ Spelling ▁ Quiz\" , \"Edit ▁ List ▁ Details\" , \"Copy ▁ Link\" , \"Delete ▁ List\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : menuButtonElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; menuButtonElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Link ▁ Copied!']\" ) ) ) ; try { Clipboard clipboard = Toolkit . getDefaultToolkit ( ) . getSystemClipboard ( ) ; Object copiedData = clipboard . getData ( DataFlavor . stringFlavor ) ; driver . get ( copiedData . toString ( ) ) ; assertEquals ( \"https: // www.dictionary.com/learn/word-lists/general/JyYBLjenBKE\" , driver . getCurrentUrl ( ) ) ; } catch ( IOException | UnsupportedFlavorException e ) { e . printStackTrace ( ) ; } } ",
  "Test Name": "List - Settings - Copy Link",
  "Test Description": "The purpose is to test that  lists link can be copied",
  "Steps": "1. User is on  MY LISTS page 2. User seects setting button with 3 dots in vertical against a newly created list in SK_27 3.Verify user is presented with multiple options as below :\n*Launch Flashcards\n*Take a Multiple Choice Quiz\n*Take a Spelling Quiz\n*Edit List Details\n*Copy Link\n*Delete List 4. User selects Copy link option 5. Verify thatLink copied information message is displayed  6. User paste the link to open the list \"https://www.dictionary.com/learn/word-lists/general/JyYBLjenBKE\"",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password 3. User has already created a new list in SK_27"
}
{
  "id": 383,
  "website": "Thesaurus",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@data-access-menu] // a[text()='Word ▁ Lists']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"My ▁ Lists\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='kebab ▁ menu']\" ) ) ) . click ( ) ; List < WebElement > menuButtonElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".floating-nav-enter-done ▁ > ▁ button\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Launch ▁ Flashcards\" , \"Take ▁ a ▁ Multiple ▁ Choice ▁ Quiz\" , \"Take ▁ a ▁ Spelling ▁ Quiz\" , \"Edit ▁ List ▁ Details\" , \"Copy ▁ Link\" , \"Delete ▁ List\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : menuButtonElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; menuButtonElements . get ( 5 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h3[text()='Delete ▁ List']\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[@type='submit' ▁ and ▁ text()='Keep ▁ List']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \" // button[@type='submit' ▁ and ▁ text()='Delete ▁ List']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; Thread . sleep ( 2000 ) ; assertEquals ( 0 , driver . findElements ( By . xpath ( \" // *[text()='test']\" ) ) . size ( ) ) ; } ",
  "Test Name": "List - Settings - Delete List",
  "Test Description": "The purpose is to test that  lists can be deleted",
  "Steps": "1. User is on  MY LISTS page 2. User seects setting button with 3 dots in vertical against a newly created list in SK_27 3.Verify user is presented with multiple options as below :\n*Launch Flashcards\n*Take a Multiple Choice Quiz\n*Take a Spelling Quiz\n*Edit List Details\n*Copy Link\n*Delete List 4. User selects Delete list option 5. Verify that a Delete list pop up is displayed with 2 options \n*Keep list\n*Delete list 6. User selects Delet list 7. Verify that list gets deleted from MY LISTS",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password 3. User has already created a new list in SK_27"
}
{
  "id": 384,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[data-access-menu]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \"[data-access-menu] ▁ ul ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Account ▁ Settings\" , \"Subscriptions\" , \"Help ▁ Center\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; assertEquals ( \"Sign ▁ Out\" , driver . findElement ( By . cssSelector ( \"[data-access-menu] ▁ ul ▁ button\" ) ) . getText ( ) ) ; optionElements . get ( 1 ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@name='firstName'] // following-sibling::button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h3[text()='Update ▁ Your ▁ Name']\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[name='newFirstName']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . sendKeys ( \"Alwana\" ) ; element = driver . findElement ( By . cssSelector ( \"[name='newLastName']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . sendKeys ( \"1\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Update ▁ your ▁ name']\" ) ) . click ( ) ; assertEquals ( \"Alwana\" , driver . findElement ( By . cssSelector ( \"[name='firstName']\" ) ) . getAttribute ( \"value\" ) ) ; } ",
  "Test Name": "Account setting - Change First Name",
  "Test Description": "The purpose is to test that First name can be changed in account settings",
  "Steps": "1. User is on Thesaurus home page 2. User press man icon on top right corner 3. A pop up is displayed with multiple options 4. Verify that following are displayed\n*Word Lists\n*Account Settings\n*Subscriptions\n*Help Center\n*Sign Out 5. User selects Account settings and press Update button for First name 6. Update your name pop up appears to amend First name and last name  7. User change First name to Alwana and changes Last name to 1 8. User selects Update your name button 9. Verify that name has been updated successfully.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password"
}
{
  "id": 385,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; assertTrue ( driver . findElement ( By . id ( \"active-synonyms\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ search\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; } ",
  "Test Name": "Search bar - Empty search",
  "Test Description": "The purpose is to test that website navigates to  'Search' Synonym when searh icon is pressed and search bar is empty",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. User is on Thesaurus home page 2. User selects Synonym from search drop down 3.User press search icon from serah bar without writing anything 4. Verify that user is routed to synonym of word 'search'"
}
{
  "id": 386,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; assertTrue ( driver . findElement ( By . id ( \"active-synonyms\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"golf\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ golf\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; assertEquals ( \"Thesaurus ▁ / ▁ golf\" , driver . findElement ( By . cssSelector ( \"[data-testid='breadcrumbs']\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Search bar - Search path",
  "Test Description": "The purpose is to test that path of searched word is correct",
  "Steps": "1. User is on Thesaurus home page 2. User search for word 'golf' using search bar with Synonym selected from search bar drop down 3. User is routed to word golf  synonym 4. Verify that below the search bar search path is in the format 'Thesaurus/searched word' Path is Thesaurus/golf Email address updated successfully",
  "Preconditions": "1. Navigate to https://www.thesaurus.com"
}
{
  "id": 387,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Sign ▁ up ▁ for ▁ an ▁ account']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Welcome ▁ Back\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='email']\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . cssSelector ( \"[name='password']\" ) ) . sendKeys ( \"Test123!\" ) ; driver . findElement ( By . xpath ( \" // button[text()='Log ▁ In']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"thesaurus-nav-tab\" ) , \"class\" , \"header-tab-active\" ) ) ; driver . findElement ( By . xpath ( \" // *[@data-account-icon-signedin]/..\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[data-access-menu]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \"[data-access-menu] ▁ ul ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Account ▁ Settings\" , \"Subscriptions\" , \"Help ▁ Center\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; assertEquals ( \"Sign ▁ Out\" , driver . findElement ( By . cssSelector ( \"[data-access-menu] ▁ ul ▁ button\" ) ) . getText ( ) ) ; optionElements . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='DELETE ▁ ACCOUNT']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h3[text()='DELETE ▁ ACCOUNT']\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[text()='KEEP ▁ ACCOUNT']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \" // button[text()='DELETE ▁ ACCOUNT']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; } ",
  "Test Name": "Account setting - Delete account",
  "Test Description": "The purpose is to test that Thesaurus account can be deleted in account settings",
  "Preconditions": "1. Navigate to https://www.thesaurus.com 2. Log In via entering correct username and password",
  "Steps": "1. User is on Thesaurus home page 2. User press man icon on top right corner 3. A pop up is displayed with multiple options 4. Verify that following are displayed\n*Word Lists\n*Account Settings\n*Subscriptions\n*Help Center\n*SignOut 5. User selects Account settings and press Delete ACCOUNT 6. A delete account pop up is displayed with two options\n*Keep account\n*Delete account 7. User selects Delete account to delete the account Account gets deleted"
}
{
  "id": 388,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; assertTrue ( driver . findElement ( By . id ( \"active-synonyms\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . id ( \"searchbar_input\" ) ) . sendKeys ( \"gather\" ) ; driver . findElement ( By . id ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertEquals ( \"SYNONYMS ▁ FOR ▁ gather\" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-grid-section-heading']\" ) ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"nav\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"DICTIONARY.COM\" , driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . getText ( ) ) ; assertEquals ( \"THESAURUS.COM\" , driver . findElement ( By . id ( \"thesaurus-nav-tab\" ) ) . getText ( ) ) ; List < WebElement > navTitleElements = driver . findElements ( By . cssSelector ( \"[aria-label='Site ▁ Navigation'] ▁ ul ▁ > ▁ li[data-current-active] ▁ > ▁ button\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"MEANINGS\" , \"GAMES\" , \"LEARN\" , \"WRITING\" , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navTitleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . id ( \"thesaurus-nav-tab\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='synonym-of-the-day']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Homepage-Top Panel-re-routeing to home page",
  "Test Description": "The purpose is to test that THESAURUS.COM on top pannelroutes user to home page",
  "Steps": "1. User is on Thesaurus home page 2. User search for a synonym 'gather' 3. Verify user is routed to synonyms of gather 4. Verify that top pannel containing all the options is displayed 5. User press THESAURUS.COM from top panel and is re-routed to home page User is routed to home page",
  "Preconditions": "1. Navigate to https://www.thesaurus.com"
}
{
  "id": 389,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"SYNONYM ▁ OF ▁ THE ▁ DAY\" ) ) ; element = driver . findElement ( By . cssSelector ( \".otd-item-headword__date ▁ > ▁ *\" ) ) ; LocalDate currentDate = LocalDate . now ( ) ; String current = currentDate . format ( DateTimeFormatter . ofPattern ( \"EEEE, ▁ MMMM ▁ dd, ▁ yyyy\" , Locale . ENGLISH ) ) . toUpperCase ( ) ; assertEquals ( current , element . getText ( ) ) ; } ",
  "Test Name": "Synonym Of The Day Date",
  "Test Description": "Verify that the date in the synonym of the day page is today's date",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. find Synonym Of The Day and click it assert that there is a label of Synonym Of The Day in the page assert that the date is the date of today"
}
{
  "id": 390,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Search",
  "Test Description": "Verify the search function works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'happy' in the search bar assert that the synonyms that are presented are to the wanted word"
}
{
  "id": 391,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . xpath ( \" // h2[text()='MOST ▁ SEARCHED ▁ WORDS']/ancestor::section/following-sibling::*\" ) ) ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='MOST ▁ SEARCHED ▁ WORDS']/../following-sibling::* // a\" ) ) ; String mostSearchedWordText = element . getText ( ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , mostSearchedWordText ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Most Searched Words",
  "Test Description": "Verify that clicking a word in the most searched word section function works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Find the first most searched word 2. Click the word assert that the synonyms that are presented are to the wanted word"
}
{
  "id": 392,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; List < WebElement > answersElements = driver . findElements ( By . xpath ( \" // h2[text()='SYNONYM ▁ OF ▁ THE ▁ DAY']/following-sibling::* // a/../following-sibling::*[2] // a\" ) ) ; List < String > answers = new ArrayList < > ( ) ; for ( WebElement answer : answersElements ) { answers . add ( answer . getText ( ) ) ; } answersElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"SYNONYM ▁ OF ▁ THE ▁ DAY\" ) ) ; assertTrue ( answers . contains ( driver . findElement ( By . cssSelector ( \".otd-item-headword__word ▁ h2\" ) ) . getText ( ) ) ) ; } ",
  "Test Name": "Synonym Of The Day Question",
  "Test Description": "Verify that the Synonym Of The Day Question's Answers lead to the Synonym Of The Day page and that one of the answers in the Synonym Of The Day word",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to SYNONYM OF THE DAY question and answers element assert that there are three answers 2. Click on one of the answers assert that Synonym Of The Day page is displayed and that one of the answers options is presented"
}
{
  "id": 393,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"active-synonyms\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \" // *[text()='DEFINITIONS']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"active-definitions\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"top-definitions-section\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Defination Search",
  "Test Description": "Verify that the changing the search dropdown works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the search dropdown  2. Choose DEFINITIONS DEFINITIONS is selected 3. Search the word happy assert that the page refers to happy and that it is a definition page"
}
{
  "id": 394,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . xpath ( \" // *[@data-testid='wotd'] // following-sibling::section\" ) ) ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-testid='wotd'] ▁ a\" ) ) ; String word = element . getText ( ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-headword__word\" ) , word ) ) ; } ",
  "Test Name": "Word Of The Day Section",
  "Test Description": "Verify Word of the Day section in home page is presented and functions correctly",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the word of the day section The subtitle is presented with the text \"Build your vocabulary with new words, definitions, and origin stories every day of the week.\" and the date is today's date 2. Click the link there to get to the word of the day page assert that the displayed page is for word of the day assert that the displayed word of the day is the same one that was presented in the original section"
}
{
  "id": 395,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 3 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Scrabble ▁ Word ▁ Finder\" ) ) ; assertEquals ( \"Words ▁ That ▁ Start ▁ With:\" , driver . findElement ( By . className ( \"links__title\" ) ) . getText ( ) ) ; List < WebElement > letters = driver . findElements ( By . cssSelector ( \"[title^='Words ▁ that ▁ start ▁ with']\" ) ) ; for ( int i = 0 ; i < letters . size ( ) ; i ++ ) { assertEquals ( ( char ) ( i + 65 ) + \"\" + ( char ) ( i + 97 ) , letters . get ( i ) . getText ( ) ) ; } } ",
  "Test Name": "Scrabble Word Finder Page - Starts With",
  "Test Description": " Verify that in the Scrabble Word Finder page the Starts With section is displayed well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Scrabble Word Finder Scrabble Word Finder page should be displayed with Words That Start With section, that contains each of the english letters (e.g. Aa)"
}
{
  "id": 396,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 3 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Scrabble ▁ Word ▁ Finder\" ) ) ; assertEquals ( \"Words ▁ That ▁ Start ▁ With:\" , driver . findElement ( By . className ( \"links__title\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"[title='Words ▁ that ▁ start ▁ with ▁ d']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"WORDS ▁ THAT ▁ START ▁ WITH ▁ “D”\" ) ) ; List < WebElement > sections = driver . findElements ( By . cssSelector ( \".word-finder-widgets ▁ .section__body\" ) ) ; for ( WebElement sectionElement : sections ) { List < WebElement > words = sectionElement . findElements ( By . cssSelector ( \".list--words ▁ li ▁ > ▁ a\" ) ) ; for ( WebElement wordElement : words ) { String word = wordElement . getText ( ) ; if ( ! word . isEmpty ( ) ) assertTrue ( word . startsWith ( \"d\" ) ) ; } } element = sections . get ( 0 ) . findElement ( By . cssSelector ( \".list--words ▁ li ▁ > ▁ a\" ) ) ; String firstWord = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , firstWord ) ) ; assertTrue ( driver . findElement ( By . id ( \"top-definitions-section\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Scrabble Word Finder - Starts With D",
  "Test Description": " Verify that the Scrabble Word Finder Starts With D page is displayed and functions well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Scrabble Word Finder Scrabble Word Finder page should be displayed with Words That Start With section. 3. Click on Dd under Words That Start With The page WORDS THAT START WITH “D” is presented. The visible words start with 'd'. 4. Click on one of the words A definition for the word will be presented"
}
{
  "id": 397,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 3 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Scrabble ▁ Word ▁ Finder\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h4[contains(text(), ▁ 'Word ▁ length:')]\" ) ) . isDisplayed ( ) ) ; List < WebElement > buttons = driver . findElements ( By . cssSelector ( \"[title$='-letter']\" ) ) ; assertEquals ( 14 , buttons . size ( ) ) ; for ( int i = 0 ; i < buttons . size ( ) ; i ++ ) { assertEquals ( i + 2 , Integer . parseInt ( buttons . get ( i ) . getText ( ) . split ( \"-\" ) [ 0 ] ) ) ; } } ",
  "Test Name": "Scrabble Word Finder - Word Length",
  "Test Description": " Verify that in the Scrabble Word Finder the n-letter section is displayed well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Scrabble Word Finder Scrabble Word Finder page should be displayed with Word Length: section, that contains buttons that go from 2-letter to 15-letter"
}
{
  "id": 398,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 3 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Scrabble ▁ Word ▁ Finder\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h4[contains(text(), ▁ 'Word ▁ length:')]\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[title='4-letter']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"WORDS ▁ WITH ▁ LENGTH ▁ “4”\" ) ) ; List < WebElement > sectionTitlesElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".word-finder-widgets ▁ .section__title\" ) ) ) ; for ( int i = 0 ; i < sectionTitlesElements . size ( ) ; i ++ ) { String text = sectionTitlesElements . get ( i ) . getText ( ) ; assertEquals ( ( char ) ( i + 65 ) , text . charAt ( text . length ( ) - 1 ) ) ; List < WebElement > words = sectionTitlesElements . get ( i ) . findElements ( By . xpath ( \". // ancestor::*[@class='section__group-inner'] // li/a\" ) ) ; String startsWithLetter = String . valueOf ( ( char ) ( i + 97 ) ) ; for ( WebElement wordElement : words ) { String word = wordElement . getText ( ) ; if ( ! word . isEmpty ( ) ) { assertTrue ( \"problem ▁ in ▁ word ▁ \" + word + \" ▁ letter ▁ \" + startsWithLetter , word . startsWith ( startsWithLetter ) ) ; assertEquals ( 4 , word . length ( ) ) ; } } } } ",
  "Test Name": "Scrabble Word Finder - 4-letter words",
  "Test Description": " Verify that the Scrabble Word Finder 4-letter words page is displayed and functions well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Scrabble Word Finder Scrabble Word Finder page should be displayed with Word Length: section. 3. Click on 4-letter button WORDS WITH LENGTH “4” title should be displayed. There is a section that refers to each letter and all the visible words in that same section starts with the same letter and are 4-letter words."
}
{
  "id": 399,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 3 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Scrabble ▁ Word ▁ Finder\" ) ) ; assertTrue ( driver . findElement ( By . className ( \"scrabble-form\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \".form__controls ▁ input\" ) ) . sendKeys ( \"abl\" ) ; driver . findElement ( By . cssSelector ( \"[value='find']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \".word-finder-widgets ▁ .section__head ▁ h3\" ) , \"results ▁ for ▁ ABL\" ) ) ; List < WebElement > wordElements = driver . findElements ( By . cssSelector ( \".list--words ▁ a\" ) ) ; for ( WebElement element : wordElements ) { String word = element . getText ( ) ; assertTrue ( word . matches ( \"^(?!.*?(.).*?\\\\1)[abl?]*$\" ) ) ; } } ",
  "Test Name": "Scrabble Word Finder - Find Word",
  "Test Description": "Verify the functionality of the Find option in Scrabble Word Finder",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Scrabble Word Finder Scrabble Word Finder page should be displayed with scrabble search form. 3. Type into the form a b l 4. Click Find Results for ABL should be presented, containing words that contain the only the chosen letters, and once for each one."
}
{
  "id": 400,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 3 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Scrabble ▁ Word ▁ Finder\" ) ) ; assertTrue ( driver . findElement ( By . className ( \"scrabble-form\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \".form__controls ▁ input\" ) ) . sendKeys ( \"blagin\" ) ; driver . findElement ( By . cssSelector ( \"a.advanced-toggle\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \".form__row--advanced\" ) ) . getCssValue ( \"display\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > inputElements = driver . findElements ( By . cssSelector ( \".scrabble-form:first-of-type ▁ .form__controls--advanced ▁ input\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Starts ▁ with\" , \"Includes\" , \"Ends ▁ with\" , \"Apply\" ) ) ; for ( WebElement element : inputElements ) { String placeHolder = element . getAttribute ( \"placeholder\" ) ; if ( placeHolder . isEmpty ( ) ) actualTitles . add ( element . getAttribute ( \"value\" ) ) ; else actualTitles . add ( placeHolder ) ; } assertEquals ( expectedTitles , actualTitles ) ; inputElements . get ( 0 ) . sendKeys ( \"b\" ) ; inputElements . get ( 1 ) . sendKeys ( \"i\" ) ; inputElements . get ( 2 ) . sendKeys ( \"g\" ) ; inputElements . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . cssSelector ( \".word-finder-widgets ▁ .section__head ▁ h3\" ) , \"results ▁ for ▁ BLAGIN\" ) ) ; List < WebElement > wordElements = driver . findElements ( By . cssSelector ( \".list--words ▁ a\" ) ) ; for ( WebElement element : wordElements ) { String word = element . getText ( ) ; assertTrue ( word . matches ( \"^(?!.*?(.).*?\\\\1)[blagin?]*$\" ) ) ; assertTrue ( word . matches ( \"^[b].*[i].*[g]$\" ) ) ; } } ",
  "Test Name": "Scrabble Word Finder - Advanced Search",
  "Test Description": "Verify the functionality of the Advanced Search option in Scrabble Word Finder",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Scrabble Word Finder Scrabble Word Finder page should be displayed with scrabble search form. 3. Type into the form b l a g I n 4. Click on Show Advanced Search 3 Categories of Starts with, Includes and Ends with should be displayed, next to an APPLY button. 5. Type b inside the Starts with textbox 6. Type i inside the Includes text box 7. Type g inside the Ends with text box 8. Click APPLY Results for BLAGIN should be presented, containing words that contain only the chosen letters, and once for each one. All the words should start, include and end with the chosen letters."
}
{
  "id": 401,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='LEARN']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Online ▁ Tutors\" , \"New ▁ Words\" , \"Trending ▁ Words\" , \"All ▁ About ▁ English\" , \"Science ▁ And ▁ Technology\" , \"Literature ▁ And ▁ Arts\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Word ▁ Lists ▁ & ▁ Flashcards\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h3[text()='Featured ▁ Lists']\" ) ) . isDisplayed ( ) ) ; List < WebElement > featuredLists = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[data-testid='word-list-hub-card-featured']\" ) ) ) ; assertEquals ( 3 , featuredLists . size ( ) ) ; String listName = featuredLists . get ( 0 ) . findElement ( By . tagName ( \"div\" ) ) . getText ( ) ; featuredLists . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , listName ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='word-wrapper']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Word List",
  "Test Description": "Verify that the Word List page is displayed well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on LEARN tab LEARN submenu should get opened, containing the options: Word Lists, Online Tutors, New Words, Trending Words, All About English, Science And Technology, Literature And Arts 2. Click on Word Lists Word Lists & Flashcards page sould be displayed, including Featured Lists category, with 3 lists under it. 3. Click the first Featured list A list with the correct name will get loaded, with words"
}
{
  "id": 402,
  "website": "Thesaurus",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='LEARN']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Online ▁ Tutors\" , \"New ▁ Words\" , \"Trending ▁ Words\" , \"All ▁ About ▁ English\" , \"Science ▁ And ▁ Technology\" , \"Literature ▁ And ▁ Arts\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Word ▁ Lists ▁ & ▁ Flashcards\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h3[text()='All ▁ Lists']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . tagName ( \"select\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='A ▁ - ▁ Z']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='word-list-hub-show-more-button']\" ) ) ) . click ( ) ; Thread . sleep ( 2000 ) ; List < WebElement > listElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[data-testid='word-list-hub-card']\" ) ) ) ; for ( int i = 0 ; i < listElements . size ( ) - 1 ; i ++ ) { String currentText = listElements . get ( i ) . findElement ( By . tagName ( \"div\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; String nextText = listElements . get ( i + 1 ) . findElement ( By . tagName ( \"div\" ) ) . getText ( ) . replaceAll ( \" ▁ \" , \"\" ) ; assertTrue ( currentText + \", ▁ \" + nextText , currentText . compareTo ( nextText ) < 0 ) ; } } ",
  "Test Name": "Word Lists - Sort All Lists A-Z",
  "Test Description": "Verify the Sorting by A-Z on word lists works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on LEARN tab LEARN submenu should get opened, containing the options: Word Lists, Online Tutors, New Words, Trending Words, All About English, Science And Technology, Literature And Arts 2. Click on Word Lists Word Lists & Flashcards page sould be displayed, including All Lists category 3. Click on the sorting dropdown and click on A-Z 4. Click on the Show More button The presented lists under All Lists should be sorted by A-Z"
}
{
  "id": 403,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='LEARN']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Online ▁ Tutors\" , \"New ▁ Words\" , \"Trending ▁ Words\" , \"All ▁ About ▁ English\" , \"Science ▁ And ▁ Technology\" , \"Literature ▁ And ▁ Arts\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Word ▁ Lists ▁ & ▁ Flashcards\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Would ▁ you ▁ like ▁ to ▁ contribute ▁ to ▁ the ▁ community?']\" ) ) ) ; element = element . findElement ( By . xpath ( \". // following-sibling:: */ button\" ) ) ; assertEquals ( \"Create ▁ A ▁ List\" , element . getText ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h3\" ) , \"Build ▁ Your ▁ Own ▁ Word ▁ Lists!\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"button[aria-label='sign ▁ up']\" ) ) ) ; assertEquals ( \"rgba(0, ▁ 36, ▁ 139, ▁ 1)\" , element . getCssValue ( \"background-color\" ) ) ; } ",
  "Test Name": "Word Lists - Create a List - Not Logged In",
  "Test Description": "Clicking the Create a List button while not being logged in gets the user to the Sign Up page.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on LEARN tab LEARN submenu should get opened, containing the options: Word Lists, Online Tutors, New Words, Trending Words, All About English, Science And Technology, Literature And Arts 2. Click on Word Lists Word Lists & Flashcards page sould be displayed, including a Create A List button, inside the square that reads 'Would you like to contribute to the community?'. 3. Click on the button A page with the title Build Your Own Word Lists! Will be diaplayed, including a blue Sign Up button"
}
{
  "id": 404,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Quizzes\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-testid='quiz-hub-card-featured']\" ) ) ) ; String quizName = element . getText ( ) . toUpperCase ( Locale . ROOT ) ; if ( ! quizName . matches ( \"^[a-zA-Z0-9]\" ) ) quizName = quizName . substring ( 2 ) . trim ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , quizName ) ) ; By statusLocator = By . xpath ( \" // *[contains(text(), ▁ 'Question')]\" ) ; String status = driver . findElement ( statusLocator ) . getText ( ) ; int numberOfQuestions = Integer . parseInt ( status . substring ( status . lastIndexOf ( ' ▁ ' ) + 1 ) ) ; for ( int i = 0 ; i < numberOfQuestions ; i ++ ) { wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-quiz-answer]\" ) ) ) . click ( ) ; if ( i == numberOfQuestions - 1 ) wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text() ▁ = ▁ 'SEE ▁ RESULTS']\" ) ) ) . click ( ) ; else { wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-next-question-button]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( statusLocator , status ) ) ) ; status = driver . findElement ( statusLocator ) . getText ( ) ; } } element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ ' ▁ / ▁ \" + numberOfQuestions + \"')]\" ) ) ) ; assertTrue ( element . getText ( ) , element . getText ( ) . trim ( ) . matches ( \"^\\\\d.*\" ) ) ; } ",
  "Test Name": "Answer a Quiz",
  "Test Description": "Verify the Quizzes function works well",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Quizzes Quizzes page should be displayed 3. Click on the first Quiz A Quiz with the correct name is displayed with the first question. 4. Chooce the first answer in all the questions and click NEXT QUESTION after each one 5. After the initial number of question in the quiz, click SEE RESULTS Your score in the quiz will be presented in a a / b way"
}
{
  "id": 405,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='GAMES']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Puzzle\" , \"Quizzes\" , \"Crossword ▁ Solver\" , \"Scrabble ▁ Word ▁ Finder\" , \"Words ▁ With ▁ Friends ▁ Cheat\" , \"Daily ▁ Crossword ▁ Puzzle\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Quizzes\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-testid='Word ▁ Lists-test']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='Quizzes-test']\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Word ▁ Lists ▁ & ▁ Flashcards\" ) ) ; } ",
  "Test Name": "Quizzes - Word Lists",
  "Test Description": "Verify switching from Quizzes page to Word Lists page using the tabs works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on GAMES tab  GAMES submenu should get opened, containing Word Puzzle, Quizzes, Crossword Solver, Scrabble Word Finder, Words With Friends Cheat, Daily Crossword Puzzle 2. Click on Quizzes Quizzes page should be displayed with the tabs Quizzes and Word Lists 3. Click on Word Lists tab Word Lists & Flashcards page sould be displayed"
}
{
  "id": 406,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"EMOJI ▁ DICTIONARY\" ) ) ; assertEquals ( \"FEATURED ▁ TERMS\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \".slick-track ▁ .word-item ▁ h2 ▁ a\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"article-word__title\" ) ) ) ; assertEquals ( title , element . getText ( ) . toUpperCase ( Locale . ROOT ) ) ; } ",
  "Test Name": "Emoji Dictionary - Featured Terms",
  "Test Description": "Verify the Featured Terms section in the Emoji Dictionaty works and is displayed well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Emoji EMOJI DICTIONARY page should be displayed, including FEATURED TERMS section. 3. Click on the first featured emoji A page about the clicked emoji should get loaded"
}
{
  "id": 407,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"EMOJI ▁ DICTIONARY\" ) ) ; assertEquals ( \"MORE ▁ FROM ▁ EMOJI\" , driver . findElement ( By . cssSelector ( \"#just-added ▁ h2\" ) ) . getText ( ) ) ; List < WebElement > links = driver . findElements ( By . cssSelector ( \"#just-added ▁ .list ▁ a\" ) ) ; assertEquals ( 60 , links . size ( ) ) ; String title = links . get ( 0 ) . getText ( ) ; links . get ( 0 ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"article-word__title\" ) ) ) ; assertEquals ( title , element . getText ( ) ) ; } ",
  "Test Name": "Emoji Dictionary - More From Emoji",
  "Test Description": "Verify the More Than Emoji section in the Emoji Dictionaty works and is displayed well.",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Emoji EMOJI DICTIONARY page should be displayed, including MORE FROM EMOJI section, with 60 lines presented. 3. Click on the first link A page about the clicked emoji should get loaded"
}
{
  "id": 408,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='WRITING']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Grammar ▁ Coach\" , \"Writing ▁ Prompts\" , \"Grammar ▁ 101\" , \"Writing ▁ Tips\" , \"Ways ▁ To ▁ Say ▁ It ▁ Better\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 4 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Ways ▁ To ▁ Say\" ) ) ; List < WebElement > cardsCategories = driver . findElements ( By . className ( \"section__post-categories\" ) ) ; for ( WebElement category : cardsCategories ) { assertEquals ( \"Ways ▁ To ▁ Say\" , category . getText ( ) ) ; } element = cardsCategories . get ( 0 ) . findElement ( By . xpath ( \". // preceding-sibling::*\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . className ( \"article__title\" ) , title . substring ( 0 , title . length ( ) - 3 ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".slides ▁ > ▁ [aria-label='Previous']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \".slides ▁ > ▁ [aria-label='Next']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; By locator = By . cssSelector ( \".slick-current ▁ h2\" ) ; String current = driver . findElement ( locator ) . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , current ) ) ) ; } ",
  "Test Name": "Ways To Say ",
  "Test Description": "Verify the Ways To Say page functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on WRITING tab  WRITING submenu should get opened, containing Grammar Coach, Writing Prompts, Grammar 101, Writing Tips, Ways To Say It Better 2. Click on Ways to Say It Better Ways To Say page should be displayed, with cards from the Ways To Say category. 3. Click on a card An article about the clicked card should get loaded, with previous and next buttons 4. Click on the next button The presented text should get changed"
}
{
  "id": 409,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"people\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"people\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'See ▁ also ▁ synonyms ▁ for:')] // a\" ) ) ; String expectedTitle = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , expectedTitle ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "See also synonyms for",
  "Test Description": "Verify in the search results page, a See also synonyms for __ link is presented and works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'people' in the search bar assert that the synonyms that are presented are to the wanted word 2. Click the \"See also synonyms for: peoples\" link assert that the synonyms that are presented are to the word 'peoples'"
}
{
  "id": 410,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#about-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"section-about-intro\" ) ) ) ; element = driver . findElement ( By . className ( \"section-about-chart\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertEquals ( 5 , element . findElements ( By . cssSelector ( \".lines ▁ > ▁ li\" ) ) . size ( ) ) ; } ",
  "Test Name": "About",
  "Test Description": "Verify clicking the About link gets the user the About page",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the About link  The About page will be presented 3. Scroll down to the chart section 5 charts shoul be in the section"
}
{
  "id": 411,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"people\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"people\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . id ( \"example-creator\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertEquals ( \"TRY ▁ USING ▁ people\" , element . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; element = element . findElement ( By . tagName ( \"input\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . sendKeys ( \"The ▁ people ▁ are ▁ here\" ) ; driver . findElement ( By . xpath ( \" // button[text()='TRY ▁ NOW']\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-test-example-sentences]\" ) ) ) ; assertEquals ( \"Showing ▁ examples ▁ for ▁ the ▁ selected ▁ word:\" , element . findElement ( By . tagName ( \"span\" ) ) . getText ( ) ) ; List < WebElement > sentences = driver . findElements ( By . cssSelector ( \"[data-test-swapped-sentence]\" ) ) ; for ( WebElement sentence : sentences ) { assertTrue ( sentence . getText ( ) . matches ( \"The ▁ .+ ▁ are ▁ here\" ) ) ; } assertTrue ( driver . findElement ( By . xpath ( \" // a[text()='GIVE ▁ FEEDBACK']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Try Using Word",
  "Test Description": "Verify the Try Using section in a search result page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'people' in the search bar assert that the synonyms that are presented are to the wanted word 2. Scroll to TRY USING section The Try Using people title and the input textbox will be displayed. 3. Enter the sentence \"The people are here\" to the input line 4. Click the TRY NOW button Showing examples for the selected word: shall be presented, with sentences that change the word people in them and a GIVE FEEDBACK button."
}
{
  "id": 412,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . xpath ( \" // *[text()='DOWNLOAD ▁ OUR ▁ APPS']\" ) ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( \"Our ▁ apps ▁ also ▁ have ▁ more ▁ than ▁ 1.5 ▁ million ▁ definitions ▁ and ▁ synonyms ▁ plus ▁ access ▁ to ▁ our ▁ \" + \"trusted ▁ reference ▁ articles. ▁ Look ▁ up ▁ the ▁ words ▁ anywhere ▁ anytime-we ▁ work ▁ offline ▁ too!\" , element . findElement ( By . xpath ( \". // ../following-sibling::p\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"android-appstore\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Google ▁ Play ▁ Logo']\" ) ) ) ; assertEquals ( \"Dictionary.com ▁ English ▁ Word ▁ Meanings ▁ & ▁ Definitions\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Download Our Apps - Google Play",
  "Test Description": "Verify the Google Play button functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down to DOWNLOAD OUR APPS section The title should be visible, along the subtitle \"Our apps also have more than 1.5 million definitions and synonyms plus access to our trusted reference articles. Look up the words anywhere anytime-we work offline too!\". 2. Click the google play button a new tab of google play should be opened, of the Dictionary.com English Word Meanings & Definitions app"
}
{
  "id": 413,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . xpath ( \" // *[text()='DOWNLOAD ▁ OUR ▁ APPS']\" ) ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( \"Our ▁ apps ▁ also ▁ have ▁ more ▁ than ▁ 1.5 ▁ million ▁ definitions ▁ and ▁ synonyms ▁ plus ▁ access ▁ to ▁ our ▁ \" + \"trusted ▁ reference ▁ articles. ▁ Look ▁ up ▁ the ▁ words ▁ anywhere ▁ anytime-we ▁ work ▁ offline ▁ too!\" , element . findElement ( By . xpath ( \". // ../following-sibling::p\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"apple-appstore\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"[data-test-we-localnav-store-title]\" ) , \"App ▁ Store\" ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) . contains ( \"Dictionary.com: ▁ English ▁ Words\" ) ) ; } ",
  "Test Name": "Download Our Apps - App Store",
  "Test Description": "Verify the App Store button functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down to DOWNLOAD OUR APPS section The title should be visible, along  the subtitle \"Our apps also have more than 1.5 million definitions and synonyms plus access to our trusted reference articles. Look up the words anywhere anytime-we work offline too!\". 2. Click the app store button a new tab of app store should be opened, of the Dictionary.com: English Words app"
}
{
  "id": 414,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"DICTIONARY.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='wotd']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . id ( \"thesaurus-nav-tab\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"THESAURUS.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='synonym-of-the-day']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Main navigation tabs",
  "Test Description": "Verify the user can switch to Dictionary.com and Thesaurus.com using the top navigation tab",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the top navigation tab DICTIONARY.COM The page should get loaded to Dictionary.com page and show the WORD OF THE DAY section 1. Click the top navigation tab THESAURUS.COM The page should get loaded to Thesaurus.com page and show the SYNONYM OF THE DAY section"
}
{
  "id": 415,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . xpath ( \" // *[text()='SYNONYMS ▁ FOR ▁ OVERUSED ▁ WORDS']/ancestor::section\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( \"We've ▁ found ▁ the ▁ most ▁ overused ▁ words ▁ and ▁ the ▁ synonyms ▁ you ▁ should ▁ be ▁ using ▁ instead.\" , element . findElement ( By . cssSelector ( \".heading-description\" ) ) . getText ( ) ) ; List < WebElement > wordBlocks = driver . findElements ( By . cssSelector ( \"[data-testid='synonyms-block-word']\" ) ) ; assertEquals ( 3 , wordBlocks . size ( ) ) ; List < String > wordsInFirstBlock = new ArrayList < > ( ) ; for ( int i = 0 ; i < wordBlocks . size ( ) ; i ++ ) { List < WebElement > words = wordBlocks . get ( i ) . findElements ( By . tagName ( \"a\" ) ) ; assertEquals ( 4 , words . size ( ) ) ; if ( i == 0 ) { for ( WebElement wordElement : words ) { wordsInFirstBlock . add ( wordElement . getText ( ) ) ; } } } wordBlocks . get ( 0 ) . findElement ( By . tagName ( \"a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , wordsInFirstBlock . get ( 0 ) ) ) ; element = driver . findElement ( By . id ( \"meanings\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; for ( int i = 1 ; i < wordsInFirstBlock . size ( ) ; i ++ ) { assertTrue ( element . findElement ( By . xpath ( \". // *[text()='\" + wordsInFirstBlock . get ( i ) + \"']\" ) ) . isDisplayed ( ) ) ; } } ",
  "Test Name": "Synonyms For Overused Words",
  "Test Description": "Synonyms for overused words section in home page is displayed and functions well",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down the page SYNONYMS FOR OVERUSED WORDS section should be visible, with the subtitle \"We've found the most overused words and the synonyms you should be using instead.\" and three synonyms to three words 2. Click on one of the main words Synonyms to the selected word are presented, including the three synonyms from the home page section"
}
{
  "id": 416,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . cssSelector ( \"[data-browse-az]\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element . findElement ( By . xpath ( \" // *[text()='BROWSE ▁ THESAURUS.COM']\" ) ) ) ) ; List < WebElement > buttons = driver . findElements ( By . cssSelector ( \"[data-browse-az] ▁ div:nth-of-type(2) ▁ a\" ) ) ; for ( int i = 1 ; i < buttons . size ( ) ; i ++ ) { assertEquals ( ( char ) ( i + 64 ) + \"\" + ( char ) ( i + 96 ) , buttons . get ( i ) . getText ( ) ) ; } buttons . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"BROWSE ▁ THESAURUS: ▁ LETTER ▁ \\\"C\\\"\" ) ) ; List < WebElement > words = driver . findElements ( By . cssSelector ( \"[data-testid='list-az-results'] ▁ a\" ) ) ; for ( WebElement word : words ) { assertTrue ( word . getText ( ) . toLowerCase ( Locale . ROOT ) . startsWith ( \"c\" ) ) ; } } ",
  "Test Name": "Browse Thesaurus.com",
  "Test Description": "Verify navigating to BROWSE THESAURUS letter page using a letter button in home page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll down the page BROWSE THESAURUS.COM section should be visible, with alphabet links from Aa to Zz (and # at the beginning) 2. Click the Cc button BROWSE THESAURUS: LETTER \"C\" page shoul be displayed, with results that start with the letter c"
}
{
  "id": 417,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#careers-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"section-careers-intro\" ) ) ) ; element = driver . findElement ( By . id ( \"twitter-widget-0\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; driver . switchTo ( ) . frame ( element ) ; assertEquals ( \"Tweets ▁ by ▁ @Dictionarycom\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Careers",
  "Test Description": "Verify clicking the Careers link gets the user the Careers page",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the Careers link  The Careers page will be presented, with See our current job openings button 3. Scroll down to the twitter section The presented tweets are by dictionary.com"
}
{
  "id": 418,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#contactUs-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".main-contact\" ) ) ) ; assertEquals ( \"How ▁ can ▁ we ▁ help ▁ you?\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"contact-search-bar__input\" ) ) ) ; element . sendKeys ( \"date\" ) ; element . submit ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"results ▁ for ▁ \\\"date\\\"\" ) ) ; } ",
  "Test Name": "Contact Us - Question",
  "Test Description": "Verify that searching in the Contact Us page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the Contact Us link  The Contact US page will be presented, with a How can we help you? Title and a answers search bar 3. Search for the word 'date' A new tab should get opened, with results for \"date\""
}
{
  "id": 419,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#contactUs-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".main-contact\" ) ) ) ; assertEquals ( \"Quick ▁ Links:\" , driver . findElement ( By . xpath ( \" // strong[text()]\" ) ) . getText ( ) ) ; List < WebElement > titleElements = driver . findElements ( By . className ( \"contact-quick-link\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"iPhone ▁ Apps\" , \"Android ▁ Apps\" , \"Accounts\" , \"Word ▁ of ▁ the ▁ Day\" , \"Grammar ▁ Coach ▁ Subscription\" , \"Dictionary ▁ Academy ▁ Tutors\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( int i = 0 ; i < titleElements . size ( ) - 1 ; i ++ ) { actualTitles . add ( titleElements . get ( i ) . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"iPhone ▁ Mobile ▁ Apps\" ) ) ; assertTrue ( driver . findElement ( By . className ( \"article-list-link\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Contact Us - Quick Links",
  "Test Description": "Verify the Quick Links function in the Contact Us page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the Contact Us link  The Contact US page will be presented, with a Quick Links: Title and the options iPhone Apps, Android Apps, Accounts, Word of the Day, Grammar Coach Subscription, Dictionary Academy Tutors 3. Click on Iphone Apps A page with the title iPhone Mobile Apps should get loaded with various questions"
}
{
  "id": 420,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#contactUs-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".main-contact\" ) ) ) ; assertEquals ( \"Want ▁ to ▁ suggest ▁ a ▁ word ▁ or ▁ have ▁ a ▁ comment ▁ about ▁ one ▁ of ▁ our ▁ definitions ▁ or ▁ synonyms?\" , driver . findElement ( By . xpath ( \"( // strong[text()])[2]\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Fill ▁ out ▁ this ▁ form']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . className ( \"freebirdFormviewerViewNavigationPasswordWarning\" ) , \"Google ▁ Forms\" ) ) ; assertEquals ( \"Dictionary.com ▁ & ▁ Thesaurus.com ▁ Lexicography ▁ Feedback\" , driver . findElement ( By . cssSelector ( \".freebirdFormviewerViewHeaderTitle\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Contact Us - Fill out this form",
  "Test Description": "Verify that clicking the Fill out this form button in the Contact Us page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the Contact Us link  The Contact US page will be presented, with the text Want to suggest a word or have a comment about one of our definitions or synonyms? 3. Click on the Fill out this form button A google form should be loaded, with the title Dictionary.com & Thesaurus.com Lexicography Feedback"
}
{
  "id": 421,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#contactUs-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".main-contact\" ) ) ) ; assertEquals ( \"Can’t ▁ find ▁ the ▁ answer ▁ in ▁ our ▁ Help ▁ Center?\" , driver . findElement ( By . xpath ( \"( // strong[text()])[3]\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"form[id*='gform']\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; Hashtable < String , String > elementsTextAndKind = new Hashtable < String , String > ( ) { { put ( \"Department\" , \"select\" ) ; put ( \"Subject\" , \"select\" ) ; put ( \"Name\" , \"input\" ) ; put ( \"Email ▁ Address\" , \"input\" ) ; put ( \"Message\" , \"textarea\" ) ; } } ; elementsTextAndKind . forEach ( ( name , kind ) -> assertTrue ( element . findElement ( By . xpath ( \" // *[text()='\" + name + \"']/following-sibling:: */ \" + kind ) ) . isDisplayed ( ) ) ) ; assertTrue ( element . findElement ( By . xpath ( \" // *[text()='CAPTCHA']\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . cssSelector ( \"[type='submit']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Contact Us - Form",
  "Test Description": "Verify that the Form in the Contact Us page is presented, will all the fields",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the Contact Us link  The Contact US page will be presented, with the text Can’t find the answer in our Help Center? 3. Scroll down to the form The form should contain Department and Subject dropdowns, and Name, Email Address and Message text boxes, a Captch and a SUBMIT button"
}
{
  "id": 422,
  "website": "Thesaurus",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.thesaurus.com/\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . cssSelector ( \"#termAndPrivacy-click ▁ a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"Terms ▁ of ▁ Service ▁ & ▁ Privacy ▁ Policy\" ) ) ; List < WebElement > titleElements = driver . findElements ( By . cssSelector ( \".article__entry ▁ > ▁ ul ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Privacy ▁ & ▁ Cookie ▁ Policy\" , \"Children’s ▁ Privacy\" , \"Contact ▁ Information\" , \"Terms ▁ of ▁ Service\" , \"Thesaurus ▁ Gift ▁ Card ▁ Terms ▁ and ▁ Conditions\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement title : titleElements ) { actualTitles . add ( title . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; Thread . sleep ( 2000 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // b[text()='Children’s ▁ Privacy.']\" ) ) ) ) ; } ",
  "Test Name": "Terms of Service & Privacy Policy",
  "Test Description": "Verify Clicking on the Terms of Service & Privacy Policy link gets the user to its page",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the footer of the page 2. Click the Cookies, Terms, & Privacy link  The Terms of Service & Privacy Policy page will be presented, with a table of contents, containing Privacy & Cookie Policy, Children’s Privacy, Contact Information, Terms of Service, Thesaurus Gift Card Terms and Conditions 3. Click the Children's Privacy link The title should be visible"
}
{
  "id": 423,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"DICTIONARY.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='wotd']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \".trending-words-word-block\" ) ) ; String word = element . findElement ( By . tagName ( \"span\" ) ) . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , word ) ) ; assertTrue ( driver . findElement ( By . id ( \"top-definitions-section\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Dictionary.com Trending",
  "Test Description": "Verify clicking on a Trending word in DICTIONARY.COM gets the user to the word's definition",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the top navigation tab DICTIONARY.COM The page should get loaded to Dictionary.com page and show the Trending section in the top 2. Click one of the trending words The user should view a definition page for the selected word"
}
{
  "id": 424,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . cssSelector ( \"[data-grammar-coach-promo] ▁ button\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Grammar ▁ Coach™\" ) ) ; assertEquals ( \"Your ▁ Key ▁ to ▁ Brilliant ▁ Writing\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; assertEquals ( \"Our ▁ AI-backed ▁ writing ▁ tool ▁ helps ▁ writers ▁ of ▁ all ▁ kinds ▁ produce ▁ high-quality, ▁ \" + \"error-free ▁ work. ▁ From ▁ grammar ▁ corrections ▁ to ▁ Thesaurus.com-powered ▁ synonym ▁ suggestions, ▁ \" + \"Grammar ▁ Coach™ ▁ ensures ▁ every ▁ essay, ▁ email, ▁ and ▁ application ▁ letter ▁ is ▁ perfectly ▁ written.\" , driver . findElement ( By . cssSelector ( \"[data-hero-paragraph]\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-signed-out-grammar-coach]\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element . findElement ( By . cssSelector ( \"[role='textbox']\" ) ) . sendKeys ( \"He ▁ went ▁ home.\" ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"[data-check-grammar-message]\" ) , \"No ▁ grammar ▁ mistakes!\" ) ) ; assertEquals ( \"0\" , element . findElement ( By . cssSelector ( \"[data-notification-count]\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Grammar Coach - Correct Grammar",
  "Test Description": "Verify that when entering automatically a sentence  with correct grammar to Grammar Coach it works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the Grammar Coach Try Now button at the top of the page Grammar Coach™ Your Key to Brilliant Writing page will be displayed, with the text \"Our AI-backed writing tool helps writers of all kinds produce high-quality, error-free work. From grammar corrections to Thesaurus.com-powered synonym suggestions, Grammar Coach™ ensures every essay, email, and application letter is perfectly written.\" 2. Scroll down to the grammar coach 3. Write \"He went home.\" in the textbox The grammar-message should be \"No grammar mistakes!\" and data-notification-count should be 0"
}
{
  "id": 425,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . cssSelector ( \"[data-grammar-coach-promo] ▁ button\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Grammar ▁ Coach™\" ) ) ; assertEquals ( \"Your ▁ Key ▁ to ▁ Brilliant ▁ Writing\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; assertEquals ( \"Our ▁ AI-backed ▁ writing ▁ tool ▁ helps ▁ writers ▁ of ▁ all ▁ kinds ▁ produce ▁ high-quality, ▁ \" + \"error-free ▁ work. ▁ From ▁ grammar ▁ corrections ▁ to ▁ Thesaurus.com-powered ▁ synonym ▁ suggestions, ▁ \" + \"Grammar ▁ Coach™ ▁ ensures ▁ every ▁ essay, ▁ email, ▁ and ▁ application ▁ letter ▁ is ▁ perfectly ▁ written.\" , driver . findElement ( By . cssSelector ( \"[data-hero-paragraph]\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-signed-out-grammar-coach]\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; By countLocator = By . cssSelector ( \"[data-notification-count]\" ) ; By textLocator = By . cssSelector ( \"[data-gramm]\" ) ; By buttonLocator = By . cssSelector ( \"[data-edit-button]\" ) ; element . findElement ( By . cssSelector ( \"[role='textbox']\" ) ) . sendKeys ( \"he ▁ go ▁ home\" ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"[data-check-grammar-message] ▁ span:not([data-grammar-corrections-count])\" ) , \"Please ▁ check ▁ the ▁ highlighted ▁ grammar ▁ fixes.\" ) ) ; assertEquals ( \"2\" , element . findElement ( countLocator ) . getText ( ) ) ; element . findElement ( buttonLocator ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( textLocator , \"He ▁ go ▁ home\" ) ) ; element . findElement ( buttonLocator ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( textLocator , \"He ▁ went ▁ home\" ) ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"[data-check-grammar-message]\" ) , \"No ▁ grammar ▁ mistakes!\" ) ) ; assertEquals ( \"0\" , element . findElement ( countLocator ) . getText ( ) ) ; } ",
  "Test Name": "Grammar Coach - Wrong Grammar",
  "Test Description": "Verify that when entering a sentence with wrong grammarto Grammar Coach, but the correcting it using the WRITING ASSISTANT, it works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the Grammar Coach Try Now button at the top of the page Grammar Coach™ Your Key to Brilliant Writing page will be displayed, with the text \"Our AI-backed writing tool helps writers of all kinds produce high-quality, error-free work. From grammar corrections to Thesaurus.com-powered synonym suggestions, Grammar Coach™ ensures every essay, email, and application letter is perfectly written.\" 2. Scroll down to the grammar coach 3. Write \"he go home\" in the textbox The grammar-message should be \"Please check the highlighted grammar fixes.\" and data-notification-count should be 2 4. Click the first edit button in the writing assistant Sentence should change to \"He go home\" 5. Click the remained edit button in the writing assistant Sentence should change to \"He went home\", the grammar-message should be \"No grammar mistakes!\" and data-notification-count should be 0"
}
{
  "id": 426,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . cssSelector ( \"[data-grammar-coach-promo] ▁ button\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Grammar ▁ Coach™\" ) ) ; assertEquals ( \"Your ▁ Key ▁ to ▁ Brilliant ▁ Writing\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; assertEquals ( \"Our ▁ AI-backed ▁ writing ▁ tool ▁ helps ▁ writers ▁ of ▁ all ▁ kinds ▁ produce ▁ high-quality, ▁ \" + \"error-free ▁ work. ▁ From ▁ grammar ▁ corrections ▁ to ▁ Thesaurus.com-powered ▁ synonym ▁ suggestions, ▁ \" + \"Grammar ▁ Coach™ ▁ ensures ▁ every ▁ essay, ▁ email, ▁ and ▁ application ▁ letter ▁ is ▁ perfectly ▁ written.\" , driver . findElement ( By . cssSelector ( \"[data-hero-paragraph]\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-faq-section]\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element . findElements ( By . cssSelector ( \"button[data-faq-dropdown]\" ) ) . get ( 1 ) . click ( ) ; assertNotEquals ( \"none\" , element . findElements ( By . cssSelector ( \"[data-faq-answer]\" ) ) . get ( 1 ) . getCssValue ( \"display\" ) ) ; } ",
  "Test Name": "Grammar Coach - Frequently Asked Questions",
  "Test Description": "Verify that the clicking function in the Grammar Coach - Frequently Asked Questions works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the Grammar Coach Try Now button at the top of the page Grammar Coach™ Your Key to Brilliant Writing page will be displayed, with the text \"Our AI-backed writing tool helps writers of all kinds produce high-quality, error-free work. From grammar corrections to Thesaurus.com-powered synonym suggestions, Grammar Coach™ ensures every essay, email, and application letter is perfectly written.\" 2. Scroll down to the Frequently Asked Questions section 3. Click one of the questions The answer should become visible"
}
{
  "id": 427,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . cssSelector ( \"[data-grammar-coach-promo] ▁ button\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Grammar ▁ Coach™\" ) ) ; assertEquals ( \"Your ▁ Key ▁ to ▁ Brilliant ▁ Writing\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; assertEquals ( \"Our ▁ AI-backed ▁ writing ▁ tool ▁ helps ▁ writers ▁ of ▁ all ▁ kinds ▁ produce ▁ high-quality, ▁ \" + \"error-free ▁ work. ▁ From ▁ grammar ▁ corrections ▁ to ▁ Thesaurus.com-powered ▁ synonym ▁ suggestions, ▁ \" + \"Grammar ▁ Coach™ ▁ ensures ▁ every ▁ essay, ▁ email, ▁ and ▁ application ▁ letter ▁ is ▁ perfectly ▁ written.\" , driver . findElement ( By . cssSelector ( \"[data-hero-paragraph]\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"[data-upgrade-button]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".section-grammar-coach-content-block ▁ h1\" ) , \"Grammar ▁ Coach™ ▁ Premium. ▁ Elevate ▁ Your ▁ Writing.\" ) ) ; List < WebElement > options = driver . findElements ( By . cssSelector ( \".section__pricing-item ▁ ▁ h2\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Monthly\" , \"Yearly\" , \"Quarterly\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : options ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . cssSelector ( \".section__pricing-item-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . tagName ( \"form\" ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='sign ▁ up']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Grammar Coach - Upgrade To Premium Now",
  "Test Description": "Verift the Grammar Coach - Upgrade To Premium Now button functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the Grammar Coach Try Now button at the top of the page Grammar Coach™ Your Key to Brilliant Writing page will be displayed, with the text \"Our AI-backed writing tool helps writers of all kinds produce high-quality, error-free work. From grammar corrections to Thesaurus.com-powered synonym suggestions, Grammar Coach™ ensures every essay, email, and application letter is perfectly written.\" 2. Click the Upgrade to Premium Now button Grammar Coach™ Premium. Elevate Your Writing. Will be presented, with Monthly, Yearly and Quarterly options 3. Select one of the plans A form will be presented, with a Sign Up button"
}
{
  "id": 428,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='WRITING']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Grammar ▁ Coach\" , \"Writing ▁ Prompts\" , \"Grammar ▁ 101\" , \"Writing ▁ Tips\" , \"Ways ▁ To ▁ Say ▁ It ▁ Better\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"section ▁ h2\" ) , \"How ▁ To ▁ Use ▁ Writing ▁ Prompts ▁ To ▁ Kickstart ▁ And ▁ Improve ▁ Writing\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // a[contains(text(), ▁ 'PROMPT')]\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . xpath ( \" // a[text()='LOOK ▁ FOR ▁ A ▁ WRITING ▁ PROMPT ▁ FOR ▁ YOUR ▁ KID ▁ HERE']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Writing ▁ Prompts ▁ For ▁ Young ▁ Kids\" ) ) ; } ",
  "Test Name": "Writing Prompts - Links",
  "Test Description": "Writing Prompts clicking a link functionality works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on WRITING tab  WRITING submenu should get opened, containing Grammar Coach, Writing Prompts, Grammar 101, Writing Tips, Ways To Say It Better 2. Click on Writing Prompts How To Use Writing Prompts To Kickstart And Improve Writing page should be displayed, with links for different writing prompts 3. Click on the \"LOOK FOR A WRITING PROMPT FOR YOUR KID HERE\" link Writing Prompts For Young Kids page will be presented"
}
{
  "id": 429,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='WRITING']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Grammar ▁ Coach\" , \"Writing ▁ Prompts\" , \"Grammar ▁ 101\" , \"Writing ▁ Tips\" , \"Ways ▁ To ▁ Say ▁ It ▁ Better\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"section ▁ h2\" ) , \"How ▁ To ▁ Use ▁ Writing ▁ Prompts ▁ To ▁ Kickstart ▁ And ▁ Improve ▁ Writing\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > categoryElements = driver . findElements ( By . xpath ( \" // *[text()='Categories']/following-sibling:: */ a\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"LOVE\" , \"KIDS\" , \"HOLIDAY\" , \"FUNNY\" , \"JOURNAL\" , \"MYSTERY\" , \"NOVELS\" , \"DIALOGUES\" ) ) ; for ( WebElement element : categoryElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; categoryElements . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Writing ▁ Prompts ▁ For ▁ Young ▁ Kids\" ) ) ; } ",
  "Test Name": "Writing Prompts - Change Category",
  "Test Description": "Writing Prompts changing a category functionality works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on WRITING tab  WRITING submenu should get opened, containing Grammar Coach, Writing Prompts, Grammar 101, Writing Tips, Ways To Say It Better 2. Click on Writing Prompts How To Use Writing Prompts To Kickstart And Improve Writing page should be displayed, with the categories LOVE, KIDS, HOLIDAY, FUNNY, JOURNAL, MYSTERY, NOVELS, DIALOGUES 3. Click on KIDS category Writing Prompts For Young Kids page will be presented"
}
{
  "id": 430,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='LEARN']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Lists\" , \"Online ▁ Tutors\" , \"New ▁ Words\" , \"Trending ▁ Words\" , \"All ▁ About ▁ English\" , \"Science ▁ And ▁ Technology\" , \"Literature ▁ And ▁ Arts\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 4 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \".header__logo ▁ img\" ) , \"alt\" , \"Dictionary.com\" ) ) ; assertTrue ( driver . findElement ( By . className ( \"articles\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \".articles ▁ .article__title ▁ a\" ) ) ; String name = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , name ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"article\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Learn All About English - Article",
  "Test Description": "Verify that clicking an article in All About English page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on LEARN tab LEARN submenu should get opened, containing the options: Word Lists, Online Tutors, New Words, Trending Words, All About English, Science And Technology, Literature And Arts 2. Click on All About English The page turned to a dictionary.com page, with articles 3. Click on the first article in the articles grid An article about the clicked card should get loaded"
}
{
  "id": 431,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 2 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"The ▁ Dictionary.com ▁ Word ▁ Of ▁ The ▁ Year ▁ For ▁ 2020 ▁ Is ▁ …\" ) ) ; assertEquals ( \"pandemic:\" , driver . findElement ( By . cssSelector ( \"h3 ▁ strong\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 0 ] ) ; } ",
  "Test Name": "Word Of The Year",
  "Test Description": "Verify Word of the Year page is displayed well",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. find Word Of The Year and click it The page \"The Dictionary.com Word Of The Year For 2020 Is …\" gets loaded with the word pandemic"
}
{
  "id": 432,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h4[text()='CHECK ▁ OUT ▁ OUR ▁ OTHER ▁ PRODUCTS']\" ) ) ) ) ; driver . findElement ( By . id ( \"alexaskill\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Amazon']\" ) ) ) ; assertEquals ( \"Dictionary.com ▁ Word ▁ of ▁ the ▁ Day\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "OTHER PRODUCTS - ALEXA SKILL",
  "Test Description": "Verify clicking ALEXA SKILL under OTHER PRODUCTS functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the bottom of the page CHECK OUT OUR OTHER PRODUCTS is displayed 2. Click ALEXA SKILL An amazon page with the item \"Dictionary.com Word of the Day\" by Dictionary.com will get loaded"
}
{
  "id": 433,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h4[text()='CHECK ▁ OUT ▁ OUR ▁ OTHER ▁ PRODUCTS']\" ) ) ) ) ; driver . findElement ( By . id ( \"lexico-es\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[alt='Lexico ▁ logo']\" ) ) ) ; assertEquals ( \"SPANISH\" , driver . findElement ( By . className ( \"sbSelector\" ) ) . getText ( ) ) ; } ",
  "Test Name": "OTHER PRODUCTS - LEXICO SPANISH",
  "Test Description": "Verify clicking LEXICO SPANISH under OTHER PRODUCTS functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the bottom of the page CHECK OUT OUR OTHER PRODUCTS is displayed 2. Click LEXICO SPANISH The LEXICO page will get loaded, with SPANISH selected in the search dropdown"
}
{
  "id": 434,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h4[text()='CHECK ▁ OUT ▁ OUR ▁ OTHER ▁ PRODUCTS']\" ) ) ) ) ; driver . findElement ( By . id ( \"dcom\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"DICTIONARY.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".trending-words-word-block\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "OTHER PRODUCTS - DICTIONARY.COM",
  "Test Description": "Verify clicking DICTIONARY.COM under OTHER PRODUCTS functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the bottom of the page CHECK OUT OUR OTHER PRODUCTS is displayed 2. Click LEXICO ENGLISH The page should get loaded to Dictionary.com page and show the TRENDING section"
}
{
  "id": 435,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h4[text()='CHECK ▁ OUT ▁ OUR ▁ OTHER ▁ PRODUCTS']\" ) ) ) ) ; driver . findElement ( By . id ( \"lexico-en\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[alt='Lexico ▁ logo']\" ) ) ) ; assertEquals ( \"UK ▁ DICTIONARY\" , driver . findElement ( By . className ( \"sbSelector\" ) ) . getText ( ) ) ; } ",
  "Test Name": "OTHER PRODUCTS - LEXICO ENGLISH",
  "Test Description": "Verify clicking LEXICO ENGLISH under OTHER PRODUCTS functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Scroll to the bottom of the page CHECK OUT OUR OTHER PRODUCTS is displayed 2. Click LEXICO ENGLISH The LEXICO page will get loaded, with UK Dictionary selected in the search dropdown"
}
{
  "id": 436,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"DICTIONARY.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".trending-words-word-block\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='ONLINE ▁ TUTORING ▁ HELP! ▁ ']/ancestor::section\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; List < WebElement > stepElements = element . findElements ( By . tagName ( \"h3\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"English ▁ Tutors\" , \"Math ▁ Tutors\" , \"Test ▁ Prep\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : stepElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; stepElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . titleIs ( \"Appointy\" ) ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".info ▁ p\" ) , \"Welcome ▁ to ▁ Dictionary ▁ Academy ▁ Tutors, ▁ where ▁ our ▁ teacher-trained ▁ certified ▁ tutors ▁ are ▁ \" + \"waiting ▁ to ▁ engage ▁ your ▁ learner! ▁ Click ▁ the ▁ subject ▁ and ▁ grade ▁ level ▁ of ▁ your ▁ learner. ▁ Next, ▁ you’ll ▁ \" + \"select ▁ the ▁ time ▁ that ▁ works ▁ for ▁ you ▁ and ▁ choose ▁ from ▁ our ▁ list ▁ of ▁ expert ▁ tutors. ▁ It's ▁ that ▁ easy!\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".page-services\" ) ) ) ; } ",
  "Test Name": "Dictionary.com ONLINE TUTORING HELP",
  "Test Description": "Verify the online tutoring help in the dictionary.com home page functions",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the DICTIONARY.COM tab The page should get loaded to Dictionary.com page and show the TRENDING section 2. Scroll to \"ONLINE TUTORING HELP!\" title 3 Steps will be presented: English Tutors, Math Tutors, Test Prep 3. Click English Tutors Appointy page will be displayed, with the text \"Welcome to Dictionary Academy Tutors, where our teacher-trained certified tutors are waiting to engage your learner! Click the subject and grade level of your learner. Next, you’ll select the time that works for you and choose from our list of expert tutors. It's that easy!\" and list of services"
}
{
  "id": 437,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"DICTIONARY.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".trending-words-word-block\" ) ) . isDisplayed ( ) ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . cssSelector ( \"[data-browse-az]\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element . findElement ( By . xpath ( \" // *[text()='BROWSE ▁ DICTIONARY.COM']\" ) ) ) ) ; List < WebElement > buttons = driver . findElements ( By . cssSelector ( \"[data-browse-az] ▁ div:nth-of-type(2) ▁ a\" ) ) ; assertEquals ( \"#\" , buttons . get ( 0 ) . getText ( ) ) ; for ( int i = 1 ; i < buttons . size ( ) ; i ++ ) { assertEquals ( ( char ) ( i + 64 ) + \"\" + ( char ) ( i + 96 ) , buttons . get ( i ) . getText ( ) ) ; } buttons . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"BROWSE ▁ DICTIONARY: ▁ LETTER ▁ \\\"C\\\"\" ) ) ; List < WebElement > words = driver . findElements ( By . cssSelector ( \"[data-testid='list-az-results'] ▁ li ▁ > ▁ a:first-child\" ) ) ; for ( WebElement word : words ) { assertTrue ( word . getText ( ) . toLowerCase ( Locale . ROOT ) . startsWith ( \"c\" ) ) ; } } ",
  "Test Name": "BROWSE DICTIONARY.COM",
  "Test Description": "Verify the BROWSE DICTIONARY.COM section functions and is displayed well",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the DICTIONARY.COM tab The page should get loaded to Dictionary.com page and show the TRENDING section 2. Scroll down the page BROWSE DICTIONARY.COM section should be visible, with alphabet links from Aa to Zz (and # at the beginning) 3. Click the Cc button BROWSE DICTIONARY: LETTER \"C\" page shoul be displayed, with results that start with the letter c."
}
{
  "id": 438,
  "website": "Thesaurus",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.thesaurus.com/\" ) ; driver . findElement ( By . id ( \"dictionary-nav-tab\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".header-tab-active\" ) , \"DICTIONARY.COM\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".trending-words\" ) ) . isDisplayed ( ) ) ; By locator = By . cssSelector ( \"[alt*='ticker']\" ) ; driver . findElement ( locator ) . click ( ) ; assertEquals ( \"play ▁ ticker\" , driver . findElement ( locator ) . getAttribute ( \"alt\" ) ) ; List < WebElement > originalBlocks = driver . findElements ( By . cssSelector ( \".trending-words-word-block\" ) ) ; List < Integer > originalPositions = new ArrayList < > ( ) ; for ( WebElement element : originalBlocks ) { originalPositions . add ( element . getLocation ( ) . x ) ; } Thread . sleep ( 3000 ) ; List < WebElement > newBlocks = driver . findElements ( By . cssSelector ( \".trending-words-word-block\" ) ) ; List < Integer > newPositions = new ArrayList < > ( ) ; for ( WebElement element : newBlocks ) { newPositions . add ( element . getLocation ( ) . x ) ; } assertEquals ( originalPositions , newPositions ) ; } ",
  "Test Name": "Dictionary.com Trending - Pause Button",
  "Test Description": "Verifty the pause button in the trending section works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click the top navigation tab DICTIONARY.COM The page should get loaded to Dictionary.com page and show the TRENDING section 2. Click the pause button next to the TRENDING word The button will teurn into a start button and the trending words will stop in their places."
}
{
  "id": 439,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 2 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"ACRONYMS ▁ DICTIONARY\" ) ) ; assertEquals ( \"FEATURED ▁ TERMS\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \".slick-track ▁ .word-item ▁ h2 ▁ a\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , title ) ) ; } ",
  "Test Name": "Acronyms - Features Terms",
  "Test Description": "Featured Terms in Acronyms Dictionary are displayed and function",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Acronyms ACRONYMS DICTIONARY page should be displayed, including FEATURED TERMS section. 3. Click on the first featured article A page about the clicked acronym should get loaded"
}
{
  "id": 440,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 2 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"ACRONYMS ▁ DICTIONARY\" ) ) ; assertEquals ( \"Home ▁ / ▁ Acronyms\" , driver . findElement ( By . className ( \"breadcrumbs\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \".slick-track ▁ .word-item ▁ h2 ▁ a\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"article-word\" ) ) ) ; assertTrue ( driver . findElement ( By . className ( \"breadcrumbs\" ) ) . getText ( ) . endsWith ( title ) ) ; } ",
  "Test Name": "Acronyms - breadcrumbs",
  "Test Description": "Verify the breadcrumbs in Acronyms Dictionary are correct",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Acronyms ACRONYMS DICTIONARY page should be displayed, with the breadcrumbs \"Home / Acronyms\" 3. Click on an article the page wil load with breadcrumbs that end with the article's name"
}
{
  "id": 441,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 2 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"ACRONYMS ▁ DICTIONARY\" ) ) ; assertEquals ( \"MORE ▁ FROM ▁ ACRONYMS\" , driver . findElement ( By . cssSelector ( \"#just-added ▁ h2\" ) ) . getText ( ) ) ; List < WebElement > links = driver . findElements ( By . cssSelector ( \"#just-added ▁ .list ▁ a\" ) ) ; assertEquals ( 60 , links . size ( ) ) ; String title = links . get ( 0 ) . getText ( ) ; links . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , title ) ) ; } ",
  "Test Name": "Acronyms - More From Acronyms - Link",
  "Test Description": "Clicking one of the links in the More From Acronyms section in the Acronyms page is working",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Acronyms ACRONYMS DICTIONARY page should be displayed, including MORE FROM ACRONYMS section, with 60 acronyms. 3. Click on one of the links A page about the clicked acronym should get loaded"
}
{
  "id": 442,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 2 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"ACRONYMS ▁ DICTIONARY\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > categories = driver . findElements ( By . cssSelector ( \".section-atw-categories ▁ a\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"ACRONYMS\" , \"EMOJI\" , \"FAMOUS ▁ PEOPLE\" , \"FASHION\" , \"FICTIONAL ▁ CHARACTERS\" , \"GENDER ▁ & ▁ SEXUALITY\" , \"HISTORICAL ▁ & ▁ CURRENT ▁ EVENTS\" , \"MEMES\" , \"POLITICS\" , \"POP ▁ CULTURE\" , \"RELIGION\" , \"SLANG\" , \"TECH ▁ & ▁ SCIENCE\" , \"TRANSLATIONS\" ) ) ; for ( WebElement element : categories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; categories . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"EMOJI ▁ DICTIONARY\" ) ) ; } ",
  "Test Name": "Acronyms - Categories",
  "Test Description": "Verify changing to a different dictionary usong the categories in the Acronyms page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Acronyms ACRONYMS DICTIONARY page should be displayed, including the categories ACRONYMS, EMOJI, FAMOUS PEOPLE, FASHION, FICTIONAL CHARACTERS, GENDER & SEXUALITY, HISTORICAL & CURRENT EVENTS, MEMES, POLITICS, POP CULTURE, RELIGION, SLANG, TECH & SCIENCE, TRANSLATIONS 3. Click on EMOJI EMOJI DICTIONARY page will be displayed"
}
{
  "id": 443,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Compare ▁ Synonyms']/..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Compare ▁ similar ▁ synonym ▁ words']\" ) ) ) ; assertTrue ( element . findElement ( By . xpath ( \" // h3[text()='Select ▁ up ▁ to ▁ 3 ▁ synonyms ▁ to ▁ compare']\" ) ) . isDisplayed ( ) ) ; List < String > chosenSynonyms = new ArrayList < > ( Arrays . asList ( \"lively\" , \"blessed\" , \"exultant\" ) ) ; for ( String synonym : chosenSynonyms ) { wait . until ( ExpectedConditions . elementToBeClickable ( element . findElement ( By . xpath ( \". // button[text()='\" + synonym + \"']\" ) ) ) ) . click ( ) ; } element . findElement ( By . xpath ( \". // a[text()='Compare ▁ Synonyms']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Compare ▁ Synonyms ▁ of ▁ happy\" ) ) ; List < WebElement > cards = driver . findElements ( By . xpath ( \" // h2/../..\" ) ) ; for ( int i = 0 ; i < cards . size ( ) ; i ++ ) { String synonym = chosenSynonyms . get ( i ) ; assertEquals ( synonym , cards . get ( i ) . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; List < WebElement > subtitles = cards . get ( i ) . findElements ( By . tagName ( \"h3\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Definitions(s)\" , \"Shared ▁ synonyms ▁ between ▁ \" + synonym + \" ▁ and ▁ happy\" , \"Shared ▁ antonyms ▁ between ▁ \" + synonym + \" ▁ and ▁ happy\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : subtitles ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } } ",
  "Test Name": "Compare Synonyms",
  "Test Description": "Verify the compare synonyms function in the synonym page is working",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search the word 'happy' in the search bar assert that the synonyms that are presented are to the wanted word 2. Click the Compare Synonyms button A pop-up with the title \"Select up to 3 synonyms to compare\" will be displayed. 3. Click on three of the presented synonyms (e.g. lively, blessed, exultant) 4. Click the orange Compare Synonyms button Compare Synonyms of happy will be displayed with three cards of the selected synonyms, each contains Definitions(s), Shared synonyms between THE SYNONYM and happy and Shared antonyms between THE SYNONYM and happy"
}
{
  "id": 444,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // button[text()='MEANINGS']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Emoji\" , \"Slang\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"Memes\" , \"Gender ▁ And ▁ Sexuality\" , \"Mixed-Up ▁ Meanings\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 2 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"ACRONYMS ▁ DICTIONARY\" ) ) ; assertEquals ( \"MORE ▁ FROM ▁ ACRONYMS\" , driver . findElement ( By . cssSelector ( \"#just-added ▁ h2\" ) ) . getText ( ) ) ; assertEquals ( 60 , driver . findElements ( By . cssSelector ( \"#just-added ▁ .list ▁ a\" ) ) . size ( ) ) ; assertEquals ( \"1\" , driver . findElement ( By . cssSelector ( \"#just-added ▁ ol\" ) ) . getAttribute ( \"start\" ) ) ; driver . findElement ( By . className ( \"paging-next\" ) ) . click ( ) ; assertEquals ( 60 , driver . findElements ( By . cssSelector ( \"#just-added ▁ .list ▁ a\" ) ) . size ( ) ) ; assertEquals ( \"61\" , driver . findElement ( By . cssSelector ( \"#just-added ▁ ol\" ) ) . getAttribute ( \"start\" ) ) ; } ",
  "Test Name": "Acronyms - More From Acronyms - Next Page",
  "Test Description": "Next page function in the More From Acronyms section in the Acronyms page is working",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Click on MEANINGS tab  MEANINGS submenu should get opened, containing Emoji, Slang, Acronyms, Pop Culture, Memes, Gender And Sexuality, Mixed-Up Meanings 2. Click on Acronyms ACRONYMS DICTIONARY page should be displayed, including MORE FROM ACRONYMS section, with 60 acronyms presented, numbered from 1. 3. Click the next page button in the section Page 2 will be presented with 60 other acronyms, numbered from 61."
}
{
  "id": 445,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element = driver . findElement ( By . cssSelector ( \"[data-testid='wotd']\" ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; String name = element . findElement ( By . cssSelector ( \".wotd-word\" ) ) . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-headword__word\" ) , name ) ) ; } ",
  "Test Name": "Search Result - Word Of The Day",
  "Test Description": "Verify a search result of a synonym page contains a Word Of The Day section",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search the word 'happy' in the search bar assert that the synonyms that are presented are to the wanted word 2. Scroll to the bottom of the page WORD OF THE DAY section will be displayed 3. Click the section A Word of the day label will be presented with the correct Word Of The Day as a title."
}
{
  "id": 446,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[title='Search ▁ for:']\" ) ) ; element . sendKeys ( \"micro\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h2\" ) , \"Search ▁ Results ▁ for: ▁ micro\" ) ) ; List < WebElement > articles = driver . findElements ( By . className ( \"article__content\" ) ) ; for ( int i = 0 ; i < 6 ; i ++ ) { assertTrue ( articles . get ( i ) . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"micro\" ) ) ; } } ",
  "Test Name": "Word Of The Day - Search ",
  "Test Description": "Search for articles in the Word Of The Day page works",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. Find Word Of The Day and click it assert that there is a label of Word Of The Day in the page 3. Search for micro in the search box in the page Search Results for: micro page will be displayed, the first articles contain the word micro"
}
{
  "id": 447,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; String word = driver . findElement ( By . className ( \"otd-item-headword__word\" ) ) . getText ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(), ▁ 'Look ▁ it ▁ up')]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"top-definitions-section\" ) ) ) ; assertEquals ( word , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Word Of The Day - Look It Up ",
  "Test Description": "Look it up function works for the Word Of The Day",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. Find Word Of The Day and click it assert that there is a label of Word Of The Day in the page 3. Click the Look it up button A definition page for the word of the day will be displayed"
}
{
  "id": 448,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"WORD ▁ OF ▁ THE ▁ DAY\" ) ) ; driver . findElement ( By . cssSelector ( \"[data-cy='otd-podcast-play']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . className ( \"current-time\" ) , \"00:00\" ) ) ) ; } ",
  "Test Name": "Listen to the word of the day Podcast",
  "Test Description": "Listen to the word of the day function is working",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. Find Word Of The Day and click it assert that there is a label of Word Of The Day in the page 3. Click the play button in the podcast section The podcast will start playing"
}
{
  "id": 449,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"SYNONYM ▁ OF ▁ THE ▁ DAY\" ) ) ; String word = driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ; word = word . substring ( word . lastIndexOf ( ' ▁ ' ) + 1 ) ; driver . findElement ( By . xpath ( \" // a[contains(text(), ▁ 'See ▁ all ▁ synonyms ▁ for')]\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , word ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "See All Synonyms For Synonym Of The Day",
  "Test Description": "Verify the functionality of the See All Synonyms link for the Synonym Of The Day",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. Find Synonym Of The Day and click it assert that there is a label of Synonym Of The Day in the page 3. Click on SEE ALL SYNONYMS… link A synonyms page for the Synonym Of The Day will be presented in a new tab"
}
{
  "id": 450,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"100\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"0 ▁ results ▁ for ▁ 100\" ) ) ; } ",
  "Test Name": "Search Without Results",
  "Test Description": "Searching a value that doesn't have results will display a \"0 results\" message",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search for 100 A page will be displayed with the text \"0 results for 100\""
}
{
  "id": 451,
  "website": "Thesaurus",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='WORD ▁ OF ▁ THE ▁ DAY']\" ) ) ; element . click ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . xpath ( \". // following-sibling::*[2]\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . xpath ( \". // following-sibling::* // ul // a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Word ▁ Of ▁ The ▁ Day\" , \"Synonym ▁ Of ▁ The ▁ Day\" , \"Word ▁ Of ▁ The ▁ Year\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; titleElements . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"otd-item-wrapper__label\" ) , \"SYNONYM ▁ OF ▁ THE ▁ DAY\" ) ) ; element = driver . findElement ( By . cssSelector ( \".otd-widget__nav--sotd ▁ a\" ) ) ; String dateNumber = element . findElement ( By . tagName ( \"span\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] ; element . click ( ) ; Thread . sleep ( 1000 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[@class='otd-item-headword__date'] /* [contains(text(), ▁ '\" + dateNumber + \"')]\" ) ) ) ) ; } ",
  "Test Name": "Synonym Of The Day - Change Date",
  "Test Description": "Verify in the Synonym Of The Day page it is possible to watch the synonym of the previous day",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search for WORD OF THE DAY element and click on it a submenu is presented that contains the options Word Of The Day, Synonym Of The Day, Word Of The Year 2. Find Synonym Of The Day and click it assert that there is a label of Synonym Of The Day in the page 3. Click on the previous synonym of the day button A synonym of the day section of yesterday's date will be visible"
}
{
  "id": 452,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Browse ▁ by')]\" ) ) ) ) ; List < WebElement > categories = driver . findElements ( By . cssSelector ( \"[id^='atwFooter']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Slang\" , \"Emoji\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"More\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : categories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; categories . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sitemap\" ) ) ) ; assertEquals ( \"EMOJI\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Browse by Category - Emoji - Search Result Page",
  "Test Description": "Browse by Category: Emoji is displayed and functions well in a search results page's footer",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'happy' in the search bar Assert that the synonyms that are presented are to the wanted word 2. Scroll down to the footer Browse by Category line will be displayed, with the categories Slang, Emoji, Acronyms, Pop Culture, More 3. Click on Emoji Site map page will be displayed, with the title Emoji"
}
{
  "id": 453,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Browse ▁ the')]\" ) ) ) ) ; List < WebElement > letters = driver . findElements ( By . cssSelector ( \"[id^='azFooter']\" ) ) ; assertEquals ( \"#\" , letters . get ( 0 ) . getText ( ) ) ; for ( int i = 1 ; i < letters . size ( ) ; i ++ ) { assertEquals ( String . valueOf ( ( char ) ( i + 64 ) ) , letters . get ( i ) . getText ( ) ) ; } letters . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"BROWSE ▁ THESAURUS: ▁ LETTER ▁ \\\"C\\\"\" ) ) ; } ",
  "Test Name": "Browse the Thesaurus - Search Result Page",
  "Test Description": "Browse the Thesaurus line is displayed and functions well in a search results page's footer",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'happy' in the search bar Assert that the synonyms that are presented are to the wanted word 2. Scroll down to the footer Browse the Thesaurus line will be displayed, with # and all the capital letters links 3. Click on C BROWSE THESAURUS: LETTER \"C\" page should be displayed"
}
{
  "id": 454,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Browse ▁ by')]\" ) ) ) ) ; List < WebElement > categories = driver . findElements ( By . cssSelector ( \"[id^='atwFooter']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Slang\" , \"Emoji\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"More\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : categories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; categories . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sitemap\" ) ) ) ; assertEquals ( \"WORD ▁ FACTS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \".sitemap-listing ▁ a\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"article__title\" ) , title ) ) ; } ",
  "Test Name": "Browse by Category - More article - Search Result Page",
  "Test Description": "Browse by Category: More is displayed and functions well in a search results page's footer",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'happy' in the search bar Assert that the synonyms that are presented are to the wanted word 2. Scroll down to the footer Browse by Category line will be displayed, with the categories Slang, Emoji, Acronyms, Pop Culture, More 3. Click on More Site map page will be displayed, with the title WORD FACTS 4. Click on the first article link An article with the same name will be presented"
}
{
  "id": 455,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Browse ▁ by')]\" ) ) ) ) ; List < WebElement > categories = driver . findElements ( By . cssSelector ( \"[id^='atwFooter']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Slang\" , \"Emoji\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"More\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : categories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; categories . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sitemap\" ) ) ) ; assertEquals ( \"WORD ▁ FACTS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > subcategories = driver . findElements ( By . cssSelector ( \".sitemap-header__listing ▁ a\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"EDUCATION\" , \"FUN\" , \"POP ▁ CULTURE\" , \"TRENDING ▁ WORDS\" , \"UNCATEGORIZED\" , \"WORD ▁ FACTS\" ) ) ; for ( WebElement element : subcategories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; subcategories . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , expectedTitles . get ( 1 ) ) ) ; element = driver . findElement ( By . cssSelector ( \".sitemap-listing ▁ a\" ) ) ; String title = element . getText ( ) ; assertEquals ( \"Dictionary.com’s ▁ Ideas ▁ For ▁ Olympic ▁ Events\" , title ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"article__title\" ) , title ) ) ; } ",
  "Test Name": "Browse by Category - More categories - Search Result Page",
  "Test Description": "Browse by Category: More is displayed and functions well in a search results page's footer, including displaying categories in the page",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'happy' in the search bar Assert that the synonyms that are presented are to the wanted word 2. Scroll down to the footer Browse by Category line will be displayed, with the categories Slang, Emoji, Acronyms, Pop Culture, More 3. Click on More Site map page will be displayed, with the title WORD FACTS and the categories list: EDUCATION, FUN, POP CULTURE, TRENDING WORDS, UNCATEGORIZED, WORD FACTS 4. Click on FUN The page's title will change to FUN and the first link will be Dictionary.com’s Ideas For Olympic Events 5. Click the article link An article with the same name will be presented"
}
{
  "id": 456,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"heppy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"0 ▁ results ▁ for ▁ heppy\" ) ) ; element = driver . findElement ( By . xpath ( \" // a[text()='happy']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Search Typo",
  "Test Description": "Verify Searching a word with a typo gets the user to a page with the message \"0 results\" and a suggestion to a word with a synonym page ",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'heppy' in the search bar A page will be displayed with the text \"0 results for heppy\" and a suggestion for \"happy\" 2. Click happy Assert that the synonyms that are presented are to the word \"happy\""
}
{
  "id": 457,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"10\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"10\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Search Number",
  "Test Description": "Verify a number can be searched",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. Search '10' in the search bar Assert that synonyms for 10 are presnted"
}
{
  "id": 458,
  "website": "Thesaurus",
  "code": " void function ( ) { driver . get ( \"https: // www.thesaurus.com/\" ) ; element = driver . findElement ( By . id ( \"searchbar_input\" ) ) ; element . sendKeys ( \"happy\" ) ; element . submit ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"happy\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"meanings\" ) ) . isDisplayed ( ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"footer\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Browse ▁ by')]\" ) ) ) ) ; List < WebElement > categories = driver . findElements ( By . cssSelector ( \"[id^='atwFooter']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Slang\" , \"Emoji\" , \"Acronyms\" , \"Pop ▁ Culture\" , \"More\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : categories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; categories . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sitemap\" ) ) ) ; assertEquals ( \"WORD ▁ FACTS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > subcategories = driver . findElements ( By . cssSelector ( \".sitemap-header__dropdown ▁ option\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Official ▁ Dictionary ▁ Site ▁ Map\" , \"Everything ▁ After ▁ Z ▁ Site ▁ Map\" , \"About ▁ This ▁ Word ▁ Sitemap\" ) ) ; for ( WebElement element : subcategories ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . className ( \"sitemap-header__dropdown\" ) ) . click ( ) ; subcategories . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"SLANG\" ) ) ; assertEquals ( expectedTitles . get ( 2 ) , driver . findElement ( By . cssSelector ( \"option[selected]\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Browse by Category - More dropdown - Search Result Page",
  "Test Description": "Browse by Category: More is displayed and functions well in a search results page's footer, including displaying a dropdown in the page",
  "Preconditions": "1. Navigate to https://www.thesaurus.com",
  "Steps": "1. search the word 'happy' in the search bar Assert that the synonyms that are presented are to the wanted word 2. Scroll down to the footer Browse by Category line will be displayed, with the categories Slang, Emoji, Acronyms, Pop Culture, More 3. Click on More Site map page will be displayed, with the title WORD FACTS and the values in the dropdown: Official Dictionary Site Map, Everything After Z Site Map, About This Word Sitemap 4. Click the dropdown and choose About This Word Sitemap The category is selected and the page's title is SLANG"
}
