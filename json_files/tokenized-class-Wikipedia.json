{"repo_name": "SK_1_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         String path = \"https://www.wikipedia.org/\";\n         driver.get(path);\n         String logoText = driver.findElement(By.className(\"central-textlogo-wrapper\")).getText();\n         assertTrue(logoText.contains(\"Wikipedia\"));\n         assertTrue(logoText.contains(\"The Free Encyclopedia\"));\n     }\n"}
{"repo_name": "SK_2_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         String path = \"https://www.wikipedia.org/\";\n         driver.get(path);\n \n         String[] languagesArray = {\"English\",\n                 \"\u65e5\u672c\u8a9e\",\n                 \"Espa\u00f1ol\",\n                 \"Deutsch\",\n                 \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\",\n                 \"Fran\u00e7ais\",\n                 \"\u4e2d\u6587\",\n                 \"Italiano\",\n                 \"Portugu\u00eas\",\n                 \"Polski\"};\n         Set<String> languagesList = ImmutableSet.copyOf(languagesArray);\n         Set<String> languages = driver.findElementsByClassName(\"central-featured-lang\").stream().map(language ->\n                         ((RemoteWebElement) language).findElementsByXPath(\".//*\")\n                                 .stream()\n                                 .filter(b -> b.getTagName()\n                                         .equals(\"strong\")).findFirst().get().getText()\n                 )\n                 .collect(Collectors.toSet());\n         assertEquals(languagesList, languages);\n     }\n"}
{"repo_name": "SK_3_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         String path = \"https://www.wikipedia.org/\";\n         driver.get(path);\n \n         WebElement searchInput = driver.findElement(By.id(\"search-input\"));\n         assertEquals(searchInput.findElement(By.id(\"searchLanguage\")).getTagName(), \"select\");\n         List<String> searchLanguage = ((RemoteWebElement) searchInput.findElement(By.id(\"searchLanguage\")))\n                 .findElementsByXPath(\".//*\")\n                 .stream().map(WebElement::getText).collect(Collectors.toList());\n         assertTrue(searchLanguage.contains(\"Polski\"));\n     }\n"}
{"repo_name": "SK_4_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() throws InterruptedException {\n         String path = \"https://www.wikipedia.org/\";\n         driver.get(path);\n \n         driver.findElement(By.xpath(\"//span[text()='Read Wikipedia in your language ']\")).click();\n         WebDriverWait wait = new WebDriverWait(driver, 10);\n         Thread.sleep(3000);\n         WebElement el = wait.until(presenceOfElementLocated(By.className(\"lang-list-content\")));\n         List<String> headlines = ((RemoteWebElement) el)\n                 .findElementsByClassName(\"bookshelf\").stream().map(headline ->\n                         headline.findElement(By.tagName(\"bdi\")).getText()\n                 ).collect(Collectors.toList());\n         assertTrue(headlines.stream().allMatch(numberOfArticles -> numberOfArticles.contains(\"00\")));\n     }\n"}
{"repo_name": "SK_6_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         String path = \"https://www.wikipedia.org/\";\n         driver.get(path);\n \n         driver.findElement(By.xpath(\"//span[text()='Apple App Store']\"));\n         driver.findElement(By.xpath(\"//span[text()='Google Play Store']\"));\n     }\n"}
{"repo_name": "SK_7_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n \n         String[] projectNames = {\n                 \"- Commons - Freely usable photos & more\",\n                 \"- Wikibooks - Free textbooks\",\n                 \"- Wikiversity - Free course materials\",\n                 \"- Wikisource - Free library\",\n                 \"- Wikivoyage - Free travel guide\",\n                 \"- Wikinews - Free news source\",\n                 \"- Wikiquote - Free quote compendium\",\n                 \"- Wikispecies - Free species directory\",\n                 \"- Wiktionary - Free dictionary\",\n                 \"- Wikidata - Free knowledge base\",\n                 \"- MediaWiki - Free & open wiki application\",\n                 \"- Meta-Wiki - Community coordination & documentation\"};\n         Set<String> projectNamesList = ImmutableSet.copyOf(projectNames);\n \n         WebElement otherProjects = driver.findElementByClassName(\"other-projects\");\n         List<String> otherProjectDescriptions = otherProjects.findElements(By.className(\"other-project-text\")).stream().map(project ->\n                         ((RemoteWebElement) project).findElementsByXPath(\".//*\")\n                                 .stream()\n                                 .map(WebElement::getText)\n                                 .collect(Collectors.joining(\" - \")))\n                 .map(projectDescription -> \"- \" + projectDescription)\n                 .collect(Collectors.toList());\n         assertTrue(otherProjectDescriptions.containsAll(projectNamesList));\n     }\n"}
{"repo_name": "SK_10_Amir", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() throws InterruptedException {\n         String path = \"https://www.wikipedia.org/\";\n         driver.get(path);\n         List<WebElement> languages = driver.findElements(By.className(\"central-featured-lang\"));\n         Optional<WebElement> english = languages.stream().filter(language -> language.getAttribute(\"lang\").equals(\"en\")).findFirst();\n         assert english.isPresent();\n         assertEquals(english.get().getAttribute(\"title\"), \"English \u2014 Wikipedia \u2014 The Free Encyclopedia\");\n         english.get().findElement(By.tagName(\"a\")).click();\n         Thread.sleep(3000);\n         assertEquals(driver.getCurrentUrl(), \"https://en.wikipedia.org/wiki/Main_Page\");\n         driver.findElement(By.xpath(\"//a[text()='Main page']\"));\n \n         Map<String, List<String>> languagesWithExpectedResults = ImmutableMap.<String, List<String>>builder()\n                 .put(\"es\", ImmutableList.of(\"Espa\u00f1ol \u2014 Wikipedia \u2014 La enciclopedia libre\", \"Portada\"))\n                 .put(\"ru\", ImmutableList.of(\"Russkiy \u2014 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f \u2014 \u0421\u0432\u043e\u0431\u043e\u0434\u043d\u0430\u044f \u044d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u044f\", \"\u0417\u0430\u0433\u043b\u0430\u0432\u043d\u0430\u044f\"))\n                 .put(\"zh\", ImmutableList.of(\"Zh\u014dngw\u00e9n \u2014 \u7dad\u57fa\u767e\u79d1 \u2014 \u81ea\u7531\u7684\u767e\u79d1\u5168\u66f8\", \"\u9996\u9875\"))\n                 .put(\"pt\", ImmutableList.of(\"Portugu\u00eas \u2014 Wikip\u00e9dia \u2014 A enciclop\u00e9dia livre\", \"P\u00e1gina principal\"))\n                 .put(\"ja\", ImmutableList.of(null, \" \u30e1\u30a4\u30f3\u30da\u30fc\u30b8\"))\n                 .put(\"de\", ImmutableList.of(\"Deutsch \u2014 Wikipedia \u2014 Die freie Enzyklop\u00e4die\", \"Hauptseite\"))\n                 .build();\n \n         WebElement lang;\n         for (Map.Entry<String, List<String>> langEntry : languagesWithExpectedResults.entrySet()) {\n             driver.get(path);\n             lang = languages.stream().filter(language -> language.getAttribute(\"lang\").equals(langEntry.getKey())).findFirst().get();\n             assertEquals(lang.getAttribute(\"title\"), langEntry.getValue().get(0));\n             driver.findElement(By.xpath(\"//a[text()='\" + langEntry.getValue().get(1) + \"']\"));\n         }\n     }\n"}
{"repo_name": "SK_1_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         element = driver.findElement(By.className(\"central-textlogo__image\"));\n         assertTrue(element.isDisplayed());\n         assertEquals(\"Wikipedia\", element.getText());\n         assertEquals(\"center\", element.getCssValue(\"text-align\"));\n         // locator uses the fact that subtitle is under the title\n         element = driver.findElement(By.xpath(\"//following-sibling::strong\"));\n         assertTrue(element.isDisplayed());\n         assertEquals(\"The Free Encyclopedia\", element.getText());\n         assertEquals(\"center\", element.getCssValue(\"text-align\"));\n     }\n"}
{"repo_name": "SK_2_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         assertTrue(driver.findElement(By.className(\"central-featured-logo\")).isDisplayed());\n         element = driver.findElement(By.className(\"central-featured-logo\"));\n         // check the presence of 10 languages\n         List<WebElement> languagesElements = driver.findElements(By.cssSelector(\".central-featured > *\"));\n         assertEquals(10, driver.findElements(By.cssSelector(\".central-featured > *\")).size());\n         List<String> languagesNames = new LinkedList<>(Arrays.asList(\"\u65e5\u672c\u8a9e\", \"Deutsch\", \"Fran\u00e7ais\", \"Italiano\", \"Polski\", \"English\", \"Espa\u00f1ol\", \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\", \"\u4e2d\u6587\", \"Portugu\u00eas\"));\n         int countRight = 0, countLeft = 0;\n         for (WebElement langElement : languagesElements) {\n             if (langElement.getLocation().getX() > element.getLocation().getX())\n                 countRight++;\n             else\n                 countLeft++;\n             String currentLanguage = langElement.findElement(By.xpath(\".//strong\")).getText();\n             languagesNames.remove(currentLanguage);\n             assertTrue(langElement.findElement(By.xpath(\".//small\")).isDisplayed()); // number of articles id displayed\n         }\n         assertEquals(5, countRight);\n         assertEquals(5, countLeft);\n         assertEquals(0, languagesNames.size());\n     }\n"}
{"repo_name": "SK_3_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         assertTrue(driver.findElement(By.id(\"searchInput\")).isDisplayed());\n         assertTrue(driver.findElement(By.cssSelector(\"[for='searchLanguage']\")).isDisplayed());\n         By buttonLocator = By.cssSelector(\"[data-jsl10n='search-input-button']\");\n         assertTrue(driver.findElement(buttonLocator).isDisplayed());\n         assertEquals(\"rgba(51, 102, 204, 1)\",\n                 driver.findElement(buttonLocator).findElement(By.xpath(\"..\")).getCssValue(\"background-color\"));\n         driver.findElement(By.id(\"searchLanguage\")).click();\n         assertTrue(driver.findElement(By.xpath(\"//option[text()='Polski']\")).isDisplayed());\n     }\n"}
{"repo_name": "SK_4_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         WebDriverWait wait = new WebDriverWait(driver, 2000);\n         driver.get(\"https://www.wikipedia.org/\");\n         element = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[text()='Read Wikipedia in your language']\")));\n         assertTrue(driver.findElement(By.className(\"svg-arrow-down-blue\")).isDisplayed()); // arrow\n         element.click();\n \n         element = wait.until(ExpectedConditions.presenceOfElementLocated(By.className(\"lang-list-content\")));\n         List<WebElement> headers = driver.findElements(By.cssSelector(\".lang-list-content > h2\"));\n         assertEquals(5, headers.size()); //5 categories\n     }\n"}
{"repo_name": "SK_5_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         By locator = By.className(\"footer-sidebar-content\");\n         assertTrue(driver.findElement(locator).isDisplayed());\n         String expectedDescriptionText = \"Wikipedia is hosted by the Wikimedia Foundation, a non-profit organization that also hosts a range of other projects.\\n\" +\n                 \"You can support our work with a donation.\";\n         assertEquals(expectedDescriptionText, driver.findElement(locator).getText());\n     }\n"}
{"repo_name": "SK_6_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         WebDriverWait wait = new WebDriverWait(driver, 2000);\n         element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\"[data-jsl10n='portal.app-links.description']\")));\n         assertTrue(element.isDisplayed());\n         assertTrue(driver.findElement(By.cssSelector(\"[data-jsl10n='portal.app-links.google-store']\")).isDisplayed());\n         assertTrue(driver.findElement(By.cssSelector(\"[data-jsl10n='portal.app-links.apple-store']\")).isDisplayed());\n     }\n"}
{"repo_name": "SK_7_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         WebDriverWait wait = new WebDriverWait(driver, 2000);\n         wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(\"other-project\")));\n         List<WebElement> projects = driver.findElements(By.className(\"other-project\"));\n         assertEquals(12, projects.size());\n         List<String> expectedProjectsDescription = new LinkedList<>(Arrays.asList(\n                 \"Commons - Freely usable photos & more\",\n                 \"Wikibooks - Free textbooks\",\n                 \"Wikiversity - Free course materials\",\n                 \"Wikisource - Free library\",\n                 \"Wikivoyage - Free travel guide\",\n                 \"Wikinews - Free news source\",\n                 \"Wikiquote - Free quote compendium\",\n                 \"Wikispecies - Free species directory\",\n                 \"Wiktionary - Free dictionary\",\n                 \"Wikidata - Free knowledge base\",\n                 \"MediaWiki - Free & open wiki application\",\n                 \"Meta-Wiki - Community coordination & documentation\"));\n         List<String> actualProjectsDescription = new LinkedList<>();\n         for (WebElement p : projects) {\n             String text = p.getText().replace(\"\\n\", \" - \");\n             actualProjectsDescription.add(text);\n         }\n         assertEquals(expectedProjectsDescription, actualProjectsDescription);\n     }\n"}
{"repo_name": "SK_8_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         element = driver.findElement(By.cssSelector(\"[data-jsl10n='license']\"));\n         assertTrue(element.findElement(By.xpath(\"//./a\")).isDisplayed());\n         assertEquals(\"This page is available under the Creative Commons Attribution-ShareAlike License\", element.getText());\n         element = driver.findElement(By.cssSelector(\"[data-jsl10n='terms']\"));\n         assertTrue(element.findElement(By.xpath(\"//./a\")).isDisplayed());\n         assertEquals(\"Terms of Use\", element.getText());\n         element = driver.findElement(By.cssSelector(\"[data-jsl10n='privacy-policy']\"));\n         assertTrue(element.findElement(By.xpath(\"//./a\")).isDisplayed());\n         assertEquals(\"Privacy Policy\", element.getText());\n     }\n"}
{"repo_name": "SK_9_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://www.wikipedia.org/\");\n         assertTrue(driver.findElement(By.className(\"central-textlogo__image\")).isDisplayed());\n         assertTrue(driver.findElement(By.className(\"central-featured-logo\")).isDisplayed());\n         assertTrue(driver.findElement(By.className(\"footer\")).isDisplayed());\n     }\n"}
{"repo_name": "SK_10_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         Map<String, List<String>> languagesInfo = new HashMap<String, List<String>>() {{\n             put(\"English\", new ArrayList<>(Arrays.asList(\"English \u2014 Wikipedia \u2014 The Free Encyclopedia\", \"Main page\")));\n             put(\"Espa\u00f1ol\", new ArrayList<>(Arrays.asList(\"Espa\u00f1ol \u2014 Wikipedia \u2014 La enciclopedia libre\", \"Portada\")));\n             put(\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\", new ArrayList<>(Arrays.asList(\"Russkiy \u2014 \u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f \u2014 \u0421\u0432\u043e\u0431\u043e\u0434\u043d\u0430\u044f \u044d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u044f\", \"\u0417\u0430\u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\")));\n             put(\"\u4e2d\u6587\", new ArrayList<>(Arrays.asList(\"Zh\u014dngw\u00e9n \u2014 \u7dad\u57fa\u767e\u79d1 \u2014 \u81ea\u7531\u7684\u767e\u79d1\u5168\u66f8\", \"\u9996\u9875\")));\n             put(\"Portugu\u00eas\", new ArrayList<>(Arrays.asList(\"Portugu\u00eas \u2014 Wikip\u00e9dia \u2014 A enciclop\u00e9dia livre\", \"P\u00e1gina principal\")));\n             put(\"\u65e5\u672c\u8a9e\", new ArrayList<>(Arrays.asList(\"Nihongo \u2014 \u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2 \u2014 \u30d5\u30ea\u30fc\u767e\u79d1\u4e8b\u5178\", \"\u30e1\u30a4\u30f3\u30da\u30fc\u30b8\")));\n             put(\"Deutsch\", new ArrayList<>(Arrays.asList(\"Deutsch \u2014 Wikipedia \u2014 Die freie Enzyklop\u00e4die\", \"Hauptseite\")));\n         }};\n         languagesInfo.forEach((lang, expectedStrings) -> {\n             driver.get(\"https://www.wikipedia.org/\");\n             element = driver.findElement(By.xpath(\"//strong[text()='\" + lang + \"']/..\"));\n             Actions actions = new Actions(driver);\n             actions.moveByOffset(0, 0).moveToElement(element).perform();\n             assertEquals(expectedStrings.get(0), element.getAttribute(\"title\"));\n             element.click();\n             assertEquals(expectedStrings.get(1), driver.findElement(By.id(\"n-mainpage-description\")).getText());\n         });\n     }\n"}
{"repo_name": "SK_11_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         Map<String, String> languagesInfo = new HashMap<String, String>() {{\n             put(\"Polski\", \"Strona g\u0142\u00f3wna\");\n             put(\"Dansk\", \"Forside\");\n             put(\"Scots\", \"Main page\");\n             put(\"Akan\", \"Main page\");\n             put(\"Romani\", \"Sherutni patrin\");\n         }};\n \n         By buttonLocator = By.xpath(\"//*[text()='Read Wikipedia in your language']\");\n         Actions actions = new Actions(driver);\n \n         languagesInfo.forEach((language, expectedMainPageText) -> {\n             driver.get(\"https://www.wikipedia.org/\");\n             assertTrue(driver.findElement(By.className(\"central-textlogo__image\")).isDisplayed());\n             assertTrue(driver.findElement(By.className(\"central-featured-logo\")).isDisplayed());\n             assertTrue(driver.findElement(By.className(\"footer\")).isDisplayed());\n \n             assertTrue(driver.findElement(buttonLocator).isDisplayed());\n             assertTrue(driver.findElement(buttonLocator).isEnabled());\n             actions.moveByOffset(0, 0).moveToElement(driver.findElement(buttonLocator)).click().perform();\n             WebDriverWait wait1 = new WebDriverWait(driver, 2000);\n             wait1.until(ExpectedConditions.visibilityOfElementLocated(By.id(\"js-lang-lists\")));\n             By locator = By.xpath(\"//a[text()='\" + language + \"']\");\n             wait1.until(ExpectedConditions.visibilityOfElementLocated(locator));\n             element = wait1.until(ExpectedConditions.elementToBeClickable(locator));\n             element.click();\n \n             By mainPageLocator = By.id(\"n-mainpage-description\");\n             if (language.equals(\"Dansk\"))\n                 mainPageLocator = By.id(\"n-mainpage\");\n             element = wait1.until(ExpectedConditions.presenceOfElementLocated(mainPageLocator));\n             assertEquals(expectedMainPageText, element.getText());\n         });\n     }\n"}
{"repo_name": "SK_12_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://en.wikipedia.org/wiki/Main_Page\");\n         assertTrue(driver.findElement(By.id(\"mw-head\")).isDisplayed());\n         assertTrue(driver.findElement(By.id(\"mw-panel\")).isDisplayed());\n         assertTrue(driver.findElement(By.id(\"bodyContent\")).isDisplayed());\n     }\n"}
{"repo_name": "SK_13_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://en.wikipedia.org/wiki/Main_Page\");\n         assertTrue(driver.findElement(By.className(\"mw-wiki-logo\")).isDisplayed()); // logo\n         List<WebElement> categoriesElements = driver.findElements(By.xpath(\"//*[@id='mw-panel']/nav/h3\"));\n         List<String> expectedCategoriesNames = new LinkedList<>(Arrays.asList(\"Contribute\", \"Tools\", \"Print/export\", \"In other projects\", \"Languages\"));\n         List<String> actualCategoriesNames = new LinkedList<>();\n         for (WebElement element : categoriesElements) {\n             String categoryName = element.getText();\n             if (!categoryName.equals(\"\"))\n                 actualCategoriesNames.add(categoryName);\n         }\n         assertEquals(expectedCategoriesNames, actualCategoriesNames);\n     }\n"}
{"repo_name": "SK_14_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://en.wikipedia.org/wiki/Main_Page\");\n         assertTrue(driver.findElement(By.id(\"pt-anonuserpage\")).isDisplayed()); // info if the user is logged in or not\n         List<WebElement> linkElements = driver.findElements(By.xpath(\"//*[@id='p-personal']//*[@class='vector-menu-content-list']/li/a\"));\n         List<String> expectedLinkNames = new LinkedList<>(Arrays.asList(\"Talk\", \"Contributions\", \"Create account\", \"Log in\"));\n         List<String> actualLinkNames = new LinkedList<>();\n         for (WebElement element : linkElements) {\n             actualLinkNames.add(element.getText());\n         }\n         assertEquals(expectedLinkNames, actualLinkNames);\n \n         List<WebElement> tabsElements = driver.findElements(By.xpath(\"//*[@id='p-namespaces']//*[@class='vector-menu-content-list']/li/a\"));\n         tabsElements.addAll(driver.findElements(By.xpath(\"//*[@id='p-views']//*[@class='vector-menu-content-list']/li/a\")));\n         List<String> expectedTabsNames = new LinkedList<>(Arrays.asList(\"Main Page\", \"Talk\", \"Read\", \"View source\", \"View history\"));\n         List<String> actualTabsNames = new LinkedList<>();\n         for (WebElement element : tabsElements) {\n             actualTabsNames.add(element.getText());\n         }\n         assertEquals(expectedTabsNames, actualTabsNames);\n         assertTrue(driver.findElement(By.id(\"searchInput\")).isDisplayed()); // search bar\n     }\n"}
{"repo_name": "SK_15_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://en.wikipedia.org/wiki/Main_Page\");\n         assertTrue(driver.findElement(By.id(\"mp-welcomecount\")).isDisplayed()); // welcome area\n         assertTrue(driver.findElement(By.id(\"mp-free\")).isDisplayed()); // description\n         By portalsLocator = By.id(\"mp-portals\");\n         assertTrue(driver.findElement(portalsLocator).isDisplayed()); // portals\n         element = driver.findElement(portalsLocator);\n         List<WebElement> linkElements = element.findElements(By.xpath(\".//li/a\"));\n         List<String> expectedLinkNames = new LinkedList<>(Arrays.asList(\n                 \"The arts\", \"Biography\", \"Geography\", \"History\", \"Mathematics\", \"Science\", \"Society\", \"Technology\", \"All portals\"));\n         List<String> actualLinkNames = new LinkedList<>();\n         for (WebElement element : linkElements) {\n             actualLinkNames.add(element.getText());\n         }\n         assertEquals(expectedLinkNames, actualLinkNames);\n     }\n"}
{"repo_name": "SK_16_Tamar", "ref": "refs/heads/master", "path": "UITest2Code/src/test/java/websites/Wikipedia.java", "content": "    public void function() {\n         driver.get(\"https://en.wikipedia.org/wiki/Main_Page\");\n         List<WebElement> headerElements = driver.findElements(By.className(\"mw-headline\"));\n         List<String> expectedHeaders = new LinkedList<>(Arrays.asList(\n                 \"From today's featured article\", \"In the news\", \"Did you know ...\", \"On this day\", \"From today's featured list\",\n                 \"Today's featured picture\", \"Other areas of Wikipedia\", \"Wikipedia's sister projects\", \"Wikipedia languages\"));\n         List<String> actualHeaders = new LinkedList<>();\n         for (WebElement element : headerElements) {\n             actualHeaders.add(element.getText());\n         }\n         assertTrue(actualHeaders.containsAll(expectedHeaders));\n     }\n"}
