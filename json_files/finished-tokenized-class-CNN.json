{"id": 95, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"[data-test='searchButton']\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"header-search-bar\" ) ) ; assertEquals ( element , driver . switchTo ( ) . activeElement ( ) ) ; element . sendKeys ( \"India\" ) ; driver . findElement ( By . cssSelector ( \"button[aria-label='Search']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // label[text()='Everything']/preceding-sibling::*[@checked]\" ) ) ) ; assertEquals ( \"India\" , driver . findElement ( By . cssSelector ( \".cnn-search__results-count ▁ strong\" ) ) . getText ( ) ) ; List < WebElement > resultElements = driver . findElements ( By . className ( \"cnn-search__result-contents\" ) ) ; for ( WebElement result : resultElements ) { assertTrue ( result . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"india\" ) ) ; } driver . findElement ( By . id ( \"left_sport\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . className ( \"cnn-search__results-count\" ) , driver . findElement ( By . className ( \"cnn-search__results-count\" ) ) . getText ( ) ) ) ) ; List < WebElement > linkElements = driver . findElements ( By . cssSelector ( \".cnn-search__result-headline ▁ a\" ) ) ; for ( WebElement link : linkElements ) { String allResultText = link . findElement ( By . xpath ( \"./../..\" ) ) . getText ( ) . toLowerCase ( Locale . ROOT ) ; assertTrue ( link . getAttribute ( \"href\" ) . contains ( \"/sport/\" ) || allResultText . contains ( \"sport\" ) ) ; assertTrue ( allResultText . contains ( \"india\" ) ) ; } } ", "Test Name": "Search Page", "Test Description": "CNN01_Verify whether user is able to filter the news in Search Page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on the search icon on the tools menu in top right corner", "User should be able to view the cursor placed in search Text box", "3. Type any country name in search box Ex: India", "User should be able to enter the text", "4. Click on search icon in the text field", "The page should load the news content containing the searched text under 'Everything' section displaying the search result value", "5. Select a radio button provided in the left pane Ex: Sport", "The search result should filter the news related to sports that contain the searched term"]}
{"id": 96, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='videos']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".live-videos\" ) ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Live ▁ TV']\" ) ) . click ( ) ; assertEquals ( \"This ▁ product ▁ isn't ▁ currently ▁ available ▁ in ▁ your ▁ area.\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; By locator = By . xpath ( \" // a[contains(text(), ▁ 'Back ▁ to ▁ the ▁ headlines')]\" ) ; assertTrue ( driver . findElement ( locator ) . isDisplayed ( ) ) ; driver . findElement ( locator ) . click ( ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; } ", "Test Name": "Videos Page", "Test Description": "CNN02_Verify for the user authorization to use Live TV functionality", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Select on 'Videos' option from the header menu", "User should be able to land on Videos page", "3. Select the option 'Live TV' blinkiing with red dot on the top right corner of the page", "User should receive a validation message stating 'This product isn't currently available in your area.' with 'Back to the headlines' button", "4. Click on the button - Back to the headlines", "User should be able to navigate back to the home page of cnn website"]}
{"id": 97, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; String baseUrl = driver . getCurrentUrl ( ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; Map < String , List < String > > languagesInfo = new HashMap < String , List < String > > ( ) { { put ( \"U.S.\" , new ArrayList < > ( Arrays . asList ( \"https: // us.cnn.com/?hpt=header_edition-picker\" , \" // *[@data-analytics='header_top-nav' ▁ and ▁ text()='World']\" ) ) ) ; put ( \"Arabic\" , new ArrayList < > ( Arrays . asList ( \"https: // arabic.cnn.com/?hpt=header_edition-picker\" , \" // *[@id='navbar'] // *[text()='منوعات']\" ) ) ) ; put ( \"Español\" , new ArrayList < > ( Arrays . asList ( \"https: // cnnespanol.cnn.com/?hpt=header_edition-picker\" , \" // *[@id='nav-header'] // *[text()='Mundo']\" ) ) ) ; } } ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; for ( String i : languagesInfo . keySet ( ) ) { driver . findElement ( By . id ( \"edition-picker-toggle-desktop\" ) ) . click ( ) ; if ( i . equals ( \"U.S.\" ) ) { element = driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'indexes__Dropdown')]\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; List < WebElement > optionElements = element . findElements ( By . tagName ( \"a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"U.S.\" , \"International\" , \"Arabic\" , \"Español\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'indexes__Dropdown')] // a[text()='\" + i + \"']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . urlToBe ( baseUrl ) ) ) ; assertEquals ( languagesInfo . get ( i ) . get ( 0 ) , driver . getCurrentUrl ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( languagesInfo . get ( i ) . get ( 1 ) ) ) . isDisplayed ( ) ) ; driver . navigate ( ) . back ( ) ; } } ", "Test Name": "MultiLingual edition page", "Test Description": "CNN03_Verify whether user is able to switch to multilingual site in CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Select the 'Edition' dropdown", "User should be able to view 4 different regions in the options - ''U.S.\",\"International\",\"Arabic\",\"Español\"", "3. Select the region \"U.S.\"", "User should navigate to the U.S. domain page \"https://us.cnn.com/?hpt=header_edition-picker\" and top header menu contain the options 'World'", "4. Click on browser back button", "User should navigate back to the cnn home page", "5. Select the 'Edition' dropdown > Arabic", "User should navigate to the U.S. domain page \"https://arabic.cnn.com/?hpt=header_edition-picker\" and top header menu contain the option 'منوعات'", "6. Click on browser back button", "User should navigate back to the cnn home page", "7. Select the 'Edition' dropdown > Espanol", "User should navigate to the Espanol domain page \"https://cnnespanol.cnn.com/?hpt=header_edition-picker\" and top header menu contain the option 'Mundo'"]}
{"id": 98, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='world']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"World\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-zone-label='Featured ▁ sections']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-analytics='Travel_list-hierarchical-xs_article_']\" ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; element . findElement ( By . tagName ( \"img\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Header__logoTravel\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \".Header__section\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"DESTINATIONS\" , \"FOOD ▁ & ▁ DRINK\" , \"NEWS\" , \"STAY\" , \"VIDEO\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ", "Test Name": "World Page", "Test Description": "CNN04_Verify user is able to navigate to featured Travel article page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured Sections", "User should be able to view the Travel article with title 'Travel'", "4. Click on Travel featured image", "User should be able to navigate to travel article pages with the options - 'Destinations','Food & Drink', 'News', 'Stay','Video' on Header navigation"]}
{"id": 99, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='travel']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Header__logoTravel\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \".Header__section\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"DESTINATIONS\" , \"FOOD ▁ & ▁ DRINK\" , \"NEWS\" , \"STAY\" , \"VIDEO\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"Breadcrumb__label\" ) , \"DESTINATIONS\" ) ) ; List < WebElement > countriesElements = driver . findElements ( By . className ( \"Destinations__link\" ) ) ; for ( int i = 1 ; i < countriesElements . size ( ) ; i ++ ) { assertTrue ( countriesElements . get ( i - 1 ) . getText ( ) . compareTo ( countriesElements . get ( i ) . getText ( ) ) < 0 ) ; } String countryName = countriesElements . get ( 0 ) . getText ( ) ; countriesElements . get ( 0 ) . click ( ) ; assertEquals ( countryName , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Travel Page", "Test Description": "CNN05_Verify user is able to navigate to Country destination article through travel page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on Travel option on the top menu bar", "User should be able to navigate to travel article pages with the options - 'Destinations','Food & Drink', 'News', 'Stay','Video' on Header navigation", "3. Select 'Destination' option", "User should be able to navigate to destinations page with all the countries categorized in alphabetical order", "4. Select any country", "User should be able to navigate to the selected country details page and the selected country title should be displayed as title of the page"]}
{"id": 100, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='travel']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Header__logoTravel\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \".Header__section\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"DESTINATIONS\" , \"FOOD ▁ & ▁ DRINK\" , \"NEWS\" , \"STAY\" , \"VIDEO\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"Breadcrumb__label\" ) , \"DESTINATIONS\" ) ) ; List < WebElement > countriesElements = driver . findElements ( By . className ( \"Destinations__link\" ) ) ; for ( int i = 1 ; i < countriesElements . size ( ) ; i ++ ) { assertTrue ( countriesElements . get ( i - 1 ) . getText ( ) . compareTo ( countriesElements . get ( i ) . getText ( ) ) < 0 ) ; } driver . findElement ( By . className ( \"Header__search\" ) ) . click ( ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Greece\" ) ; List < WebElement > articleElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( ( By . className ( \"CardBasic__title\" ) ) ) ) ; for ( WebElement element : articleElements ) { assertTrue ( element . getText ( ) . contains ( \"Greece\" ) || element . getAttribute ( \"href\" ) . contains ( \"greece\" ) ) ; } driver . navigate ( ) . back ( ) ; driver . navigate ( ) . refresh ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"Breadcrumb__label\" ) , \"DESTINATIONS\" ) ) ; countriesElements . clear ( ) ; countriesElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( ( By . className ( \"Destinations__link\" ) ) ) ) ; for ( int i = 1 ; i < countriesElements . size ( ) ; i ++ ) { assertTrue ( countriesElements . get ( i - 1 ) . getText ( ) . compareTo ( countriesElements . get ( i ) . getText ( ) ) < 0 ) ; } } ", "Test Name": "Travel Page", "Test Description": "CNN06_Verify user is able to navigate to country destination page by using search functionality in Travel page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on Travel option on the top menu bar", "User should be able to navigate to travel article pages with the options - 'Destinations','Food & Drink', 'News', 'Stay','Video' on Header navigation", "3. Select 'Destination' option", "User should be able to navigate to destinations page with all the countries categorized in alphabetical order", "4. Click on search Icon and type the country name . Ex: Greece", "The search results should contain the travel destinations articles of the searched country", "5. Click on Browser back button", "User should be able to navigate to destinations page with all the countries categorized in alphabetical order"]}
{"id": 101, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='travel']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Header__logoTravel\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \".Header__section\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"DESTINATIONS\" , \"FOOD ▁ & ▁ DRINK\" , \"NEWS\" , \"STAY\" , \"VIDEO\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 4 ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"VideoHub__ctaWrapper\" ) ) ) ; assertEquals ( \"Watch ▁ now\" , element . getText ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".Article__zone\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . cssSelector ( \".pui_control-bar_playback-time ▁ > ▁ span\" ) , \"0:00\" ) ) ) ; element = driver . findElement ( By . className ( \"sound-full-icon\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . moveToElement ( driver . findElement ( By . cssSelector ( \"[aria-label='Volume ▁ bar']\" ) ) ) . click ( ) . perform ( ) ; assertNotEquals ( \"left: ▁ 100%;\" , driver . findElement ( By . cssSelector ( \"[aria-label='Volume ▁ bar']\" ) ) . getAttribute ( \"style\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".pui_control-bar_fullscreen-toggle\" ) ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"windowCollapseIconTitle\" ) ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"windowExpandIconTitle\" ) ) ) ; } ", "Test Name": "Travel Page", "Test Description": "CNN07_Verify user is able to play the video in Travel page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on Travel option on the top menu bar", "User should be able to navigate to travel article pages with the options - 'Destinations','Food & Drink', 'News', 'Stay','Video' on Header navigation", "3. Select 'Video' option", "User should be able to view 'Watch now' text on Video wrapper", "4. Click on Watch now", "The page should navigate to the travel article video page with video played automatically", "5. Decrease the volume of the video", "The volume should be decreased to the desired level", "6. Expand the video using 'window expand icon'", "The page should fit into the fullscreen", "7. Collapse the video using 'window collapse icon'", "The video should get collapsed to minimized view"]}
{"id": 102, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='travel']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Header__logoTravel\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \".Header__section\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"DESTINATIONS\" , \"FOOD ▁ & ▁ DRINK\" , \"NEWS\" , \"STAY\" , \"VIDEO\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 4 ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"VideoHub__ctaWrapper\" ) ) ) ; assertEquals ( \"Watch ▁ now\" , element . getText ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".Article__zone\" ) ) ) ; By locator = By . cssSelector ( \".pui_control-bar_playback-time ▁ > ▁ span\" ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . className ( \"VideoPlayer__videoPlayer\" ) ) ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( locator ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"0:00\" ) ) ) ; element = driver . findElement ( locator ) ; String videoName = driver . findElement ( By . cssSelector ( \".pui_metadata_title\" ) ) . getText ( ) ; String videoLength = driver . findElement ( By . cssSelector ( \".pui_control-bar_playback-time ▁ > ▁ :nth-child(3)\" ) ) . getText ( ) ; while ( ! element . getText ( ) . equals ( videoLength ) ) { element = driver . findElement ( locator ) ; } wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . cssSelector ( \".pui_metadata_title\" ) , videoName ) ) ) ; } ", "Test Name": "Travel page", "Test Description": "CNN08_Verify user is able to view the next video automatically in Travel page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on Travel option on the top menu bar", "User should be able to navigate to travel article pages with the options - 'Destinations','Food & Drink', 'News', 'Stay','Video' on Header navigation", "3. Select 'Videos' option", "User should be able to view 'Watch now' text open on Video wrapper", "4. Click on Watch now", "The page should navigate to the travel article video page with video played automatically", "5. Let the video play until the end", "The next video should automatically load on the screen"]}
{"id": 103, "website": "CNN", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='travel']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Header__logoTravel\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \".Header__section\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"DESTINATIONS\" , \"FOOD ▁ & ▁ DRINK\" , \"NEWS\" , \"STAY\" , \"VIDEO\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 4 ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"VideoHub__ctaWrapper\" ) ) ) ; assertEquals ( \"Watch ▁ now\" , element . getText ( ) ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Latest ▁ Videos ▁ on ▁ ']\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; List < WebElement > videoRowsElements = driver . findElements ( By . className ( \"VideosFilters__row\" ) ) ; assertEquals ( 5 , videoRowsElements . size ( ) ) ; for ( WebElement row : videoRowsElements ) { assertEquals ( 4 , row . findElements ( By . className ( \"LayoutGrid__card\" ) ) . size ( ) ) ; } for ( int i = 0 ; i < 4 ; i ++ ) { element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".VideosFilters__showMore\" ) ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; Thread . sleep ( 1000 ) ; assertEquals ( 20 * ( i + 2 ) , driver . findElements ( By . className ( \"LayoutGrid__card\" ) ) . size ( ) ) ; } assertEquals ( 0 , driver . findElements ( By . cssSelector ( \".VideosFilters__showMore\" ) ) . size ( ) ) ; } ", "Test Name": "Travel page", "Test Description": "CNN09_Verify 'See more Videos' option disappear on continuous click on Travel Page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured Sections", "User should be able to view the Travel article with title 'Travel'", "4. Click on Travel featured image", "User should be able to navigate to travel article pages with the options - 'Destinations','Food & Drink', 'News', 'Stay','Video' on Header navigation", "5. Select 'Video' option", "User should be able to view 'Watch now' text open on Video wrapper", "6. Scroll down to Latest videos on travel section", "User should be able to view the videos slides displayed in 5 rows of 4 columns on first page load", "7. Click on 'See more videos'", "User should be able to view 20 more videos", "8. Repeat clicking the 'See more videos' option for 4 times", "No more videos' option should get disappear for 5th time click"]}
{"id": 104, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='world']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"World\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-zone-label='Featured ▁ sections']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-analytics='Climate ▁ in ▁ crisis_list-hierarchical-small-horizontal_article_']\" ) ) ; element . findElement ( By . tagName ( \"img\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"health-logo-icon\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \"nav ▁ a[data-analytics='header_top-nav']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Life, ▁ But ▁ Better\" , \"Fitness\" , \"Food\" , \"Sleep\" , \"Mindfulness\" , \"Relationships\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; for ( int i = 1 ; i < expectedTitles . size ( ) ; i ++ ) { String xpathLocator = \" // nav // a[text()='\" + expectedTitles . get ( i ) + \"']\" ; driver . findElement ( By . xpath ( xpathLocator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . xpath ( xpathLocator + \"/..\" ) , \"data-selected\" , \"selected\" ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"article\" ) ) . isDisplayed ( ) ) ; } } ", "Test Name": "World Page", "Test Description": "CNN10_Verify user is able to navigate to special interactive articles of CNN Health page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured section and select Climate crisis", "User should be navigated to CNN health page containing options - 'Life,But Better','Fitness','Food','Sleep','Mindfulness','Relationships'", "4. Select 'Fitness'", "User should be able to navigate to Fitness article page", "5. Select 'Food'", "User should be able to navigate to food article page", "6. Select 'Sleep'", "User should be able to navigate to sleep article page", "7. Select 'Mindfulness'", "User should be able to navigate to mindfulness article page", "8. Select 'Relationships'", "User should be able to navigate to relationships article page"]}
{"id": 105, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='world']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"World\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-zone-label='Featured ▁ sections']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-analytics='Climate ▁ in ▁ crisis_list-hierarchical-small-horizontal_article_']\" ) ) ; element . findElement ( By . tagName ( \"img\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"health-logo-icon\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \"nav ▁ a[data-analytics='header_top-nav']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Life, ▁ But ▁ Better\" , \"Fitness\" , \"Food\" , \"Sleep\" , \"Mindfulness\" , \"Relationships\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"strong\" ) , \"Life, ▁ But ▁ Better\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()=\\\"I'd ▁ like ▁ a ▁ personalized ▁ recommendation\\\"]\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()=\\\"I'll ▁ pick ▁ one ▁ myself\\\"]\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; List < WebElement > titleElements = driver . findElements ( By . xpath ( \" // *[@id='close']/../.. // a\" ) ) ; expectedTitles . remove ( 0 ) ; expectedTitles . set ( 0 , \"Food\" ) ; expectedTitles . set ( 1 , \"Fitness\" ) ; actualTitles . clear ( ) ; for ( WebElement element : titleElements ) { assertEquals ( \"visible\" , element . getCssValue ( \"visibility\" ) ) ; actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Actually, ▁ maybe ▁ I ▁ do ▁ need ▁ help ▁ deciding']\" ) ) . isDisplayed ( ) ) ; titleElements . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . xpath ( \" // nav // a[text()='Sleep']/..\" ) , \"data-selected\" , \"selected\" ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"article\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "CNN Health", "Test Description": "CNN11_Verify whether user is able to navigate to CNN health categories through 'Life But Better' page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured section and select Climate crisis", "User should be navigated to CNN health page containing options - 'Life,But better','Fitness','Food','Sleep','Mindfulness','Relationships'", "4. Select 'Life But Better' options", "The page should navigate to life-but-better page containing options 'I'd like a personalized recommendation' and 'I'll pick one myself'", "5. Select 'I'll pick one myself' option", "The categories - Food, Fitness, Sleep, Mindfulness and Relationship should appear on the screen. Also an option 'Actually, maybe I do need help deciding' should be displayed below the categories", "6. Select any of the category from the list Ex: Sleep", "The page should navigate to that particular caregory article page"]}
{"id": 106, "website": "CNN", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='world']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"World\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-zone-label='Featured ▁ sections']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-analytics='Climate ▁ in ▁ crisis_list-hierarchical-small-horizontal_article_']\" ) ) ; element . findElement ( By . tagName ( \"img\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"health-logo-icon\" ) ) ) ; List < WebElement > optionElements = driver . findElements ( By . cssSelector ( \"nav ▁ a[data-analytics='header_top-nav']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Life, ▁ But ▁ Better\" , \"Fitness\" , \"Food\" , \"Sleep\" , \"Mindfulness\" , \"Relationships\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"strong\" ) , \"Life, ▁ But ▁ Better\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()=\\\"I'd ▁ like ▁ a ▁ personalized ▁ recommendation\\\"]\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()=\\\"I'll ▁ pick ▁ one ▁ myself\\\"]\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='How ▁ are ▁ you ▁ doing ▁ today?']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . cssSelector ( \".uppercase ▁ p\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='I ▁ have ▁ energy']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Next']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='What ▁ areas ▁ are ▁ you ▁ interested ▁ to ▁ learn ▁ more ▁ about?']\" ) ) . isDisplayed ( ) ) ; List < String > clickOnStrings = new ArrayList < > ( Arrays . asList ( \"Actualizing ▁ goals\" , \"Nutrition\" , \"Rest\" , \"Wellness ▁ products\" , \"Meal ▁ planning\" ) ) ; for ( String text : clickOnStrings ) { driver . findElement ( By . xpath ( \" // *[text()='\" + text + \"']\" ) ) . click ( ) ; } assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='\" + clickOnStrings . get ( 0 ) + \"']/../..\" ) ) . getAttribute ( \"class\" ) . contains ( \"disabled\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()=\\\"That’s ▁ it!\\\"]\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Could ▁ you ▁ rank ▁ these?']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . className ( \"smooth-dnd-draggable-wrapper\" ) ) . size ( ) > 1 ) ; element = driver . findElement ( By . cssSelector ( \".smooth-dnd-draggable-wrapper:nth-child(5)\" ) ) ; actions . clickAndHold ( element ) . perform ( ) ; Thread . sleep ( 500 ) ; actions . release ( driver . findElement ( By . className ( \"smooth-dnd-draggable-wrapper\" ) ) ) . perform ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Next']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'recommend')]\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'No ▁ thanks! ▁ Take ▁ me ▁ to')]\" ) ) ; String category = element . findElement ( By . xpath ( \"./strong\" ) ) . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . xpath ( \" // nav // a[text()='\" + category + \"']/..\" ) , \"data-selected\" , \"selected\" ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"article\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "CNN Health", "Test Description": "CNN12_Verify whether user is able to navigate to CNN Health categories page using the personalized recommendation", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured section and select Climate crisis", "User should be navigated to CNN health page containing options - 'Life,But better','Fitness','Food','Sleep','Mindfulness','Relationships'", "4. Select 'Life But Better' options", "The page should navigate to life-but-better page containing options 'I'd like a personalized recommendation' and 'I'll pick one myself'", "5. Select 'I'd like a personalized recommendation' option", "The page should display the title as 'How are you doing today?' with options to select", "6. Select any of the option displayed Ex: I HAVE ENERGY", "User should be able to select one option only", "7. Click next", "User should be displayed with the page title-'What areas are you interested to learn more about?'", "8. Select values between the range 1-5 Ex: actualizing goals, nutrition, rest, wellness products, meal planning", "User should not be able to select more than 5 values", "9. Click on 'that's it'", "User should be able to view the title - 'Could you rank these?' with selected options", "10. Drag the last item to first", "User should be able to drag the item to first row", "11. Click next", "The page should display the recommended category based on the values ranked by the user", "12. Select the linktext 'No Thanks! Take me to {{category}}'", "User should be able to navigate to the category article recommended"]}
{"id": 107, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='world']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"World\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-zone-label='Featured ▁ sections']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-analytics='Style_list-hierarchical-xs_article_']\" ) ) ; element . findElement ( By . tagName ( \"img\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Logo__style\" ) ) ) ; driver . findElement ( By . className ( \"Header__burger\" ) ) . click ( ) ; List < WebElement > menuElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"Menu__link\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Arts\" , \"Design\" , \"Fashion\" , \"Architecture\" , \"Luxury\" , \"Beauty\" , \"Video\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : menuElements ) { actualTitles . add ( element . getText ( ) ) ; actions . moveToElement ( element ) . perform ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . className ( \"Menu__background\" ) , \"class\" , \"Menu__\" + element . getText ( ) . toLowerCase ( Locale . ROOT ) ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; menuElements . get ( 0 ) . click ( ) ; assertEquals ( \"Arts\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "CNN Style", "Test Description": "CNN13_Verify whether user is able to view and navigate to different style categories pages", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured section and select Style tile", "User should be navigated to Style page", "4. Click on the Hamburger menu on top right of the page", "User should be able to view the options - Arts, Design, Fashion, Architecture, Luxury, Beauty, Video", "5. Hover over on the each option", "The menu background should change according to the option hovered on", "6. Select on any of the styles category option Ex: Arts", "User should be able to navigate to the selected styled category article page"]}
{"id": 108, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World ▁ News\" ) ) ; driver . findElement ( By . cssSelector ( \"a[name='world']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"World\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-zone-label='Featured ▁ sections']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-analytics='Style_list-hierarchical-xs_article_']\" ) ) ; element . findElement ( By . tagName ( \"img\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"Logo__style\" ) ) ) ; driver . findElement ( By . className ( \"Header__burger\" ) ) . click ( ) ; List < WebElement > menuElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"Menu__link\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Arts\" , \"Design\" , \"Fashion\" , \"Architecture\" , \"Luxury\" , \"Beauty\" , \"Video\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : menuElements ) { actualTitles . add ( element . getText ( ) ) ; actions . moveToElement ( element ) . perform ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . className ( \"Menu__background\" ) , \"class\" , \"Menu__\" + element . getText ( ) . toLowerCase ( Locale . ROOT ) ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; menuElements . get ( 6 ) . click ( ) ; assertEquals ( \"Video\" , driver . findElement ( By . className ( \"VideoHub__title\" ) ) . getText ( ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Latest ▁ Videos ▁ on ▁ Style']/ancestor::*[@class='Zone__wrapper']\" ) ) ; assertEquals ( 20 , driver . findElements ( By . cssSelector ( \".VideosFilters__card\" ) ) . size ( ) ) ; } ", "Test Name": "CNN Style", "Test Description": "CNN14_Verify user is able to view 20 videos of latest videos on design", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news  around the world", "2. Click on World option on the top menu bar", "User should land on the world page", "3. Scroll down to Featured section and select Style tile", "User should be navigated to Style page", "4. Click on the Hamburger menu on top right of the page", "User should be able to view the options - Arts, Design, Fashion, Architecture, Luxury, Beauty, Video", "5. Select Videos option", "User should be navigated to Video category page", "6. Scroll down to Latest videos on design section", "User should be able to view 20 video slides on page load"]}
{"id": 109, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[data-test='searchButton']\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; } ", "Test Name": "Hamberger Menu", "Test Description": "Verify the navigation to search all categories through Hamburger menu", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Select the search icon on top right corner of heading", "The header page should get expanded to show all categories list", "3. Close the expansion", "The header expanded should get closed", "4. Click on Hamburger Menu", "The same header page should appear showing all the categories list"]}
{"id": 110, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; for ( int i = 0 ; i < 2 ; i ++ ) { driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; String section = \"tech\" , category = \"gadget\" , cssSelectorText = \"[data-analytics='header_top-nav'][aria-label='Business']\" , title = \"Gadget\" ; if ( i == 1 ) { section = \"business\" ; category = \"markets\" ; cssSelectorText = \"[alt='CNN ▁ Business']\" ; title = \"Market\" ; } driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='\" + section + \"'] ▁ [name='\" + category + \"']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( cssSelectorText ) ) ) ; assertTrue ( driver . getTitle ( ) . contains ( title ) ) ; if ( i == 0 ) { driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".pg-intl_homepage\" ) ) ) ; } } } ", "Test Name": "Business Page", "Test Description": "Verify the user navigation to business page from different article category selection", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Tech section Ex: Gadget", "The page should navigate to the page containing 'Business' as header top title and 'Gadget' as the page title", "4. Click on browser back button", "User should navigate back to the CNN home page", "5. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "6. Click on any category under Business section Ex: Markets", "The page should navigate to the page containing 'Business' as header top title and 'Markets' as the page title"]}
{"id": 111, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = driver . findElements ( By . cssSelector ( \"ul[mode='dark'] ▁ > ▁ li ▁ > ▁ a[data-analytics='header_expanded-nav']\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"World\" , \"US ▁ Politics\" , \"Business\" , \"Health\" , \"Entertainment\" , \"Tech\" , \"Style\" , \"Travel\" , \"Sports\" , \"Videos\" , \"Features\" , \"Weather\" , \"More\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='markets']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[alt='CNN ▁ Business']\" ) ) ) ; assertTrue ( driver . getTitle ( ) . contains ( \"Market\" ) ) ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . className ( \"menu-icon\" ) , \"class\" , \"open\" ) ) ; titleElements . clear ( ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; titleElements = driver . findElements ( By . cssSelector ( \".subnav ▁ h3 ▁ a\" ) ) ; expectedTitles . addAll ( Arrays . asList ( \"Markets\" , \"Tech\" , \"Media\" , \"Success\" , \"Center ▁ Piece\" , \"Perspectives\" , \"Video\" , \"International\" , \"More\" ) ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ", "Test Name": "Business Page", "Test Description": "verify the hamburger menu list update when business page is accessed", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list containing - World, US Politics, Business, Health, Entertainment,Tech, Style, Travel, Sports, Videos, Features, Weather, More", "3. Click on any category under Business section Ex: Markets", "The page should navigate to the page containing 'Business' as header top title and 'Markets' as the page title", "4. Select the Hamburger menu", "The header page should get expanded to show all categories list containing - Markets, Tech, Media, Success, Center Piece, Perspectives, Video, International and More. Other categories should not be displayed"]}
{"id": 112, "website": "CNN", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='markets']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[alt='CNN ▁ Business']\" ) ) ) ; assertTrue ( driver . getTitle ( ) . contains ( \"Market\" ) ) ; By locator = By . xpath ( \" // *[@class='world-market']/ancestor::*[@class='module']\" ) ; for ( int i = 0 ; i < 10 ; i ++ ) { String initialText = driver . findElement ( locator ) . getText ( ) ; Thread . sleep ( 2000 ) ; assertNotEquals ( \"problem ▁ in ▁ the\" + i + \"time\" , initialText , driver . findElement ( locator ) . getText ( ) ) ; } } ", "Test Name": "Business Page", "Test Description": "Verify the Market values are instatntly updating on business page load", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Business section Ex: Markets", "The page should navigate to the page containing 'Business' as header top title and 'Markets' as the page title. User should see the changes in market value for every 2 seconds."]}
{"id": 113, "website": "CNN", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='success']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-analytics='header_top-nav'][aria-label='Business']\" ) ) ) ; assertEquals ( \"SUCCESS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \".media__image\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; driver . findElement ( By . cssSelector ( \"[data-ad-section='const-video-leaf'] ▁ a\" ) ) . click ( ) ; By locator = By . cssSelector ( \".pui_control-bar_playback-time ▁ > ▁ span\" ) ; actions . moveToElement ( wait . until ( ExpectedConditions . presenceOfElementLocated ( ( By . tagName ( \"video\" ) ) ) ) ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( locator ) ) ; actions . moveToElement ( driver . findElement ( locator ) ) . perform ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"0:00\" ) ) ) ; driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-analytics='header_top-nav'][aria-label='Business']\" ) ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( ( By . cssSelector ( \".ad.ad--desktop ▁ iframe\" ) ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; Thread . sleep ( 1000 ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; element . click ( ) ; assertEquals ( 2 , driver . getWindowHandles ( ) . size ( ) ) ; } ", "Test Name": "Business Page", "Test Description": "Verify user is able to access different types of media content on business articles", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Business section Ex: Success", "The page should navigate to the page containing 'Business' as header top title and 'Success' as the page title.", "4. Scroll down to the article containing images", "User should be able to view the image", "5. Click on the article containing video on the same page", "User should be able to load the article and video should play automatically", "6. Click on browser back button", "User should navigate back to business page", "7. Scroll to advertisement section", "User should be able to view the advertisement", "8. Click on Advertisement page", "User should be navigated to the ad page in a new tab"]}
{"id": 114, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='success']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-analytics='header_top-nav'][aria-label='Business']\" ) ) ) ; assertEquals ( \"SUCCESS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Dow']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . titleContains ( \"Dow ▁ Jones ▁ Industrial ▁ Average\" ) ) ; List < WebElement > sectionElements = driver . findElements ( By . cssSelector ( \"#cnnBody ▁ h3\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Quote ▁ Details\" , \"Gainers\" , \"Losers\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : sectionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( sectionElements . get ( 0 ) ) . perform ( ) ; List < WebElement > categoriesElements = driver . findElements ( By . cssSelector ( \"#wsod_quoteRight ▁ tr ▁ > ▁ td:nth-child(1)\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; expectedTitles . addAll ( Arrays . asList ( \"Today's ▁ volume\" , \"Average ▁ daily ▁ volume ▁ (3 ▁ months)\" , \"Average ▁ P/E\" , \"1 ▁ year ▁ change\" ) ) ; for ( WebElement element : categoriesElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; for ( int i = 0 ; i < 2 ; i ++ ) { actions . moveToElement ( sectionElements . get ( i + 1 ) ) . perform ( ) ; categoriesElements . clear ( ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; categoriesElements = driver . findElements ( By . cssSelector ( \"table:nth-child(2) ▁ th\" ) ) ; expectedTitles . addAll ( Arrays . asList ( \"Company\" , \"Price\" , \"Change\" , \"% ▁ Change\" ) ) ; for ( WebElement element : categoriesElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; List < WebElement > dataElements = sectionElements . get ( 1 ) . findElements ( By . cssSelector ( \"table:nth-child(\" + i + 2 + \") ▁ .posData\" ) ) ; char expectedSymbol = ( char ) ( 45 - ( ( i - 1 ) * 2 ) ) ; for ( WebElement element : dataElements ) { assertTrue ( element . getText ( ) . startsWith ( String . valueOf ( expectedSymbol ) ) ) ; } } } ", "Test Name": "Business Page", "Test Description": "Verify user is able to view the details of Dow Jones Industrial Average on business page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Business section Ex: Success", "The page should navigate to the page containing 'Business' as header top title and 'Success' as the page title.", "4. Click on hamburger menu", "User should be able to view the Market category containing 'DOW' option", "5. Click on before the DOW on the list", "The page should display the Dow Jones Industrial Average details containing - Quote Details, Gainers and Losers section", "6. Scroll down to Quote details", "The quote details should contain the table details of Today's volume, Average daily volume, Average P/E, 1 year change values", "7. Scroll down to Gainers section", "This section should display the table to company names and their prices and changes in positive values", "8. Scroll down to Losers section", "This section should display the table to company names and their prices and changes in negative values"]}
{"id": 115, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='success']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-analytics='header_top-nav'][aria-label='Business']\" ) ) ) ; assertEquals ( \"SUCCESS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Before ▁ the ▁ Bell']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . titleContains ( \"Before ▁ the ▁ Bell\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".cnn-audio-player-wrapper ▁ > ▁ iframe\" ) ) ) ; driver . switchTo ( ) . frame ( element ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . id ( \"elapsed\" ) , \"\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . id ( \"elapsed\" ) , \"0:00\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"control-play-pause\" ) ) ) . click ( ) ; assertFalse ( driver . findElement ( By . id ( \"control-play-pause\" ) ) . getAttribute ( \"class\" ) . contains ( \" ▁ pause\" ) ) ; String currentTime = driver . findElement ( By . id ( \"elapsed\" ) ) . getText ( ) ; driver . findElement ( By . id ( \"control-play-pause\" ) ) . click ( ) ; assertEquals ( currentTime , driver . findElement ( By . id ( \"elapsed\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"control-play-pause\" ) ) . getAttribute ( \"class\" ) . contains ( \" ▁ pause\" ) ) ; } ", "Test Name": "Business Page", "Test Description": "Verify user is able to play and pause the cnn audio player on Before The Bell page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Business section Ex: Success", "The page should navigate to the page containing 'Business' as header top title and 'Success' as the page title.", "4. Click on hamburger menu", "User should be able to view the Market category containing 'Before the Bell' option", "5. Click on before the Before the bell option on the list", "The page should load the page titled 'Before/The bell' and audio should start playing automatically", "6. Click on the audio pause button", "The audio should pause playing", "7. Click on Resume audio button", "The audio should resume playing from where it stopped"]}
{"id": 116, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='success']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-analytics='header_top-nav'][aria-label='Business']\" ) ) ) ; assertEquals ( \"SUCCESS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Fear ▁ & ▁ Greed']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Fear ▁ & ▁ Greed ▁ Index\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"needleChart\" ) ) . isDisplayed ( ) ) ; List < WebElement > titleElements = driver . findElements ( By . cssSelector ( \".label\" ) ) ; List < String > expectedNames = new ArrayList < > ( Arrays . asList ( \"Junk ▁ Bond ▁ Demand\" , \"Market ▁ Volatility\" , \"Safe ▁ Haven ▁ Demand\" , \"Stock ▁ Price ▁ Breadth\" , \"Put ▁ and ▁ Call ▁ Options\" , \"Market ▁ Momentum\" , \"Stock ▁ Price ▁ Strength\" ) ) ; List < String > actualNames = new ArrayList < > ( ) ; List < String > options = new ArrayList < > ( Arrays . asList ( \"Extreme ▁ Fear\" , \"Fear\" , \"Neutral\" , \"Greed\" , \"Extreme ▁ Greed\" ) ) ; for ( WebElement element : titleElements ) { actualNames . add ( element . findElement ( By . className ( \"wsod_fLeft\" ) ) . getText ( ) ) ; assertTrue ( options . contains ( element . findElement ( By . className ( \"wsod_fRight\" ) ) . getText ( ) ) ) ; } assertTrue ( actualNames . containsAll ( expectedNames ) ) ; assertTrue ( driver . findElement ( By . id ( \"feargreedOverTime\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Business Page", "Test Description": "Verify the page naigation to Fear and Greed page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Business section Ex: Success", "The page should navigate to the page containing 'Business' as header top title and 'Success' as the page title.", "4. Click on hamburger menu", "User should be able to view the Market category containing 'Fear & Greed' option", "5. Click on 'Fear & Greed' option on the list", "The page should load the page titled ''Fear & Greed Index''", "The page should contain a needle chart, Junk Bond Demand with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed), Market Volatility with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed), Safe Haven Demand with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed), Stock Price Breadth with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed), Put and Call Options with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed), Market Momentum with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed), Stock Price Strength with its indicator (Extreme Fear/Fear/Neutral/Greed/Extreme Greed) and Fear and Greed over time graph"]}
{"id": 117, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"#nav ▁ [data-section='business'] ▁ [name='success']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-analytics='header_top-nav'][aria-label='Business']\" ) ) ) ; assertEquals ( \"SUCCESS\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()=\\\"Tracking ▁ America's ▁ Recovery\\\"]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Tracking ▁ America's ▁ recovery\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='JUMP ▁ TO']\" ) ) . isDisplayed ( ) ) ; List < String > titles = Arrays . asList ( \"Your ▁ Job\" , \"Your ▁ Home\" , \"Your ▁ Investments\" , \"Your ▁ Money\" , \"Your ▁ Spending\" , \"Your ▁ Leisure\" , \"Your ▁ Travel\" ) ; for ( String title : titles ) { By locator = By . id ( \"sticky-link-\" + title . toLowerCase ( Locale . ROOT ) . replace ( ' ▁ ' , '-' ) ) ; if ( title . equals ( \"Your ▁ Home\" ) ) locator = By . id ( \"sticky-link-\" + title . toLowerCase ( Locale . ROOT ) . replace ( ' ▁ ' , '-' ) + \"-\" ) ; if ( title . equals ( \"Your ▁ Job\" ) ) { Actions actions = new Actions ( driver ) ; actions . moveToElement ( driver . findElement ( By . id ( \"anchor-link-your-job\" ) ) ) . click ( ) . perform ( ) ; } else driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( locator , \"class\" , \"active\" ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h1[contains(text(),'\" + title + \"')]\" ) ) ) ) ; } } ", "Test Name": "Business Page", "Test Description": "Verify user is able to access various information on 'Tracking America's Recovery' page using sticky buttons", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on any category under Business section Ex: Success", "The page should navigate to the page containing 'Business' as header top title and 'Success' as the page title.", "4. Click on hamburger menu", "User should be able to view the Market category containing 'Tracking America's Recovery' option", "5. Click on 'Tracking America's Recovery' option on the list", "The page should load the page titled ''Tracking America's Recovery'' . Also user should be able to view the sticky buttons on the page titled 'Jump to'", "6. Click on the sticky button - 'Your Job'", "The page should slide to the information containing 'Your job' as heading", "7. Click on the sticky button - 'Your Home'", "The page should slide to the information containing 'Your Home' as heading", "8. Click on the sticky button - 'Your Investments'", "The page should slide to the information containing 'Your Investments' as heading", "9. Click on the sticky button - 'Your Money'", "The page should slide to the information containing 'Your Money' as heading", "10. Click on the sticky button - 'Your Spending'", "The page should slide to the information containing 'Your Spending' as heading", "11. Click on the sticky button - 'Your Leisure'", "The page should slide to the information containing 'Your Leisure' as heading", "12. Click on the sticky button - 'Your Travel'", "The page should slide to the information containing 'Your Travel' as heading"]}
{"id": 118, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"a[data-analytics='header_top-nav'][name='world']\" ) ) . isDisplayed ( ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . id ( \"menuButton\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[class*='indexes__NavGrid']\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"[name='entertainment']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"entertainment-logo-icon\" ) ) ) ; List < String > subsections = Arrays . asList ( \"Stars\" , \"Screen\" , \"Binge\" , \"Culture\" , \"Media\" ) ; for ( String text : subsections ) { driver . findElement ( By . cssSelector ( \"[data-analytics='header_top-nav'][name='\" + text . toLowerCase ( Locale . ROOT ) + \"']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[selected][data-analytics='header_top-nav'][name='\" + text . toLowerCase ( Locale . ROOT ) + \"']\" ) ) ) ; } } ", "Test Name": "Entertainment Page", "Test Description": "Verify different pages of Entertainment category selection", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on Entertainment category", "User should be navigated to CNN entertainment page where its heading menu title contains 'Entertainment'", "4. Click on the sub-section 'Stars'", "User should navigate to the stars page where the title star is highlighted 'Bold'", "5. Click on the sub-section 'Screen'", "User should navigate to Movies page where the title movie is highlighted 'Bold'", "6. Click on the sub-section 'Binge'", "User should navigate to tv-shows page where the title 'Binge' is highlighted 'Bold'", "8. Click on the sub-section 'Culture'", "User should navigate to 'culture' page where the title 'Culture' is highlighted in Bold", "7. Click on the sub-section 'Media'", "User should navigate to 'Media' page where the title 'media' is highlighted in Bold"]}
{"id": 119, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[data-zjs-component_id='signup_link']\" ) ) ) . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[contains(text(),\\\"Create ▁ account\\\")]\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Sign-up Page", "Test Description": "Verify user is able to view the signup page through login page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website and sign up link above Email address field", "3. Click on Sign-up link", "User should be able to view username , password, terms and conditions checkboxes and Create account button"]}
{"id": 120, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[data-zjs-component_id='signup_link']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ Address']\" ) ) ) ; element . sendKeys ( \"abc@xyz\" ) ; element . sendKeys ( \"\\t\" ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()=\\\"Please ▁ enter ▁ a ▁ valid ▁ email ▁ address\\\"]\" ) ) . isDisplayed ( ) ) ; element . clear ( ) ; element . sendKeys ( \"yourname@domain.com\" ) ; element . sendKeys ( \"\\t\" ) ; element = driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) ; element . sendKeys ( \"admintst\" ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()=\\\"Please ▁ enter ▁ a ▁ valid ▁ password\\\"]\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . className ( \"formfield-text__validation-list\" ) ) . isDisplayed ( ) ) ; element . clear ( ) ; element . sendKeys ( \"user@1234567\" ) ; driver . findElement ( By . xpath ( \" // button[contains(text(),\\\"Create ▁ account\\\")]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; assertTrue ( driver . findElement ( By . name ( \"userSettings\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . name ( \"userLogout\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Sign-up Page", "Test Description": "Verify whether password policy is applied on the password when user sign-up to CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website and sign up link above username field", "3. Click on Sign-up link", "User should be able to view username , password, terms and conditions checkboxes and Create account button", "4. Enter invalid email id in the email address field and tab out Ex: abc@xyz", "The field should throw the error 'Please enter a valid email address'", "5. Enter a valid email address Ex: yourname@domain.com", "The field should accept the value in email address field", "6. Enter a password of 8 characters, with No numbers, no upper case and no special characters Ex: admintst", "The field should dislpay the error below password field - 'please enter a valid password'", "The password field should also display the pop-up displaying the password policy errors- \n Use of atleast 12 characters, Use upper or lower case characters, Use one or more numbers and Use special characters", "7. Use a valid password Ex: user@1234567", "The field should accept the value in password field without any error", "8. Click on create account", "User should be able to login to the cnn website with display of home page", "9. Click on User account icon on top right corner of the page", "User should be able to view - Settings, Log out options"]}
{"id": 121, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) . sendKeys ( \"qa.tries.123@gmail.com\" ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( \"qa@123456789\" ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // edition.cnn.com/\" ) ) ; } ", "Test Name": "Login Page", "Test Description": "Verify user is able to login to the cnn website successfully", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page"]}
{"id": 122, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( \"qa.tries.123@gmail.com\" ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( \"qa@123456789\" ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userSettings\" ) ) . click ( ) ; action . moveByOffset ( 0 , 30 ) . perform ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . linkText ( \"Browse ▁ all ▁ newsletters\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; action . moveByOffset ( 0 , 20 ) . perform ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[@title=\\\"Subscribe ▁ to ▁ Breaking ▁ News\\\"]\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . attributeToBe ( element , \"data-zjs-btn-status\" , \"subscribed\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . attributeToBe ( element , \"data-zjs-btn-status\" , \"not_subscribed\" ) ) ; } ", "Test Name": "Settings Page", "Test Description": "Verify user is able to subscribe for newsletters in settings page", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account > Settings", "User should be navigated to account seetings page and should be able to view 'Browse all newsletters' button", "5. Click on 'Browse all newsletters' button", "User should navigate to newsletters page containing title 'CNN Newsletters'", "6. Select 'Subscribe' link on any of the newsletter article", "User should receive a toast message - 'Subscribed! You are now subscribed'", "7. Select on 'Unsubscribe' option on the subscribed newsletter", "The link text should change back to 'Subscribe'"]}
{"id": 123, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( \"qa.tries.123@gmail.com\" ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( \"qa@123456789\" ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userSettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"*[data-zjs-traits-component_type='displayname_info']\" ) ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label=\\\"Display ▁ name\\\"]\" ) ) ; assertTrue ( element . isEnabled ( ) ) ; element . clear ( ) ; element . sendKeys ( \"name\" ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Save\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@data-zjs-traits-component_type='displayname_info' ▁ and ▁ text()='Edit']\" ) ) ) ; } ", "Test Name": "Settings Page", "Test Description": "Verify user is able to add a Display Name in user account settings page", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account > Settings", "User should be navigated to account seetings page and should be able to view 'Display Name' field with 'Edit' option", "5. Click on Edit option", "The Display name field option should get enabled and the button should change to 'Save' text", "6. Enter a name in the Display name field", "User should be able to type in the field", "7. Click on Save option", "A toast message should appear on top right corner of the page - \"Saved! Your changes have been saved\""]}
{"id": 124, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( \"qa.tries.123@gmail.com\" ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( \"qa@123456789\" ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userSettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"settings-header\" ) ) ) ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element = driver . findElement ( By . xpath ( \" // *[starts-with(@class, ▁ 'deleteAccountButton')]\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( element ) ) . click ( ) ; driver . findElement ( By . id ( \"delete-account--nevermind-btn\" ) ) . click ( ) ; } ", "Test Name": "Settings Page", "Test Description": "Verify the Nevermind button functionality when user tries to delete the account", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account > Settings", "User should be navigated to account seetings page", "5. Scroll down to the page", "User should be able to view the section - Manage account containing Delete account link", "6. Click on Delete account link", "The sysytem should display a confirmation message - \"You are about to permanently delete your CNN account. This will go into effect immediately and you will no longer have access to your account data and will be unsubscribed from newsletters.\" with 2 option 'Nevermind' and 'Delete account'", "7. Select 'Nevermind'", "The confirmation pop-up should get closed and user account should not be deleted"]}
{"id": 125, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( \"qa.tries.123@gmail.com\" ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( \"qa@123456789\" ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userSettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"settings-header\" ) ) ) ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element = driver . findElement ( By . xpath ( \" // *[starts-with(@class, ▁ 'deleteAccountButton')]\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( element ) ) . click ( ) ; driver . findElement ( By . id ( \"delete-account--delete-btn\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()=\\\"Your ▁ CNN ▁ account ▁ has ▁ been ▁ deleted\\\"]\" ) ) ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // edition.cnn.com/\" ) ) ; } ", "Test Name": "Settings Page", "Test Description": "Verify user is able to delete the account successfully in settings page", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account > Settings", "User should be navigated to account seetings page", "5. Scroll down to the page", "User should be able to view the section - Manage account containing Delete account link", "6. Click on Delete account link", "The sysytem should display a confirmation message - \"You are about to permanently delete your CNN account. This will go into effect immediately and you will no longer have access to your account data and will be unsubscribed from newsletters.\" with 2 option 'Nevermind' and 'Delete account'", "7. Click on 'Delete account' link on the pop-up", "User should receive the message \"Your CNN account has been deleted\" In the pop-up and page should get automatically refreshed navigating user to home page"]}
{"id": 126, "website": "CNN", "code": " void function ( ) { String emailAddress = \"qa.tries.123@gmail.com\" ; String password = \"qa@123456789\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( emailAddress ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( password ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userSettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"settings-header\" ) ) ) ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element = driver . findElement ( By . xpath ( \" // *[starts-with(@class, ▁ 'deleteAccountButton')]\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( element ) ) . click ( ) ; driver . findElement ( By . id ( \"delete-account--delete-btn\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()=\\\"Your ▁ CNN ▁ account ▁ has ▁ been ▁ deleted\\\"]\" ) ) ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // edition.cnn.com/\" ) ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( emailAddress ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( password ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()=\\\"You ▁ have ▁ entered ▁ an ▁ invalid ▁ username ▁ or ▁ password\\\"]\" ) ) ) ; } ", "Test Name": "Login Page", "Test Description": "Verify user is not able to login to the website after deleting the account", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account > Settings", "User should be navigated to account seetings page", "5. Scroll down to the page", "User should be able to view the section - Manage account containing Delete account link", "6. Click on Delete account link", "The sysytem should display a confirmation message - \"You are about to permanently delete your CNN account. This will go into effect immediately and you will no longer have access to your account data and will be unsubscribed from newsletters.\" with 2 option 'Nevermind' and 'Delete account'", "7. Click on 'Delete account' link on the pop-up", "User should receive the message \"Your CNN account has been deleted\" In the pop-up and page should get automatically refreshed navigating user to home page", "8. Click on user account", "User should be able to navigate to login page", "9. Enter deleted account details in the login page", "User should receive the message - \"You have entered an invalid username or password\""]}
{"id": 127, "website": "CNN", "code": " void function ( ) { String emailAddress = \"qa.tries.123@gmail.com\" ; String password = \"qa@123456789\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( emailAddress ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( password ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userSettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"settings-header\" ) ) ) ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; element = driver . findElement ( By . xpath ( \" // *[starts-with(@class, ▁ 'deleteAccountButton')]\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( element ) ) . click ( ) ; driver . findElement ( By . id ( \"delete-account--delete-btn\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()=\\\"Your ▁ CNN ▁ account ▁ has ▁ been ▁ deleted\\\"]\" ) ) ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // edition.cnn.com/\" ) ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[data-zjs-component_id='signup_link']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ Address']\" ) ) ) ; element . sendKeys ( emailAddress ) ; element . sendKeys ( \"\\t\" ) ; element = driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) ; element . sendKeys ( password ) ; driver . findElement ( By . xpath ( \" // button[contains(text(),\\\"Create ▁ account\\\")]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . name ( \"userSettings\" ) ) ) ; assertTrue ( driver . findElement ( By . name ( \"userLogout\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Sign-up Page", "Test Description": "Verify user is able to signup using the deleted account credentials", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account > Settings", "User should be navigated to account seetings page", "5. Scroll down to the page", "User should be able to view the section - Manage account containing Delete account link", "6. Click on Delete account link", "The sysytem should display a confirmation message - \"You are about to permanently delete your CNN account. This will go into effect immediately and you will no longer have access to your account data and will be unsubscribed from newsletters.\" with 2 option 'Nevermind' and 'Delete account'", "7. Click on 'Delete account' link on the pop-up", "User should receive the message \"Your CNN account has been deleted\" In the pop-up and page should get automatically refreshed navigating user to home page", "8. Click on user account", "User should be able to view sign-up link", "9. Click on sign-up link", "User should be able to view the sign-up field details", "10. Enter the email address and password of deleted account of step 7 and click 'Create Account'", "The account should get created and navigated to the CNN home page", "11. Click on user account icon", "User should be able to view settings and log out options"]}
{"id": 128, "website": "CNN", "code": " void function ( ) { String [ ] countries = new String [ ] { \"Africa\" , \"Americas\" , \"Asia\" , \"Australia\" , \"China\" , \"Europe\" , \"India\" , \"Middle ▁ East\" , \"United ▁ Kingdom\" } ; String countryXPath ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; for ( String country : countries ) { wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"menu-icon\" ) ) ) . click ( ) ; countryXPath = \" // *[text()='\" + country + \"' ▁ and ▁ @data-analytics='header_expanded-nav' ▁ and ▁ @type='expanded']\" ; element = driver . findElements ( By . xpath ( countryXPath ) ) . get ( 0 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( element ) ) . click ( ) ; countryXPath = \" // h1[text()='\" + country + \"']\" ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( countryXPath ) ) ) ; } } ", "Test Name": "Hamberger Menu", "Test Description": "Verify user is able to navigate to different countries news articles through the Hamburger menu", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click hamburger menu > Select the country 'Africa' under world category list", "User should navigate to the page containing page title 'Africa'", "4. Click hamburger menu > Select the country 'America' under world category list", "User should navigate to the page containing page title 'America'", "5. Click hamburger menu > Select the country 'Asia' under world category list", "User should navigate to the page containing page title 'Asia'", "6. Click hamburger menu > Select the country 'Australia' under world category list", "User should navigate to the page containing page title 'Australia'", "7.Click hamburger menu > Select the country 'China' under world category list", "User should navigate to the page containing page title 'China'", "8. Click hamburger menu > Select the country 'Europe' under world category list", "User should navigate to the page containing page title 'Europe'", "9. Click hamburger menu > Select the country 'India' under world category list", "User should navigate to the page containing page title 'India'", "10. Click hamburger menu > Select the country 'Middle East' under world category list", "User should navigate to the page containing page title 'Middle East'", "11. Click hamburger menu > Select the country 'United Kingdom' under world category list", "User should navigate to the page containing page title 'United Kingdom'"]}
{"id": 129, "website": "CNN", "code": " void function ( ) { String [ ] countries = new String [ ] { \"Africa\" , \"Americas\" , \"Asia\" , \"Australia\" , \"China\" , \"Europe\" , \"India\" , \"Middle ▁ East\" , \"United ▁ Kingdom\" } ; String countryXPath ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElement ( By . xpath ( \" // *[@name='world' ▁ and ▁ @data-analytics='header_top-nav']\" ) ) . click ( ) ; for ( String country : countries ) { countryXPath = \" // a[text()='\" + country + \"' ▁ and ▁ @data-analytics='header_top-nav']\" ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( countryXPath ) ) ) . click ( ) ; countryXPath = \" // h1[text()='\" + country + \"']\" ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( countryXPath ) ) ) ; } } ", "Test Name": "Home Page", "Test Description": "Verify user is able to navigate to different countries news articles through home page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on World option on top header menu", "The page should load with header menu updated with list of countries - Africa, America, Asia, Australia,China,Europe,India,Middle East,United Kingdom", "3. Select the country 'Africa' from header menu", "User should navigate to the page containing page title 'Africa'", "4. Select the country 'America' from header menu", "User should navigate to the page containing page title 'America'", "5. Select the country 'Asia' from header menu", "User should navigate to the page containing page title 'Asia'", "6. Select the country 'Australia' from header menu", "User should navigate to the page containing page title 'Australia'", "7.Select the country 'China' from header menu", "User should navigate to the page containing page title 'China'", "8. Select the country 'Europe' from header menu", "User should navigate to the page containing page title 'Europe'", "9. Select the country 'India' from header menu", "User should navigate to the page containing page title 'India'", "10.Select the country 'Middle East' from header menu", "User should navigate to the page containing page title 'Middle East'", "11. Select the country 'United Kingdom' from header menu", "User should navigate to the page containing page title 'United Kingdom'"]}
{"id": 130, "website": "CNN", "code": " void function ( ) { String emailAddress = \"qa.tries.123@gmail.com\" ; String password = \"qa@123456789\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; driver . findElements ( By . className ( \"user-icon\" ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"*[aria-label='Email ▁ address']\" ) ) ) . sendKeys ( emailAddress ) ; driver . findElement ( By . cssSelector ( \"*[aria-label='Password']\" ) ) . sendKeys ( password ) ; driver . findElement ( By . xpath ( \" // button[text()=\\\"Log ▁ in\\\"]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"account-icon-button\" ) ) ) . click ( ) ; driver . findElement ( By . name ( \"userLogout\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"user-icon\" ) ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // edition.cnn.com/account/log-in\" ) ) ; } ", "Test Name": "Log-out Page", "Test Description": "Verify user is able to log out of the page successfully", "Steps": ["Pre-requisite: User credentials should be created, signup and the email address should be verified", "1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on User account icon on top right corner of the page", "User should be able to view the login page of CNN website", "3. Enter the email address and password and click Login", "User should be able to login to the cnn website with display of home page", "4. Click on User Account", "User should be able to view - Settings, log out options", "5. Click on Log out", "The page should load home page of CNN website", "6. Click on User Account", "User should be able to view the login page of CNN website"]}
{"id": 131, "website": "CNN", "code": " void function ( ) { driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@name='world' ▁ and ▁ @data-analytics='header_top-nav']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='World']\" ) ) ) ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[@aria-label='World' ▁ and ▁ @data-analytics='footer']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='World']\" ) ) ) ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@name='world' ▁ and ▁ @data-analytics='header_expanded-nav']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='World']\" ) ) ) ; } ", "Test Name": "World Page", "Test Description": "Verify user is able to view the world page from multiple areas of CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on the home page with its top header menu containing 'World' as one of the option", "2. Click on World option on top header menu", "The page should load the page containing 'World' as page Title", "3. Scroll down to the bottom of the home page", "User should be able to see the footer of the page", "4. Click on 'World' link just above the footer of the page", "The page should load the page containing 'World' as page Title", "5. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "6. Click on 'World' category section", "The page should load the page containing 'World' as page Title"]}
{"id": 132, "website": "CNN", "code": " void function ( ) { String textToSearch = \"Flood\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 15 ) ; driver . findElement ( By . xpath ( \" // *[@class='search-icon' ▁ and ▁ @tabindex='0']\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"header-search-bar\" ) ) ; element . sendKeys ( textToSearch ) ; element . sendKeys ( Keys . ENTER ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@class='facet_item ▁ clicked' ▁ and ▁ @id='newest']\" ) ) ) ; } ", "Test Name": "Search Page", "Test Description": "Verify the functionality of filter 'Date' on search page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on the search icon on the tools menu in top right corner", "User should be able to view the cursor placed in search Text box", "3. Type a search text inside the search field Ex: Flood and hit Enter", "The page should load with the search results and the filter should be by default set to 'Date' "]}
{"id": 133, "website": "CNN", "code": " void function ( ) { String textToSearch = \"xyzaaaa\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; driver . findElement ( By . xpath ( \" // *[@class='search-icon' ▁ and ▁ @tabindex='0']\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"header-search-bar\" ) ) ; element . sendKeys ( textToSearch ) ; element . sendKeys ( Keys . ENTER ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h3[text()=' ▁ did ▁ not ▁ match ▁ any ▁ documents.']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Search Page", "Test Description": "Verify whether system displays a validation message when no search results are found", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on the search icon on the tools menu in top right corner", "User should be able to view the cursor placed in search Text box", "3. Type an invalid search text inside the search field Ex: xyzaaaa and hit Enter", "The page should load with the validation message - Your search for {{searched content}} did not match any documents."]}
{"id": 134, "website": "CNN", "code": " void function ( ) throws InterruptedException { String textToSearch = \"Flood\" ; String resultsNumText = \"\" ; List < WebElement > articles ; WebElement headline , body ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 15 ) ; driver . findElement ( By . xpath ( \" // *[@class='search-icon' ▁ and ▁ @tabindex='0']\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"header-search-bar\" ) ) ; element . sendKeys ( textToSearch ) ; element . sendKeys ( Keys . ENTER ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"newest\" ) ) ) ; resultsNumText = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"cnn-search__results-count\" ) ) ) . getText ( ) ; element . click ( ) ; element = driver . findElement ( By . id ( \"relevance\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@class='facet_item ▁ clicked' ▁ and ▁ @id='relevance']\" ) ) ) ; Thread . sleep ( 1000 ) ; assertEquals ( resultsNumText , driver . findElement ( By . className ( \"cnn-search__results-count\" ) ) . getText ( ) ) ; articles = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"cnn-search__result-contents\" ) ) ) ; for ( WebElement article : articles ) { headline = article . findElement ( By . className ( \"cnn-search__result-headline\" ) ) ; body = article . findElement ( By . className ( \"cnn-search__result-body\" ) ) ; assertTrue ( headline . findElement ( By . tagName ( \"a\" ) ) . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( textToSearch . toLowerCase ( Locale . ROOT ) ) || body . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( textToSearch . toLowerCase ( Locale . ROOT ) ) ) ; } } ", "Test Name": "Search Page", "Test Description": "Verify the functionality of filter 'Releveance' on search page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on the search icon on the tools menu in top right corner", "User should be able to view the cursor placed in search Text box", "3. Type a search text inside the search field Ex: Flood and hit Enter", "The page should load with the search results and the filter should be by default set to 'Date'", "4. Click on the filter having Date value", "The filter should switch to 'Relevance'", "5. Select Relevance", "The number of search results should remain same and atlease first 10 search result should contain the word searched in its result content EX: The word 'Flood' should be displayed in atleast first 10 search result content"]}
{"id": 135, "website": "CNN", "code": " void function ( ) { String sportToSelect = \"Football\" ; String articleTitle = \"\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@name='\" + sportToSelect . toLowerCase ( ) + \"' ▁ and ▁ @data-analytics='header_expanded-nav']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='\" + sportToSelect + \"']\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // li[1] // *[@class='media']/following-sibling::*[@class='cd__content']/h3[@class='cd__headline']\" ) ) ; articleTitle = element . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'cd__headline-text')]\" ) ) . getText ( ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; assertEquals ( articleTitle , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"pg-headline\" ) ) ) . getText ( ) ) ; driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='\" + sportToSelect + \"']\" ) ) ) ; } ", "Test Name": "Sports page", "Test Description": "Verify user is able to view the details of the sport article of a specific game", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Select any page under sports category list Ex: Football", "User should be able to load the page containing the selected page as its title Ex: Football. User should able to view the latest news image and a link below its image", "4. Click on the link below the article image", "The page should load the detailed article of the selected sport.", "5. Click on the browser back button", "User should land on the previous page of sports article with the title Ex: Football"]}
{"id": 136, "website": "CNN", "code": " void function ( ) { String sportToSelect = \"Football\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@name='\" + sportToSelect . toLowerCase ( ) + \"' ▁ and ▁ @data-analytics='header_expanded-nav']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='\" + sportToSelect + \"']\" ) ) ) ; } ", "Test Name": "Sports Page", "Test Description": "Verify user is able to load a page in the category of sports articles", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Select any page under sports category list Ex: Football", "User should be able to load the page containing the selected page as its title Ex: Football "]}
{"id": 137, "website": "CNN", "code": " void function ( ) throws InterruptedException { String periodName = \"\" ; String region = \"Asia\" ; String day = \"Monday, ▁ October ▁ 25, ▁ 2021\" ; int dayNum = 1 ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@name='tv-schedule' ▁ and ▁ @data-analytics='header_expanded-nav']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='TV ▁ Schedule ▁ - ▁ CNN']\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'region__container')]\" ) ) ; element . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'select')]\" ) ) . click ( ) ; element . findElement ( By . linkText ( region ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='Intl ▁ - ▁ TV ▁ Schedule ▁ \" + region + \"']\" ) ) ) ; element = driver . findElements ( By . xpath ( \" // h2[@class='zn-header__text']\" ) ) . get ( 0 ) ; assertEquals ( \"Morning\" , element . findElement ( By . tagName ( \"a\" ) ) . getText ( ) ) ; element = driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'day__container')]\" ) ) ; driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'day__container')] // *[contains(@class, ▁ 'select')]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( element . findElement ( By . xpath ( \" // li[text()='\" + day + \"']\" ) ) ) ) . click ( ) ; assertEquals ( day , element . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'initial-day__label')]\" ) ) . getText ( ) ) ; List < WebElement > dayPeriods = driver . findElements ( By . xpath ( \" // ul[contains(@class, ▁ 'day-period')]/li[contains(@class, ▁ 'day-period')]\" ) ) ; js . executeScript ( \"window.scrollTo(0, ▁ -document.body.scrollHeight)\" ) ; for ( WebElement period : dayPeriods ) { periodName = period . getText ( ) ; action . moveToElement ( period ) . click ( ) . perform ( ) ; Thread . sleep ( 2000 ) ; element = driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'tv_schedule_day_\" + dayNum + \"')] // h2[@class='zn-header__text']/a[text()='\" + periodName + \"']\" ) ) ; assertTrue ( ( Boolean ) js . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; } } ", "Test Name": "Videos Page", "Test Description": "Verify the filter functionality of 'TV Schedule' under videos category list", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Select the TV Schedule option under Videos category list", "The page should load with the title 'TV Schedule - CNN' and user should be able to view the Region selection filter, Day Selection filter and Periods selection", "4. Select the Region filter Ex: Asia", "The search results should contain the CNN TV schedules of Asia starting from Morning.", "5. Select any date on the Date filter", "The search result should contain the CNN TV Shows of the selected date", "6. Select the period - Morning", "The page should slide to CNN TV shows displayed in Morning. 'Morning' should be displayed as heading", "7. Select the period - Afternoon", "The page should slide to CNN TV shows displayed in Afternoon. 'Afternoon' should be displayed as heading", "8. Select the period - Evening", "The page should slide to CNN TV shows displayed in Evening. 'Evening' should be displayed as heading", "9. Select the period - Overnight", "The page should slide to CNN TV shows displayed in Overnight. 'Overnight' should be displayed as heading"]}
{"id": 138, "website": "CNN", "code": " void function ( ) { String location = \"United ▁ States\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@name='wildfire-tracker' ▁ and ▁ @data-analytics='header_expanded-nav']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[contains(text(), ▁ 'wildfires')]\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // h3[text()='Air ▁ quality']\" ) ) ; action . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // input[@placeholder='Search ▁ your ▁ location']\" ) ) ; element . click ( ) ; element . sendKeys ( location ) ; element . sendKeys ( Keys . ENTER ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'air ▁ quality ▁ index')]\" ) ) ) ; } ", "Test Name": "Weather page", "Test Description": "Verify the functionality of Air quality index search in wildlife tracker on weather page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on 'Wildfire Tracker' option", "The page should load with the title containing word 'Wildfires'", "4. Scroll down to the Air Quality section", "User should be able to view the search box in Air quality section", "5. Enter the location in Air quality search field", "User should be able to enter the location and the search result should display the air quality index value of the location"]}
{"id": 139, "website": "CNN", "code": " void function ( ) { String location = \"United ▁ States\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; driver . findElement ( By . className ( \"menu-icon\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@name='weather' ▁ and ▁ @data-analytics='header_expanded-nav']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // input[@placeholder='Enter ▁ Location']\" ) ) ) ; element . click ( ) ; element . sendKeys ( location ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@class='tt-dropdown-menu'] /* [@class='tt-dataset-user-location'] /* /* \" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@data-temp='fahrenheit']\" ) ) ) . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[@data-temptype='fahrenheit']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Weather Page", "Test Description": "Verify the functionality of 'Get Forecast' on Weather page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Click on Hamburger menu on top right corner of the heading", "The header page should get expanded to show all categories list", "3. Click on 'Weather' option", "The page should load with search field and the weather conditions of local area.", "4. Enter the location in the search field Ex: United states", "The location query list should be displayed to the user", "5. Select the location query from the list ", "The region selected should get changed (The value should be different from previous region displayed on the screen)", "6. Select the degree celsius option in the top right corner of the page", "The value of temperature should convert the value in celsius"]}
{"id": 140, "website": "CNN", "code": " void function ( ) { String [ ] socialNetworks = new String [ ] { \"facebook\" , \"instagram\" , \"twitter\" } ; String currentNetwork = \"facebook\" ; String expectedUrl = \"https: // www.facebook.com/cnninternational\" ; String newTab ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; for ( String socialNetwork : socialNetworks ) { assertTrue ( driver . findElement ( By . xpath ( \" // *[@id='footer-wrap'] // *[@data-icon='\" + socialNetwork + \"']\" ) ) . isDisplayed ( ) ) ; } driver . findElement ( By . xpath ( \" // *[@id='footer-wrap'] // *[@data-icon='\" + currentNetwork + \"']\" ) ) . click ( ) ; newTab = ( String ) driver . getWindowHandles ( ) . toArray ( ) [ 1 ] ; driver . switchTo ( ) . window ( newTab ) ; wait . until ( ExpectedConditions . urlToBe ( expectedUrl ) ) ; } ", "Test Name": "CNN Support", "Test Description": "Verify user is able to access CNN facebook page on clicking on facebook icon from CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Scroll down to the footer of the page", "User should be able to view the facebook, twitter and instagram icons just above the footer", "3. Click on facebook page icon", "User should navigate to a new tab with 'https://www.facebook.com/cnninternational' page opened"]}
{"id": 141, "website": "CNN", "code": " void function ( ) { String [ ] socialNetworks = new String [ ] { \"facebook\" , \"instagram\" , \"twitter\" } ; String currentNetwork = \"instagram\" ; String expectedUrl = \"https: // www.instagram.com/cnn/\" ; String newTab ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; for ( String socialNetwork : socialNetworks ) { assertTrue ( driver . findElement ( By . xpath ( \" // *[@id='footer-wrap'] // *[@data-icon='\" + socialNetwork + \"']\" ) ) . isDisplayed ( ) ) ; } driver . findElement ( By . xpath ( \" // *[@id='footer-wrap'] // *[@data-icon='\" + currentNetwork + \"']\" ) ) . click ( ) ; newTab = ( String ) driver . getWindowHandles ( ) . toArray ( ) [ 1 ] ; driver . switchTo ( ) . window ( newTab ) ; wait . until ( ExpectedConditions . urlToBe ( expectedUrl ) ) ; } ", "Test Name": "CNN Support", "Test Description": "Verify user is able to access CNN instagram page on clicking on instagram icon from CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Scroll down to the footer of the page", "User should be able to view the facebook, twitter and instagram icons just above the footer", "3. Click on instagram page icon", "User should navigate to a new tab with 'https://www.instagram.com/cnn/' page opened"]}
{"id": 142, "website": "CNN", "code": " void function ( ) { String [ ] optionsList = new String [ ] { \"Terms ▁ of ▁ Use\" , \"Privacy ▁ Policy\" , \"Accessibility ▁ & ▁ CC\" , \"AdChoices\" , \"About ▁ Us\" , \"Modern ▁ Slavery ▁ Act ▁ Statement\" , \"Advertise ▁ with ▁ us\" , \"CNN ▁ Store\" , \"Newsletters\" , \"Transcripts\" , \"License ▁ Footage\" , \"CNN ▁ Newsource\" , \"Sitemap\" } ; String [ ] xpathToCheck = new String [ ] { \" // h1[text()='CNN ▁ Terms ▁ of ▁ Use']\" , \" // h1[contains(text(), ▁ 'Privacy ▁ Policy')]\" , \" // h1[contains(text(), ▁ 'Accessibility')]\" , \" // h1[contains(text(), ▁ 'Advertising ▁ Choices')]\" , \" // h1[text()='ABOUT ▁ CNN ▁ DIGITAL']\" , \" // h1[contains(text(), ▁ 'Modern ▁ Slavery ▁ Act ▁ Statement')]\" , \" // h2[contains(text(), ▁ 'Welcome ▁ to ▁ CNNIC')]\" , \" // h1[contains(text(), ▁ 'CNN ▁ Store')]\" , \" // h1[text()='CNN ▁ Newsletters']\" , \" // img[@alt='TRANSCRIPTS']\" , \" // h4[contains(text(), ▁ 'FOOTAGE')]\" , \" // h1[text()='WE’RE ▁ AT ▁ THE ▁ HEART ▁ OF ▁ IT']\" , \" // h1[contains(text(), ▁ 'CNN ▁ Site ▁ Map')]\" } ; List < String > goBack = Arrays . asList ( \"Advertise ▁ with ▁ us\" , \"CNN ▁ Store\" , \"Newsletters\" , \"Transcripts\" , \"License ▁ Footage\" , \"CNN ▁ Newsource\" ) ; String hasPopUp = \"AdChoices\" ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; for ( String option : optionsList ) assertTrue ( driver . findElement ( By . linkText ( option ) ) . isDisplayed ( ) ) ; for ( int i = 0 ; i < optionsList . length ; i ++ ) { wait . until ( ExpectedConditions . presenceOfElementLocated ( By . linkText ( optionsList [ i ] ) ) ) . click ( ) ; if ( optionsList [ i ] . equals ( hasPopUp ) ) { wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@id, ▁ 'closeBtn')]\" ) ) ) . click ( ) ; } else wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( xpathToCheck [ i ] ) ) ) ; if ( goBack . contains ( optionsList [ i ] ) ) { driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . linkText ( optionsList [ i + 1 ] ) ) ) ; } js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; } } ", "Test Name": "CNN Support", "Test Description": "Verify user is able to access the other official pages of CNN website in the footer page", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Scroll down to the footer of the page", "User should be able to view the following links in the footer - Terms of Use, Privacy Policy, Manage Cookies+, AdChoices, About Us, Modern Slavery Act Statement, Advertise with us, CNN Store, Newsletters, Transcripts, License Footage, CNN Newsource, Sitemap", "3. Click on 'Terms of use'", "The page should load with the title 'CNN Terms of Use'", "4. Scroll to the footer and select 'Privacy Policy'", "The page should load and the title should contain 'Privacy Policy' word", "5. Scroll to the footer and select 'Manage Cookies+'", "A pop-up should be displayed with the title 'Manage Cookies+'", "6. Close the popup", "The pop-up should get closed", "7. Scroll to the footer and select 'AdChoices'", "A pop-up should be displayed with its title containing 'Advertising Choices'", "8. Close the popup", "The pop-up should get closed", "9. Scroll to the footer and select 'About Us'", "The page should load with the title 'ABOUT CNN DIGITAL'", "10. Scroll to the footer and select 'Modern Slavery Act Statement'", "The page should load and the title should contain 'Modern Slavery Act Statement' word", "11. Scroll to the footer and select 'Advertise with us'", "The page should load and the title should contain 'Welcome to CNNIC' word", "12. Click on browser back button", "User should be able to land on the previous page Ex: About Us", "13. Scroll to the footer and select 'CNN Store'", "The page should load CNN Store page", "14. Scroll to the footer and select 'Newsletters'", "The page should load with the title 'CNN Newsletters'", "15. Click on browser back button", "User should be able to land on the previous page Ex: About Us", "16. Scroll to the footer and select 'Transcripts'", "The page should load with the title 'Transcripts'", "18. Scroll to the footer and select 'License Footage'", "The page should contain one of the menu as 'Featured footage' or the word 'Footage'", "Click on the browser back button ", "User should be able to land on the previous page ", "19. Scroll to the footer and select 'CNN Newsource'", "The page should load with the title 'Newsource'", "20. Click on browser back button and Scroll to the footer and select 'Sitemap'", "The page should load and the title should contain 'CNN Site Map' word"]}
{"id": 143, "website": "CNN", "code": " void function ( ) { String [ ] socialNetworks = new String [ ] { \"facebook\" , \"instagram\" , \"twitter\" } ; String currentNetwork = \"twitter\" ; String expectedUrl = \"https: // twitter.com/cnni\" ; String newTab ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; for ( String socialNetwork : socialNetworks ) { assertTrue ( driver . findElement ( By . xpath ( \" // *[@id='footer-wrap'] // *[@data-icon='\" + socialNetwork + \"']\" ) ) . isDisplayed ( ) ) ; } driver . findElement ( By . xpath ( \" // *[@id='footer-wrap'] // *[@data-icon='\" + currentNetwork + \"']\" ) ) . click ( ) ; newTab = ( String ) driver . getWindowHandles ( ) . toArray ( ) [ 1 ] ; driver . switchTo ( ) . window ( newTab ) ; wait . until ( ExpectedConditions . urlToBe ( expectedUrl ) ) ; } ", "Test Name": "CNN Support", "Test Description": "Verify user is able to access CNN twitter page on clicking on twitter icon from CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Scroll down to the footer of the page", "User should be able to view the facebook, twitter and instagram icons just above the footer", "3. Click on twitter page icon", "User should navigate to a new tab with 'https://twitter.com/cnni' page opened"]}
{"id": 144, "website": "CNN", "code": " void function ( ) { String [ ] optionsList = new String [ ] { \"Terms ▁ of ▁ Use\" , \"Privacy ▁ Policy\" , \"Accessibility ▁ & ▁ CC\" , \"AdChoices\" , \"About ▁ Us\" , \"Modern ▁ Slavery ▁ Act ▁ Statement\" , \"Advertise ▁ with ▁ us\" , \"CNN ▁ Store\" , \"Newsletters\" , \"Transcripts\" , \"License ▁ Footage\" , \"CNN ▁ Newsource\" , \"Sitemap\" } ; String newTab ; String textToType = \"try\" ; String emailAddress = \"qa.tries.123@gmail.com\" ; String [ ] feedbackFields = new String [ ] { \"Name\" , \"Email\" , \"Thoughts\" , \"Comments\" } ; driver . get ( \"https: // edition.cnn.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; js . executeScript ( \"window.scrollTo(0, ▁ document.body.scrollHeight)\" ) ; for ( String option : optionsList ) assertTrue ( driver . findElement ( By . linkText ( option ) ) . isDisplayed ( ) ) ; driver . findElement ( By . linkText ( \"About ▁ Us\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h1[text()='ABOUT ▁ CNN ▁ DIGITAL']\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='SUBMIT ▁ FEEDBACK:']\" ) ) ; action . moveToElement ( element ) . perform ( ) ; driver . findElement ( By . linkText ( \"Have ▁ something ▁ to ▁ say? ▁ Click ▁ Here\" ) ) . click ( ) ; newTab = ( String ) driver . getWindowHandles ( ) . toArray ( ) [ 1 ] ; driver . switchTo ( ) . window ( newTab ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='CNN ▁ Feedback']\" ) ) ) ; for ( String field : feedbackFields ) { if ( field . equals ( \"Email\" ) ) driver . findElement ( By . xpath ( \" // *[@name='feedback\" + field + \"']\" ) ) . sendKeys ( emailAddress ) ; else driver . findElement ( By . xpath ( \" // *[@name='feedback\" + field + \"']\" ) ) . sendKeys ( textToType ) ; } driver . findElement ( By . id ( \"js-feedback-send\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // *[text()='Thank ▁ you ▁ for ▁ your ▁ feedback. ▁ ▁ It ▁ has ▁ been ▁ submitted ▁ successfully.']\" ) ) ) ; } ", "Test Name": "CNN Support", "Test Description": "Verify whether user is able to submit the feedback on CNN website", "Steps": ["1. Launch the application using url https://edition.cnn.com/", "User should land on home page with the latest news around the world", "2. Scroll down to the footer of the page", "User should be able to view the following links in the footer - Terms of Use, Privacy Policy, Manage Cookies+, AdChoices, About Us, Modern Slavery Act Statement, Advertise with us, CNN Store, Newsletters, Transcripts, License Footage, CNN Newsource, Sitemap", "3. Click on About Us link", "The page should load with the title 'ABOUT CNN DIGITAL'", "4. Scroll down to the section - Submit feedback", "User should be able to view the Submit feedback section with link - Have something to say? Click Here", "5. Click on 'Have something to say? Click Here'", "A new tab should be opened with the page title 'CNN Feedback'", "6. Enter the name, Email id, Initial thoughts and additional comments field", "User should be able to enter the data", "7. Click on 'Send Feedback'", "User should receive a confirmation message - \"Thank you for your feedback. It has been submitted successfully.\""]}
