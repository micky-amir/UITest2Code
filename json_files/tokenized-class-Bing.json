{"id": 60, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"h1 ▁ > ▁ *\" ) , \"aria-label\" , \"Bing\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"images\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"video\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"shopping\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \".vs ▁ img\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; } ", "Test Name": "HOME PAGE", "Test Description": "Verify whether user is able to land on home page on first launch of Bing search engine website", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should land on the home page of bing search engine. User should be able to view Images, Videos, Shopping options as navigation menu", "2. Scroll down on the home page", "User should be able to view the Image frames"]}
{"id": 61, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"h1 ▁ > ▁ *\" ) , \"aria-label\" , \"Bing\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"images\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"video\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"shopping\" ) ) . isDisplayed ( ) ) ; for ( int i = 0 ; i < 2 ; i ++ ) { driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Customize ▁ your ▁ homepage']\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Show ▁ menu ▁ bar']\" ) ) ) ; locator = By . xpath ( \" // *[text()='Show ▁ menu ▁ bar'] // following-sibling::*\" ) ; assertTrue ( driver . findElement ( locator ) . getAttribute ( \"class\" ) . contains ( \"toggle_ctrl\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; assertEquals ( \"problem ▁ in\" + i , i != 0 , driver . findElement ( By . xpath ( \" // *[text()='Show ▁ menu ▁ bar'] // following-sibling::* // *\" ) ) . getAttribute ( \"class\" ) . contains ( \"toggle_on\" ) ) ; locator = By . cssSelector ( \"[aria-label='Settings ▁ and ▁ quick ▁ links']\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; assertEquals ( i , driver . findElements ( By . id ( \"images\" ) ) . size ( ) ) ; assertTrue ( driver . findElements ( By . id ( \"video\" ) ) . size ( ) >= i ) ; assertTrue ( driver . findElements ( By . id ( \"shopping\" ) ) . size ( ) >= i ) ; } } ", "Test Name": "HOME PAGE", "Test Description": "Verify user settings to 'Show menu bar' on the home page of Bing search Engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should land on the home page of bing search engine. User should be able to view Images, Videos, Shopping options as navigation menu", "2. Click on the Hamburger menu present on top right corner of the page", "User should be able to view the 'Customise your homepage' section containing - ''Show menu bar'' with toggle button", "3. Toggle 'OFF' the option for 'Show menu bar' option", "The button should be able to toggle OFF", "4. Click on the hamburger menu icon again", "The list should get closed and the user should NOT be able to view the navigation options - Images, Videos, Shopping", "5. Click on the Hamburger menu present on top right corner of the page", "User should be able to view the 'Customise your homepage' section containing - ''Show menu bar'' with toggle button", "6. Toggle 'ON' the option for 'Show menu bar' option", "The button should be able to toggle ON", "7. Click on the hamburger menu icon again", "The list should get closed and the user should be able to view the menu options - Images, Videos, Shopping"]}
{"id": 62, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"h1 ▁ > ▁ *\" ) , \"aria-label\" , \"Bing\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"images\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"video\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"shopping\" ) ) . isDisplayed ( ) ) ; for ( int i = 0 ; i < 2 ; i ++ ) { driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Customize ▁ your ▁ homepage']\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Show ▁ news ▁ and ▁ interests']\" ) ) ) ; locator = By . xpath ( \" // *[text()='Show ▁ news ▁ and ▁ interests'] // following-sibling::*\" ) ; assertTrue ( driver . findElement ( locator ) . getAttribute ( \"class\" ) . contains ( \"toggle_ctrl\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; assertEquals ( \"problem ▁ in\" + i , i != 0 , driver . findElement ( By . xpath ( \" // *[text()='Show ▁ news ▁ and ▁ interests'] // following-sibling::* // *\" ) ) . getAttribute ( \"class\" ) . contains ( \"toggle_on\" ) ) ; locator = By . cssSelector ( \"[aria-label='Settings ▁ and ▁ quick ▁ links']\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; assertEquals ( i != 0 , ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . cssSelector ( \".vs ▁ img\" ) ) ) ) ; } } ", "Test Name": "HOME PAGE", "Test Description": "Verify user settings to 'Show news and interests' on the home page of Bing search Engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should land on the home page of bing search engine. User should be able to view Images, Videos, Shopping options as navigation menu", "2. Click on the Hamburger menu present on top right corner of the page", "User should be able to view the 'Customise your homepage' section containing - ''Show news and interests'' with toggle button", "3. Toggle 'OFF' the option for 'Show news and interests' option", "The button should be able to toggle OFF", "4. Click on the hamburger menu icon again", "The list should get closed and the user should NOT be able to view the image frames on the home page without scrolling", "5. Click on the Hamburger menu present on top right corner of the page", "User should be able to view the 'Customise your homepage' section containing - ''Show news and interests'' with toggle button", "6. Toggle 'ON' the option for 'Show news and interests' option", "The button should be able to toggle ON", "7. Click on the hamburger menu icon again", "The list should get closed and the user should be able to view the image frames on the home page"]}
{"id": 63, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"h1 ▁ > ▁ *\" ) , \"aria-label\" , \"Bing\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"images\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"video\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"shopping\" ) ) . isDisplayed ( ) ) ; for ( int i = 0 ; i < 2 ; i ++ ) { driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Customize ▁ your ▁ homepage']\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Show ▁ homepage ▁ image']\" ) ) ) ; locator = By . xpath ( \" // *[text()='Show ▁ homepage ▁ image'] // following-sibling::*\" ) ; assertTrue ( driver . findElement ( locator ) . getAttribute ( \"class\" ) . contains ( \"toggle_ctrl\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; assertEquals ( \"problem ▁ in\" + i , i != 0 , driver . findElement ( By . xpath ( \" // *[text()='Show ▁ homepage ▁ image'] // following-sibling::* // *\" ) ) . getAttribute ( \"class\" ) . contains ( \"toggle_on\" ) ) ; locator = By . cssSelector ( \"[aria-label='Settings ▁ and ▁ quick ▁ links']\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; assertEquals ( i == 0 , driver . findElement ( By . cssSelector ( \".hp_body\" ) ) . getAttribute ( \"class\" ) . contains ( \"no_image\" ) ) ; } } ", "Test Name": "HOME PAGE", "Test Description": "Verify user settings to 'Show homepage image' on the home page of Bing search Engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should land on the home page of bing search engine. User should be able to view Images, Videos, Shopping options as navigation menu", "2. Click on the Hamburger menu present on top right corner of the page", "User should be able to view the 'Customise your homepage' section containing - ''Show homepage image'' with toggle button", "3. Toggle 'OFF' the option for 'Show homepage image' option", "The button should be able to toggle OFF", "4. Click on the hamburger menu icon again", "The list should get closed and the user should NOT be able to view the background image on the homepage", "5. Click on the Hamburger menu present on top right corner of the page", "User should be able to view the 'Customise your homepage' section containing - ''Show homepage image'' with toggle button", "6. Toggle 'ON' the option for 'Show homepage image' option", "The button should be able to toggle ON", "7. Click on the hamburger menu icon again", "The list should get closed and the user should be able to view the background image on the homepage"]}
{"id": 64, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; String url = driver . getCurrentUrl ( ) ; driver . navigate ( ) . back ( ) ; assertTrue ( driver . getCurrentUrl ( ) . contains ( \"https: // www.bing.com/\" ) && ! driver . getCurrentUrl ( ) . equals ( url ) ) ; } ", "Test Name": "HOME PAGE", "Test Description": "Verify user is able to navigate to the selected tile with search results", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view the user account icon on the top right of the page. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Click on browser back button", "User should land on the home page and User should be able to view \"https://www.bing.com/\" url in the url locator"]}
{"id": 65, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(1)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'English')] // preceding-sibling::a\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".musCard ▁ .icon_text\" ) ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . className ( \"musCardCont\" ) ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Share ▁ to ▁ Facebook']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Share ▁ to ▁ Twitter']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \".share ▁ .downloadLink\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertEquals ( \"Download ▁ this ▁ image. ▁ Use ▁ of ▁ this ▁ image ▁ is ▁ restricted ▁ to ▁ wallpaper ▁ only.\" , element . getAttribute ( \"title\" ) ) ; } ", "Test Name": "HOME PAGE", "Test Description": "Verify user is able to download the bing background image from home page", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view the user account icon on the top right of the page. User should be able to view the 'Location icon with info card' option", "2. Hover over on the option - Location icon with info card", "User should be able to view a small pop-up opened with facebook and twitter icons on the left and a download button on the right", "3. Hover over on the download icon", "After 2 seconds, a tooltip should be displayed stating 'Download this image. Use of this image is restricted to wallpaper only.'"]}
{"id": 66, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".musCard ▁ .icon_text\" ) ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . className ( \"musCardCont\" ) ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Share ▁ to ▁ Facebook']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Share ▁ to ▁ Twitter']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \".musCardCont ▁ .title\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertTrue ( actualTitles . containsAll ( expectedTitles ) ) ; } ", "Test Name": "HOME PAGE", "Test Description": "Verify user is able to navigate to the search result page using 'Location icon with info card' option", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view the user account icon on the top right of the page. User should be able to view the 'Location icon with info card' option just above the image tile in the right side of the page", "2. Hover over on the option - Location icon with info card", "User should be able to view a small pop-up opened with facebook and twitter icons on the left and a link to a website", "3. Click on the link", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING"]}
{"id": 67, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; element = driver . findElement ( By . id ( \"hbsettings\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; element = driver . findElement ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@for='setlang']\" ) ) ) ; driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Français')] // preceding-sibling::a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"id_s\" ) , \"Connexion\" ) ) ; driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@for='setlang']\" ) ) ) ; driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'English')] // preceding-sibling::a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"id_s\" ) , \"Sign ▁ in\" ) ) ; } ", "Test Name": "HOME PAGE", "Test Description": "Verify the language preference functionality provided on bing search engine website", "Steps": ["1. Launch the application using url - https://www.bing.com", "User should be able to view the user account icon on the top right of the page.", "2. Click on Hamburger menu", "User should be able to view settings option in the hamburger list", "3. Expand the settings option", "User should be able to view 'Language' as an option", "4. Click on 'Language'", "User should navigate to the language setting section with title - Display language", "5. Select any language from the list Ex: french", "The settings page should get closed and user should be able to view 'Connexion' beside signin icon", "6. Click on browser back button", "The settings page should get opened", "7. Select the language back to 'English'", "The settings page should get closed and user should be able to view 'Sign in' beside signin icon"]}
{"id": 68, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . className ( \"b_searchboxSubmit\" ) ) . click ( ) ; wait . until ( ExpectedConditions . numberOfElementsToBe ( By . xpath ( \" // h2[text()='Trending ▁ on ▁ Bing']\" ) , 0 ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the 'ALL' section of the Bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view the user account icon on the top right of the page. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Click on 'Search icon' present on search field", "The page should get refreshed and 'Trending on Bing' tile should be removed"]}
{"id": 69, "website": "Bing", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . className ( \"b_searchboxSubmit\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sb_count\" ) ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"a[aria-label='Filtered ▁ by ▁ Any ▁ time']\" ) ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( ) . perform ( ) ; actions . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . cssSelector ( \"[aria-label='Filtered ▁ by ▁ Any ▁ time']\" ) , \"class\" , \"b_selected\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; Thread . sleep ( 3000 ) ; List < WebElement > optionElements = wait . until ( ExpectedConditions . numberOfElementsToBe ( By . cssSelector ( \"#ftrD_Any_time ▁ > ▁ a\" ) , 5 ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"All\" , \"Past ▁ 24 ▁ hours\" , \"Past ▁ week\" , \"Past ▁ month\" , \"Past ▁ year\" ) ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"#CustomRangeFilter ▁ span\" ) , \"Custom ▁ range\" ) ) ; String originalText = driver . findElement ( By . className ( \"sb_count\" ) ) . getText ( ) ; String originalCount = originalText . split ( \" ▁ \" ) [ 0 ] ; optionElements . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . className ( \"sb_count\" ) , originalText ) ) ) ; String newCount = driver . findElement ( By . className ( \"sb_count\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 0 ] ; assertTrue ( Integer . parseInt ( originalCount . replace ( \",\" , \"\" ) ) > Integer . parseInt ( newCount . replace ( \",\" , \"\" ) ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the 'AnyTime' filter functionality present on All page of bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view the user account icon on the top right of the page. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Click on 'Search icon' present on search field", "The page should get refreshed and search result count should be displayed", "4. Click on 'AnyTime' filter", "User should view different options - All, Past 24 hours, Past week, Past month, Past year and custom range", "5. Select a filter option Ex: Past Week", "The page should get refreshed and user should be able to view the search results count lesser than the count displayed before the filter applied"]}
{"id": 70, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 1 ) . click ( ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".image.right\" ) ) ) ; List < WebElement > optionElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"a.ntext\" ) ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Top ▁ stories\" , \"Sports\" , \"U.S.\" , \"Local\" , \"World\" , \"Science\" , \"Technology\" , \"Entertainment\" , \"Politics\" , \"Business\" ) ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the user navigation to 'NEWS' section of the Bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select 'NEWS'", "The page should get refreshed and should be able to view the image tile content list. User should also view the options - Top stories, Sports, U.S., Local, World, Science, Technology, Entertainment, Politics, Business options in the left panel of the page"]}
{"id": 71, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 1 ) . click ( ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".image.right\" ) ) ) ; List < WebElement > optionElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"a.ntext\" ) ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Top ▁ stories\" , \"Sports\" , \"U.S.\" , \"Local\" , \"World\" , \"Science\" , \"Technology\" , \"Entertainment\" , \"Politics\" , \"Business\" ) ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \".b_searchbox\" ) , \"value\" , \"World\" ) ) ; assertTrue ( driver . getTitle ( ) . contains ( \"World\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Africa']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \".b_searchbox\" ) , \"value\" , \"Africa\" ) ) ; assertTrue ( driver . getTitle ( ) . contains ( \"Africa\" ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the user search result change on selecting the categories under NEWS page", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select 'NEWS'", "The page should get refreshed and should be able to view the image tile content list. User should also view the options - Top stories, Sports, U.S., Local, World, Science, Technology, Entertainment, Politics, Buniess options in the left panel of the page", "4. Click on any of the options Ex: world", "The page should get refreshed with 'World' text displayed on search field and the title of the page", "5. Click on 'Africa' under world sub-section in left panel", "The page should get refreshed with 'Africa' text displayed on search field and the title of the page"]}
{"id": 72, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"imgpt\" ) ) ) . get ( 0 ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"OverlayIFrame\" ) ) ) ; driver . switchTo ( ) . frame ( element ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".mainImage.current\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Visual ▁ Search']\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Share']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \".mainImage ▁ .imgContainer ▁ img\" ) ) . click ( ) ; while ( true ) { if ( driver . getWindowHandles ( ) . size ( ) != 1 ) break ; } ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"img\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the user navigation to 'IMAGES' section of the Bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select 'IMAGES'", "User should be able to view the image tiles", "4. Select any image tile", "User should be able to view the selected image in larger screen. Visual search and Share options should be displayed below the picture", "5. Click on the image again", "The image should get displayed in a new tab"]}
{"id": 73, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"imgpt\" ) ) ) . get ( 0 ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"OverlayIFrame\" ) ) ) ; driver . switchTo ( ) . frame ( element ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".mainImage.current\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Visual ▁ Search']\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Share']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . cssSelector ( \"#shdlg[role='dialog']\" ) , \"style\" , \"display: ▁ block;\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[title='Share ▁ on ▁ Facebook']\" ) ) . isDisplayed ( ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"shdlg-close\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( By . cssSelector ( \"#shdlg[role='dialog']\" ) , \"style\" , \"display: ▁ none;\" ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Share functionality in the Image section", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select 'IMAGES'", "User should be able to view the image tiles", "4. Select any image tile", "User should be able to view the selected image in larger screen. Visual search and Share options should be displayed below the picture", "5. Click on 'Share' option", "A pop-up should get opened with 'facebook' as one of the option and 'close' button on the pop-up", "6. Click on the close button", "The pop-up should get closed"]}
{"id": 74, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@id='fltIdtCon'] // *[contains(text(), ▁ 'SafeSearch')]\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@id='fltIdtCon'] // *[contains(text(), ▁ 'Page ▁ titles')]\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@id='fltIdtCon'] // *[contains(text(), ▁ 'Filter')]\" ) ) ) ; element = driver . findElement ( By . id ( \"ftr_ss_d\" ) ) ; element . findElement ( By . xpath ( \". // preceding-sibling::*\" ) ) . click ( ) ; assertTrue ( element . getText ( ) . contains ( \"Strict\" ) ) ; element = driver . findElement ( By . id ( \"ftr_ulo_d\" ) ) ; element . findElement ( By . xpath ( \". // preceding-sibling::*\" ) ) . click ( ) ; assertTrue ( element . getText ( ) . contains ( \"Show\" ) ) ; locator = By . cssSelector ( \"[title='Show ▁ or ▁ hide ▁ filters']\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > navFilterElements = driver . findElements ( By . cssSelector ( \"[aria-label='Search ▁ results ▁ filters'] ▁ [role='button'] ▁ > ▁ span\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Image ▁ size\" , \"Color\" , \"Type\" , \"Layout\" , \"People\" , \"Date\" , \"License\" ) ) ; for ( WebElement element : navFilterElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; List < String > expectedDropdownOptions = new ArrayList < > ( Arrays . asList ( \"Small\" , \"Color ▁ only\" , \"Clipart\" , \"Square\" , \"Just ▁ faces\" , \"Public ▁ domain\" ) ) ; navFilterElements . remove ( 5 ) ; for ( int i = 0 ; i < navFilterElements . size ( ) ; i ++ ) { element = navFilterElements . get ( i ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfNestedElementLocatedBy ( element , By . xpath ( \". // ancestor::li // div // *[contains(text(), ▁ '\" + expectedDropdownOptions . get ( i ) + \"')]\" ) ) ) ; } driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the filter functionality on Images page of bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select 'IMAGES'", "User should be able to view the filter such as 'SafeSearch', 'Page titles' and 'Filter'", "4. Select the Safesearch dropdown", "Strict' should be one of the options in the dropdown list", "5. Select the Page titles dropdown", "Show' should be one of the options in the dropdown list", "6. Click on the filter icon", "The options - Image size, Color, Type, Layout, People, Date, License should appear just below the navigation menu", "7. Click on Image size filter", "Small' should be one of the options in the dropdown list", "8. Click on 'Color' dropdown", "Color only' should be one of the options in the dropdown list", "9. Click on 'Type' dropdown", "Clipart' should be one of the options in the dropdown list", "10. Click on 'Layout' dropdown", "Square' should be one of the options in the dropdown list", "11. Click on 'People' dropdown", "Just faces' should be one of the options in the dropdown list", "12. Click on 'License' dropdown", "Public domain' should be one of the options in the dropdown list", "13. Click on the filter icon", "The options - Image size, Color, Type, Layout, People, Date, License should disappear below the navigation menu"]}
{"id": 75, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[id*='mc_vtvc_video']\" ) ) ) . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"iframe[title='Video ▁ player']\" ) , \"allow\" , \"autoplay\" ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the user navigation to 'Videos' section of the Bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select 'Videos' section", "User should be able to view the video frames on the page", "4. Click on any 'Video frame'", "User should be able to view the video page opened with the 'Autoplay setting' input on the page"]}
{"id": 76, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"inner-container\" ) ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > optionElements = wait . until ( ExpectedConditions . numberOfElementsToBe ( By . cssSelector ( \".actions ▁ ▁ li:not([style='display: ▁ none;']) ▁ > ▁ a ▁ .actionLabel\" ) , 5 ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Directions\" , \"Traffic\" , \"Local\" , \"My ▁ Places\" , \"More\" ) ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 4 ) . findElement ( By . xpath ( \". // ancestor::a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . className ( \"hidePopupButton\" ) , \"aria-expanded\" , \"true\" ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > dropdownElements = driver . findElements ( By . cssSelector ( \".taskBarPopout ▁ li.bm_dropdownEntry\" ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Share\" , \"Print\" , \"Feedback\" , \"Full ▁ Screen\" , \"Embed ▁ a ▁ map\" , \"My ▁ Contributions\" ) ) ; for ( WebElement element : dropdownElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the user navigation to 'Maps' section of the Bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select \"Maps' section of the page", "The page should load and display the options - Directions, Traffic, Local, My Places and More", "4. Select More icon", "The dropdwon list should display the options - Share, Print, Feedback, Full Screen, Embed a map, My Contributions"]}
{"id": 77, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"b_entityTP\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Nearby']\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Directions']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \".directionsPopOut ▁ a\" ) , \"aria-expanded\" , \"true\" ) ) ; element = driver . findElement ( By . cssSelector ( \".directionsPopOut ▁ .bm_dropdownEntry\" ) ) ; assertEquals ( \"Directions ▁ to ▁ here\" , element . getText ( ) ) ; assertEquals ( \"Directions ▁ from ▁ here\" , driver . findElement ( By . cssSelector ( \".directionsPopOut ▁ .bm_dropdownEntry:nth-child(2)\" ) ) . getText ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".cardTitleText ▁ h2\" ) , \"Directions\" ) ) ; wait . until ( ExpectedConditions . attributeToBeNotEmpty ( driver . findElement ( By . cssSelector ( \"[title='From']\" ) ) , \"style\" ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeToBeNotEmpty ( driver . findElement ( By . cssSelector ( \"[title='To']\" ) ) , \"style\" ) ) ) ; driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Nearby']\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Directions']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \".directionsPopOut ▁ a\" ) , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . cssSelector ( \".directionsPopOut ▁ .bm_dropdownEntry:nth-child(2)\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".cardTitleText ▁ h2\" ) , \"Directions\" ) ) ; wait . until ( ExpectedConditions . attributeToBeNotEmpty ( driver . findElement ( By . cssSelector ( \"[title='To']\" ) ) , \"style\" ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeToBeNotEmpty ( driver . findElement ( By . cssSelector ( \"[title='From']\" ) ) , \"style\" ) ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify different options available for Directions functionality in Maps page", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select \"Maps' section of the page", "The page should load and display in the left panel - Directions button and Nearby button", "4. On the left panel, Click on 'Directions'", "The dropdown list should be displayed with the vlaues - 'Directions to here' and 'Directions from here'", "5. Click on 'Directions to here'", "The left panel should load and display the From field empty and 'To' field should be filled with a value", "6. Click on Browser back button", "The page should load and display in the left panel - Directions button and Nearby button", "7. Select 'Directions' > Directions from here", "The left panel should load and display the From field filled with value and 'To' field should be empty"]}
{"id": 78, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".id_avatar\" ) ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"b_entityTP\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"[aria-label='Directions']\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Nearby']\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"maps_sb\" ) ) ; assertEquals ( element , driver . switchTo ( ) . activeElement ( ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > suggestionElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"suggestLink\" ) ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Parking\" , \"Hotels\" , \"Restaurants\" , \"Coffee\" , \"Gas ▁ stations\" ) ) ; for ( WebElement element : suggestionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertTrue ( actualTitles . containsAll ( expectedTitles ) ) ; suggestionElements . get ( 2 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"cardTitleText\" ) , \"restaurants\" ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify different options available for Nearby functionality in Maps page", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select \"Maps' section of the page", "The page should load and display in the left panel - Directions button and Nearby button", "4. On the left panel, Select Nearby option", "The search field should be focused with auto completion options - Parking, Hotels, Restaurants, Coffee and Gas stations", "5. Select any value from the list Ex: Restaurants", "The left panel should load and display the title 'restaurants' on left panel"]}
{"id": 79, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; List < WebElement > navElements = driver . findElements ( By . cssSelector ( \"[aria-label='Main ▁ menu'] ▁ > ▁ ul ▁ > ▁ [data-menuurl] ▁ > ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"ALL\" , \"NEWS\" , \"IMAGES\" , \"VIDEOS\" , \"MAPS\" , \"SHOPPING\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"inner-container\" ) ) ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; List < WebElement > optionElements = wait . until ( ExpectedConditions . numberOfElementsToBe ( By . cssSelector ( \".actions ▁ ▁ li:not([style='display: ▁ none;']) ▁ > ▁ a ▁ .actionLabel\" ) , 5 ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Directions\" , \"Traffic\" , \"Local\" , \"My ▁ Places\" , \"More\" ) ) ; for ( WebElement element : optionElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; optionElements . get ( 1 ) . findElement ( By . xpath ( \". // ancestor::a\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"cardTitleText\" ) , \"Traffic\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#cameraToggleInput[checked]\" ) ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify whether the camera functionality on the maps section of Bing search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Click on any image tile", "The page should get refreshed and navigated to bing.com search engine with search results containing options - ALL, NEWS, IMAGES, VIDEOS, MAPS, SHOPPING", "3. Select \"Maps' section of the page", "The page should load and display the options - Directions, Traffic, Local, My places and more", "4. Click on 'Traffic' option", "The lefp panel should be loaded and title should display 'Traffic' with camera option enabled", "5. Hover over on any of the 'video' icons on the map", "The video frame should be opened", "6. TOGGLE OFF the camera icon", "The video icons on the map should disappear"]}
{"id": 80, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Jacket\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; assertEquals ( \"page\" , driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . getAttribute ( \"aria-current\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Shopping']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"br-breadcrumbs\" ) , \"Bing ▁ Shopping ▁ > ▁ jacket\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h2[text()='Brand']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h2[text()='Price']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Shopping page navigation on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The page should load and display with breadcrumb Bing Shopping > jacket. User should also view the filters in the left panel of the page with options - Brand, Price,etc"]}
{"id": 81, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Jacket\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; assertEquals ( \"page\" , driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . getAttribute ( \"aria-current\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Shopping']\" ) ) . click ( ) ; List < WebElement > navElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"np-tabttltxt\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"SHOPPING ▁ HOME\" , \"DEPARTMENTS\" , \"STORES\" , \"EDITOR'S ▁ PICKS\" , \"DEALS\" , \"TRENDING ▁ PRODUCTS\" , \"PRICE ▁ DROPS\" , \"MY ▁ COLLECTIONS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( navElements . get ( 1 ) ) . perform ( ) ; expectedTitles . clear ( ) ; actualTitles . clear ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . cssSelector ( \"#Departments_Key ▁ .b_hList ▁ strong\" ) , \"\" ) ) ) ; List < WebElement > categoryElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"#Departments_Key ▁ .b_hList ▁ strong\" ) ) ) ; expectedTitles = new ArrayList < > ( Arrays . asList ( \"Home ▁ Furnishings\" , \"Clothing ▁ & ▁ Shoes\" , \"Toys\" , \"Lawn ▁ & ▁ Garden\" , \"Tools ▁ & ▁ Hardware\" ) ) ; for ( WebElement element : categoryElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . xpath ( \" // *[text()='Games']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"hpcb-ttl\" ) , \"Games\" ) ) ; assertTrue ( driver . findElements ( By . cssSelector ( \"[alt='Product ▁ Image']\" ) ) . size ( ) > 1 ) ; assertTrue ( driver . findElement ( By . id ( \"sb_form_q\" ) ) . getAttribute ( \"value\" ) . isEmpty ( ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Department section navigation of Shopping page on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The shopping page should display with different sections - Shopping Home, Departments, Stores, Editor's picks, Deals, Trending Products, Price drops, My collections", "4. Hover over on the 'Departments' sections", "User should be able to view the list of - Home Furnishings, Clothes & Shoes, Toys, Lawn & Garden, Tools and Hardware", "5. Select any of the items under the list Ex: Games under Toys list", "The page should load with the title 'Games' and the products listed on the page. The search fileld title should be empty."]}
{"id": 82, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Jacket\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; assertEquals ( \"page\" , driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . getAttribute ( \"aria-current\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Shopping']\" ) ) . click ( ) ; List < WebElement > navElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"np-tabttltxt\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"SHOPPING ▁ HOME\" , \"DEPARTMENTS\" , \"STORES\" , \"EDITOR'S ▁ PICKS\" , \"DEALS\" , \"TRENDING ▁ PRODUCTS\" , \"PRICE ▁ DROPS\" , \"MY ▁ COLLECTIONS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 2 ) . click ( ) ; List < WebElement > letterElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".sf-filter_N\" ) ) ) ; for ( int i = 0 ; i < letterElements . size ( ) ; i ++ ) { char letter = letterElements . get ( i ) . getText ( ) . charAt ( 0 ) ; assertEquals ( i + 65 , ( int ) letter ) ; } letterElements . get ( 0 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h2\" ) , \"POPULAR ▁ STORES ▁ IN ▁ 'A'\" ) ) ; List < WebElement > shopsElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"ps-cardttl\" ) ) ) ; for ( WebElement shop : shopsElements ) { assertTrue ( shop . getText ( ) . startsWith ( \"A\" ) ) ; } String shopName = shopsElements . get ( 0 ) . getText ( ) ; shopsElements . get ( 0 ) . click ( ) ; while ( true ) { if ( driver . getWindowHandles ( ) . size ( ) != 1 ) break ; } ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"csf-ttl\" ) , shopName ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Stores section navigation of Shopping page on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The shopping page should display with different sections - Shopping Home, Departments, Stores, Editor's picks, Deals, Trending Products, Price drops, My collections", "4. Select the 'Stores' section", "User should be able to view the Alphabets A to Z", "5. Click on any of the letter. Ex: A", "The page should load with the stores names that starts with the letter 'A' with the title POPULAR STORES IN 'A'", "6. Select the first store in the list", "The store page should be opened in a new page"]}
{"id": 83, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Jacket\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; assertEquals ( \"page\" , driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . getAttribute ( \"aria-current\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Shopping']\" ) ) . click ( ) ; List < WebElement > navElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"np-tabttltxt\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"SHOPPING ▁ HOME\" , \"DEPARTMENTS\" , \"STORES\" , \"EDITOR'S ▁ PICKS\" , \"DEALS\" , \"TRENDING ▁ PRODUCTS\" , \"PRICE ▁ DROPS\" , \"MY ▁ COLLECTIONS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( navElements . get ( 3 ) ) . perform ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"#editors_picks_key ▁ .np-catttl\" ) , \"Curated ▁ Collections\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Beauty']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"br-edtrlttl\" ) , \"Beauty ▁ & ▁ Spa\" ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Editor's Picks section navigation of Shopping page on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The shopping page should display with different sections - Shopping Home, Departments, Stores, Editor's picks, Deals, Trending Products, Price drops, My collections", "4. Hover over on 'Editor's Picks' section", "The dropsown list should be display with the title 'Curated collections'", "5. Select an item from the list Ex: Beauty", "The page should load and display with the title 'Beauty & Spa'"]}
{"id": 84, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Jacket\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; assertEquals ( \"page\" , driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . getAttribute ( \"aria-current\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Shopping']\" ) ) . click ( ) ; List < WebElement > navElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"np-tabttltxt\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"SHOPPING ▁ HOME\" , \"DEPARTMENTS\" , \"STORES\" , \"EDITOR'S ▁ PICKS\" , \"DEALS\" , \"TRENDING ▁ PRODUCTS\" , \"PRICE ▁ DROPS\" , \"MY ▁ COLLECTIONS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 4 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"tsl-ttl\" ) , \"DEALS ▁ FROM ▁ TOP ▁ BRANDS\" ) ) ; element = driver . findElement ( By . className ( \"tsl-cardttl\" ) ) ; String name = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . className ( \"csf-ttl\" ) , name ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Deals section navigation of Shopping page on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The shopping page should display with different sections - Shopping Home, Departments, Stores, Editor's picks, Deals, Trending Products, Price drops, My collection", "4. Select Deals", "User should be able to view the sub-section - DEALS FROM TOP BRANDS", "5. Select any of the brand", "The page should load and display the page title of the brand"]}
{"id": 85, "website": "Bing", "code": " void function ( ) { driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; By locator = By . cssSelector ( \"a.idp_ham\" ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . id ( \"hbsettree\" ) , \"aria-hidden\" , \"false\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#hbsettree ▁ > ▁ a[role='menuitem']:nth-child(2)\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'United ▁ States ▁ - ▁ English') ▁ or ▁ contains(text(), ▁ 'ארצות ▁ הברית ▁ - ▁ אנגלית')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='English']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"true\" ) ) ; driver . findElement ( By . id ( \"hbsettings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) , \"\" ) ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Country/Region']/../following-sibling::*\" ) ) . getText ( ) . contains ( \"United ▁ States ▁ - ▁ English\" ) ) ; assertEquals ( \"English\" , driver . findElement ( By . xpath ( \" // *[text()='Language']/../following-sibling::*\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( locator ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( locator , \"aria-expanded\" , \"false\" ) ) ; wait . until ( ExpectedConditions . urlContains ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".vs ▁ img\" ) ) ) ; element = driver . findElement ( By . cssSelector ( \"[type='search']\" ) ) ; element . sendKeys ( \"Jacket\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label='Search ▁ Results']\" ) ) ) ; assertEquals ( \"page\" , driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . getAttribute ( \"aria-current\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Shopping']\" ) ) . click ( ) ; List < WebElement > navElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"np-tabttltxt\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"SHOPPING ▁ HOME\" , \"DEPARTMENTS\" , \"STORES\" , \"EDITOR'S ▁ PICKS\" , \"DEALS\" , \"TRENDING ▁ PRODUCTS\" , \"PRICE ▁ DROPS\" , \"MY ▁ COLLECTIONS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; navElements . get ( 5 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"hpcb-ttl\" ) , \"Trending ▁ Products\" ) ) ; List < String > subsections = new ArrayList < > ( Arrays . asList ( \"Across ▁ Web\" , \"TRENDING ▁ CATEGORIES\" , \"Trending ▁ Products ▁ For ▁ You\" ) ) ; Actions actions = new Actions ( driver ) ; for ( int i = 0 ; i < subsections . size ( ) ; i ++ ) { element = driver . findElement ( By . xpath ( \" // h2[text()='\" + subsections . get ( i ) + \"']\" ) ) ; if ( i != 0 ) actions . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; } } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Trending Products section navigation of Shopping page on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The shopping page should display with different sections - Shopping Home, Departments, Stores, Editor's picks, Deals, Trending Products, Price drops, My collection", "4. click on Trending products", "The page should load and user should be able tp view the sub-sections - Across web", "5. Scroll down the page", "User should be able to view Trending categories sub-section", "6. Scroll down the page", "User should be able to view - TRENDING PRODUCTS FOR YOU"]}
{"id": 86, "website": "Bing", "code": " void function ( ) { String textToShop = \"Jacket\" ; String [ ] sectionsToCheck = new String [ ] { \"Shopping_Home_key\" , \"Departments_Key\" , \"Stores_key\" , \"editors_picks_key\" , \"dealstab_key\" , \"trending_products_key\" , \"price_drops_key\" , \"my_collections_key\" } ; String sectionToChoose = \"price_drops_key\" ; String titleToCheck = \"Recent ▁ Price ▁ Drops\" ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Country/Region' ▁ or ▁ text()='ארץ/אזור']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='United ▁ States ▁ - ▁ English' ▁ or ▁ text()='ארצות ▁ הברית ▁ - ▁ אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"tile_grp\" ) ) ) ; driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) . sendKeys ( textToShop ) ; driver . findElement ( By . id ( \"search_icon\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@class=' ▁ b_active']\" ) ) ) ; assertEquals ( \"ALL\" , element . getText ( ) ) ; driver . findElement ( By . linkText ( \"SHOPPING\" ) ) . click ( ) ; for ( String sectionId : sectionsToCheck ) wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( sectionId ) ) ) ; driver . findElement ( By . id ( sectionToChoose ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='\" + titleToCheck + \"']\" ) ) ) ; } ", "Test Name": "Search Engine Page", "Test Description": "Verify the Trending Products section navigation of Shopping page on Bing Search engine", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator. User should be able to view the image tile at the bottom of home page", "2. Enter the text to shop on search field present on home page Ex: Jacket and click the search button", "The search result page should load with default section 'ALL' selected", "3. Select Shopping page", "The shopping page should display with different sections - Shopping Home, Departments, Stores, Editor's picks, Deals, Trending Products, Price drops, My collections", "4. Click on Price drops", "The page should load with the title - \n Recent Price Drops"]}
{"id": 87, "website": "Bing", "code": " void function ( ) throws InterruptedException { String [ ] optionsToCheck = new String [ ] { \"images\" , \"video\" , \"shopping\" } ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Country/Region']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'United ▁ States ▁ - ▁ English')]\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; for ( String option : optionsToCheck ) wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'scope') ▁ and ▁ @id='\" + option + \"']\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Show ▁ news ▁ and ▁ interests']/following-sibling::*[contains(@class, ▁ 'toggle_ctrl')]\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Country/Region']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'India')]\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; for ( String option : optionsToCheck ) { if ( ! option . equals ( \"shopping\" ) ) wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'scope') ▁ and ▁ @id='\" + option + \"']\" ) ) ) ; else assertEquals ( 0 , driver . findElements ( By . xpath ( \" // *[contains(@class, ▁ 'scope') ▁ and ▁ @id='\" + option + \"']\" ) ) . size ( ) ) ; } assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Languages:']\" ) ) . isDisplayed ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Country/Region']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'Israel')]\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; for ( String option : optionsToCheck ) { if ( ! option . equals ( \"shopping\" ) ) wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'scope') ▁ and ▁ @id='\" + option + \"']\" ) ) ) ; else assertEquals ( 0 , driver . findElements ( By . xpath ( \" // *[contains(@class, ▁ 'scope') ▁ and ▁ @id='\" + option + \"']\" ) ) . size ( ) ) ; } driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) . click ( ) ; Thread . sleep ( 3000 ) ; assertEquals ( 0 , driver . findElements ( By . xpath ( \" // *[text()='Show ▁ news ▁ and ▁ interests']/following-sibling::*[contains(@class, ▁ 'toggle_ctrl')]\" ) ) . size ( ) ) ; } ", "Test Name": "Settings", "Test Description": "Verify the dynamic options available specific to countries", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Click on hamburger menu > Settings > Country/Region", "The settings page should display the list of countries", "3. Select United States English from the lsit", "The page should load and display the home page with options - Images, Videos, Shopping", "4. Click on Hamburger menu button", "Show news and interests option with toggle button should be displayed", "5. Click on hamburger menu > Settings > Country/Region", "The settings page should display the list of countries", "6. Select India from the lsit", "The page should load and display the home page with options - Images, Videos. Shopping option should disapper. Also, Languages selection should appear below the search field", "7. Click on hamburger menu > Settings > Country/Region", "The settings page should display the list of countries", "8. Select Israel from the lsit", "The page should load and display the home page with options - Images, Videos. Shopping option should disapper.", "9. Click on Hamburger menu button", "Show news and interests option with toggle button should NOT be displayed"]}
{"id": 88, "website": "Bing", "code": " void function ( ) { String countryToChoose = \"China\" ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Language']/../..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Search']\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"geoname\" ) ) ; element . sendKeys ( countryToChoose ) ; element . sendKeys ( Keys . ENTER ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . xpath ( \" // *[text()='Location']/../following-sibling::*\" ) , countryToChoose ) ) ; } ", "Test Name": "Settings", "Test Description": "Verify the location preference functionality on bing search engine settings", "Steps": ["Pre-condition: Under Hamburger menu > Settings > Country - United States English Should be selected. Also, Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Click on hamburger menu > Settings > Language", "The language setting section gets opened in the settings page", "3. Click on Search button", "The location text field should be displayed to the user with a text field", "4. Enter the country or city name in the text field Ex: China and Hit Enter", "The home page is displayed", "5. Click on Hamburger menu button > Expand settings", "User should be able to view Location displayed with name 'china'"]}
{"id": 89, "website": "Bing", "code": " void function ( ) throws InterruptedException { String textToSearch = \"Jacket\" ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='More']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@id='settings_suggestions'] // *[@type='checkbox']\" ) ) ) ; if ( i == 0 ) assertTrue ( element . isSelected ( ) ) ; else assertFalse ( element . isSelected ( ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"cancel_changes_button\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) ; action . click ( element ) . sendKeys ( textToSearch ) . perform ( ) ; Thread . sleep ( 1000 ) ; if ( i == 0 ) assertEquals ( 0 , driver . findElements ( By . xpath ( \" // *[@aria-label='Suggestions']\" ) ) . size ( ) ) ; else assertTrue ( driver . findElement ( By . xpath ( \" // *[@aria-label='Suggestions']\" ) ) . isDisplayed ( ) ) ; } } ", "Test Name": "Settings", "Test Description": "Verify the functionality of Search Suggestion auto complete on Bing search engine", "Steps": ["Pre-condition: Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Click on hamburger menu > Settings > more", "The setting page should be displayed with 'Search Suggestion' checked by default", "3. Uncheck the checkbox of Search Suggestion", "The save and cancel buttons appear below the page", "4. Click on save button", "The page refreshes and home page gets displayed", "5. Enter the text in search field", "The auto complete search suggestion should NOT be displayed to the user", "6. Click on hamburger menu > Settings > more", "The setting page should be displayed with 'Search Suggestion' unchecked", "7. Check the checkbox of Search Suggestion", "The save and cancel buttons appear below the page", "8. Click on save button", "The page refreshes and home page gets displayed", "9. Enter the text in search field", "The auto complete search suggestion should be displayed to the user"]}
{"id": 90, "website": "Bing", "code": " void function ( ) throws InterruptedException { String textToSearch = \"Jacket\" ; String newTab ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='More']/../..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Settings']\" ) ) ) ; driver . findElement ( By . id ( \"newwnd\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"cancel_changes_button\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) ; action . click ( element ) . sendKeys ( textToSearch ) . perform ( ) ; driver . findElement ( By . id ( \"search_icon\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='All']\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // a[text()='\" + textToSearch + \" ▁ - ▁ Wikipedia']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; Thread . sleep ( 1000 ) ; newTab = ( String ) driver . getWindowHandles ( ) . toArray ( ) [ 1 ] ; driver . switchTo ( ) . window ( newTab ) ; Thread . sleep ( 1000 ) ; driver . close ( ) ; newTab = ( String ) driver . getWindowHandles ( ) . toArray ( ) [ 0 ] ; driver . switchTo ( ) . window ( newTab ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='All']\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='More']/../..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Settings']\" ) ) ) ; driver . findElement ( By . id ( \"newwnd\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"cancel_changes_button\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='All']\" ) ) ) ; driver . findElement ( By . xpath ( \" // a[text()='\" + textToSearch + \" ▁ - ▁ Wikipedia']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . numberOfElementsToBe ( By . xpath ( \" // *[text()='All']\" ) , 0 ) ) ; assertEquals ( 1 , driver . getWindowHandles ( ) . size ( ) ) ; } ", "Test Name": "Settings", "Test Description": "Verify the functionality of Results page preference settings on Search result page", "Steps": ["Pre-condition: Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Click on hamburger menu > Settings > more", "The setting page should be displayed with Results setting", "3. Check the checkbox for 'Open links from search results in a new tab or window'", "The save and cancel buttons appear below the page", "4. Click on save button", "The page refreshes and home page gets displayed", "5. Enter the text in search field and hit search button", "The search page result should get loaded", "6. Click on any of the search link in the search results", "The page selected should be opened in a new tab", "7. Close the opened article page", "The page should get closed and user should view the search resul page", "8. Click on hamburger menu > Settings > more", "The setting page should be displayed with Results setting", "9. Uncheck the checkbox for 'Open links from search results in a new tab or window'", "The save and cancel buttons appear below the page", "10. Click on save button", "The page refreshes and previous search results gets displayed", "11. Click on any of the search link in the search results", "The page selected should be opened in the current tab. No new tab should be opened"]}
{"id": 91, "website": "Bing", "code": " void function ( ) { String textToSearch = \"Jacket\" ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Bing']\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='More']/../..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Settings']\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Open ▁ links ▁ from ▁ news ▁ results ▁ in ▁ a ▁ new ▁ tab ▁ or ▁ window']\" + \"/preceding-sibling::*[@type='checkbox']\" ) ) ; assertTrue ( element . isSelected ( ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"cancel_changes_button\" ) ) ) . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) ; action . click ( element ) . sendKeys ( textToSearch ) . perform ( ) ; driver . findElement ( By . id ( \"search_icon\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='News']\" ) ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'news-card')]\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . numberOfElementsToBe ( By . xpath ( \" // *[text()='News']\" ) , 0 ) ) ; assertEquals ( 1 , driver . getWindowHandles ( ) . size ( ) ) ; driver . navigate ( ) . back ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='News']\" ) ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='More']/../..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Settings']\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Open ▁ links ▁ from ▁ news ▁ results ▁ in ▁ a ▁ new ▁ tab ▁ or ▁ window']\" + \"/preceding-sibling::*[@type='checkbox']\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"cancel_changes_button\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'news-card')]\" ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . numberOfWindowsToBe ( 2 ) ) ; } ", "Test Name": "Settings", "Test Description": "Verify the functionality of Results page preference settings on News page", "Steps": ["Pre-condition: Hamburger menu > Settings > Language should be English", "1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Click on hamburger menu > Settings > more", "The setting page should be displayed with Results setting with 'Open links from news results in a new tab or window' checkbox by default checked", "3. Uncheck the checkbox for 'Open links from news results in a new tab or window'", "The save and cancel buttons appear below the page", "4. Click on save button", "The page refreshes and home page gets displayed", "5. Enter the text in search field and hit search button", "The search page result should get loaded", "6. Navigate to news section and click on any of the search link in the search results", "The page selected should be opened in the current tab", "7. Click on Browser back button", "The page should load and navigate back to news page", "8. Click on hamburger menu > Settings > more", "The setting page should be displayed with Results setting", "9. Check the checkbox for 'Open links from search results in a new tab or window'", "The save and cancel buttons appear below the page", "10. Click on save button", "The page refreshes and previous search results gets displayed", "11. Click on any of the search link in the search results of news page", "The page selected should be opened in a new tab."]}
{"id": 92, "website": "Bing", "code": " void function ( ) throws InterruptedException { String textToSearch = \"House\" ; String resultsNumString ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Bing']\" ) ) ) ; Thread . sleep ( 1000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) ; action . click ( element ) . sendKeys ( textToSearch ) . perform ( ) ; driver . findElement ( By . id ( \"search_icon\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sb_count\" ) ) ) ; resultsNumString = element . getText ( ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; element . click ( ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='SafeSearch']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Settings']\" ) ) ) ; assertTrue ( driver . findElement ( By . id ( \"adlt_set_moderate\" ) ) . isSelected ( ) ) ; driver . findElement ( By . id ( \"adlt_set_off\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"cancel_changes_button\" ) ) . isDisplayed ( ) ) ; element . click ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Turning ▁ off ▁ SafeSearch ▁ requires ▁ age ▁ verification']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Agree']\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sb_count\" ) ) ) ; assertNotEquals ( resultsNumString , element . getText ( ) ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; element . click ( ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='SafeSearch']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Settings']\" ) ) ) ; driver . findElement ( By . id ( \"adlt_set_moderate\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@value='Save']\" ) ) . click ( ) ; } ", "Test Name": "Settings", "Test Description": "Verify the functionality of Safe Search setting on search results in BING website", "Steps": ["1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Enter a text to search ex: House and click search button", "The search results should get loaded. (Note the count of search results)", "3. Click on Hamburger menu > Safesearch", "The setting page should be displayed with Safe search setting with 'Moderate' value selected by default", "4. Select the radio button 'Off'", "The save and cancel buttons appear below the page", "5. Click on 'Save' button", "The page should display the pop-up with title - Turning off SafeSearch requires age verification", "6. Click on Agree button", "The page refreshes and lands on search result page. The count of search result should vary from the previous search result count noted in step 2", "7. Click on Hamburger menu > Safesearch", "The setting page should be displayed with Safe search setting", "8. Select back the moderate option and click save", "The page should get refreshed"]}
{"id": 93, "website": "Bing", "code": " void function ( ) throws InterruptedException { String textToSearch = \"House\" ; String menuCategory = \"Search ▁ history\" ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Bing']\" ) ) ) ; Thread . sleep ( 1000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) ; action . click ( element ) . sendKeys ( textToSearch ) . perform ( ) ; driver . findElement ( By . id ( \"search_icon\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sb_count\" ) ) ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; element . click ( ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='\" + menuCategory + \"']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='\" + menuCategory + \"']\" ) ) ) ; assertTrue ( element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"class\" ) . contains ( \"selected\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Insights']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'donut-chart')]\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \"( // *[contains(@class, ▁ 'query-list__requery-link')])[1]\" ) ) ; action . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) js . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( textToSearch , element . getText ( ) ) ; } ", "Test Name": "Settings", "Test Description": "Verify the search history navigation in BING search engine website", "Steps": ["1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Enter a text to search ex: House and click search button", "The search results should get loaded. (Note the count of search results)", "3. Select hamburger menu > Search history", "The page should load and display the search history tab. It should also display Insights section with a pie chart", "4. Scroll down", "User should display the Activity section with recent search result on top of the list Ex: house"]}
{"id": 94, "website": "Bing", "code": " void function ( ) throws InterruptedException { String textToSearch = \"House\" ; String menuCategory = \"Search ▁ history\" ; int searchedContentsNum ; driver . get ( \"https: // www.bing.com\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; Actions action = new Actions ( driver ) ; wait . until ( ExpectedConditions . urlToBe ( \"https: // www.bing.com/\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Bing']\" ) ) ) ; Thread . sleep ( 1000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . id ( \"hbsettings\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[text()='Language' ▁ or ▁ text()='שפה']/../..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='אנגלית']\" ) ) ) ; action . moveToElement ( element ) . click ( ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[@aria-label='Enter ▁ your ▁ search ▁ term']\" ) ) ; action . click ( element ) . sendKeys ( textToSearch ) . perform ( ) ; driver . findElement ( By . id ( \"search_icon\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"sb_count\" ) ) ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(@class, ▁ 'idp_ham')]\" ) ) ) ; element . click ( ) ; action . click ( element ) . pause ( 500 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='\" + menuCategory + \"']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='\" + menuCategory + \"']\" ) ) ) ; assertTrue ( element . findElement ( By . xpath ( \"..\" ) ) . getAttribute ( \"class\" ) . contains ( \"selected\" ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[text()='Insights']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // *[contains(@class, ▁ 'donut-chart')]\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . xpath ( \"( // *[contains(@class, ▁ 'query-list__requery-link')])[1]\" ) ) ; action . moveToElement ( element ) . perform ( ) ; assertTrue ( ( Boolean ) js . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( textToSearch , element . getText ( ) ) ; searchedContentsNum = driver . findElements ( By . xpath ( \" // *[@class='query-list__query-row']\" ) ) . size ( ) ; driver . findElement ( By . xpath ( \"( // *[@class='query-list__query-row'])[1] // *[@role='checkbox']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Clear']\" ) ) ) . click ( ) ; assertNotEquals ( searchedContentsNum , driver . findElements ( By . xpath ( \" // *[@class='query-list__query-row']\" ) ) . size ( ) ) ; } ", "Test Name": "Settings", "Test Description": "Verify the functionality of delete history under activity section of search history page", "Steps": ["1. Launch the application using url - https://www.bing.com", "User should be able to view \"https://www.bing.com/\" url in the url locator.", "2. Enter a text to search ex: House and click search button", "The search results should get loaded. (Note the count of search results)", "3. Select hamburger menu > Search history", "The page should load and display the search history tab. It should also display Insights section with a pie chart", "4. Scroll down", "User should display the Activity section with recent search result on top of the list Ex: house", "5. Check the checkbox of one of the serached content under the activity sub-section", "Clear button should appear on top of the list", "6. Click on the clear button", "The selected searched content should be removed from the activity list"]}
