{"id": 203, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; By createAccountLocator = By . xpath ( \" // a[text()='Create ▁ a ▁ New ▁ Account']\" ) ; assertTrue ( driver . findElement ( createAccountLocator ) . isDisplayed ( ) ) ; driver . findElement ( createAccountLocator ) . click ( ) ; driver . findElement ( By . id ( \"ap_customer_name\" ) ) . sendKeys ( \"Tamar\" ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"ap_password_check\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"continue\" ) ) . click ( ) ; Thread . sleep ( 20000 ) ; driver . findElement ( By . className ( \"a-button-input\" ) ) . click ( ) ; Thread . sleep ( 20000 ) ; driver . findElement ( By . className ( \"a-button-input\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Toggle ▁ Acount ▁ Menu'] ▁ .ipc-button__text\" ) ) ) ; assertEquals ( \"Tamar\" , element . getText ( ) ) ; } ", "Test Name": "SignUp Functionality", "Test Description": "The goal is to verify SignUpfunctionality", "Preconditions": ["User does not have an existing account"], "Steps": ["1. Enter the below mentioned URL: https://www.imdb.com/", "2. Press the Sign In button on top right corner", "3. Verify that multiple Sign In options are displayed", "4. Verify that ‘Create new account’ option is displayed", "5. Press the ‘Create new account’ option", "6. Enter the mandatory fields\n*Your name\n*Email\n*Password\n*Re-enter password\nEnter the mandatory fields\n*Your name\n*Email\n*Password\n*Re-enter password\n", "7. Press the option ‘Create your IMDb account’", "User gets logged In and Username is displayed on top right corner."]}
{"id": 204, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Toggle ▁ Acount ▁ Menu'] ▁ .ipc-button__text\" ) ) ) ; assertEquals ( \"Tamar\" , element . getText ( ) ) ; } ", "Test Name": "SignIn Functionality", "Test Description": "The goal is to verify that user is able to loginIn using an existing IMDB account", "Preconditions": ["1. User have an existing IMDb account"], "Steps": ["1. Enter the below mentioned URL: https://www.imdb.com/", "2. Press the Sign In button on top right corner", "3. Press on English", "4. Verify that multiple Sign In options are displayed", "5. Select ‘Sign In with IMdb’ option ", "6. Enter the mandatory fields\n*Email\n*Password\n\n", "7. Press the option ‘Sign In’", "User gets logged In and Username is displayed on top right corner.", "\n"]}
{"id": 205, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \"( // *[@id='featured-today']/.. /* )[3]\" ) ) ) ; element = driver . findElement ( By . xpath ( \"( // *[@id='featured-today']/.. /* )[3]\" ) ) ; assertTrue ( element . findElement ( By . xpath ( \"./descendant::img\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . xpath ( \". // a[href=contains(text(), ▁ 'movies')]\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . xpath ( \". // a[href=contains(text(), ▁ 'movies')]\" ) ) . isDisplayed ( ) ) ; List < WebElement > items = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . xpath ( \" // *[contains(@class, ▁ 'WhatToWatch__WhatToWatchDiv-e8z2cy-1')]/../descendant::div[contains(@class, ▁ 'ipc-poster-card--baseAlt')]\" ) ) ) ; assertTrue ( items . size ( ) > 1 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \".fan-picks ▁ .ipc-icon.ipc-icon--chevron-right-inline.ipc-icon--inline.ipc-pager-icon\" ) ) ) . click ( ) ; By wishListLocator = By . xpath ( \" // *[text()='Cruella']/../following-sibling:: */ button\" ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( wishListLocator ) ) ; assertTrue ( driver . findElement ( wishListLocator ) . isDisplayed ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( wishListLocator ) ) . click ( ) ; assertEquals ( \"remove ▁ from ▁ watchlist\" , driver . findElement ( By . xpath ( \" // img[@alt='Cruella']/../preceding-sibling::*\" ) ) . getAttribute ( \"aria-label\" ) ) ; } ", "Test Name": "WatchList Functionlity", "Test Description": "The goal is to verify that WatchList Functionality is working", "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"], "Steps": ["1. Verify that under ‘Featured today’ movies and photos  are displayed", "2. Verify that under ‘What to watch’ movies and Tv shows is displayed", "3. Verify that ‘Watchlist’ plus sign is displayed", "4. Press watchlist button against  moview Cruella(2021) and verify that Cruella is added to watchlist list "]}
{"id": 206, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \".fan-picks ▁ .ipc-icon.ipc-icon--chevron-right-inline.ipc-icon--inline.ipc-pager-icon\" ) ) ) . click ( ) ; Thread . sleep ( 1000 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // a[@aria-label='View ▁ title ▁ page ▁ for ▁ Cruella']\" ) ) ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[@aria-label='View ▁ title ▁ page ▁ for ▁ Cruella']\" ) ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[data-testid='hero-rating-bar__aggregate-rating'] ▁ > ▁ *\" ) ) ; assertEquals ( \"IMDb ▁ RATING\" , element . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-testid='hero-rating-bar__user-rating'] ▁ > ▁ *\" ) ) ; assertEquals ( \"YOUR ▁ RATING\" , element . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-testid='hero-rating-bar__popularity'] ▁ > ▁ *\" ) ) ; assertEquals ( \"POPULARITY\" , element . getText ( ) ) ; assertEquals ( \"a\" , element . findElement ( By . xpath ( \" // *[text()='User ▁ reviews']\" ) ) . getTagName ( ) ) ; assertEquals ( \"a\" , element . findElement ( By . xpath ( \" // *[text()='Critic ▁ reviews']/../..\" ) ) . getTagName ( ) ) ; assertEquals ( \"a\" , element . findElement ( By . xpath ( \" // *[text()='Metascore']/../..\" ) ) . getTagName ( ) ) ; } ", "Test Name": "Movies/TV Shows Reviews", "Test Description": "The goal is to verify that reviews are displayed against each Movie/Tv show", "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"], "Steps": ["1. Select  Movie Cruella(2021) from Top picks section", "2. Verify that following are displayed\n*IMDB rating\n*Your Rating\n*Popularity\n\n", "3. Verify that  clickable links are displayed\n*User Reviews\n*Critic Reviews\n*Metascore\n\n"]}
{"id": 207, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".fan-picks ▁ .ipc-poster-card--baseAlt\" ) ) ) ; element . findElement ( By . xpath ( \". // *[contains(@aria-label, ▁ 'Watch ▁ trailer')]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Pause']\" ) ) ) ; } ", "Test Name": "Movies/TV Shows Trailer", "Test Description": "The goal is to verify that trailers can be watched against each Movie/Tv show", "Steps": ["1. Verify that User can select a movie from IMDb homepage", "2. Press the Play button against 'Play trailer' heading ", "3. Verify that Trailer starts playing"], "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage", "4. User has selected a movie"]}
{"id": 208, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[@aria-label='View ▁ title ▁ page ▁ for ▁ Loki']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // button[@title='Share ▁ on ▁ social ▁ media']\" ) ) ) . click ( ) ; List < WebElement > menuItems = driver . findElements ( By . cssSelector ( \"[data-testid='share-container'] ▁ [role='menuitem']\" ) ) ; List < String > expectedItemsText = new LinkedList < > ( Arrays . asList ( \"Facebook\" , \"Twitter\" , \"Email ▁ Link\" , \"Copy ▁ Link\" , \"Share ▁ IMDb ▁ rating\" ) ) ; List < String > actualItemsText = new LinkedList < > ( ) ; for ( WebElement item : menuItems ) { actualItemsText . add ( item . getText ( ) ) ; } assertEquals ( expectedItemsText , actualItemsText ) ; } ", "Test Name": "Share button is clickable", "Test Description": "The goal is to verify  that share button is clickable against each Movie/Tv show", "Steps": ["1. User selects a movie 'Loki' from top picks section", "2. User press share button from top corner", "3. Verify that the following options displays in a drop down menue :\n*Facebook\n*Twitter\n*Email Link\n*Copy link\n*Share Imdb rating"], "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"]}
{"id": 209, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@role='menuitem'][@aria-label='Celebs']\" ) ) . click ( ) ; element = driver . findElement ( By . cssSelector ( \".imdb-header-search__input\" ) ) ; element . sendKeys ( \"Virgin ▁ River\" ) ; element . submit ( ) ; assertEquals ( \"Names\" , driver . findElement ( By . className ( \"findSectionHeader\" ) ) . getText ( ) ) ; List < WebElement > resultsElements = driver . findElements ( By . className ( \"result_text\" ) ) ; for ( WebElement element : resultsElements ) { String elementText = element . getText ( ) . toLowerCase ( Locale . ROOT ) ; assertTrue ( elementText . contains ( \"virgin\" ) || elementText . contains ( \"river\" ) ) ; } } ", "Test Name": "Search by Celeb", "Test Description": "The goal is to verify that only Celebs are displayed when searched via Celebs option", "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"], "Steps": ["1. User selects Celebs from All drop-down presents against search bar", "2. User search for Virgin River in search bar and press search button", "3. Verify that user is routed to Names page where only titels containg Virgin or River are displayed"]}
{"id": 210, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; element = driver . findElement ( By . className ( \"from-your-watchlist\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10000 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \". // descendant::button[@aria-label='Rate ▁ Cruella']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"button[aria-label='Rate ▁ 6']\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element . findElement ( By . xpath ( \" // *[text()='Rate']\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . visibilityOf ( driver . findElement ( By . xpath ( \" // *[@class='from-your-watchlist']/descendant::a[@aria-label='View ▁ title ▁ page ▁ for ▁ Cruella']/preceding-sibling:: */ descendant::*[@data-testid='rate-button'] /* \" ) ) ) ) ; assertEquals ( \"6\" , element . getText ( ) ) ; } ", "Test Name": "Star Rating", "Test Description": "The goal is to verify  that star button is working correctly against each Movie/Tv show", "Steps": ["1. User scrolls down to From your watchlist section", "2. Click Star button against a movie 'Cruella' to provide rating", "3. Select the empty star against  star button to add rating", "4. Verify that star rating is added instatntly and displayed as *6 against IMDb star rating"], "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage", "4. User has already added Cruella to the watchlist"]}
{"id": 211, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . click ( ) ; List < WebElement > itemsElements = driver . findElements ( By . xpath ( \" // *[@id='navbar-search-category-select-contents'] /* /* [@role='menuitem']\" ) ) ; List < String > expectedItemsText = new LinkedList < > ( Arrays . asList ( \"All\" , \"Titles\" , \"TV ▁ Episodes\" , \"Celebs\" , \"Companies\" , \"Keywords\" , \"Advanced ▁ Search\" ) ) ; List < String > actualItemsText = new LinkedList < > ( ) ; for ( WebElement element : itemsElements ) { actualItemsText . add ( element . getText ( ) ) ; } assertEquals ( expectedItemsText , actualItemsText ) ; } ", "Test Name": "Search  bar", "Test Description": "The goal is to verify that All dropdown against search bar is displayed", "Preconditions": ["1. User have an existing IMDb account", "2. User is logged in IMDb site", "3. User is on IMDb homepage"], "Steps": ["1. Open IMDb home page", "Verify that All drop down is clickable and has the following options\n*All\n*Titles\n*Tv episodes\n*Celebs\n*Companies\n*Keywords\n*Advanced search"]}
{"id": 212, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; assertTrue ( driver . findElement ( By . xpath ( \" // table/descendant::th[text()='IMDb ▁ Rating']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // table/descendant::th[text()='Your ▁ Rating']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "IMDB rating Vs your Rating", "Test Description": "The goal is to verify that IMDb rating and Your rating is displayed", "Preconditions": ["1. User have an existing IMDb account", "2. User is logged in IMDb site", "3. User is on IMDb homepage"], "Steps": ["1. Select Menue from imdb action pannel", "2. Select Top rated movies", "3. Verify that 'Imdb rating' and 'Your rating' column are displayed"]}
{"id": 213, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element = driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \". // *[@value='rk:ascending']\" ) ) . click ( ) ; List < WebElement > itemsElements = driver . findElements ( By . cssSelector ( \".lister-list ▁ .titleColumn\" ) ) ; for ( int i = 1 ; i < itemsElements . size ( ) ; i ++ ) { String currentText = itemsElements . get ( i ) . getText ( ) ; currentText = currentText . substring ( 0 , currentText . indexOf ( \" ▁ \" ) - 1 ) ; String previousText = itemsElements . get ( i - 1 ) . getText ( ) ; previousText = previousText . substring ( 0 , previousText . indexOf ( \" ▁ \" ) - 1 ) ; assertTrue ( \"problem ▁ in ▁ i: ▁ \" + i , Integer . parseInt ( currentText ) > ( Integer . parseInt ( ( previousText ) ) ) ) ; } } ", "Test Name": "Sort by Ranking", "Test Description": "The goal is to verify that Sort by ranking is working correctly", "Preconditions": ["1. User have an existing IMDb account", "2. User is logged in IMDb site", "3. User is on IMDb homepage"], "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Select Sort by 'Ranking'", "4.Verify movies are sorted by IMDb rating"]}
{"id": 214, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element = driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \". // *[@value='ir:descending']\" ) ) . click ( ) ; List < WebElement > itemsElements = driver . findElements ( By . cssSelector ( \".lister-list ▁ .ratingColumn.imdbRating\" ) ) ; for ( int i = 1 ; i < itemsElements . size ( ) ; i ++ ) { assertTrue ( ( Double . parseDouble ( itemsElements . get ( i ) . getText ( ) ) <= ( Double . parseDouble ( itemsElements . get ( i - 1 ) . getText ( ) ) ) ) ) ; } } ", "Test Name": "Sort by IMDb rating", "Test Description": "The goal is to verify that Sort by IMDb Rating is working correctly", "Preconditions": ["1. User have an existing IMDb account", "2. User is logged in IMDb site", "3. User is on IMDb homepage"], "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Select Sort by IMDb rating", "4.Verify movies are sorted by IMDb rating"]}
{"id": 215, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element = driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \". // *[@value='us:descending']\" ) ) . click ( ) ; List < WebElement > itemsElements = driver . findElements ( By . cssSelector ( \".lister-list ▁ .secondaryInfo\" ) ) ; for ( int i = 1 ; i < itemsElements . size ( ) ; i ++ ) { String currentText = itemsElements . get ( i ) . getText ( ) ; String previousText = itemsElements . get ( i ) . getText ( ) ; assertTrue ( ( Integer . parseInt ( currentText . substring ( 1 , currentText . length ( ) - 2 ) ) <= ( Integer . parseInt ( previousText . substring ( 1 , previousText . length ( ) - 2 ) ) ) ) ) ; } } ", "Test Name": "Sort by Release date ", "Test Description": "The goal is to verify that Sort by Release date is working correctly", "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Select Sort by Release Date", "4.Verify movies are sorted by Release date (oldest) with Ascending order", "The movies are sortedwith oldest with Ascending order"], "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"]}
{"id": 216, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element = driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \". // *[@value='nv:descending']\" ) ) . click ( ) ; List < WebElement > itemsElements = driver . findElements ( By . cssSelector ( \".lister-list ▁ .ratingColumn.imdbRating ▁ > ▁ strong\" ) ) ; for ( int i = 1 ; i < itemsElements . size ( ) ; i ++ ) { String currentText = itemsElements . get ( i ) . getAttribute ( \"title\" ) ; currentText = currentText . substring ( currentText . indexOf ( \"on ▁ \" ) + 3 , currentText . indexOf ( \" ▁ user\" ) ) ; String previousText = itemsElements . get ( i ) . getAttribute ( \"title\" ) ; previousText = previousText . substring ( previousText . indexOf ( \"on ▁ \" ) + 3 , previousText . indexOf ( \" ▁ user\" ) ) ; assertTrue ( ( Integer . parseInt ( currentText . replaceAll ( \",\" , \"\" ) ) <= ( Integer . parseInt ( previousText . replaceAll ( \",\" , \"\" ) ) ) ) ) ; } } ", "Test Name": "Sort by 'Numer of rating' ", "Test Description": "The goal is to verify that Sort by Number of rating is working correctly", "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"], "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Select Sort by 'Number of rating'", "4.Verify movies are sorted by Number of rating ", "Movies are sorted in ascending order i.e top movie has the most IMDb ratings"]}
{"id": 217, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // a[text()='The ▁ Godfather']/../following-sibling::*[@class='ratingColumn'] /* \" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \" // a[text()='The ▁ Godfather']/../following-sibling::*[@class='ratingColumn']/descendant::li[4]\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) ; element . click ( ) ; element . findElement ( By . xpath ( \". // *[@value='ur:descending']\" ) ) . click ( ) ; List < WebElement > itemsElements = driver . findElements ( By . cssSelector ( \".lister-list ▁ .ratingColumn ▁ .rating\" ) ) ; for ( int i = 1 ; i < itemsElements . size ( ) ; i ++ ) { String currentText = itemsElements . get ( i ) . getText ( ) ; if ( currentText . equals ( \"\" ) ) { currentText = \"0\" ; } String previousText = itemsElements . get ( i ) . getText ( ) ; if ( previousText . equals ( \"\" ) ) { previousText = \"0\" ; } assertTrue ( ( Integer . parseInt ( currentText ) <= ( Integer . parseInt ( previousText ) ) ) ) ; } } ", "Test Name": "Sort by 'Your Rating' ", "Test Description": "The goal is to verify  that Sort by Your Rating is working correctly", "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"], "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Provide star rating (*4) to movie 'The God Father'", "3. Select Sort by Your rating", "4.Verify movies are sorted by Your Rating", "Movies are sorted in ascending order i.e top movie has the  highest ''Your rating''"]}
{"id": 218, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; driver . findElement ( By . cssSelector ( \".dropdown.share-widget\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@class='share-widget-copy-icon']/..\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertEquals ( \"Click ▁ to ▁ copy\" , element . getAttribute ( \"title\" ) ) ; element . click ( ) ; try { Clipboard clipboard = Toolkit . getDefaultToolkit ( ) . getSystemClipboard ( ) ; Object copiedData = clipboard . getData ( DataFlavor . stringFlavor ) ; assertEquals ( \"https: // www.imdb.com/chart/top/\" , copiedData . toString ( ) ) ; } catch ( IOException | UnsupportedFlavorException e ) { e . printStackTrace ( ) ; } } ", "Test Name": "Copy link has correct address", "Test Description": "The goal is to verify that Copy link has correct address", "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Select share button", "4.Hover over Copy option in share dropdown", "5. Verify that clicking it copies the address", "When link is pasted the following link should appear 'https://www.imdb.com/chart/top/'"], "Preconditions": ["1. User is on IMDb homepage"]}
{"id": 219, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Top ▁ Rated ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; List < WebElement > elements = driver . findElements ( By . cssSelector ( \".lister-list ▁ > ▁ tr\" ) ) ; assertEquals ( 250 , elements . size ( ) ) ; for ( WebElement element : elements ) { assertTrue ( element . isDisplayed ( ) ) ; } } ", "Test Name": "Top 250 as rated by IMDb Users", "Test Description": "The goal is to verify that exactly 250 Top rated movies by IMDb Users", "Steps": ["1. Select Menu from imdb action pannel", "2. Select Top rated movies", "3. Verify that exactly 250 entries are displayed"], "Preconditions": ["1. User is on IMDb homepage"]}
{"id": 220, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \".imdb-header-search__input\" ) ) ; element . sendKeys ( \"Virgin ▁ River\" ) ; element . submit ( ) ; assertEquals ( \"Titles\" , driver . findElement ( By . className ( \"findSectionHeader\" ) ) . getText ( ) ) ; List < WebElement > resultsElements = driver . findElements ( By . className ( \"result_text\" ) ) ; for ( WebElement element : resultsElements ) { String elementText = element . getText ( ) . toLowerCase ( Locale . ROOT ) ; assertTrue ( elementText . contains ( \"virgin\" ) || elementText . contains ( \"river\" ) ) ; } } ", "Test Name": "Search Tv shows in search bar", "Test Description": "The goal is to verify that respective Tv shows are suggested when searching for Tv shows via search bar", "Preconditions": ["1. User is on IMDb homepage"], "Steps": ["1. Search for Tv show 'Virgin River' in search bar", "2. Verify that suggested Tv shows are displayed beneath the search bar", "Virginia Rivera,Virgin Rides and many more are displayed containing words river and  virgin"]}
{"id": 221, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@role='menuitem'] // *[text()='Advanced ▁ Search']/..\" ) ) . click ( ) ; assertEquals ( \"Advanced ▁ Search\" , driver . findElement ( By . cssSelector ( \"#header ▁ > ▁ h1\" ) ) . getText ( ) ) ; List < WebElement > optionsElements = driver . findElements ( By . className ( \"article\" ) ) ; assertEquals ( 4 , optionsElements . size ( ) ) ; List < String > expectedText = new LinkedList < > ( Arrays . asList ( \"Advanced ▁ Title ▁ Search\" , \"Advanced ▁ Name ▁ Search\" , \"Search ▁ Collaborations\" , \"Search ▁ Within ▁ a ▁ Topic\" ) ) ; for ( int i = 0 ; i < optionsElements . size ( ) - 1 ; i ++ ) { assertEquals ( expectedText . get ( i ) , optionsElements . get ( i ) . findElement ( By . xpath ( \". // a\" ) ) . getText ( ) ) ; } assertEquals ( expectedText . get ( 3 ) , optionsElements . get ( 3 ) . findElement ( By . tagName ( \"h4\" ) ) . getText ( ) ) ; } ", "Test Name": "Advanced Search", "Test Description": "The goal is to verify that advanced search option is present", "Steps": ["1. From All dropdown on Imdb home pageselect 'Advanced Search'", "2. Verify that user is routed to advanced search options page", "3. Verify that there are 4 ways to search as below\n*Advanced Title Search\n*Advanced Name Search\n*Search Collaborations\n*Search Within a Topic", "Exactly four ways are displayed"], "Preconditions": ["1. User is on IMDb homepage"]}
{"id": 222, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . cssSelector ( \"[title='Close ▁ Navigation ▁ Drawer']\" ) ) ) ; driver . findElement ( By . cssSelector ( \"[data-testid='panel-header'] ▁ > ▁ a\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Home']\" ) ) . isDisplayed ( ) ) ; assertFalse ( driver . findElement ( By . cssSelector ( \"[title='Close ▁ Navigation ▁ Drawer']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "IMDb button>Menu", "Test Description": "The goal is to verify that IMDb button routes the user to IMDb home page", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User opens the site https://www.imdb.com/", "2.User navigates to Menu button from top left corner", "3. Verify that User is routed to Menu items with a cross button on right", "5. User press IMDB button placed on top left corner", "6. Verify user is routed to IMDB home page"]}
{"id": 223, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; for ( int i = 0 ; i < 13 ; i ++ ) { element = driver . findElement ( By . cssSelector ( \".swiper-slide.swiper-slide-active ▁ img\" ) ) ; assertNotEquals ( \"\" , element . getAttribute ( \"alt\" ) ) ; assertNotEquals ( \"\" , element . getAttribute ( \"src\" ) ) ; element . findElement ( By . xpath ( \" // *[@aria-label='Next ▁ slide']\" ) ) . click ( ) ; Thread . sleep ( 200 ) ; } for ( int i = 0 ; i < 13 ; i ++ ) { element = driver . findElement ( By . cssSelector ( \".swiper-slide.swiper-slide-active ▁ img\" ) ) ; assertNotEquals ( \"\" , element . getAttribute ( \"alt\" ) ) ; assertNotEquals ( \"\" , element . getAttribute ( \"src\" ) ) ; element . findElement ( By . xpath ( \" // *[@aria-label='Previous ▁ slide']\" ) ) . click ( ) ; Thread . sleep ( 200 ) ; } } ", "Test Name": "IMDb homepage Slider", "Test Description": "The goal is to verify that slider on IMDb homepage doesnot contain an empty view", "Steps": ["1. User press the forward and backward button present on IMDb homepage  Movie/Tv show Slider", "2. Verify that Slider doesnot contain null values i.e the movies shouldkeep on changing randomly"], "Preconditions": ["1. User is on IMDb homepage"]}
{"id": 224, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"navUserMenu-contents\" ) ) ; assertEquals ( \"visible\" , element . getCssValue ( \"visibility\" ) ) ; List < WebElement > menuItems = element . findElements ( By . tagName ( \"a\" ) ) ; List < String > expectedItemsText = new LinkedList < > ( Arrays . asList ( \"Your ▁ activity\" , \"Your ▁ watchlist\" , \"Your ▁ ratings\" , \"Your ▁ lists\" , \"Account ▁ settings\" , \"Sign ▁ out\" ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; for ( int i = 1 ; i < menuItems . size ( ) ; i ++ ) { wait . until ( ExpectedConditions . elementToBeClickable ( menuItems . get ( i ) ) ) ; assertEquals ( expectedItemsText . get ( i - 1 ) , menuItems . get ( i ) . getText ( ) ) ; } } ", "Test Name": "Profile Menu", "Test Description": "The goal is to verify that profile menu dropdown is available on IMDb homepage ", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User press the profile menu", "2. Verify that following options are displayed under your username in action panel\n*You activity\n*Your watchlist\n*Your rating\n*Your lists\n*Account Settings\n*Sign Out\n\n", "Verify that each option is clickable", "\n"]}
{"id": 225, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \".swiper-slide.swiper-slide-active\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertFalse ( element . findElement ( By . cssSelector ( \"[class^='SlideCaption__WithPeekCaptionHeadingText']\" ) ) . getText ( ) . isEmpty ( ) ) ; element = element . findElement ( By . cssSelector ( \"[class^='SlideCaption__WithPeekRuntimeText']\" ) ) ; String time = element . getText ( ) ; int timeStringLength = time . length ( ) ; assertTrue ( timeStringLength > 3 && timeStringLength < 6 ) ; assertEquals ( timeStringLength - 3 , time . indexOf ( \":\" ) ) ; } ", "Test Name": "Name and Time stamp displayed on Movie/Tvshow Slider", "Test Description": "The goal is to verify that name is available on IM and timestamp is min:Sec format is displayed on Imdb homepage slider", "Preconditions": ["1. User is on IMDb homepage"], "Steps": ["1. Verify that Movie/Tvshow slider is present on home page", "2. Verify that name and time stamp in MIN:SEC format is displayed on Movie/Tv show slider"]}
{"id": 226, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Featured ▁ today']/../..\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . cssSelector ( \".ipc-lockup-overlay__content\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertEquals ( \"List\" , element . getText ( ) ) ; element . click ( ) ; Thread . sleep ( 200 ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-testid='media-viewer']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[aria-label='gallery']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; assertTrue ( driver . findElement ( By . className ( \"media_index_thumb_list\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "List and grid view", "Test Description": "The goal is to verify that list and grid view are working as expected displayed on Imdb homepage under featured today section", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User scrolls down IMDb homepage", "2. User stops at Featured toay section", "3. Verify that List option button is displayed", "4. User press List view icon", "5. Verify that page is displayed as List view and on top corner Grid view button is placed.", "6.User press grid view button.", "7. Media viewer page is displayed in grid view"]}
{"id": 227, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . cssSelector ( \"[data-testid='nav-link-category']\" ) ) . size ( ) > 1 ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Release ▁ Calendar']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; assertEquals ( \"Upcoming ▁ Releases ▁ for ▁ United ▁ States\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Menu>Movies Section>Release Calendar", "Test Description": "The goal is to verify that Release Calendar clickable option is displayed under Menu list ", "Steps": ["1. User press Menu button", "2. Verify that a list of category are displayed", "3. User selects Release Calendar", "4. Verify that user is routed to Upcomming Releases for United states"]}
{"id": 228, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . id ( \"imdbHeader-navDrawerOpen--desktop\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . cssSelector ( \"[data-testid='nav-link-category']\" ) ) . size ( ) > 1 ) ; element = driver . findElement ( By . xpath ( \" // *[text()='DVD ▁ & ▁ Blu-ray ▁ Releases']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; assertEquals ( \"New ▁ and ▁ Upcoming ▁ VOD, ▁ DVD, ▁ and ▁ Blu-ray ▁ Releases\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Menu>Movies Section>DVD & Blu-ray Releases", "Test Description": "The goal is to verify that DVD & Blu-ray Releases clickable option is displayed under Menu list ", "Steps": ["1. User press Menu button", "2. Verify that a list of category are displayed", "3. User selects  DVD & Blu-ray Releases", "4. Verify that user is routed to New and Upcoming VOD, DVD, and Blu-ray Releases"]}
{"id": 229, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; assertEquals ( \"visible\" , driver . findElement ( By . cssSelector ( \"[data-menu-id='navUserMenu']\" ) ) . getCssValue ( \"visibility\" ) ) ; driver . findElement ( By . xpath ( \" // span[text()='Your ▁ activity']/..\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"avatar-frame\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"Profile ▁ Checklist\" , driver . findElement ( By . cssSelector ( \"#profile-checklist ▁ > ▁ h3\" ) ) . getText ( ) ) ; } ", "Test Name": "Profile Activity", "Test Description": "The goal is to verify that Profile activty is recorded correctly", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1.User press Profile picture on top right corner", "2. A drop-down displays uder Username", "3. User selects 'Your Activity'", "4. Verify that User  is routed to user details page", "5. Verify that Profile for user Checklist is displayed"]}
{"id": 230, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \"[title='Facebook']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . attributeToBe ( By . tagName ( \"html\" ) , \"id\" , \"facebook\" ) ) ; assertEquals ( \"IMDb\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Facebook link", "Test Description": "The goal is to verify that Facebook icon redirects the user to facebook IMDb page", "Steps": ["1. User scrolls down to fotter of page", "2. User selects Facebook icon", "3. Verify that user is routed to IMDB facebook page"]}
{"id": 231, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \"[title='Twitter']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'Twitter, ▁ Inc.')]\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[@href='/IMDb/header_photo']\" ) ) ) ; } ", "Test Name": "Twitter link", "Test Description": "The goal is to verify that Twitter icon redirects the user to Twitter IMDb page", "Steps": ["1. User scrolls down to fotter of page", "2. User selects Twitter icon", "3. Verify that user is routed to IMDB twitter page"]}
{"id": 232, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \"[title='Twitch']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Twitch ▁ Home']\" ) ) ) ; assertEquals ( \"IMDb\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Twitch link", "Test Description": "The goal is to verify that Twich icon redirects the user to Twich IMDb page", "Steps": ["1. User scrolls down to fotter of page", "2. User selects Twitch icon", "3. Verify that user is routed to IMDB twitch page"]}
{"id": 233, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \"[title='Instagram']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // img[@alt='Instagram']\" ) ) ) ; assertEquals ( \"imdb\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; } ", "Test Name": "Instagram Link", "Test Description": "The goal is to verify that Instagram icon redirects the user to Instagram IMDb page", "Steps": ["1. User scrolls down to fotter of page", "2. User selects Instagram icon", "3. Verify that user is routed to IMDB instagram page"]}
{"id": 234, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; element = driver . findElement ( By . cssSelector ( \"[title='YouTube']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . tagName ( \"yt-icon\" ) ) ) ; assertEquals ( \"IMDb\" , driver . findElement ( By . cssSelector ( \".style-scope.ytd-channel-name\" ) ) . getText ( ) ) ; } ", "Test Name": "Youtube Link", "Test Description": "The goal is to verify that youtube icon redirects the user to Youtube IMDb page", "Preconditions": ["1. User is logged in IMDb site", "2. User is already logged in Youtube application"], "Steps": ["1. User scrolls down to fotter of page", "2. User selects Youtube icon", "3. Verify that user is routed to IMDB Youtube page"]}
{"id": 235, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"[aria-label='Go ▁ To ▁ IMDbPro'] ▁ > ▁ div\" ) ) . click ( ) ; assertEquals ( \"Log ▁ in ▁ With ▁ Amazon\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "IMDb Pro", "Test Description": "The goal is to verify that IMDB pro is available only for members who has amazon membership", "Preconditions": ["1. User is logged in IMDb site", "2. User does not have amazon membership"], "Steps": ["1. User is on IMDB homepage", "2. User Selects IMDB pro from action pannel", "3. Verify that user is routed to signIn amazon accountto SignIn for IMDb pro member"]}
{"id": 236, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Watch ▁ trailer ▁ for ▁ The ▁ Suicide ▁ Squad']\" ) ) ) ; String elementLabel = element . getAttribute ( \"aria-label\" ) ; String movieName = elementLabel . substring ( elementLabel . indexOf ( \"for\" ) + 4 ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Pause']\" ) ) ) ; String title = driver . findElement ( By . tagName ( \"h5\" ) ) . getText ( ) ; assertTrue ( movieName . contains ( title ) || title . contains ( movieName ) ) ; driver . findElement ( By . cssSelector ( \".ipc-icon-link--onBase\" ) ) . click ( ) ; String pageTitle = driver . findElement ( By . xpath ( \" // *[@data-testid='hero-title-block__title']\" ) ) . getText ( ) ; assertTrue ( pageTitle . contains ( title ) || title . contains ( pageTitle ) ) ; driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'User ▁ reviews')]\" ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \".user-reviews\" ) ) . click ( ) ; Thread . sleep ( 3000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"cboxIframe\" ) ) ) ; driver . switchTo ( ) . frame ( element ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"icicle-page\" ) ) ) ; driver . findElement ( By . cssSelector ( \".klondike-userreview-summary\" ) ) . sendKeys ( \"good\" ) ; driver . findElement ( By . tagName ( \"textarea\" ) ) . sendKeys ( \"Saw ▁ it ▁ yesterday. ▁ I ▁ enjoyed ▁ it. ▁ It ▁ was ▁ good. ▁ I ▁ Liked ▁ it.\" ) ; driver . findElement ( By . xpath ( \" // *[contains(@class,'ice-radio-button')] /* [text()='No']\" ) ) . click ( ) ; driver . findElement ( By . className ( \"a-button-input\" ) ) . click ( ) ; } ", "Test Name": "Write Review ", "Test Description": "The goal is to verify that user can write a Review", "Steps": ["1. User selects the Trailer button of The Suicide Squad in home page", "2. Verify that  System route sthe user to the movie trailer", "3. User scrolls to right navgation pannel and selects arrow icon '>' ", "4. Verify user is routed to Imdb Title page", "5. User selects 'User Reviews' page", "6. User select Review this Title option uder the movie name", "7. Verify that a pop up window opens up to write a review", "8. User writes a review and presses Submit button for the review to be published."], "Preconditions": ["1. User is logged in IMDb site"]}
{"id": 237, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[text()='All']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@role='menuitem'][@aria-label='Titles']\" ) ) . click ( ) ; element = driver . findElement ( By . cssSelector ( \".imdb-header-search__input\" ) ) ; element . sendKeys ( \"Virgin ▁ River\" ) ; element . submit ( ) ; assertEquals ( \"Titles\" , driver . findElement ( By . className ( \"findSectionHeader\" ) ) . getText ( ) ) ; List < WebElement > resultsElements = driver . findElements ( By . className ( \"result_text\" ) ) ; for ( WebElement element : resultsElements ) { String elementText = element . getText ( ) . toLowerCase ( Locale . ROOT ) ; assertTrue ( elementText . contains ( \"virgin\" ) || elementText . contains ( \"river\" ) ) ; } } ", "Test Name": "Search by Title", "Test Description": "The goal is to verify that only Titles are displayed when searched for Titles", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User selects 'Titles' from All drop-down presents against search bar", "2. User search for Virgin River in search bar and press search button", "3. Verify that user is routed to Titels page where titels only contain only word of these two ( Virgin + River ) are displayed"]}
{"id": 238, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; actions . moveToElement ( driver . findElement ( By . className ( \"top-picks\" ) ) ) . perform ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".top-picks ▁ [data-testid='title']\" ) ) ) ; String movieName = element . getText ( ) ; element = driver . findElement ( By . cssSelector ( \".top-picks ▁ [title='info']\" ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"ipc-promptable-base__panel\" ) ) ) ; wait . until ( ExpectedConditions . textToBePresentInElement ( driver . findElement ( By . className ( \"ipc-title-prompt__title\" ) ) , movieName ) ) ; } ", "Test Name": "Info of top picks movies", "Test Description": "The goal is to verify that info icon is availabe for top picks movies", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User scrolls down to Top picks section on IMDb homepage", "2. Verify that info button is available to look into details of the first movie", "3. User press info icon", "4. Verify that a pop up window opens up showing minimal information for the movie"]}
{"id": 239, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@data-testid='title'][text()='Forrest ▁ Gump']/..\" ) ) ) ; WebElement rightButton = element . findElement ( By . xpath ( \". // ../../../following-sibling::*[contains(@class, ▁ 'ipc-pager--right')]\" ) ) ; for ( int i = 0 ; i < 4 ; i ++ ) { wait . until ( ExpectedConditions . elementToBeClickable ( rightButton ) ) . click ( ) ; Thread . sleep ( 200 ) ; } Thread . sleep ( 1000 ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Cast ▁ & ▁ crew']\" ) ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Cast ▁ & ▁ crew']\" ) ) . click ( ) ; assertEquals ( \"Forrest ▁ Gump\" , driver . findElement ( By . cssSelector ( \"h3 ▁ > ▁ a\" ) ) . getText ( ) ) ; assertEquals ( \"Full ▁ Cast ▁ & ▁ Crew\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Cast & Crew of a Movie/Tv show", "Test Description": "The goal is to verify that Cast and Crew details are avaialble for a Movie/Tv show", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User selects movie' Forrest Gump' from IMDB homepage slider", "2. User is routed to movie title page", "3. Verify that Cast & Crew option is available on top pannel", "4. User selects Cast & Crew option", "5. Verify that Full Cast & Crew is displayed for the movie 'Forrest Gump'"]}
{"id": 240, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[aria-label='Watch ▁ trailer ▁ for ▁ The ▁ Suicide ▁ Squad']\" ) ) ) ; String elementLabel = element . getAttribute ( \"aria-label\" ) ; String movieName = elementLabel . substring ( elementLabel . indexOf ( \"for\" ) + 4 ) ; Actions actions = new Actions ( driver ) ; actions . moveByOffset ( 0 , 0 ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='Pause']\" ) ) ) ; String title = driver . findElement ( By . tagName ( \"h5\" ) ) . getText ( ) ; assertTrue ( movieName . contains ( title ) || title . contains ( movieName ) ) ; driver . findElement ( By . cssSelector ( \".ipc-icon-link--onBase\" ) ) . click ( ) ; String pageTitle = driver . findElement ( By . xpath ( \" // *[@data-testid='hero-title-block__title']\" ) ) . getText ( ) ; assertTrue ( pageTitle . contains ( title ) || title . contains ( pageTitle ) ) ; driver . findElement ( By . cssSelector ( \"[data-testid='tm-box-addtolist-button']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".attlp-watchlist\" ) ) . isDisplayed ( ) ) ; By createListLocator = By . cssSelector ( \".attlp-creat-list\" ) ; assertTrue ( driver . findElement ( createListLocator ) . isDisplayed ( ) ) ; driver . findElement ( createListLocator ) . click ( ) ; assertEquals ( \"Create ▁ a ▁ new ▁ list\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"list-create-name\" ) ) . sendKeys ( \"test ▁ list\" ) ; driver . findElement ( By . cssSelector ( \".list-create-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"lister-edit-form\" ) ) ) ; } ", "Test Name": "Create new list", "Test Description": "The goal is to verify that New list can be added", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User selects a movie 'The Suicide Squad' on IMDb home page", "2. User is routed to movie trailer page", "3. User selects Title details from right navigation pannel", "4. User is routed to Title details page", "5. User scrolls down and press the Add to watchlist dropdown", "6.Verify that user is presented with two options\n*View watchlist\n*Create new list", "7.User selects create new list", "8.Create new list form is displyed", "9. Fill in the mandatory fields and press  Create", "10. Verify that new list is created"]}
{"id": 241, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='navUserMenu-contents'] // a /* [text()='Account ▁ settings']/..\" ) ) . click ( ) ; assertEquals ( \"Account ▁ Settings\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; List < WebElement > titlesElements = driver . findElements ( By . tagName ( \"h2\" ) ) ; List < String > expectedTitles = new LinkedList < > ( Arrays . asList ( \"Personal ▁ Information\" , \"Preferences\" , \"Other\" ) ) ; List < String > actualTitles = new LinkedList < > ( ) ; for ( WebElement element : titlesElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ", "Test Name": "Account Setting", "Test Description": "The goal is to verify that Account settings can be edited", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User selects dropdown from top right corner where Username is displayed", "2. User selects 'Account Settings' from drop down", "3. Verify that account setting page is displayed to edit \n* Personal Information\n*Preferences\n*Other"]}
{"id": 242, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".imdb-header__watchlist-button-count\" ) ) ) ; driver . findElement ( By . cssSelector ( \".imdb-header__watchlist-button ▁ > ▁ a\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Watchlist\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; String details = driver . findElement ( By . className ( \"lister-details\" ) ) . getText ( ) ; assertNotEquals ( \"0\" , details . substring ( 0 , details . indexOf ( \" ▁ \" ) ) ) ; driver . findElement ( By . cssSelector ( \"[title='Edit']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"list-settings\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"privacy-toggle-switch\" ) ) ) ; if ( ! driver . findElement ( By . cssSelector ( \".privacy-overview.text-muted\" ) ) . getText ( ) . equals ( \"private\" ) ) { driver . findElement ( By . className ( \"label\" ) ) . click ( ) ; } driver . findElement ( By . cssSelector ( \"#list-settings-content ▁ [value='SAVE']\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[text()='Done']\" ) ) . click ( ) ; assertEquals ( \"PRIVATE\" , driver . findElement ( By . cssSelector ( \".lister-privacy\" ) ) . getText ( ) ) ; } ", "Test Name": "Private Watchlist", "Test Description": "The goal is to verify that Watchlist can be set to private and public", "Preconditions": ["1. User is logged in IMDb site", "2. User has added items to watclist"], "Steps": ["1. User selects Watchlist button from top right corner", "2. Verify that Your watchlist is displayed", "3. Press Edit option to alter Setings ", "4. Press Settings ", "4. Verify that option to set Watchlist Private and Public switch is available ", "5. User set the Watchlist to be Private and press Save button and DONE", "6. Verify that watchlist is set to private"]}
{"id": 243, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".imdb-header__watchlist-button-count\" ) ) ) ; driver . findElement ( By . cssSelector ( \".imdb-header__watchlist-button ▁ > ▁ a\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Watchlist\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertFalse ( driver . findElement ( By . cssSelector ( \"#social-sharing-widget ▁ button\" ) ) . isEnabled ( ) ) ; } ", "Test Name": "Sharing a private watchlist", "Test Description": "The goal is to verify that Private Watchlist can not be shared", "Preconditions": ["1. User is logged in IMDb site", "2. User has added items to watclist", "3. User has set watchlist to private (Refer to TC SK_40)"], "Steps": ["1. User selects Watchlist button from top right corner", "2. Verify that Your watchlist is displayed", "3. Verify that Share button is disabled for a private watchlist"]}
{"id": 244, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='navUserMenu-contents'] // a /* [text()='Your ▁ activity']/..\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".user-profile.own-profile\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"a[aria-label='Home']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . className ( \"swiper-wrapper\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "IMDb button >Your Activity", "Test Description": "The goal is to verify that IMDb button routes user back to IMDB home page", "Steps": ["1. User opens the site https://www.imdb.com/", "2.User navigates to Usename drop down from top right corner", "3. User selects Your activity option from drop down", "4. Verify that the user is routed to user details page", "5. User press IMDB button placed on top right corner", "6. Verify user is routed to IMDB home page"], "Preconditions": ["1. User is logged in IMDb site", "2. User is on IMDb home page"]}
{"id": 245, "website": "IMDB", "code": " void function ( ) throws InterruptedException { WebDriverManager . edgedriver ( ) . setup ( ) ; EdgeDriver driver2 = new EdgeDriver ( ) ; driver2 . manage ( ) . window ( ) . maximize ( ) ; driver2 . get ( \"https: // www.imdb.com/\" ) ; String currentName = driver2 . findElement ( By . cssSelector ( \".swiper-slide-active ▁ [class*=SlideCaption__WithPeekCaptionHeadingText]\" ) ) . getText ( ) ; driver2 . findElement ( By . xpath ( \" // *[@aria-label='Next ▁ slide']\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; String nextName = driver2 . findElement ( By . cssSelector ( \".swiper-slide-active ▁ [class*=SlideCaption__WithPeekCaptionHeadingText]\" ) ) . getText ( ) ; assertNotEquals ( currentName , nextName ) ; driver2 . quit ( ) ; } ", "Test Name": "UserInterface elements in place on IE browser", "Test Description": "The goal is to verify that all UserInterface is in place on IE browser", "Steps": ["1. User opens the site https://www.imdb.com/", "2.Verify that when user clicks the right arrow on the slider on the IE browser, the text description of the movie changes."]}
{"id": 246, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='navUserMenu-contents'] // a /* [text()='Sign ▁ out']/..\" ) ) . click ( ) ; assertEquals ( \"Sign ▁ In\" , driver . findElement ( By . cssSelector ( \".imdb-header__signin-text\" ) ) . getText ( ) ) ; } ", "Test Name": "SignOut Functionality", "Test Description": "The goal is to verify that SignOut functionality is working as expected", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User selects SignOut from top right corner drop down under username", "2. Verify that user gets logged out"]}
{"id": 247, "website": "IMDB", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.imdb.com/\" ) ; for ( int i = 0 ; i < 13 ; i ++ ) { String nextUpName = driver . findElement ( By . xpath ( \" // *[@class='editorial-slots']/descendant::span[contains(@class, ▁ 'AutorotatePeekstyle__EditorialSlotTitle')][3]\" ) ) . getText ( ) ; driver . findElement ( By . xpath ( \" // *[@aria-label='Next ▁ slide']\" ) ) . click ( ) ; Thread . sleep ( 500 ) ; element = driver . findElement ( By . cssSelector ( \".swiper-slide-active ▁ [class*=SlideCaption__WithPeekCaptionHeadingText]\" ) ) ; String currentName = element . getText ( ) ; assertEquals ( currentName , nextUpName ) ; } } ", "Test Name": "Slider Movies/Tv shows change", "Test Description": "The goal is to verify that ImDb homepage slider and Up next work synchronously", "Preconditions": ["1. User is logged in IMDb site"], "Steps": ["1. User is on IMDB homepage", "2. User uses the slider to walkthrough the movies/Tv shows", "3. Verify that slider Movies/Tvshows works synchronously with Up Next movie"]}
{"id": 248, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".imdb-header__watchlist-button-count\" ) ) ) ; driver . findElement ( By . cssSelector ( \".imdb-header__watchlist-button ▁ > ▁ a\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Watchlist\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // option[text()='IMDb ▁ Rating']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"lister-sort-by-options\" ) ) . click ( ) ; List < WebElement > metascoresElements = driver . findElements ( By . className ( \"ratings-imdb-rating\" ) ) ; for ( int i = 1 ; i < metascoresElements . size ( ) ; i ++ ) { String previousScore = metascoresElements . get ( i - 1 ) . getText ( ) ; String currentScore = metascoresElements . get ( i ) . getText ( ) ; assertTrue ( Double . parseDouble ( previousScore ) >= Double . parseDouble ( currentScore ) ) ; } } ", "Test Name": "WatchList page sorting", "Test Description": "The goal is to verify that watchlist sorting by Rating is correct", "Preconditions": ["1. User is logged in IMDb site", "2. User has already added items to watchlist"], "Steps": ["1. User selects watclist from top action pannel", "2. Verify that Your watchlist is displayed", "3. User select sort by 'IMDb Rating' from drop-down", "4. Verify that sorting is done based on highest IMDb Rating at top"]}
{"id": 249, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Cruella']/../preceding-sibling::* /* [contains(@class, ▁ 'ipc-watchlist-ribbon')]\" ) ) ) . click ( ) ; assertEquals ( \"Sign ▁ in\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "SignOut>Watchlist", "Test Description": "The goal is to verify that user can not add items to watchlist if he is not loggedIn", "Preconditions": ["1. User is not loggedIn"], "Steps": ["1. User opens the site https://www.imdb.com/", "2. User selects plus button placed on movie 'Cruella'", "3. Verify that user is routed to SignIn /Registration  page"]}
{"id": 250, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Cruella']/../preceding-sibling::*[contains(@class, ▁ 'ipc-poster-card__rating-star-group')]/button\" ) ) ) . click ( ) ; assertEquals ( \"Sign ▁ in\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "SignOut>Star rating", "Test Description": "The goal is to verify that user can not add Star rating if he is not loggedIn", "Preconditions": ["1. User is not loggedIn"], "Steps": ["1. User opens the site https://www.imdb.com/", "2. User press Star icon placed against movie 'Cruella to provide star rating", "3. Verify that user is routed to SignIn /Registration  page to add star rating"]}
{"id": 251, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; By createAccountLocator = By . xpath ( \" // a[text()='Create ▁ a ▁ New ▁ Account']\" ) ; assertTrue ( driver . findElement ( createAccountLocator ) . isDisplayed ( ) ) ; driver . findElement ( createAccountLocator ) . click ( ) ; driver . findElement ( By . id ( \"ap_customer_name\" ) ) . sendKeys ( \"username\" ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"weenakhalid@gmail.com\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"password\" ) ; driver . findElement ( By . id ( \"ap_password_check\" ) ) . sendKeys ( \"password\" ) ; driver . findElement ( By . id ( \"continue\" ) ) . click ( ) ; WebElement alertElement = driver . findElement ( By . id ( \"auth-warning-message-box\" ) ) ; assertEquals ( \"Important ▁ Message! \\n \" + \"You ▁ indicated ▁ you're ▁ a ▁ new ▁ customer, ▁ but ▁ an ▁ account ▁ already ▁ exists ▁ with ▁ the ▁ email ▁ address ▁ weenakhalid@gmail.com.\" , alertElement . getText ( ) ) ; } ", "Test Name": "Unique Email>SignIn", "Test Description": "The goal is to verify that user can have only one account against a unique email Id", "Steps": ["1. User opens the site https://www.imdb.com/", "2. User slelects SignIn option from top left corner", "3. Verify that user is routed to SignIn /Registration page to SignUp/SignIn", "4. User presses the ‘Create new account’ option", "5. User enters requiered details and an already IMDb used EmailId to SignUp again", "6. Verify that following error message is diplayed 'Important Message!\nYou indicated you're a new customer, but an account already exists with the email address weenakhalid@gmail.com.'\n"]}
{"id": 252, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; ( ( JavascriptExecutor ) driver ) . executeScript ( \"window.open()\" ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='navUserMenu-contents'] // a /* [text()='Sign ▁ out']/..\" ) ) . click ( ) ; assertEquals ( \"Sign ▁ In\" , driver . findElement ( By . cssSelector ( \".imdb-header__signin-text\" ) ) . getText ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 0 ) ) ; driver . navigate ( ) . refresh ( ) ; assertEquals ( \"Sign ▁ In\" , driver . findElement ( By . cssSelector ( \".imdb-header__signin-text\" ) ) . getText ( ) ) ; } ", "Test Name": "More than one instance>IMDb", "Test Description": "The goal is to verify that user can not have two instance of IMDb site, one loggedOut and other  LoggedIn", "Steps": ["1. User opens the site https://www.imdb.com/", "2. User logs In the website", "3. User opens the site https://www.imdb.com/ again in new tab", "4. User LogsOut of website", "5. User hover back to logged In instance and refreshes the page.", "6. Verify that user is Logged Out "]}
{"id": 253, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".imdb-header__watchlist-button-count\" ) ) ) ; driver . findElement ( By . cssSelector ( \".imdb-header__watchlist-button ▁ > ▁ a\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Watchlist\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertTrue ( driver . findElements ( By . className ( \"lister-item\" ) ) . size ( ) > 0 ) ; driver . findElement ( By . cssSelector ( \"a[aria-label='Home']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . className ( \"swiper-wrapper\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "IMDB button >Watchlist", "Test Description": "The goal is to verify that IMDb button routes user back to IMDB home page", "Preconditions": ["1. User is logged in IMDb site", "2. User has already added  items to watchlist"], "Steps": ["1. User opens the site https://www.imdb.com/", "2.User navigates to Watchlist button placed at top right corner with a + sign", "3. User is routed to You watchlist where a list of Movies/Tv shows are displayed added by user", "5. User press IMDB button placed on top right corner", "6. Verify user is routed to IMDB home page"]}
{"id": 254, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='navUserMenu-contents'] // a /* [text()='Your ▁ ratings']/..\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Ratings\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"a[aria-label='Home']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . className ( \"swiper-wrapper\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "IMDB button >Your Rating", "Test Description": "The goal is to verify that IMDb button routes user back to IMDB home page", "Steps": ["1. User opens the site https://www.imdb.com/", "2.User navigates to Username drop down from top right corner", "3. User selects Your Ratings option from drop down", "4. Verify that user is routed to Your Ratings page", "5. User press IMDB button placed on top left corner", "6. Verify user is routed to IMDB home page"], "Preconditions": ["1. User is logged in IMDb site"]}
{"id": 255, "website": "IMDB", "code": " void function ( ) { driver . get ( \"https: // www.imdb.com/\" ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ In']\" ) ) . click ( ) ; assertTrue ( driver . findElements ( By . className ( \"list-group\" ) ) . size ( ) > 1 ) ; driver . findElement ( By . xpath ( \" // *[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"tamar.gur@outlook.co.il\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"imdbtest\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@title='Toggle ▁ Acount ▁ Menu']/..\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // *[@id='navUserMenu-contents'] // a /* [text()='Your ▁ ratings']/..\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Ratings\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . className ( \"share_url_link\" ) ) . click ( ) ; assertEquals ( \"inline-block\" , driver . findElement ( By . cssSelector ( \"[name='share-link']\" ) ) . getCssValue ( \"display\" ) ) ; Actions actions = new Actions ( driver ) ; actions . keyDown ( Keys . CONTROL ) . sendKeys ( \"c\" ) . keyUp ( Keys . CONTROL ) . perform ( ) ; try { Clipboard clipboard = Toolkit . getDefaultToolkit ( ) . getSystemClipboard ( ) ; Object copiedData = clipboard . getData ( DataFlavor . stringFlavor ) ; assertTrue ( copiedData . toString ( ) . startsWith ( \"https: // www.imdb.com/user/\" ) && copiedData . toString ( ) . endsWith ( \"/ratings\" ) ) ; } catch ( IOException | UnsupportedFlavorException e ) { e . printStackTrace ( ) ; } } ", "Test Name": "Your Ratings>Share the page", "Test Description": "The goal is to verify that Share the page optionis available on Your Ratings page", "Steps": ["1. User opens the site https://www.imdb.com/", "2.User navigates to Username drop down from top right corner", "3. User selects Your Ratings option from drop down", "4. Verify that user is routed to Your Ratings page", "5. User press Share the page icon from 'Tell your friends header placed on top right corner", "6. Verify that a link is displayed in a text box to share the page", "7.User right clicks and copy the URL to share  Your ratings with your friends"], "Preconditions": ["1. User is logged in IMDb site", "2. User has already added Ratings"]}
{"id": 256, "website": "IMDB", "code": " void function ( ) { String path = \"https: // www.imdb.com/\" ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; driver . get ( path ) ; driver . findElement ( By . className ( \"imdb-header__signin-text\" ) ) . click ( ) ; WebElement signInDiv = driver . findElement ( By . id ( \"signin-options\" ) ) ; List < WebElement > signInOptions = signInDiv . findElements ( By . className ( \"list-group-item\" ) ) ; Assert . assertTrue ( signInOptions . size ( ) > 1 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Create ▁ a ▁ New ▁ Account']\" ) ) ) . click ( ) ; String userName = \"some ▁ name\" ; driver . findElement ( By . id ( \"ap_customer_name\" ) ) . sendKeys ( userName ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"some@email.com\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"Password1\" ) ; driver . findElement ( By . id ( \"ap_password_check\" ) ) . sendKeys ( \"Password1\" ) ; driver . findElement ( By . xpath ( \" // input[@type='submit']\" ) ) . click ( ) ; String userNameFromPage = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"navbar__user-name\" ) ) ) . getText ( ) ; Assert . assertEquals ( userNameFromPage , userName ) ; } ", "Test Name": "SignUp Functionality", "Test Description": "The goal is to verify SignUpfunctionality", "Preconditions": ["User does not have an existing account"], "Steps": ["1. Enter the below mentioned URL: https://www.imdb.com/", "2. Press the Sign In button on top right corner", "3. Verify that multiple Sign In options are displayed", "4. Verify that ‘Create new account’ option is displayed", "5. Press the ‘Create new account’ option", "6. Enter the mandatory fields\n*Your name\n*Email\n*Password\n*Re-enter password\nEnter the mandatory fields\n*Your name\n*Email\n*Password\n*Re-enter password\n", "7. Press the option ‘Create your IMDb account’", "User gets logged In and Username is displayed on top right corner."]}
{"id": 257, "website": "IMDB", "code": " void function ( ) { String path = \"https: // www.imdb.com/\" ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; driver . get ( path ) ; driver . findElement ( By . className ( \"imdb-header__signin-text\" ) ) . click ( ) ; WebElement signInDiv = driver . findElement ( By . id ( \"signin-options\" ) ) ; List < WebElement > signInOptions = signInDiv . findElements ( By . className ( \"list-group-item\" ) ) ; Assert . assertTrue ( signInOptions . size ( ) > 1 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // span[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) ) . click ( ) ; String userName = \"some ▁ name\" ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"some@email.com\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"Password1\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; String userNameFromPage = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"navbar__user-name\" ) ) ) . getText ( ) ; Assert . assertEquals ( userNameFromPage , userName ) ; } ", "Test Name": "SignIn Functionality", "Test Description": "The goal is to verify that user is able to loginIn using an existing IMDB account", "Preconditions": ["1. User have an existing IMDb account"], "Steps": ["1. Enter the below mentioned URL: https://www.imdb.com/", "2. Press the Sign In button on top right corner", "3. Press on English", "4. Verify that multiple Sign In options are displayed", "5. Select ‘Sign In with IMdb’ option ", "6. Enter the mandatory fields\n*Email\n*Password\n\n", "7. Press the option ‘Sign In’", "User gets logged In and Username is displayed on top right corner.", "\n"]}
{"id": 258, "website": "IMDB", "code": " void function ( ) { String path = \"https: // www.imdb.com/\" ; WebDriverWait wait = new WebDriverWait ( driver , 1000 ) ; driver . get ( path ) ; driver . findElement ( By . className ( \"imdb-header__signin-text\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // span[text()='Sign ▁ in ▁ with ▁ IMDb']\" ) ) ) . click ( ) ; driver . findElement ( By . id ( \"ap_email\" ) ) . sendKeys ( \"amirbenami21@gmail.com\" ) ; driver . findElement ( By . id ( \"ap_password\" ) ) . sendKeys ( \"nba12345\" ) ; driver . findElement ( By . id ( \"signInSubmit\" ) ) . click ( ) ; WebElement featureTodaySection = driver . findElement ( By . xpath ( \" // *[text()='Featured ▁ today']/../..\" ) ) ; driver . switchTo ( ) . frame ( featureTodaySection ) ; featureTodaySection . findElement ( By . xpath ( \" // span[text()='Photos']\" ) ) ; featureTodaySection . findElement ( By . className ( \"ipc-media__img\" ) ) ; driver . switchTo ( ) . defaultContent ( ) ; WebElement whatToSee = driver . findElement ( By . xpath ( \" // *[text()='What ▁ to ▁ watch']/../../..\" ) ) ; Assert . assertTrue ( whatToSee . findElements ( By . className ( \"ipc-media__img\" ) ) . size ( ) > 1 ) ; driver . switchTo ( ) . frame ( whatToSee . findElement ( By . xpath ( \" // span[text()='Cruella']/../..\" ) ) ) ; WebElement watchlistButton = driver . findElement ( By . xpath ( \" // *[text()='Watchlist']/..\" ) ) ; driver . switchTo ( ) . frame ( watchlistButton ) ; Assert . assertTrue ( driver . findElement ( By . className ( \"ipc-icon--add\" ) ) . isDisplayed ( ) ) ; watchlistButton . click ( ) ; Assert . assertTrue ( driver . findElement ( By . className ( \"ipc-icon--done\" ) ) . isDisplayed ( ) ) ; driver . switchTo ( ) . defaultContent ( ) ; } ", "Test Name": "WatchList Functionlity", "Test Description": "The goal is to verify that WatchList Functionality is working", "Preconditions": ["1. User have an existing IMDb account", " 2. User is logged in IMDb site", " 3. User is on IMDb homepage"], "Steps": ["1. Verify that under ‘Featured today’ movies and photos  are displayed", "2. Verify that under ‘What to watch’ movies and Tv shows is displayed", "3. Verify that ‘Watchlist’ plus sign is displayed", "4. Press watchlist button against  moview Cruella(2021) and verify that Cruella is added to watchlist list "]}
