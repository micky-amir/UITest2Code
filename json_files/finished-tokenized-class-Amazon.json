{"id": 0, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Español ▁ - ▁ ES']\" ) ) ) . click ( ) ; assertEquals ( \"Carrito\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; } ", "Test Name": "Change Language Functionality", "Test Description": "The goal is to verify change language to Espanol function works", "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the change language option", "3. Verify that multiple language options are displayed", "4. choose Español - ES", "The cart text is Carrito"]}
{"id": 1, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Deals')]\" ) ) . click ( ) ; assertEquals ( \"Deals ▁ and ▁ Promotions\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Today's Deals", "Test Description": "The goal is to verify Today's Deals option on the naviation bar works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the Today's Deals option on the navigation bar", "The header of the page is Deals and Promotions"]}
{"id": 2, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // h2[text()='AmazonBasics']/../following-sibling::*[@class='a-cardui-footer']/a\" ) ) . click ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"amazonbasics\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; List < WebElement > searchResults = driver . findElements ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]/descendant::a/span[contains(@class, ▁ 'a-text-normal')]\" ) ) ; for ( int i = 0 ; i < 6 ; i ++ ) { assertTrue ( searchResults . get ( i ) . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"amazon\" ) && searchResults . get ( i ) . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"basic\" ) ) ; } } ", "Test Name": "See more Option on Home Page", "Test Description": "The goal is to verify that clicking the See more link on one of the presented items in home page", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. locate 'AmazonBasics' section", "3. Click the See more link of the products", "Results for 'amazonbasics' are presented", "first presented items conatain the words 'amazon basics'"]}
{"id": 3, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; List < WebElement > searchResults = driver . findElements ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]/descendant::a/span[contains(@class, ▁ 'a-text-normal')]\" ) ) ; for ( WebElement result : searchResults ) { assertTrue ( result . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"watch\" ) ) ; } } ", "Test Name": "Search Function", "Test Description": "The goal is to verify the search option works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "Results for 'watch' are presented", "All the presented items conatain the word 'watch'"]}
{"id": 4, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; element = driver . findElement ( By . id ( \"navBackToTop\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; JavascriptExecutor executor = driver ; assertEquals ( 0 , ( long ) executor . executeScript ( \"return ▁ window.pageYOffset;\" ) ) ; } ", "Test Name": "Back to top Button", "Test Description": "Verify Back to top button at the end of the home page is working", "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Scroll down to the Back to top button", "3. Click the Back to top button", "Top of the home page is displayed"]}
{"id": 5, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Amazon ▁ Cart ▁ is ▁ empty\" , driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".sc-sign-in ▁ .a-button-text\" ) ) . getText ( ) . contains ( \"Sign ▁ in\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".sc-sign-in ▁ .a-button:nth-child(2) ▁ a\" ) ) . getText ( ) . contains ( \"Sign ▁ up\" ) ) ; } ", "Test Name": "Cart button - not logged in", "Test Description": "Verify that when the user isn't logged in, clicking the cart button suggests signing in or up.", "Preconditions": ["1. page is displayed in English", "2. User isn't logged in", "3. The cart is empty"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the cart symbol in the top right area", "The header of the page is Your Amazon Cart is empty\n", "Sign In button and Sign Up button are presented"]}
{"id": 6, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"main-content\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; element . findElement ( By . cssSelector ( \".as-title-block-right ▁ > ▁ a\" ) ) . click ( ) ; List < WebElement > results = driver . findElements ( By . cssSelector ( \".apb-browse-searchresults-product\" ) ) ; for ( WebElement element : results ) { assertTrue ( element . findElement ( By . tagName ( \"img\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . tagName ( \"h2\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . cssSelector ( \".a-icon-star-small\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . className ( \"a-price\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"$\" , element . findElement ( By . className ( \"a-price-symbol\" ) ) . getText ( ) ) ; } } ", "Test Name": "Main Content Items", "Test Description": "Verify that each item in the first section in the main content contains all of the parts for item's description", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Scroll down to the main content section", "3. Click the shop now button of the first section", "Each item in the displayed page contains an image, description, rating and price in dollars"]}
{"id": 7, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . id ( \"searchDropdownBox\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // option[text()='Arts ▁ & ▁ Crafts']\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"color\" ) ; element . submit ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#departments ▁ ul ▁ .a-text-bold\" ) ) . getText ( ) . contains ( \"Arts ▁ & ▁ Crafts\" ) ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"color\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; List < WebElement > searchResults = driver . findElements ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]/descendant::a/span[contains(@class, ▁ 'a-text-normal')]\" ) ) ; for ( WebElement result : searchResults ) { assertTrue ( result . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"color\" ) ) ; } } ", "Test Name": "Search By Department", "Test Description": "Verify that search using filter for the department works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Scroll down to the main content section", "3. Choose Arts & Crafts from the drop down", "4. Search for 'color'", "The department that's presented is Arts & Crafts", "Results for 'watch' are presented", "All the presented items conatain the word 'watch'"]}
{"id": 8, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-global-location-slot\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"a-popover-3\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"a-dropdown-container\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[text()='United ▁ Kingdom']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"GLUXCountryValue\" ) , \"United ▁ Kingdom\" ) ) ; driver . findElement ( By . xpath ( \" // button[@name='glowDoneButton']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"nav-global-location-slot\" ) , \"Deliver ▁ to \\n United ▁ Kingdom\" ) ) ; } ", "Test Name": "Change Location By Country", "Test Description": "Verify that changing delivery location using the country dropdown feature works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the Deliver to Button", "A popover window to Choose your location is displayed", "3. Click the dropdown option", "4. Choose United Kingdom", "5. Click the Done button", "The displayed location is United Kingdoms"]}
{"id": 9, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-global-location-slot\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"a-popover-3\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"GLUXZipUpdateInput\" ) ) ) . sendKeys ( \"32958\" ) ; driver . findElement ( By . cssSelector ( \"#GLUXZipUpdate ▁ .a-button-input\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . id ( \"GLUXHiddenSuccessSelectedAddressPlaceholder\" ) , \"\" ) ) ) ; assertEquals ( \"32958\" , driver . findElement ( By . id ( \"GLUXHiddenSuccessSelectedAddressPlaceholder\" ) ) . getText ( ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \".a-popover-footer ▁ > ▁ .a-button\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . id ( \"nav-global-location-slot\" ) , \"Deliver ▁ to \\n Israel\" ) ) ) ; assertTrue ( driver . findElement ( By . id ( \"nav-global-location-slot\" ) ) . getText ( ) . contains ( \"Sebastian ▁ 32958\" ) ) ; } ", "Test Name": "Change Location By US zip code", "Test Description": "Verify that changing delivery location using US zip code feature works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the Deliver to Button", "A popup window to Choose your location is displayed", "3. Enter the zip code 32958", "4. Click the Apply button", "zip code 32958 is displayed in the popover window", "5. Click the Continue button", "The displayed location is Sebastian 32958"]}
{"id": 10, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; assertEquals ( \"Cart\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-hamburger-menu\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"hmenu-content\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // div[text()='Amazon ▁ Music']/..\" ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // a[text()='Amazon ▁ Music ▁ HD']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#katana-unrec-5 ▁ h1\" ) ) ) ; assertTrue ( element . getText ( ) . contains ( \"AMAZON ▁ MUSIC ▁ HD\" ) ) ; } ", "Test Name": "Menu - Amazon Music - Amazon Music HD", "Test Description": "Verify that using the menu to reach the Amazon Music HD page function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the menu", "Menu content is visible", "3. Choose Amazon Music", "Amazon Music submenu is visible", "4. Choose Amazon Music HD", "Amazon Music HD is displayed"]}
{"id": 11, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-orders\" ) ) . click ( ) ; assertEquals ( \"Sign-In\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Returns & Orders - not logged in", "Test Description": "Verify that clicking the Returns & Orders button in the home page when the user isn't logged in, displayes a signing in page", "Preconditions": ["1. page is displayed in English", "2. User isn't logged in"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the Returns & Orders button", "Sign In page is displayed"]}
{"id": 12, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"nav-flyout-ya-signin\" ) ) . isDisplayed ( ) ) ; List < WebElement > titlesElements = driver . findElements ( By . className ( \"nav-title\" ) ) ; assertEquals ( \"Your ▁ Lists\" , titlesElements . get ( 0 ) . getText ( ) ) ; assertEquals ( \"Your ▁ Account\" , titlesElements . get ( 1 ) . getText ( ) ) ; for ( WebElement element : titlesElements ) { assertTrue ( element . findElements ( By . xpath ( \". // ../a\" ) ) . size ( ) > 1 ) ; } driver . findElement ( By . xpath ( \" // *[text()='Create ▁ a ▁ List']/..\" ) ) . click ( ) ; assertEquals ( \"Lists\" , driver . findElement ( By . className ( \"al-intro-banner-header\" ) ) . getText ( ) ) ; assertEquals ( \"Sign ▁ In\" , driver . findElement ( By . className ( \"a-button-text\" ) ) . getText ( ) ) ; } ", "Test Name": "Account & Lists - Create a list - not logged in", "Test Description": "Verify that whike trying to create a list, user is required to sign in", "Preconditions": ["1. page is displayed in English", "2. User isn't logged in"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the Account & Lists", "A sign in button is presented, in addition to links under Your Lists and Your Account categories", "3. Click Create a List link", "The Lists page is presented, including a sign in button"]}
{"id": 13, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"nav-flyout-ya-signin\" ) ) . isDisplayed ( ) ) ; List < WebElement > titlesElements = driver . findElements ( By . className ( \"nav-title\" ) ) ; assertEquals ( \"Your ▁ Lists\" , titlesElements . get ( 0 ) . getText ( ) ) ; assertEquals ( \"Your ▁ Account\" , titlesElements . get ( 1 ) . getText ( ) ) ; for ( WebElement element : titlesElements ) { assertTrue ( element . findElements ( By . xpath ( \". // ../a\" ) ) . size ( ) > 1 ) ; } driver . findElement ( By . xpath ( \" // *[text()='Account']/..\" ) ) . click ( ) ; assertEquals ( \"Your ▁ Account\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; List < WebElement > cardElements = driver . findElements ( By . xpath ( \" // h2[contains(@class, ▁ 'a-text-normal')]\" ) ) ; List < String > expectedTitles = new LinkedList < > ( Arrays . asList ( \"Your ▁ Orders\" , \"Login ▁ & ▁ security\" , \"Prime\" , \"Gift ▁ cards\" , \"Your ▁ Payments\" , \"Your ▁ Profiles\" , \"Your ▁ devices ▁ and ▁ content\" ) ) ; List < String > actualTitles = new LinkedList < > ( ) ; for ( WebElement element : cardElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; cardElements . clear ( ) ; cardElements = driver . findElements ( By . cssSelector ( \".a-box.ya-card ▁ h2\" ) ) ; expectedTitles . clear ( ) ; expectedTitles . addAll ( Arrays . asList ( \"Ordering ▁ and ▁ shopping ▁ preferences\" , \"Digital ▁ content ▁ and ▁ devices\" , \"Memberships ▁ and ▁ subscriptions\" , \"Communication ▁ and ▁ content\" , \"Shopping ▁ programs ▁ and ▁ rentals\" , \"Other ▁ programs\" ) ) ; actualTitles . clear ( ) ; for ( WebElement element : cardElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; driver . findElement ( By . xpath ( \" // h2[contains(text(),'Your ▁ Profiles')]\" ) ) . click ( ) ; assertEquals ( \"Sign-In\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Account & Lists - Account's Profiles - not logged in", "Test Description": "Verify that while trying to enter your account's profiles, user is required to sign in", "Preconditions": ["1. page is displayed in English", "2. User isn't logged in"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the Account & Lists", "A sign in button is presented, in addition to links under Your Lists and Your Account categories", "3. Click Account", "Your Account page is presented", "There are 7 card categories: Your Orders, Login & security, Prime, Gift cards, Your Payments, Your profiles, Your devices and content\n6 more categories: Ordering and shopping preferences, Digital content and devices, Memberships and subscriptions, Communication and content, Shopping programs and rentals, Other programs", "4. Click Your Profiles button", "Sign In page is displayed"]}
{"id": 14, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"buy-now-button\" ) ) . click ( ) ; assertEquals ( \"Sign-In\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Buy Now Item - not logged in", "Test Description": "Verify that while trying to buy now an item, user is required to sign in", "Preconditions": ["1. page is displayed in English", "2. User isn't logged in"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click the Buy Now button", "Sign In page is displayed"]}
{"id": 15, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) ) ; assertTrue ( itemName . contains ( element . getText ( ) ) || element . getText ( ) . contains ( itemName ) ) ; } ", "Test Name": "Add to Cart Item", "Test Description": "Verify that Add to Cart function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click the first presented result item", "The item's name is as was presented in the results page", "4. Click the Add to Cart button", "5. Click the cart symbol in the top right area", "The item is presented in the cart"]}
{"id": 16, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"a[title='Add ▁ to ▁ List']\" ) ) . click ( ) ; assertEquals ( \"Sign-In\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Add to List Item - not logged in", "Test Description": "Verify that while trying to add to list an item, user is required to sign in", "Preconditions": ["1. page is displayed in English", "2. User isn't logged in"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click the first presented result item", "The item's name is as was presented in the results page", "4. Click the Add to List button", "Sign In page is displayed"]}
{"id": 17, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . build ( ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . build ( ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; Thread . sleep ( 1000 ) ; driver . findElement ( By . className ( \"icp-flyout-change\" ) ) . click ( ) ; assertEquals ( \"Language ▁ Settings\" , driver . findElement ( By . id ( \"lop-heading\" ) ) . getText ( ) ) ; assertEquals ( \"Currency ▁ Settings\" , driver . findElement ( By . id ( \"icp-sc-heading\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \".a-button-dropdown\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"a-popover-3\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[contains(text(), ▁ 'ILS')]\" ) ) . click ( ) ; driver . findElement ( By . className ( \"a-button-input\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; List < WebElement > prices = driver . findElements ( By . className ( \"a-price-symbol\" ) ) ; for ( WebElement element : prices ) { if ( ! driver . findElement ( By . xpath ( \". // ancestor::li\" ) ) . isDisplayed ( ) ) assertEquals ( \"ILS\" , element . getText ( ) ) ; } } ", "Test Name": "Change Currency", "Test Description": "The goal is to verify change currency function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the change language option", "3. Click the Change link", "A page with the titles Language Settings and Currency Settings is displayed", "4. Click the currency dropdown", "Currency Options are presented", "5. Choose ILS", "6. Click the Save Changes button", "7. Search for 'watch'", "The presented results' prices is in ILS (₪)"]}
{"id": 18, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_3'] ▁ a.a-text-normal\" ) ) ) ; element . click ( ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) ) ; String itemName = element . getText ( ) ; driver . findElement ( By . cssSelector ( \"[value='Delete']\" ) ) . click ( ) ; assertFalse ( driver . findElement ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) . isDisplayed ( ) ) ; assertFalse ( driver . findElement ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) . isDisplayed ( ) && driver . findElement ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) . getText ( ) . equals ( itemName ) ) ; } ", "Test Name": "Delete Item From Cart", "Test Description": "Verify delete option in the shopping cart works", "Preconditions": ["1. page is displayed in English", "2. Cart isn't empty"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the cart symbol in the top right area", "3. Click the delete link on the first item in the cart", "Item isn't presented in the cart anymore."]}
{"id": 19, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_2'] ▁ a.a-text-normal\" ) ) ) ; element . click ( ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) ) ; String itemName = element . getText ( ) . replaceAll ( \" ▁ - ▁ \" , \"-\" ) ; driver . findElement ( By . cssSelector ( \"[value='Compare ▁ with ▁ similar ▁ items']\" ) ) . click ( ) ; element = driver . findElement ( By . cssSelector ( \".a-popover\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; Thread . sleep ( 1000 ) ; assertEquals ( \"Compare ▁ with ▁ similar ▁ items\" , element . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; String presentedName = element . findElement ( By . cssSelector ( \".comparable_item_scroller0 ▁ .a-size-base.a-link-normal\" ) ) . getText ( ) . replace ( \"...\" , \"\" ) . replaceAll ( \" ▁ - ▁ \" , \"-\" ) ; assertTrue ( itemName . contains ( presentedName ) || presentedName . contains ( itemName ) ) ; assertEquals ( driver . findElement ( By . cssSelector ( \".sc-product-price\" ) ) . getText ( ) , element . findElement ( By . cssSelector ( \".a-color-price\" ) ) . getText ( ) ) ; assertTrue ( element . findElements ( By . tagName ( \"img\" ) ) . size ( ) > 1 ) ; } ", "Test Name": "Compare Item From Cart With Similar Objects", "Test Description": "Verify compare with similar items option for an item in the shopping cart works", "Preconditions": ["1. page is displayed in English", "2. Cart isn't empty"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the cart symbol in the top right area", "3. Click the compare with similar items link on the first item", "A popup window for the comparing is presented", "Cart's item is presented, with all the correct information", "Several other items are presented"]}
{"id": 20, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_2'] ▁ a.a-text-normal\" ) ) ) ; element . click ( ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) ) ; String itemName = element . getText ( ) ; driver . findElement ( By . cssSelector ( \"[value='Save ▁ for ▁ later']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; assertFalse ( driver . findElements ( By . cssSelector ( \"#activeCartViewForm ▁ .a-truncate-cut\" ) ) . size ( ) > 0 && driver . findElement ( By . cssSelector ( \"#activeCartViewForm ▁ .sc-product-link ▁ .a-truncate-cut\" ) ) . getText ( ) . equals ( itemName ) ) ; assertEquals ( itemName , driver . findElement ( By . cssSelector ( \"#sc-saved-cart-items ▁ .a-truncate-full\" ) ) . getText ( ) ) ; } ", "Test Name": "Save For Later Cart Item", "Test Description": "Verify Save for later option for an item in the shopping cart works", "Preconditions": ["1. page is displayed in English", "2. Cart isn't empty"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the cart symbol in the top right area", "3. Click the Save for later link on the first item", "Item isn't presented in the cart anymore.", "Item is shown under Saved for later category"]}
{"id": 21, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; assertEquals ( \"Cart\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-hamburger-menu\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"hmenu-content\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // div[text()='Electronics']/..\" ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // a[text()='Accessories ▁ & ▁ Supplies']\" ) ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-component-type='s-result-info-bar']\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"Accessories ▁ & ▁ Supplies\" , driver . findElement ( By . cssSelector ( \"#searchDropdownBox ▁ [selected]\" ) ) . getText ( ) ) ; } ", "Test Name": "Menu - Electronics Department - Accessories & Supplies  ", "Test Description": "Verify that using the menu to reach the Accessories & Supplies results page function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the menu button", "Menu content is visible", "3. Click Electronics category, under Shop By Department title", "Electronics submenu is presented", "4. Click Accessories & Supplies", "Results page is displayed", "The search dropdown shows Accessories & Supplies"]}
{"id": 22, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; assertEquals ( \"Cart\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-hamburger-menu\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"hmenu-content\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // div[text()='Gift ▁ Cards']/..\" ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // a[text()='All ▁ gift ▁ cards']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . tagName ( \"h1\" ) ) ) ; assertEquals ( \"Gift ▁ Cards\" , element . getText ( ) ) ; driver . findElement ( By . xpath ( \" // img[@alt='Birthday ▁ Gift ▁ Cards']/..\" ) ) . click ( ) ; assertEquals ( \"Birthday ▁ Gift ▁ Cards ▁ Header\" , driver . findElement ( By . cssSelector ( \".a-container ▁ img\" ) ) . getAttribute ( \"alt\" ) ) ; } ", "Test Name": "Menu - Birthday Gift Cards", "Test Description": "Verify that using the menu to reach the Birthday Gift Cards page works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the menu button", "Menu content is visible", "3. Click Gift Cards, under Programs & Features category", "Give A Gift Card and Manage Your Gift Card submenues are presented", "4. Click All gift cards", "Gift Cards page is presented", "5. Under Shop by occasion title, select Birthday", "Birthday Gift Cards page is displayed"]}
{"id": 23, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; assertEquals ( \"Cart\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-hamburger-menu\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"hmenu-content\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // div[text()='Amazon ▁ Live']/..\" ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \" // a[text()='Live']\" ) ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-id='pageHeaderLogo'] ▁ > ▁ img\" ) ) ) ; assertEquals ( \"Amazon ▁ Live ▁ logo\" , element . getAttribute ( \"alt\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Video ▁ Player']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Menu - Amazon Live", "Test Description": "Verify that using the menu to reach the Amazon Live page works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the menu button", "Menu content is visible", "3. Click Amazon Live, under Programs & Features category", "Amazon Live submenu is presented", "4. Click Live", "amazon live page is displayed", "A video Player is displayed"]}
{"id": 24, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; assertEquals ( \"Cart\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-hamburger-menu\" ) ) . click ( ) ; wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . id ( \"hmenu-content\" ) ) ) ; element = driver . findElement ( By . xpath ( \" // li/a[text()='Customer ▁ Service']\" ) ) ; actions . moveToElement ( element ) . click ( element ) . perform ( ) ; List < WebElement > cardElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".a-box-inner ▁ h3\" ) ) ) ; List < String > expectedTitles = new LinkedList < > ( Arrays . asList ( \"Your ▁ Orders\" , \"Returns ▁ & ▁ Refunds\" , \"Get ▁ Product ▁ Help\" , \"Digital ▁ Services ▁ and ▁ Device ▁ Support\" , \"Manage ▁ Prime\" , \"Payments ▁ & ▁ Gift ▁ Cards\" , \"Your ▁ Account\" , \"Amazon ▁ and ▁ COVID-19\" , \"Safe ▁ Online ▁ Shopping\" ) ) ; List < String > actualTitles = new LinkedList < > ( ) ; for ( WebElement element : cardElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; assertEquals ( \"Search ▁ the ▁ help ▁ library\" , driver . findElement ( By . cssSelector ( \"#help-search-label ▁ .a-text-bold\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"helpsearch\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"Browse ▁ Help ▁ Topics\" , driver . findElement ( By . cssSelector ( \".help-content ▁ h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Menu - Customer Service", "Test Description": "Verify that using the menu to reach the Customer Service page works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the menu button", "Menu content is visible", "3. Click Customer Service, under Help & Settings category", "Boxes with different information are dispalyed, with the following titles: Your Orders, Returns & Refunds, Get Product Help, Digital Services and Device Support, Manage Prime, Payments & Gift Cards, Your Account, Amazon and COVID-19, Safe Online Shopping.", "A search option in the help library is displayed", "Browse Help Topics section is displayed"]}
{"id": 25, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; assertEquals ( \"Cart\" , driver . findElement ( By . id ( \"nav-cart-text-container\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // a[(text()='Customer ▁ Service')]\" ) ) . click ( ) ; element = driver . findElement ( By . id ( \"helpsearch\" ) ) ; element . sendKeys ( \"menu\" ) ; List < WebElement > suggestions = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"#help_srch_sggst ▁ > ▁ *\" ) ) ) ; assertEquals ( \"menu\" , suggestions . get ( 0 ) . getText ( ) ) ; assertEquals ( \"menu ▁ button\" , suggestions . get ( 1 ) . getText ( ) ) ; element . submit ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#search-help ▁ p\" ) ) . getText ( ) . contains ( \"search ▁ results ▁ for ▁ menu\" ) ) ; } ", "Test Name": "Search The Help Library", "Test Description": "Verify that searching the help library function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Customer Service in the top menu", "3. Write 'menu' in the search the help library", "The search suugestions 'menu', 'menu button' are presented", "4. Search", "Search results for menu are presented"]}
{"id": 26, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_3'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . id ( \"acrCustomerReviewLink\" ) ) ; element . click ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . cssSelector ( \"#reviewsMedley ▁ h2\" ) ) ) ) ; assertEquals ( driver . findElement ( By . id ( \"acrPopover\" ) ) . getAttribute ( \"title\" ) . replace ( \" ▁ stars\" , \"\" ) , driver . findElement ( By . xpath ( \" // *[@data-hook='rating-out-of-text']\" ) ) . getText ( ) ) ; assertEquals ( element . getText ( ) , driver . findElement ( By . xpath ( \" // *[@data-hook='total-review-count']\" ) ) . getText ( ) . replace ( \"global ▁ \" , \"\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-hook='review']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Item Ratings", "Test Description": "Verify that an item's page has a ratings section", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click ratings link", "Page was scrolled to Customer reviews section", "Number of ratings and rating is the same as presented at the top of the page", "Reviews are presented "]}
{"id": 27, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_3'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . id ( \"askATFLink\" ) ) ; element . click ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"askInlineWidget\" ) ) ) ) ) ; String moreAnswers = driver . findElement ( By . cssSelector ( \".askTopQandALoadMoreQuestions\" ) ) . getText ( ) ; int numberOfMoreAnswers = Integer . parseInt ( moreAnswers . substring ( moreAnswers . indexOf ( \"(\" ) + 1 , moreAnswers . lastIndexOf ( \")\" ) ) ) ; int numberOfPresentedAnswers = driver . findElements ( By . cssSelector ( \".askTeaserQuestions ▁ > ▁ *\" ) ) . size ( ) ; assertEquals ( Integer . parseInt ( element . getText ( ) . split ( \" ▁ \" ) [ 0 ] ) , numberOfMoreAnswers + numberOfPresentedAnswers ) ; assertTrue ( numberOfMoreAnswers > 0 ) ; } ", "Test Name": "Item Answered Questions, Item Answered Questions", "Test Description": "Verify that an item's page has a answered questions section", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click answered questions link", "Page was scrolled to Customer reviews section", "Number of answered questions is the same as presented at the top of the page", "some questions and answers are displayed, as well as a link to the other answered questions"]}
{"id": 28, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_3'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \".twisterSwatchWrapper\" ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"#variation_color_name ▁ .selection\" ) , element . findElement ( By . tagName ( \"img\" ) ) . getAttribute ( \"alt\" ) ) ) ; } ", "Test Name": "Item Change Color", "Test Description": "Verify change color of an item function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click the first presented result item", "The item's name is as was presented in the results page", "4. Click a different color", "Color category changes according to the selection"]}
{"id": 29, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_3'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . xpath ( \" // h2[contains(text(), ▁ 'Have ▁ a ▁ question?')]\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . cssSelector ( \"[aria-labelledby='askDPSearchPromptLabel']\" ) ) ; element . sendKeys ( \"size\" ) ; List < WebElement > answersElement = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".askSearchResultsActive ▁ ▁ [data-ask-selector].a-section\" ) ) ) ; for ( WebElement element : answersElement ) { assertTrue ( element . getText ( ) . contains ( \"size\" ) ) ; } } ", "Test Name": "Item's Have a Question Function", "Test Description": "Verify Have a Question about an item function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Scroll to Have a question? Section", "A search bar is presented", "5. Search for 'size'", "QA/Reviews that contain the word 'size' are presented"]}
{"id": 30, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . className ( \"a-dropdown-container\" ) ) . click ( ) ; assertEquals ( \"true\" , driver . findElement ( By . cssSelector ( ( \"[name='quantity']\" ) ) ) . getAttribute ( \"aria-pressed\" ) ) ; List < WebElement > options = driver . findElements ( By . cssSelector ( \"[name='quantity'] ▁ option\" ) ) ; for ( int i = 1 ; i <= options . size ( ) ; i ++ ) { assertEquals ( i , Integer . parseInt ( options . get ( i - 1 ) . getText ( ) ) ) ; } driver . findElement ( By . xpath ( \" // option[@value='2']\" ) ) . click ( ) ; assertEquals ( \"Qty:2\" , driver . findElement ( By . cssSelector ( \"[data-action='a-dropdown-button']\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; String sideDataEncodedOffering = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-encoded-offering]\" ) ) ) . getAttribute ( \"data-encoded-offering\" ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".sc-product-link ▁ .a-truncate-cut\" ) ) ) ; assertEquals ( sideDataEncodedOffering , driver . findElement ( By . cssSelector ( \"[data-encoded-offering]\" ) ) . getAttribute ( \"data-encoded-offering\" ) ) ; assertEquals ( \"2\" , element . findElement ( By . xpath ( \". // ancestor::ul[contains(@class, ▁ 'sc-info-block')]/following-sibling:: */ descendant::*[@class='a-dropdown-prompt']\" ) ) . getText ( ) ) ; } ", "Test Name": "Add Quantity of Items to The Cart", "Test Description": "Verify that Add to Cart function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click the quantity dropdown", "options of consecutive numbers are presented", "5. Click 2", "Qty: 2 is presented", "6. Click the Add to Cart button", "7. Click the cart symbol in the top right area", "The item is presented in the cart and the Qty:2 is presented also"]}
{"id": 31, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_3'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-global-location-slot\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"a-popover-4\" ) ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // select[@id='GLUXCountryList']/..\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[text()='United ▁ Kingdom']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"GLUXCountryValue\" ) , \"United ▁ Kingdom\" ) ) ; driver . findElement ( By . xpath ( \" // button[@name='glowDoneButton']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"nav-global-location-slot\" ) , \"Deliver ▁ to \\n United ▁ Kingdom\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"ourprice_shippingmessage\" ) ) . getText ( ) . contains ( \"United ▁ Kingdom\" ) ) ; } ", "Test Name": "Change Shipping Location Effect On Item's Delivery", "Test Description": "Verify that changing delivery location using the country dropdown feature works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click the Deliver to Button", "A popover window to Choose your location is displayed", "5. Click the dropdown option", "6. Choose United Kingdom", "7. Click the Done button", "The delivery information in the item's page has changed and refers to United Kingdoms"]}
{"id": 32, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"navFooter\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; driver . findElement ( By . xpath ( \" // a[text()='Careers']\" ) ) . click ( ) ; assertEquals ( \"Find ▁ jobs\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-react-class='SearchInput']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[aria-label='Apply ▁ now']\" ) ) . isEnabled ( ) ) ; assertTrue ( driver . findElement ( By . className ( \"selected-employee-profile\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . className ( \"name\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".selected-employee-profile ▁ img\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Get to Know US - Careers", "Test Description": "Verify that amazon jobs page is displayed when Careers link is pressed in the home page", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Scroll to navigation footer", "3. Click Careers, under Get to Know Us", "Find jobs title and search bar are presented", "Apply now option is avilable", "A selected employee is presented, including a name and a picture"]}
{"id": 33, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[(text()='Sell')]\" ) ) . click ( ) ; assertEquals ( \"Sell ▁ on ▁ Amazon\" , driver . findElement ( By . cssSelector ( \".sticks-top ▁ h2\" ) ) . getText ( ) ) ; assertEquals ( \"Introduction ▁ to ▁ ecommerce ▁ selling\" , driver . findElement ( By . xpath ( \"( // h2)[2]\" ) ) . getText ( ) ) ; element = driver . findElement ( By . xpath ( \"( // h2)[2]/../../descendant::h3\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . xpath ( \"(( // h2)[2]/../../descendant::h3)[8]\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . xpath ( \"(( // h2)[2]/../../descendant::h3)[8]\" ) , \"\" ) ) ) ; List < WebElement > titlesElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . xpath ( \"( // h2)[2]/../../descendant::h3\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"What ▁ is ▁ ecommerce?\" , \"Build ▁ a ▁ business\" , \"Ecommerce ▁ fulfillment\" , \"Inventory ▁ management\" , \"What ▁ is ▁ dropshipping?\" , \"Create ▁ an ▁ Amazon ▁ storefront\" , \"Sell ▁ books ▁ on ▁ Amazon\" , \"Seller ▁ University\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titlesElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h3[text()='Start ▁ selling ▁ today']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Sell on Amazon", "Test Description": "Verify Sell on Amazon page is displayed properly after clicking the Sell link", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Sell in the top menu", "Sell on Amazon page is displayed", "Introduction to ecommerce selling section that contains the titles: What is ecommerce?, Build a business, Ecommerce fulfillment, Inventory management, What is dropshipping?, Create an Amazon storefront, Sell books on Amazon, Seller University", "Start selling today section is presented"]}
{"id": 34, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Registry')]\" ) ) ) . click ( ) ; assertEquals ( \"Registry ▁ & ▁ Gifting\" , driver . findElement ( By . cssSelector ( \".gr-header\" ) ) . getText ( ) ) ; assertEquals ( \"Find ▁ a ▁ registry ▁ or ▁ gift ▁ list\" , driver . findElement ( By . cssSelector ( \".gr-find-stripe__header\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . isDisplayed ( ) ) ; List < WebElement > cardsElements = driver . findElements ( By . className ( \"gr-registry-types__card\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Wedding ▁ Registry\" , \"Baby ▁ Registry\" , \"Birthday ▁ Gift ▁ List\" , \"Custom ▁ Gift ▁ List\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : cardsElements ) { assertTrue ( element . findElement ( By . xpath ( \". // img\" ) ) . isDisplayed ( ) ) ; actualTitles . add ( element . findElement ( By . className ( \"gr-registry-types__header\" ) ) . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ", "Test Name": "Registry & Gifting", "Test Description": "Verify Registry & Gifting page is displayed properly after clicking the Registry link", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Registry in the top menu", "Registry & Gifting page is displayed", "Find a registry or gift list section is presented. It includes a Search by Registrant name option, search using a dropdown and a Search button", "The following categories are presented, and each of them has a picture: Wedding Registry, Baby Registry, Birthday Gift List, Custom Gift List"]}
{"id": 35, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Customer ▁ Service')]\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"csg-support-topics\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'My ▁ Stuff')]\" ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; element = driver . findElement ( By . id ( \"help-gateway-category-1\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; assertEquals ( \"Where's ▁ My ▁ Stuff?\" , element . findElement ( By . tagName ( \"h3\" ) ) . getText ( ) ) ; List < WebElement > linkElements = driver . findElements ( By . cssSelector ( \"#help-gateway-category-1 ▁ a\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Find ▁ a ▁ Missing ▁ Package ▁ that ▁ Shows ▁ as ▁ Delivered\" , \"Contact ▁ Shipping ▁ Carrier\" , \"Track ▁ Your ▁ Package\" , \"More ▁ in ▁ Where's ▁ My ▁ Stuff\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : linkElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; linkElements . get ( 3 ) . click ( ) ; assertEquals ( \"Where's ▁ My ▁ Stuff?\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Browse Help Topics", "Test Description": "Verify that Browse Help Topics in Customer Service page functions", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Customer Service in the top menu", "3. Scroll down to Browse Help Topics section", "4. hover over Where's My Stuff? ", "Where's My Stuff? Title is presented, along with the links: \nFind a Missing Package that Shows as Delivered\nContact Shipping Carrier\nTrack Your Package\nMore in Where's My Stuff", "5. Click More in Where's My Stuff", "Where's My Stuff? Page is Presented"]}
{"id": 36, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; driver . findElement ( By . className ( \"a-dropdown-container\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[text()='Price: ▁ Low ▁ to ▁ High']\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; List < WebElement > priceElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"a-price-whole\" ) ) ) ; for ( int i = 1 ; i < priceElements . size ( ) - 4 ; i ++ ) { String previousPrice = priceElements . get ( i - 1 ) . getText ( ) + \".\" + priceElements . get ( i - 1 ) . findElement ( By . xpath ( \". // following-sibling::*[@class='a-price-fraction']\" ) ) . getText ( ) ; String currentPrice = priceElements . get ( i ) . getText ( ) + \".\" + priceElements . get ( i ) . findElement ( By . xpath ( \". // following-sibling::*[@class='a-price-fraction']\" ) ) . getText ( ) ; assertTrue ( \"last: ▁ \" + previousPrice + \" ▁ current: ▁ \" + currentPrice , Double . parseDouble ( currentPrice ) >= Double . parseDouble ( previousPrice ) ) ; } } ", "Test Name": "Sort Search Results By Price: Low to High", "Test Description": "Verify sorting search results by price, low to high, works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click the sort drop down", "4. Click Price: Low to High", "Presented items are sorted by price, from low to high"]}
{"id": 37, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; driver . findElement ( By . className ( \"a-dropdown-container\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[text()='Avg. ▁ Customer ▁ Review']\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; List < WebElement > reviewsElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label$='out ▁ of ▁ 5 ▁ stars']\" ) ) ) ; for ( int i = 1 ; i < 20 ; i ++ ) { String previousReview = reviewsElements . get ( i - 1 ) . getAttribute ( \"aria-label\" ) ; String currentReview = reviewsElements . get ( i ) . getAttribute ( \"aria-label\" ) ; assertTrue ( \"last: ▁ \" + previousReview + \" ▁ current: ▁ \" + currentReview , Double . parseDouble ( previousReview . substring ( 0 , previousReview . indexOf ( \" ▁ \" ) ) ) >= Double . parseDouble ( currentReview . substring ( 0 , currentReview . indexOf ( \" ▁ \" ) ) ) ) ; } } ", "Test Name": "Sort Search Results By Avg. Customer Review", "Test Description": "Verify sorting search results by price, low to high, works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click the sort drop down", "4. Click Avg. Customer Review", "Presented items are sorted, avg. review first"]}
{"id": 38, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; driver . findElement ( By . cssSelector ( \"[aria-label='Climate ▁ Pledge ▁ Friendly'] ▁ a\" ) ) . click ( ) ; Thread . sleep ( 2000 ) ; List < WebElement > searchResults = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]\" ) ) ) ; for ( int i = 0 ; i < 20 ; i ++ ) { assertEquals ( \"Climate ▁ Pledge ▁ Friendly\" , searchResults . get ( i ) . findElement ( By . cssSelector ( \".s-cpf-badge\" ) ) . getText ( ) ) ; } element = driver . findElement ( By . cssSelector ( \"[data-action='s-cpf-popover']\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"a-popover-4\" ) ) . getCssValue ( \"display\" ) ) ; assertNotEquals ( \"\" , driver . findElement ( By . cssSelector ( \"#a-popover-4 ▁ .a-color-base\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"#a-popover-4 ▁ .a-text-bold\" ) ) . getText ( ) . contains ( \"PRODUCT ▁ CERTIFICATION\" ) ) ; } ", "Test Name": "Filter Search Results - Climate Pledge Friendly", "Test Description": "Verify cheking the Climate Pledge Friendly checkbox in the search results page works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click the Climate Pledge Friendly checkbox", "Presented items have a Climate Pledge Friendly text", "4. Hover over one of the See 1 certification links", "A popover is presented. It contains information about Climate Pledge Friendly and the certification"]}
{"id": 39, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; By locator = By . xpath ( \" // *[text()='Smartwatches']/..\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'a-text-bold') ▁ and ▁ text()='Smartwatches']\" ) ) ) ; List < WebElement > searchResults = driver . findElements ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]/descendant::a/span[contains(@class, ▁ 'a-text-normal')]\" ) ) ; for ( WebElement result : searchResults ) { String itemName = result . getText ( ) . toLowerCase ( Locale . ROOT ) . replaceAll ( \" ▁ \" , \"\" ) ; assertTrue ( itemName . contains ( \"smartwatch\" ) || itemName . contains ( \"applewatch\" ) ) ; } } ", "Test Name": "Filter Search Results - Department", "Test Description": "Verify using the department filter on search results works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Choose the Smartwatches department on the left ", "The chosen filter is displayed on the left", "All presented items are a Smart Watch or an Apple Watch"]}
{"id": 40, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; By locator = By . xpath ( \" // *[@aria-label='4 ▁ Stars ▁ & ▁ Up']/..\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='4 ▁ Stars ▁ & ▁ Up'] // span[contains(@class, ▁ 'a-text-bold') ▁ and ▁ text()='& ▁ Up']\" ) ) ) ; List < WebElement > reviewsElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label$='out ▁ of ▁ 5 ▁ stars']\" ) ) ) ; for ( WebElement review : reviewsElements ) { String currentReview = review . getAttribute ( \"aria-label\" ) ; assertTrue ( Double . parseDouble ( currentReview . substring ( 0 , currentReview . indexOf ( \" ▁ \" ) ) ) >= 4.0 ) ; } } ", "Test Name": "Filter Search Results - Customer Reviews", "Test Description": "Verify using the Customer Reviews filter on search results works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Choose the 4 Stars & Up on the left ", "The chosen filter is displayed on the left", "All presented items have 4 Stars & Up"]}
{"id": 41, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; By locator = By . xpath ( \" // *[text()='Apple']/..\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'a-text-bold') ▁ and ▁ text()='Apple']\" ) ) ) ; List < WebElement > searchResults = driver . findElements ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]/descendant::a/span[contains(@class, ▁ 'a-text-normal')]\" ) ) ; for ( WebElement result : searchResults ) { assertTrue ( result . getText ( ) . contains ( \"Apple\" ) ) ; } } ", "Test Name": "Filter Search Results - Brand", "Test Description": "Verify using the Brand filter on search results works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Choose the brand Apple", "The chosen filter is displayed on the left", "All presented items are Apple watches"]}
{"id": 42, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; driver . findElement ( By . id ( \"low-price\" ) ) . sendKeys ( \"50\" ) ; driver . findElement ( By . id ( \"high-price\" ) ) . sendKeys ( \"100\" ) ; driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Go')]/preceding-sibling::input[@type='submit']\" ) ) . click ( ) ; List < WebElement > priceElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"a-price-whole\" ) ) ) ; for ( int i = 1 ; i < 10 ; i ++ ) { double dOGPrice = 0 ; if ( priceElements . get ( i ) . findElements ( By . xpath ( \". // ancestor::*[@class='a-price']/following-sibling::*\" ) ) . size ( ) > 0 ) { String originalPrice = priceElements . get ( i ) . findElement ( By . xpath ( \". // ancestor::*[@class='a-price']/following-sibling::* /* [@aria-hidden='true']\" ) ) . getText ( ) ; if ( ! originalPrice . isEmpty ( ) ) { originalPrice = originalPrice . substring ( 1 ) ; dOGPrice = Double . parseDouble ( originalPrice ) ; } } String currentPrice = priceElements . get ( i ) . getText ( ) + \".\" + priceElements . get ( i ) . findElement ( By . xpath ( \". // following-sibling::*[@class='a-price-fraction']\" ) ) . getText ( ) ; double price = Double . parseDouble ( currentPrice ) ; assertTrue ( i + \" ▁ price: ▁ \" + currentPrice + \", ▁ og ▁ price: ▁ \" + dOGPrice , price >= 50.0 && price <= 100.0 || dOGPrice >= 50.0 && dOGPrice <= 100.0 ) ; } } ", "Test Name": "Filter Search Results - Price", "Test Description": "Verify using the Price filter on search results works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Set Min price to 50", "4. Set Max price to 100", "5. Click the Done button in the range price area", "Presented items are in the chosen price range"]}
{"id": 43, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( \"watch\" , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; driver . findElement ( By . xpath ( \" // *[@aria-label='4 ▁ Stars ▁ & ▁ Up']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[@aria-label='4 ▁ Stars ▁ & ▁ Up'] // span[contains(@class, ▁ 'a-text-bold') ▁ and ▁ text()='& ▁ Up']\" ) ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Apple']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(@class, ▁ 'a-text-bold') ▁ and ▁ text()='Apple']\" ) ) ) ; List < WebElement > reviewsElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \"[aria-label$='out ▁ of ▁ 5 ▁ stars']\" ) ) ) ; for ( WebElement review : reviewsElements ) { String currentReview = review . getAttribute ( \"aria-label\" ) ; assertTrue ( Double . parseDouble ( currentReview . substring ( 0 , currentReview . indexOf ( \" ▁ \" ) ) ) >= 4.0 ) ; } List < WebElement > searchResults = driver . findElements ( By . xpath ( \" // *[contains(@data-cel-widget, ▁ 'MAIN-SEARCH_RESULTS')]/descendant::a/span[contains(@class, ▁ 'a-text-normal')]\" ) ) ; for ( WebElement result : searchResults ) { assertTrue ( result . getText ( ) . contains ( \"Apple\" ) ) ; } } ", "Test Name": "Use Various Filters on Search Results", "Test Description": "Verify using both a brand filter and a customer reviews filter on search results works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Choose the 4 Stars & Up on the left ", "The chosen filter is displayed on the left", "4. Choose the brand Apple", "The chosen filter is displayed on the left", "All presented items are Apple branded and have 4 Stars & Up"]}
{"id": 44, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"nav-flyout-searchAjax\" ) , \"style\" , \"display: ▁ block\" ) ) ; List < WebElement > suggestionsElements = driver . findElements ( By . cssSelector ( \"#suggestions ▁ > ▁ .s-suggestion\" ) ) ; for ( WebElement result : suggestionsElements ) { assertTrue ( result . getText ( ) . contains ( \"watch\" ) ) ; } String selectedSuggestion = suggestionsElements . get ( 3 ) . getText ( ) ; suggestionsElements . get ( 3 ) . click ( ) ; String searchWord = driver . findElement ( By . cssSelector ( \".a-color-state.a-text-bold\" ) ) . getText ( ) ; assertEquals ( selectedSuggestion , searchWord . replaceAll ( \"\\\"\" , \"\" ) ) ; } ", "Test Name": "Search Suggestions", "Test Description": "Verify that search suggestion works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Write in the search box 'watch'", "User is presented with search suugestions that contain the word 'watch'", "3. Click one of the suggestions", "results for the chosen suggestion are presented"]}
{"id": 45, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; wait . until ( ExpectedConditions . attributeContains ( By . id ( \"nav-flyout-searchAjax\" ) , \"style\" , \"display: ▁ block\" ) ) ; List < WebElement > suggestionsElements = driver . findElements ( By . cssSelector ( \"#suggestions ▁ > ▁ .s-suggestion\" ) ) ; for ( WebElement result : suggestionsElements ) { assertTrue ( result . getText ( ) . contains ( \"watch\" ) ) ; } assertEquals ( \"by ▁ price\" , driver . findElement ( By . cssSelector ( \".discover-tr ▁ span\" ) ) . getText ( ) ) ; List < WebElement > priceSuggestionsElements = driver . findElements ( By . cssSelector ( \".discover-tr-carousel-container ▁ ▁ a\" ) ) ; Set < WebElement > set = new HashSet < > ( priceSuggestionsElements ) ; assertEquals ( set . size ( ) , priceSuggestionsElements . size ( ) ) ; String priceSelectedSuggestion = priceSuggestionsElements . get ( 2 ) . getText ( ) ; double minLimit = Double . parseDouble ( priceSelectedSuggestion . substring ( 1 , priceSelectedSuggestion . indexOf ( ' ▁ ' ) ) ) ; double maxLimit = Double . parseDouble ( priceSelectedSuggestion . substring ( priceSelectedSuggestion . lastIndexOf ( '$' ) + 1 ) ) ; priceSuggestionsElements . get ( 2 ) . click ( ) ; assertEquals ( priceSelectedSuggestion , driver . findElement ( By . cssSelector ( \"#priceRefinements ▁ a ▁ > ▁ .a-text-bold\" ) ) . getText ( ) ) ; List < WebElement > priceElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"a-price-whole\" ) ) ) ; for ( int i = 1 ; i < 10 ; i ++ ) { double dOGPrice = 0 ; if ( priceElements . get ( i ) . findElements ( By . xpath ( \". // ancestor::*[@class='a-price']/following-sibling::*\" ) ) . size ( ) > 0 ) { String originalPrice = priceElements . get ( i ) . findElement ( By . xpath ( \". // ancestor::*[@class='a-price']/following-sibling::* /* [@aria-hidden='true']\" ) ) . getText ( ) ; if ( ! originalPrice . isEmpty ( ) ) { originalPrice = originalPrice . substring ( 1 ) ; dOGPrice = Double . parseDouble ( originalPrice ) ; } } String currentPrice = priceElements . get ( i ) . getText ( ) + \".\" + priceElements . get ( i ) . findElement ( By . xpath ( \". // following-sibling::*[@class='a-price-fraction']\" ) ) . getText ( ) ; double price = Double . parseDouble ( currentPrice ) ; assertTrue ( i + \" ▁ price: ▁ \" + currentPrice + \", ▁ og ▁ price: ▁ \" + dOGPrice , price >= minLimit && price <= maxLimit || dOGPrice >= minLimit && dOGPrice <= maxLimit ) ; } } ", "Test Name": "Search Suggestions - By Price", "Test Description": "Verify that search suggestion of by price works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Write in the search box 'watch'", "User is presented with search suugestions that contain the word 'watch', Including a by price option, with buttons that refers to different prices", "3. Click the $50 to $100 button", "Price range is presented on the left", "Presented items are in the chosen price range"]}
{"id": 46, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; String [ ] itemsNames = new String [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_\" + ( i + 2 ) + \"'] ▁ a.a-text-normal\" ) ) ) ; itemsNames [ i ] = element . getText ( ) ; element . click ( ) ; assertEquals ( itemsNames [ i ] , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; } driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-item-count='\" + ( i + 1 ) + \"'] ▁ .sc-product-link ▁ .a-truncate-cut\" ) ) ) ; assertTrue ( itemsNames [ 1 - i ] . contains ( element . getText ( ) ) || element . getText ( ) . contains ( itemsNames [ 1 - i ] ) ) ; } } ", "Test Name": "Add Different Items to Cart", "Test Description": "Verify that Add to Cart function works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click the Add to Cart button", "5. Go back to search results page", "6. Click another presented result item", "The item's name is as was presented in the results page", "7. Click the Add to Cart button", "8. Click the cart symbol in the top right area", "Both items are presented in the cart"]}
{"id": 47, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"nav-flyout-ya-signin\" ) ) . isDisplayed ( ) ) ; List < WebElement > titlesElements = driver . findElements ( By . className ( \"nav-title\" ) ) ; assertEquals ( \"Your ▁ Lists\" , titlesElements . get ( 0 ) . getText ( ) ) ; assertEquals ( \"Your ▁ Account\" , titlesElements . get ( 1 ) . getText ( ) ) ; for ( WebElement element : titlesElements ) { assertTrue ( element . findElements ( By . xpath ( \". // ../a\" ) ) . size ( ) > 1 ) ; } driver . findElement ( By . xpath ( \" // *[text()='AmazonSmile ▁ Charity ▁ Lists']/..\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[alt='AmazonSmile ▁ logo']\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"Charity ▁ Lists\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . className ( \"donate-amount\" ) ) . isDisplayed ( ) ) ; List < WebElement > buttons = driver . findElements ( By . xpath ( \" // a /* [contains(text(),'Get ▁ started')]\" ) ) ; assertEquals ( 2 , buttons . size ( ) ) ; buttons . get ( 0 ) . click ( ) ; assertEquals ( \"You ▁ shop. ▁ Amazon ▁ gives.\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertEquals ( \"Email ▁ or ▁ mobile ▁ phone ▁ number\" , driver . findElement ( By . className ( \"a-form-label\" ) ) . getText ( ) ) ; } ", "Test Name": "AmazonSmile", "Test Description": "Verify that Amazon Smile page is displayed properly after clicking the AmazonSmile Charity Lists link", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the Account & Lists", "A sign in button is presented, in addition to links under Your Lists and Your Account categories", "3. Click AmazonSmile Charity Lists", "AmazonSmile page is presented", "Charity Lists title is presented", "The current donated amount is presented", "There are two Get Started buttons", "4. Click a Get Started button", "You shop. Amazon gives. Page is presented, including a textbox for email or mobile phone number"]}
{"id": 48, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"nav-flyout-ya-signin\" ) ) . isDisplayed ( ) ) ; List < WebElement > titlesElements = driver . findElements ( By . className ( \"nav-title\" ) ) ; assertEquals ( \"Your ▁ Lists\" , titlesElements . get ( 0 ) . getText ( ) ) ; assertEquals ( \"Your ▁ Account\" , titlesElements . get ( 1 ) . getText ( ) ) ; for ( WebElement element : titlesElements ) { assertTrue ( element . findElements ( By . xpath ( \". // ../a\" ) ) . size ( ) > 1 ) ; } driver . findElement ( By . xpath ( \" // *[text()='Music ▁ Library']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[alt='Amazon ▁ Music']\" ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[title='Sign ▁ in ▁ button']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"navbarSearchInput\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElements ( By . tagName ( \"music-vertical-item\" ) ) . size ( ) > 3 ) ; driver . findElement ( By . cssSelector ( \"[icon-name='play']\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"dialog\" ) ) . isDisplayed ( ) ) ; assertEquals ( \"Sign ▁ In ▁ for ▁ Free ▁ Streaming ▁ Music\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . cssSelector ( \"[icon-name='cancel']\" ) ) . click ( ) ; assertEquals ( 0 , driver . findElements ( By . id ( \"dialog\" ) ) . size ( ) ) ; } ", "Test Name": "Music Library", "Test Description": "Verify that Amazon Music page is displayed properly after clicking the Music Library link", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the Account & Lists", "A sign in button is presented, in addition to links under Your Lists and Your Account categories", "3. Click Music Library", "Amazon Music page is displayed", "There is a sign in button, search option and a number of music items", "4. Click play on one of the music items", "A dialog windows pops up, suggesting to Sign In for Free Streaming Music", "5. Click the cancel button", "The dialog window isn't displayes anymore"]}
{"id": 49, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Browsing ▁ History']/..\" ) ) . click ( ) ; assertEquals ( \"Browsing ▁ history\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[title='\" + itemName + \"']\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Browsing History", "Test Description": "Verify that the browsing history page is displayed properly", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Hover over the Account & Lists", "5. Click Browsing History", "Browsing History page is displayed", "The presented item from before is presented"]}
{"id": 50, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Browsing ▁ History']/..\" ) ) . click ( ) ; assertEquals ( \"Browsing ▁ history\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; element = driver . findElement ( By . cssSelector ( \"[title='\" + itemName + \"']\" ) ) ; element . findElement ( By . xpath ( \". // ancestor::*[@data-type='ViewedItems']/descendant::*[contains(@class, ▁ 'ybh-remove')] // input\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( element . findElement ( By . xpath ( \". // ancestor::*[@data-type='ViewedItems'] /* [contains(@class, ▁ 'removed')]\" ) ) , \"class\" , \"hidden\" ) ) ) ; } ", "Test Name": "Browsing History - Remove from view", "Test Description": "Verify that the Remove from view function on the browsing history page is working", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Hover over the Account & Lists", "5. Click Browsing History", "Browsing History page is displayed", "6. Click Remove from view on an item", "Item is removed"]}
{"id": 51, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_4'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // *[text()='Browsing ▁ History']/..\" ) ) . click ( ) ; assertEquals ( \"Browsing ▁ history\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . xpath ( \" // *[contains(text(), ▁ 'Manage ▁ history')]\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . cssSelector ( \"[aria-expanded]\" ) ) . getCssValue ( \"display\" ) ) ; driver . findElement ( By . cssSelector ( \"[aria-labelledby='btn_clear-announce']\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"a-popover-3\" ) ) . getCssValue ( \"display\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-action='delete-all'] ▁ > ▁ *\" ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . click ( element ) . perform ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"a-popover-3\" ) , \"style\" , \"visibility: ▁ visible\" ) ) ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"no_items_message\" ) ) . getCssValue ( \"display\" ) ) ; } ", "Test Name": "Browsing History - Remove all items from view", "Test Description": "Verify that the Remove all items from view function on the browsing history page is working", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Hover over the Account & Lists", "5. Click Browsing History", "Browsing History page is displayed", "6. Click Manage history", "A managing section is expanded", "7. Click Remove all items from view", "a popup is displayed", "8. Click the Remove all items from view button", "The message - You have no recently viewed items. - is displayed"]}
{"id": 52, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"twotabsearchtextbox\" ) ) ; element . sendKeys ( \"watch\" ) ; element . submit ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-cel-widget='search_result_2'] ▁ a.a-text-normal\" ) ) ) ; String itemName = element . getText ( ) ; element . click ( ) ; assertEquals ( itemName , driver . findElement ( By . id ( \"productTitle\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"add-to-cart-button\" ) ) . click ( ) ; driver . findElement ( By . id ( \"nav-cart\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"cart-recs-carousel\" ) ) . isDisplayed ( ) ) ; String title = driver . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ; assertTrue ( \"Customers ▁ who ▁ bought ▁ items ▁ in ▁ your ▁ cart ▁ also ▁ bought\" . equals ( title ) || ( title . contains ( \"Customers ▁ who ▁ shopped ▁ for\" ) && title . contains ( \"also ▁ shopped ▁ for:\" ) ) ) ; assertTrue ( driver . findElements ( By . cssSelector ( \"#cart-recs-carousel ▁ .a-carousel-card\" ) ) . size ( ) > 1 ) ; } ", "Test Name": "Cart's Suggested Items", "Test Description": "After adding items to your cart, There are suggested items based on the added items", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Search for 'watch'", "3. Click a presented result item", "The item's name is as was presented in the results page", "4. Click the Add to Cart button", "5. Click the cart symbol in the top right area", "\"Customers who bought items in your cart also bought\" section is presented, and there are items in it."]}
{"id": 53, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; element = driver . findElement ( By . id ( \"nav-link-accountList\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-accountList\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( driver . findElement ( By . id ( \"nav-flyout-ya-signin\" ) ) . isDisplayed ( ) ) ; List < WebElement > titlesElements = driver . findElements ( By . className ( \"nav-title\" ) ) ; assertEquals ( \"Your ▁ Lists\" , titlesElements . get ( 0 ) . getText ( ) ) ; assertEquals ( \"Your ▁ Account\" , titlesElements . get ( 1 ) . getText ( ) ) ; for ( WebElement element : titlesElements ) { assertTrue ( element . findElements ( By . xpath ( \". // ../a\" ) ) . size ( ) > 1 ) ; } driver . findElement ( By . id ( \"nav-flyout-ya-signin\" ) ) . click ( ) ; assertEquals ( \"Sign-In\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . className ( \"a-link-nav-icon\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"gw-desktop-herotator\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Sign In Page - Home Page", "Test Description": "Verify user can navigate from Sign In page to home page using the amazon logo", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Hover over the Account & Lists", "A sign in button is presented, in addition to links under Your Lists and Your Account categories", "3. Click the Sign in button", "Sign-In page is displayed", "4. Click the amazon logo", "The home page is presented"]}
{"id": 54, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(),'Deals')]\" ) ) . click ( ) ; assertEquals ( \"Deals ▁ and ▁ Promotions\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; driver . findElement ( By . id ( \"nav-logo-sprites\" ) ) . click ( ) ; assertTrue ( driver . findElement ( By . id ( \"gw-desktop-herotator\" ) ) . isDisplayed ( ) ) ; } ", "Test Name": "Today's Deals - Home Page", "Test Description": "Verify user can navigate from Today's Deals page to home page using the amazon logo", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click the Today's Deals option on the navigation bar", "The header of the page is Deals and Promotions", "3. Click the amazon logo", "The home page is presented"]}
{"id": 55, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Registry')]\" ) ) ) . click ( ) ; assertEquals ( \"Find ▁ a ▁ registry ▁ or ▁ gift ▁ list\" , driver . findElement ( By . cssSelector ( \".gr-find-stripe__header\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . sendKeys ( \"Ali\" ) ; driver . findElement ( By . cssSelector ( \"[data-a-class='gr-find-stripe__type']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) , \"aria-pressed\" , \"true\" ) ) ; driver . findElement ( By . xpath ( \" // option[contains(text(), ▁ 'Birthday ▁ Gift ▁ List')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"gr-search-result-title-id\" ) , \"Search ▁ results ▁ for ▁ \\\"Ali\\\"\" ) ) ; List < WebElement > nameElements = driver . findElements ( By . cssSelector ( \"#search-result-container ▁ .gr-search-registry-name\" ) ) ; for ( WebElement name : nameElements ) { assertTrue ( name . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"ali\" ) ) ; } } ", "Test Name": "Find a registry or gift list", "Test Description": "Verify Find a registry or gift list search option works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Registry in the top menu", "Find a registry or gift list section is presented. It includes a Search by Registrant name option, search using a dropdown and a Search button", "3. Write 'Ali' in the search box", "4. Click the dropdown", "Dropdown options are presented", "5. Choose 'Birthday Gift List' from the dropdown", "6. Click Search", "Search results for \"Ali\" are presented", "Each result contains the word 'ali'"]}
{"id": 56, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Registry')]\" ) ) ) . click ( ) ; assertEquals ( \"Find ▁ a ▁ registry ▁ or ▁ gift ▁ list\" , driver . findElement ( By . cssSelector ( \".gr-find-stripe__header\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . sendKeys ( \"Ali\" ) ; driver . findElement ( By . cssSelector ( \"[data-a-class='gr-find-stripe__type']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) , \"aria-pressed\" , \"true\" ) ) ; driver . findElement ( By . xpath ( \" // option[contains(text(), ▁ 'Birthday ▁ Gift ▁ List')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".gr-search-criteria-location-drop-down ▁ > ▁ *\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='California']\" ) ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"[data-action='grSearchButton'] ▁ [type='submit']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; List < WebElement > locationElements = driver . findElements ( By . cssSelector ( \"#search-result-container ▁ .gr-search-registry-event-location\" ) ) ; for ( WebElement location : locationElements ) { assertEquals ( \"CA\" , location . getText ( ) ) ; } } ", "Test Name": "Find a registry or gift list - Change Location", "Test Description": "Verify the location filter in the Find a registry or gift list search option works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Registry in the top menu", "Find a registry or gift list section is presented. It includes a Search by Registrant name option, search using a dropdown and a Search button", "3. Write 'Ali' in the search box", "4. Click the dropdown", "Dropdown options are presented", "5. Choose 'Birthday Gift List' from the dropdown", "6. Click Search", "7. In the location dropdown, choose California", "8. Click Search for a Birthday Gift List button", "Each result is from California"]}
{"id": 57, "website": "Amazon", "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Registry')]\" ) ) ) . click ( ) ; assertEquals ( \"Find ▁ a ▁ registry ▁ or ▁ gift ▁ list\" , driver . findElement ( By . cssSelector ( \".gr-find-stripe__header\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . sendKeys ( \"Ali\" ) ; driver . findElement ( By . cssSelector ( \"[data-a-class='gr-find-stripe__type']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) , \"aria-pressed\" , \"true\" ) ) ; driver . findElement ( By . xpath ( \" // option[contains(text(), ▁ 'Birthday ▁ Gift ▁ List')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".gr-search-month-drop-down-wrapper ▁ > ▁ *\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='January']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".gr-search-year-drop-down-wrapper ▁ > ▁ *\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='2020']\" ) ) ) . click ( ) ; driver . findElement ( By . cssSelector ( \"[data-action='grSearchButton'] ▁ [type='submit']\" ) ) . click ( ) ; Thread . sleep ( 1000 ) ; List < WebElement > nameElements = driver . findElements ( By . cssSelector ( \"#search-result-container ▁ .gr-search-registry-name\" ) ) ; for ( WebElement name : nameElements ) { assertTrue ( name . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"ali\" ) ) ; } List < WebElement > dateElements = driver . findElements ( By . cssSelector ( \"#search-result-container ▁ .gr-search-registry-date\" ) ) ; for ( WebElement date : dateElements ) { String dateText = date . getText ( ) ; String year = dateText . substring ( dateText . indexOf ( \",\" ) + 1 ) ; assertTrue ( Integer . parseInt ( year ) >= 2020 ) ; } } ", "Test Name": "Find a registry or gift list - Date Range", "Test Description": "Verify the date range filter in the Find a registry or gift list search option works", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Registry in the top menu", "Find a registry or gift list section is presented. It includes a Search by Registrant name option, search using a dropdown and a Search button", "3. Write 'Ali' in the search box", "4. Click the dropdown", "Dropdown options are presented", "5. Choose 'Birthday Gift List' from the dropdown", "6. Click Search", "7. In the Date Range dropdowns choose January and 2020", "Each result contains the word 'ali' and is from after January 2020"]}
{"id": 58, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Registry')]\" ) ) ) . click ( ) ; assertEquals ( \"Find ▁ a ▁ registry ▁ or ▁ gift ▁ list\" , driver . findElement ( By . cssSelector ( \".gr-find-stripe__header\" ) ) . getText ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . isDisplayed ( ) ) ; driver . findElement ( By . cssSelector ( \"[placeholder='Search ▁ by ▁ Registrant ▁ name']\" ) ) . sendKeys ( \"Ali\" ) ; driver . findElement ( By . cssSelector ( \"[data-a-class='gr-find-stripe__type']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . attributeToBe ( By . cssSelector ( \"[data-action='a-dropdown-select']\" ) , \"aria-pressed\" , \"true\" ) ) ; driver . findElement ( By . xpath ( \" // option[contains(text(), ▁ 'Birthday ▁ Gift ▁ List')]\" ) ) . click ( ) ; driver . findElement ( By . xpath ( \" // button[@aria-label='Search']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . id ( \"gr-search-result-title-id\" ) , \"Search ▁ results ▁ for ▁ \\\"Ali\\\"\" ) ) ; List < WebElement > nameElements = driver . findElements ( By . cssSelector ( \"#search-result-container ▁ .gr-search-registry-name\" ) ) ; for ( WebElement name : nameElements ) { assertTrue ( name . getText ( ) . toLowerCase ( Locale . ROOT ) . contains ( \"ali\" ) ) ; } element = driver . findElements ( By . cssSelector ( \"#search-result-container ▁ .gr-search-registry-title ▁ > ▁ a\" ) ) . get ( 2 ) ; String listName = element . getText ( ) ; element . click ( ) ; assertEquals ( listName , driver . findElement ( By . className ( \"gr-guest-summary-registry-name\" ) ) . getText ( ) ) ; assertTrue ( driver . findElements ( By . className ( \"gr-product-tile\" ) ) . size ( ) > 0 ) ; } ", "Test Name": "Watch A Gift List", "Test Description": "Verify Clicking a Registry list shows the registry's page", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Registry in the top menu", "Find a registry or gift list section is presented. It includes a Search by Registrant name option, search using a dropdown and a Search button", "3. Write 'Ali' in the search box", "4. Click the dropdown", "Dropdown options are presented", "5. Choose 'Birthday Gift List' from the dropdown", "6. Click Search", "Search results for \"Ali\" are presented", "7. Click one of the lists' names", "The list with the correct name is displayed", "There are presented items in the list"]}
{"id": 59, "website": "Amazon", "code": " void function ( ) { driver . get ( \"https: // www.amazon.com/\" ) ; Actions actions = new Actions ( driver ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"icp-nav-flyout\" ) ) ) ; actions . moveByOffset ( 0 , 0 ) . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"nav-flyout-icp\" ) ) . getCssValue ( \"display\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='English ▁ - ▁ EN']/..\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[(text()='Registry')]\" ) ) ) . click ( ) ; driver . findElement ( By . className ( \"gr-registry-types__card\" ) ) . click ( ) ; assertEquals ( \"Amazon ▁ Wedding\" , driver . findElement ( By . xpath ( \" // img/parent::a\" ) ) . getAttribute ( \"aria-label\" ) ) ; driver . findElement ( By . xpath ( \" // a[contains(text(), ▁ 'Create ▁ your ▁ registry')]\" ) ) . click ( ) ; assertEquals ( \"Sign-In\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ", "Test Name": "Create A Registry - Not Logged In", "Test Description": "Verify Creating a wedding registry requieres signing in", "Preconditions": ["1. page is displayed in English"], "Steps": ["1. Enter the below mentioned URL: https://www.amazon.com/", "2. Click Registry in the top menu", "3. Click Wedding Registry box", "Amazon Wedding page is displayed", "4. Click Create your registry button", "Sign-In page is displayed"]}
