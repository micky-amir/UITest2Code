{
  "id": 259,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = driver . findElement ( By . className ( \"trending-bar__link\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , title . toUpperCase ( Locale . ROOT ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".trendingBar\" ) ) . isDisplayed ( ) ) ; List < WebElement > links = driver . findElements ( By . cssSelector ( \".trendingEl ▁ .trendingLink\" ) ) ; assertEquals ( 4 , links . size ( ) ) ; element = links . get ( 1 ) ; title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , title . toUpperCase ( Locale . ROOT ) ) ) ; } ",
  "Test Name": "TRENDING ON RT",
  "Test Description": "The goal is to verify the trending bar is displayed and functions",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click one of the Trending bar links, An article that its title contains the link's name is presented, The trending bar is stull presented, including 4 links., 2. Click another link in the bar, An article that its title contains the link's name is presented."
}
{
  "id": 260,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h2[text()='New ▁ & ▁ Upcoming ▁ Movies']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \"#dynamic-poster-list ▁ [data-qa='tile']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; String title = element . findElement ( By . className ( \"p--small\" ) ) . getText ( ) ; String score = element . findElement ( By . tagName ( \"score-pairs\" ) ) . getAttribute ( \"criticsscore\" ) ; element . findElement ( By . cssSelector ( \"[slot='caption']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , title . toUpperCase ( Locale . ROOT ) ) ) ; assertEquals ( score , driver . findElement ( By . tagName ( \"score-board\" ) ) . getAttribute ( \"tomatometerscore\" ) ) ; } ",
  "Test Name": "NEW & UPCOMING MOVIES - Caption",
  "Test Description": "Clicking the caption of a movie in the NEW & UPCOMING MOVIES section works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "NEW & UPCOMING MOVIES section is visible, with movies tiles, 1. Click one of the movie tiles caption, A movie's page will be displayed with the correct movie title and Tomatometer"
}
{
  "id": 261,
  "website": "RottenTomatoes",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h2[text()='New ▁ & ▁ Upcoming ▁ Movies']\" ) ) . isDisplayed ( ) ) ; element = driver . findElement ( By . cssSelector ( \"#dynamic-poster-list ▁ [data-qa='tile']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element = element . findElement ( By . cssSelector ( \"[slot='imageAction']\" ) ) ; String title = element . getAttribute ( \"data-title\" ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".player\" ) ) ) ; driver . switchTo ( ) . frame ( element ) ; Thread . sleep ( 2000 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"tpBottomFloatRegion\" ) ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; By locator = By . cssSelector ( \".tpTimeInfo ▁ span\" ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( locator ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"--:--\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"0:00\" ) ) ) ; driver . switchTo ( ) . defaultContent ( ) ; driver . findElement ( By . xpath ( \" // a[contains(text(), ▁ 'See ▁ movie ▁ details')]\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , title . toUpperCase ( Locale . ROOT ) ) ) ; } ",
  "Test Name": "NEW & UPCOMING MOVIES - Movie Trailer",
  "Test Description": "Clicking the image of a movie in the NEW & UPCOMING MOVIES section, and later on the See movie details button works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "NEW & UPCOMING MOVIES section is visible, with movies tiles, 1. Click one of the movie tiles image, A player view will pop up, starting playing automatically., 2. Click See movie details button, A movie's page will be displayed with the correct movie title "
}
{
  "id": 262,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . className ( \"search-text\" ) ) . sendKeys ( \"Encanto\" ) ; driver . findElement ( By . className ( \"search-submit\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Search ▁ Results ▁ for ▁ : ▁ \\\"Encanto\\\"\" ) ) ; } ",
  "Test Name": "Search Function",
  "Test Description": "The goal is to verify the search option works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Write 'Encanto' in the search bar, 2. Click the search submit button, Search Results for : \"Encanto\" will be presented"
}
{
  "id": 263,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . className ( \"search-text\" ) ) . sendKeys ( \"Encanto\" ) ; element = driver . findElement ( By . cssSelector ( \"[data-qa='search-results-overlay']\" ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . attributeToBe ( element , \"searchterm\" , \"Encanto\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = driver . findElement ( By . cssSelector ( \"[data-qa='search-results-link']\" ) ) ; assertTrue ( element . getAttribute ( \"href\" ) . contains ( \"encanto_2021\" ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-qa='movie-main-column']\" ) ) ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"ENCANTO\" ) ) ; } ",
  "Test Name": "Search Suggestions",
  "Test Description": "The goal is to verify the search suggestions are displayed after writing a search term",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Write 'Encanto' in the search bar, Search Results overlay will be presented, with the first suggestion Encanto (2021), 2. Click the first suggestion, A movie's page will be displayed with the movie title Encanto"
}
{
  "id": 264,
  "website": "RottenTomatoes",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; By activeTitleLocator = By . cssSelector ( \"#headliners ▁ .headlineItem.active ▁ h2\" ) ; element = driver . findElement ( By . cssSelector ( \"button[data-slide='next']\" ) ) ; String text1 = driver . findElement ( activeTitleLocator ) . getText ( ) ; Thread . sleep ( 1000 ) ; element . click ( ) ; Thread . sleep ( 1000 ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( By . cssSelector ( \"#headliners ▁ .headlineItem.active ▁ h2\" ) , text1 ) ) ) ; String text2 = driver . findElement ( activeTitleLocator ) . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( activeTitleLocator , text2 ) ) ) ; String text3 = driver . findElement ( activeTitleLocator ) . getText ( ) ; assertNotEquals ( text1 , text3 ) ; driver . findElement ( By . cssSelector ( \"button[data-slide='prev']\" ) ) ; wait . until ( ExpectedConditions . textToBe ( activeTitleLocator , text3 ) ) ; } ",
  "Test Name": "Headliners Carousel Change Manually",
  "Test Description": "Verify that clicking the next and previous buttons in the headliners carousel works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the next button in the headliners carousel, The presented item will change, 2. Click the next button again, The presented item will change again, to a different item than the first ones, 3. Click the previous button, The presented item will be the previous displayed one"
}
{
  "id": 265,
  "website": "RottenTomatoes",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; By activeTitleLocator = By . cssSelector ( \"#headliners ▁ .headlineItem.active ▁ h2\" ) ; String text1 = driver . findElement ( activeTitleLocator ) . getText ( ) ; Thread . sleep ( 6000 ) ; String text2 = driver . findElement ( activeTitleLocator ) . getText ( ) ; assertNotEquals ( text1 , text2 ) ; Thread . sleep ( 6000 ) ; String text3 = driver . findElement ( activeTitleLocator ) . getText ( ) ; assertNotEquals ( text2 , text3 ) ; assertNotEquals ( text1 , text3 ) ; } ",
  "Test Name": "Headliners Carousel Change Automatically",
  "Test Description": "Verify that the items in the headliners carousel change automatically",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "An item will be presented in the headliners carousel, 1. Wait 6 seconds, A different item will be presented in the headliners carousel, 2. Wait another 6 seconds, A different item will be presented in the headliners carousel"
}
{
  "id": 266,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . elementToBeClickable ( By . cssSelector ( \"#headliners ▁ .headlineItem.active ▁ h2\" ) ) ) ; String url = element . findElement ( By . xpath ( \". // ancestor::a\" ) ) . getAttribute ( \"href\" ) ; element . click ( ) ; wait . until ( ExpectedConditions . urlToBe ( url ) ) ; } ",
  "Test Name": "Headliners Carousel Click",
  "Test Description": "Verify that clicking an item in the headliners carousel works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the Item presented in the headliners carousel, A page will be displayed with the same URL as the link of the item in the carousel"
}
{
  "id": 267,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; List < WebElement > spotlights = driver . findElements ( By . cssSelector ( \".homepage-spotlight\" ) ) ; assertEquals ( 2 , spotlights . size ( ) ) ; element = spotlights . get ( 1 ) ; String title = element . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , title ) ) ; assertTrue ( driver . findElement ( By . className ( \"articleContentBody\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "Homepage Spotlight",
  "Test Description": "Verify there is a spotlight in the homepage, and that clicking it gets the user to an article page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "2 Spotlights are presented in the homepage, 1. Click one of the spotlights, A page will be loaded with a title that contains the caption text from the homepage, The page will contain an article. "
}
{
  "id": 268,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='New ▁ & ▁ Upcoming ▁ Movies']/following-sibling::a\" ) ) ; assertEquals ( \"VIEW ▁ ALL\" , element . getText ( ) ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"COMING ▁ SOON\" ) ) ; String stringExpectedNumber = driver . findElement ( By . id ( \"count-link\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] ; int expectedNumber = Integer . parseInt ( stringExpectedNumber ) ; assertEquals ( expectedNumber , driver . findElements ( By . className ( \"poster_container\" ) ) . size ( ) ) ; List < WebElement > dates = driver . findElements ( By . className ( \"release-date\" ) ) ; assertEquals ( expectedNumber , dates . size ( ) ) ; for ( WebElement date : dates ) { assertTrue ( date . getText ( ) . startsWith ( \"Available\" ) ) ; } } ",
  "Test Name": "NEW & UPCOMING MOVIES - VIEW ALL",
  "Test Description": "Verify that clicking the VIEW ALL button in the NEW & UPCOMING MOVIES section works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the VIEW ALL button in the NEW & UPCOMING MOVIES, A page with the title COMING SOON will be displayed, The number of displayed posters will be as mentioned in the count link and all the posters contain an information about the release date that starts with the word Available."
}
{
  "id": 269,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='New ▁ & ▁ Upcoming ▁ Movies']/following-sibling::a\" ) ) ; assertEquals ( \"VIEW ▁ ALL\" , element . getText ( ) ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"COMING ▁ SOON\" ) ) ; By locator = By . cssSelector ( \"btn.view-icon:nth-of-type(2)\" ) ; driver . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( locator , \"class\" , \"active\" ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".mb-movies\" ) ) . getAttribute ( \"class\" ) . contains ( \"list-view\" ) ) ; } ",
  "Test Name": "NEW & UPCOMING MOVIES - VIEW ALL - List View",
  "Test Description": "Verify that clicking that it is possible to change the view to list view in the VIEW ALL - NEW & UPCOMING MOVIES page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the VIEW ALL button in the NEW & UPCOMING MOVIES, A page with the title COMING SOON will be displayed, 2. Click on the second view-icon, The movies will be displayed in a list-view and the recently clicked butoon will become active."
}
{
  "id": 270,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='New ▁ & ▁ Upcoming ▁ Movies']/following-sibling::a\" ) ) ; assertEquals ( \"VIEW ▁ ALL\" , element . getText ( ) ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"COMING ▁ SOON\" ) ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . id ( \"tomatometerFilter\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . className ( \"dropdown-menu\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( element . findElement ( By . cssSelector ( \".slider\" ) ) . isDisplayed ( ) ) ; element = element . findElement ( By . cssSelector ( \".certified-fresh-checkbox ▁ input\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".tomatometerScore\" ) , \"70% ▁ — ▁ 100%\" ) ) ; List < WebElement > scores = driver . findElements ( By . cssSelector ( \".movie_info ▁ .tMeterScore\" ) ) ; for ( WebElement score : scores ) { int scoreNumber = Integer . parseInt ( score . getText ( ) . replace ( \"%\" , \"\" ) ) ; assertTrue ( scoreNumber >= 70 && scoreNumber <= 100 ) ; } } ",
  "Test Name": "NEW & UPCOMING MOVIES - VIEW ALL - Certified Fresh Only",
  "Test Description": "Verify that clicking that clicking the Certified Fresh Only button in the VIEW ALL - NEW & UPCOMING MOVIES page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the VIEW ALL button in the NEW & UPCOMING MOVIES, A page with the title COMING SOON will be displayed, 2. Hover over the Tomatometer Filter, A dropdown menu will be presented with a slider and a Certified Fresh Only check box, 3. Check the Certified Fresh Only, The presented movies will have tomatometer score between 70 and 100, and these will be the limits in the Tomatometer filter button."
}
{
  "id": 271,
  "website": "RottenTomatoes",
  "code": " void function ( ) throws InterruptedException { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='New ▁ & ▁ Upcoming ▁ Movies']/following-sibling::a\" ) ) ; assertEquals ( \"VIEW ▁ ALL\" , element . getText ( ) ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"COMING ▁ SOON\" ) ) ; Actions actions = new Actions ( driver ) ; element = driver . findElement ( By . id ( \"tomatometerFilter\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . className ( \"dropdown-menu\" ) ) . getCssValue ( \"display\" ) ) ; assertTrue ( element . findElement ( By . cssSelector ( \".slider\" ) ) . isDisplayed ( ) ) ; assertTrue ( element . findElement ( By . cssSelector ( \".certified-fresh-checkbox\" ) ) . isDisplayed ( ) ) ; element = element . findElement ( By . className ( \"noUi-origin\" ) ) ; actions . dragAndDrop ( element , driver . findElement ( By . cssSelector ( \".slider\" ) ) ) . perform ( ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \".tomatometerScore\" ) , \"50% ▁ — ▁ 100%\" ) ) ; Thread . sleep ( 500 ) ; List < WebElement > scores = driver . findElements ( By . cssSelector ( \".movie_info ▁ .tMeterScore\" ) ) ; for ( WebElement score : scores ) { int scoreNumber = Integer . parseInt ( score . getText ( ) . replace ( \"%\" , \"\" ) ) ; assertTrue ( scoreNumber >= 50 && scoreNumber <= 100 ) ; } } ",
  "Test Name": "NEW & UPCOMING MOVIES - VIEW ALL - Certified Fresh Only",
  "Test Description": "Verify that the tomatometer filter slider in the VIEW ALL - NEW & UPCOMING MOVIES page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the VIEW ALL button in the NEW & UPCOMING MOVIES, A page with the title COMING SOON will be displayed, 2. Hover over the Tomatometer Filter, A dropdown menu will be presented with a slider and a Certified Fresh Only check box, 3. Take the left noUi slider into the middle of the slider, The presented movies will have tomatometer score between 50 and 100, and these will be the limits in the Tomatometer filter button."
}
{
  "id": 272,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Popular ▁ Streaming ▁ Movies'] // ancestor::section\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . cssSelector ( \"[slot='list-items'] ▁ li\" ) ) ; String title = element . findElement ( By . cssSelector ( \".dynamic-text-list__item-title\" ) ) . getText ( ) ; String score = element . findElement ( By . cssSelector ( \"[slot='tomatometer-value']\" ) ) . getText ( ) ; element . findElement ( By . tagName ( \"a\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-qa='movie-main-column']\" ) ) ) ; assertEquals ( title . toUpperCase ( Locale . ROOT ) , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; assertEquals ( score . replace ( \"%\" , \"\" ) , driver . findElement ( By . tagName ( \"score-board\" ) ) . getAttribute ( \"tomatometerscore\" ) ) ; } ",
  "Test Name": "POPULAR STREAMING MOVIES - Click A Movie",
  "Test Description": "Clicking a movie in the POPULAR STREAMING MOVIES section works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Scroll to the POPULAR STREAMING MOVIES section, 2. Click the first movie title, A movie's page will be displayed with the correct movie title and Tomatometer"
}
{
  "id": 273,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Popular ▁ Streaming ▁ Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element . findElement ( By . xpath ( \"./..\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; List < WebElement > movies = element . findElements ( By . cssSelector ( \"[slot='list-items'] ▁ li\" ) ) ; for ( WebElement movie : movies ) { assertTrue ( movie . findElement ( By . cssSelector ( \".dynamic-text-list__item-title\" ) ) . isDisplayed ( ) ) ; assertTrue ( movie . findElement ( By . cssSelector ( \"[slot='tomatometer-value']\" ) ) . isDisplayed ( ) ) ; assertTrue ( movie . findElement ( By . cssSelector ( \"[slot='tomatometer-icon']\" ) ) . isDisplayed ( ) ) ; } } ",
  "Test Name": "POPULAR STREAMING MOVIES - Display",
  "Test Description": "The POPULAR STREAMING MOVIES section is displayed well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Scroll to the POPULAR STREAMING MOVIES section, The section's title will be presented to the user, A list of movies will be displayed. Each movie will have a name and a tomatometer score, along a tomatometer icon"
}
{
  "id": 274,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Best ▁ Series ▁ on ▁ Netflix']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element . findElement ( By . xpath ( \"./..\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; element . findElement ( By . xpath ( \"./following-sibling::a[@data-track='showmore']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"BEST ▁ NETFLIX ▁ SERIES ▁ TO ▁ WATCH ▁ RIGHT ▁ NOW\" ) ) ; String expectedNumberOfSeries = driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] ; List < WebElement > seriesRatingNumber = driver . findElements ( By . className ( \"countdown-index\" ) ) ; assertEquals ( Integer . parseInt ( expectedNumberOfSeries ) , seriesRatingNumber . size ( ) ) ; for ( int i = 0 ; i < seriesRatingNumber . size ( ) ; i ++ ) { assertEquals ( String . valueOf ( seriesRatingNumber . size ( ) - i ) , seriesRatingNumber . get ( i ) . getText ( ) . replace ( \"#\" , \"\" ) ) ; } } ",
  "Test Name": "BEST SERIES ON NETFLIX - View All",
  "Test Description": "Verify that clicking the VIEW ALL button in the Best Series On Netflix section works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Scroll to the BEST SERIES ON NETFLIX section, The section's title will be presented to the user, 2. Click the View All link, BEST NETFLIX SERIES TO WATCH RIGHT NOW title will be presented. There will be number of presented series as stated in the title, numbered from the high limit to number 1."
}
{
  "id": 275,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Best ▁ Series ▁ on ▁ Netflix']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element . findElement ( By . xpath ( \"./..\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; element = element . findElement ( By . xpath ( \". // ancestor::section[@id='dynamic-poster-list'] // tile-dynamic\" ) ) ; String title = element . findElement ( By . className ( \"p--small\" ) ) . getText ( ) ; String score = element . findElement ( By . tagName ( \"score-pairs\" ) ) . getAttribute ( \"criticsscore\" ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . cssSelector ( \"[data-qa='score-panel-series-title']\" ) , title . toUpperCase ( Locale . ROOT ) ) ) ; assertEquals ( score , driver . findElement ( By . cssSelector ( \"[data-qa='tomatometer']\" ) ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; assertEquals ( \"Netflix\" , driver . findElement ( By . cssSelector ( \"[data-qa='series-details-network']\" ) ) . getText ( ) ) ; } ",
  "Test Name": "BEST SERIES ON NETFLIX - Click A Series",
  "Test Description": "Confirm a series in the Best Series On Netflix section can be watched on Netflix",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Scroll to the BEST SERIES ON NETFLIX section, The section's title will be presented to the user, 2. Click the first presented movie, A movie's page will be displayed with the correct movie title and Tomatometer. The TV Network will be Netflix."
}
{
  "id": 276,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . cssSelector ( \"[data-qa='header:link-whats-tmeter']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".about-main\" ) ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . id ( \"whatisthetomatometer\" ) ) ) ) ; } ",
  "Test Name": "WHAT IS THE TOMATOMETER®?",
  "Test Description": "Clicking the what is the tomatometer link works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the WHAT IS THE TOMATOMETER®? Link at the top of the page, The about page wil get loaded, with the WHAT IS THE TOMATOMETER®? Title visible to the user."
}
{
  "id": 277,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . cssSelector ( \"[data-qa='header:link-critics-home']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Who ▁ are ▁ the ▁ Tomatometer-approved ▁ critics?\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"critics-home-spotlight\" ) ) ) ; assertEquals ( 4 , element . findElements ( By . className ( \"critics-home-spotlight__li\" ) ) . size ( ) ) ; element = element . findElement ( By . cssSelector ( \"[data-qa='critic-social-link']\" ) ) ; String handle = element . getText ( ) ; element . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[contains(text(), ▁ 'Twitter, ▁ Inc.')]\" ) ) ) ; assertEquals ( handle , driver . findElement ( By . cssSelector ( \"[data-testid='UserName'] ▁ [dir='ltr']\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Critics",
  "Test Description": "Clicking the Critics link works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the Critics Link at the top of the page, A page with the title Who are the Tomatometer-approved critics? Will be presented, including CRITIC SPOTLIGHT with 4 spotlights, 2. Click one of the twitter links of the critics, A twitter page with the sane handle will be presented"
}
{
  "id": 278,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Top ▁ Headlines']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element . findElement ( By . xpath ( \"./..\" ) ) ) . perform ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( 8 , driver . findElements ( By . className ( \"top-headlines-item\" ) ) . size ( ) ) ; element . findElement ( By . xpath ( \"./following-sibling::a[text()='View ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . tagName ( \"h1\" ) , \"TOP ▁ HEADLINES\" ) ) ; assertTrue ( driver . findElement ( By . className ( \"publication-row\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "TOP HEADLINES",
  "Test Description": "Verify that clicking the VIEW ALL button in the Top Headlines section works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Scroll to the TOP HEADLINES section, The section's title will be presented to the user. 8 headline links are displayed., 2. Click the View All link, TOP HEADLINES title will be presented. There will be a number of publication rows"
}
{
  "id": 279,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . tagName ( \"h3\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"MOVIES ▁ IN ▁ THEATERS\" , \"ON ▁ DVD ▁ & ▁ STREAMING\" , \"MORE\" , \"CERTIFIED ▁ FRESH ▁ PICKS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "Movies Tab",
  "Test Description": "Verify that after hovering over the Movies top tab, a menu will get opened",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed, with the titles MOVIES IN THEATERS, ON DVD & STREAMING, MORE, CERTIFIED FRESH PICKS"
}
{
  "id": 280,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; List < WebElement > movieElements = element . findElements ( By . xpath ( \" // h3[text()='Certified ▁ Fresh ▁ Picks']/following-sibling::* // a\" ) ) ; assertEquals ( 3 , movieElements . size ( ) ) ; element = movieElements . get ( 0 ) ; String title = element . findElement ( By . cssSelector ( \".masthead__certified-fresh-pick-text.clamp\" ) ) . getText ( ) ; String score = element . findElement ( By . tagName ( \"score-icon-critic\" ) ) . getAttribute ( \"percentage\" ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , title . toUpperCase ( Locale . ROOT ) ) ) ; assertEquals ( score , driver . findElement ( By . tagName ( \"score-board\" ) ) . getAttribute ( \"tomatometerscore\" ) ) ; } ",
  "Test Name": "Movies - Certified fresh picks",
  "Test Description": "Verify that the Certifies fresh picks in the movies menu functions",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed. under the CERTIFIED FRESH PICKS title there are three movies., 2. Click one of the movies, A movie's page will be displayed with the correct movie title and Tomatometer"
}
{
  "id": 281,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Top ▁ Movies']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ MOVIES\" ) ) ; List < WebElement > titles = driver . findElements ( By . cssSelector ( \"h2.panel-heading\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"BEST ▁ MOVIES ▁ OF ▁ 2021\" , \"TOP ▁ 100 ▁ MOVIES ▁ BY ▁ GENRE\" , \"BEST ▁ MOVIES ▁ OF ▁ ALL ▁ TIME\" , \"BEST ▁ MOVIES ▁ OF ▁ 2020\" , \"MOVIE ▁ AWARD ▁ WINNERS\" , \"BEST ▁ MOVIES ▁ BY ▁ YEAR\" , \"BEST ▁ MOVIES ▁ OF ▁ 2019\" , \"TODAY'S ▁ TOP ▁ RATED ▁ MOVIES\" , \"MOVIE ▁ GUIDES\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titles ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "Movies - Top Movies",
  "Test Description": "Verify that the Top Movies link in the movies menu functions",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Top Movies, The TOP MOVIES page will be displayed with the titles BEST MOVIES OF 2021, TOP 100 MOVIES BY GENRE, BEST MOVIES OF ALL TIME, BEST MOVIES OF 2020, MOVIE AWARD WINNERS, BEST MOVIES BY YEAR, BEST MOVIES OF 2019, TODAY'S TOP RATED MOVIES, MOVIE GUIDES"
}
{
  "id": 282,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Top ▁ Movies']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ MOVIES\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Best ▁ Movies ▁ of ▁ 2021']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \". // ancestor::section // *[text()='View ▁ All']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"panel-heading\" ) , \"TOP ▁ 100 ▁ MOVIES ▁ OF ▁ 2021\" ) ) ; List < WebElement > movieTitles = driver . findElements ( By . cssSelector ( \"tbody ▁ .articleLink\" ) ) ; assertEquals ( 100 , movieTitles . size ( ) ) ; for ( WebElement element : movieTitles ) { assertTrue ( element . getText ( ) . endsWith ( \"(2021)\" ) ) ; } } ",
  "Test Name": "Movies - TOP 100 MOVIES OF 2021",
  "Test Description": "Verify that the TOP 100 MOVIES OF 2021 list is presnted well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Top Movies, The TOP MOVIES page will be displayed with the title BEST MOVIES OF 2021, 3. Click the View All link at the bottom of the TOP 100 MOVIES OF 2021 section, TOP 100 MOVIES OF 2021 page will be displayed. 100 movies are presnted and all of them were released in 2021."
}
{
  "id": 283,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Top ▁ Movies']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ MOVIES\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Best ▁ Movies ▁ of ▁ 2021']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \". // ancestor::section // *[text()='View ▁ All']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"panel-heading\" ) , \"TOP ▁ 100 ▁ MOVIES ▁ OF ▁ 2021\" ) ) ; List < WebElement > movieTitles = driver . findElements ( By . cssSelector ( \"tbody ▁ .articleLink\" ) ) ; assertEquals ( 100 , movieTitles . size ( ) ) ; for ( WebElement element : movieTitles ) { assertTrue ( element . getText ( ) . endsWith ( \"(2021)\" ) ) ; } driver . findElement ( By . cssSelector ( \"#top_movies_main ▁ .dropdown-toggle\" ) ) . click ( ) ; element = driver . findElement ( By . cssSelector ( \"ul.dropdown-menu\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; List < WebElement > yearOptions = element . findElements ( By . tagName ( \"a\" ) ) ; for ( int i = 0 ; i < yearOptions . size ( ) ; i ++ ) { assertEquals ( String . valueOf ( 2021 - i ) , yearOptions . get ( i ) . getText ( ) ) ; } yearOptions . get ( 3 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"panel-heading\" ) , \"TOP ▁ 100 ▁ MOVIES ▁ OF ▁ 2018\" ) ) ; movieTitles . clear ( ) ; movieTitles = driver . findElements ( By . cssSelector ( \"tbody ▁ .articleLink\" ) ) ; assertEquals ( 100 , movieTitles . size ( ) ) ; for ( WebElement element : movieTitles ) { assertTrue ( element . getText ( ) . endsWith ( \"(2018)\" ) ) ; } } ",
  "Test Name": "Movies - TOP 100 MOVIES OF 2021 - Change Year",
  "Test Description": "Verify that changing a year is possible in the TOP 100 MOVIES OF 2021 page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Top Movies, The TOP MOVIES page will be displayed with the title BEST MOVIES OF 2021, 3. Click the View All link at the bottom of the TOP 100 MOVIES OF 2021 section, TOP 100 MOVIES OF 2021 page will be displayed. 100 movies are presnted and all of them were released in 2021., 4. Click the Year dropdown , A dropdown will get opened, with the years 2021 to 1950, 5. Click 2018, TOP 100 MOVIES OF 2018 page will be displayed. 100 movies are presnted and all of them were released in 2018."
}
{
  "id": 284,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Top ▁ Movies']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ MOVIES\" ) ) ; element = driver . findElement ( By . xpath ( \" // *[text()='Best ▁ Movies ▁ of ▁ 2021']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \". // ancestor::section // *[text()='View ▁ All']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"panel-heading\" ) , \"TOP ▁ 100 ▁ MOVIES ▁ OF ▁ 2021\" ) ) ; actions . moveToElement ( driver . findElement ( By . cssSelector ( \"[rel='tooltip'].glyphicon\" ) ) ) . perform ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".tooltip\" ) ) ) ; assertEquals ( \"Each ▁ critic ▁ from ▁ our ▁ discrete ▁ list ▁ gets ▁ one ▁ vote, ▁ weighted ▁ equally. ▁ \" + \"A ▁ movie ▁ must ▁ have ▁ 40 ▁ or ▁ more ▁ rated ▁ reviews ▁ to ▁ be ▁ considered. ▁ \" + \"The ▁ 'Adjusted ▁ Score' ▁ comes ▁ from ▁ a ▁ weighted ▁ formula ▁ (Bayesian) ▁ that ▁ we ▁ use ▁ that ▁ accounts ▁ \" + \"for ▁ variation ▁ in ▁ the ▁ number ▁ of ▁ reviews ▁ per ▁ movie.\" , element . getText ( ) ) ; actions . moveToElement ( driver . findElement ( By . tagName ( \"section\" ) ) ) . perform ( ) ; wait . until ( ExpectedConditions . numberOfElementsToBe ( By . cssSelector ( \".tooltip\" ) , 0 ) ) ; } ",
  "Test Name": "Movies - TOP 100 MOVIES OF 2021 - Sorted by Adjusted Score",
  "Test Description": "Verify that the Sorted by Adjusted Score information is presented after hovering over the '?' glyphicon in the TOP 100 MOVIES OF 2021 page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Top Movies, The TOP MOVIES page will be displayed with the title BEST MOVIES OF 2021, 3. Click the View All link at the bottom of the TOP 100 MOVIES OF 2021 section, TOP 100 MOVIES OF 2021 page will be displayed., 4. Hover over the Sorted by Adjusted Score glyphicon, A tooltip will be displayed, with the text \"Each critic from our discrete list gets one vote, weighted equally. A movie must have 40 or more rated reviews to be considered. The 'Adjusted Score' comes from a weighted formula (Bayesian) that we use that accounts for variation in the number of reviews per movie.\", 5. Hover to a different point in the page, The tooltip won't be visible anymore."
}
{
  "id": 285,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"BROWSE ▁ ALL\" ) ) ; element = driver . findElement ( By . id ( \"sort-dropdown\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . cssSelector ( \".options\" ) ) . getCssValue ( \"display\" ) ) ; By locator = By . cssSelector ( \"[data-sort-option='Tomatometer']\" ) ; element . findElement ( locator ) . click ( ) ; wait . until ( ExpectedConditions . attributeContains ( locator , \"class\" , \"selected\" ) ) ; List < WebElement > scores = driver . findElements ( By . cssSelector ( \".movie_info ▁ .tMeterScore\" ) ) ; for ( int i = 0 ; i < scores . size ( ) - 1 ; i ++ ) { int currentScoreNumber = Integer . parseInt ( scores . get ( i ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; int nextScoreNumber = Integer . parseInt ( scores . get ( i + 1 ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; assertTrue ( currentScoreNumber >= nextScoreNumber ) ; } } ",
  "Test Name": "Movies - Browse All - Sort By Tomatometer",
  "Test Description": "Verify that sorting by tomatometer movies works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, BROWSE ALL page title will be presented, 3. Hover over the sort dropdown, The dropdown options will be displayed, 4. Click Tomatomater, The results are sorted by higher tomatometer scores first"
}
{
  "id": 286,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"BROWSE ▁ ALL\" ) ) ; String stringExpectedNumber ; int expectedNumber ; for ( int i = 0 ; i < 2 ; i ++ ) { int iExpected = ( i + 1 ) * 32 ; if ( i == 1 ) { driver . findElement ( By . xpath ( \" // button[text()='Show ▁ More']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( \"count-link\" ) , String . valueOf ( iExpected ) ) ) ; } stringExpectedNumber = driver . findElement ( By . id ( \"count-link\" ) ) . getText ( ) . split ( \" ▁ \" ) [ 1 ] ; expectedNumber = Integer . parseInt ( stringExpectedNumber ) ; assertEquals ( iExpected , expectedNumber ) ; assertEquals ( expectedNumber , driver . findElements ( By . className ( \"poster_container\" ) ) . size ( ) ) ; } } ",
  "Test Name": "Movies - Browse All - Show More",
  "Test Description": "Verify that clicking the show more button in the browse all page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, BROWSE ALL page title will be presented with 32 results, as mentioned in the count link, 3. Click The Show More button, 64 results will be presented, as mentioned in the count link"
}
{
  "id": 287,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"BROWSE ▁ ALL\" ) ) ; By countLocator = By . id ( \"count-link\" ) ; String originalText = driver . findElement ( countLocator ) . getText ( ) ; String originalNumberOfResultsText = originalText . substring ( originalText . lastIndexOf ( ' ▁ ' ) + 1 ) ; element = driver . findElement ( By . id ( \"genre-dropdown\" ) ) ; actions . moveToElement ( element ) . perform ( ) ; assertNotEquals ( \"none\" , element . findElement ( By . cssSelector ( \".options\" ) ) . getCssValue ( \"display\" ) ) ; actions . moveToElement ( element . findElement ( By . xpath ( \" // *[@id='genre-action']/following-sibling::*[@class='only']\" ) ) ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( countLocator , originalText ) ) ) ; String newText = driver . findElement ( countLocator ) . getText ( ) ; String newNumberOfResultsText = newText . substring ( newText . lastIndexOf ( ' ▁ ' ) + 1 ) ; assertTrue ( Integer . parseInt ( newNumberOfResultsText ) < Integer . parseInt ( originalNumberOfResultsText ) ) ; } ",
  "Test Name": "Movies - Browse All - Genre",
  "Test Description": "Verify that sorting by genre function in the browse all page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, BROWSE ALL page title will be presented, 3. Hover over the genre dropdown, The dropdown options will be displayed, 4. Click the 'only' link in the Action option, The number of results will decrease"
}
{
  "id": 288,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; List < WebElement > titles = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . className ( \"panel-heading\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"NEW ▁ ON ▁ DVD\" , \"UPCOMING ▁ DVDS\" , \"CERTIFIED ▁ FRESH ▁ PICK\" , \"WHAT'S ▁ HOT ▁ ON ▁ RT\" , \"TOP ▁ RENTALS\" , \"CRITICS' ▁ BUZZ\" , \"GALLERIES\" , \"NEWS ▁ & ▁ FEATURES\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titles ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "ON DVD & STREAMING - Display",
  "Test Description": "Verify that ON DVD & STREAMING page is displayed well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, The following titles will be presented: NEW ON DVD, UPCOMING DVDS, CERTIFIED FRESH PICK, WHAT'S HOT ON RT, TOP RENTALS, CRITICS' BUZZ, GALLERIES, NEWS & FEATURES"
}
{
  "id": 289,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // h2[text()='Galleries']\" ) ) ) ; driver . findElement ( By . cssSelector ( \"#picture_galleries ▁ .media:nth-child(2) ▁ a\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"gallery\" ) ) ) ; assertTrue ( element . findElement ( By . tagName ( \"h2\" ) ) . getText ( ) . endsWith ( \"PHOTOS\" ) ) ; } ",
  "Test Name": "ON DVD & STREAMING - Galleries",
  "Test Description": "Verify that the galleries media items are functioning well in the ON DVD & STREAMING page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, A page with the title GALLERIES will be displayed, 5. Click one of the media links under the Galleries title, A photos page will be displayed, with a photo gallery"
}
{
  "id": 290,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"newondvd\" ) ) ) ; assertTrue ( element . findElement ( By . id ( \"movies_carousel\" ) ) . isDisplayed ( ) ) ; element = element . findElement ( By . cssSelector ( \".slick-active ▁ > ▁ a\" ) ) ; String title = element . getAttribute ( \"title\" ) ; actions . moveToElement ( element ) . perform ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".poster_caption:not([style='display: ▁ none;'])\" ) ) ) ; assertEquals ( title , element . findElement ( By . tagName ( \"a\" ) ) . getText ( ) ) ; } ",
  "Test Name": "ON DVD & STREAMING - New on DVD - Hover",
  "Test Description": "Verify that the hovering function in the New on DVD section in the ON DVD & STREAMING page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, New on dvd section will be presented, including a movies carousel, 5. Hover over one of the movies posters, A poster caption for the poster image will be displayed"
}
{
  "id": 291,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"newondvd\" ) ) ) ; assertTrue ( element . findElement ( By . id ( \"movies_carousel\" ) ) . isDisplayed ( ) ) ; List < WebElement > currentActives = element . findElements ( By . cssSelector ( \".slick-active ▁ > ▁ a\" ) ) ; element . findElement ( By . cssSelector ( \"button.slick-next\" ) ) . click ( ) ; List < WebElement > newActives = element . findElements ( By . cssSelector ( \".slick-active ▁ > ▁ a\" ) ) ; assertEquals ( currentActives . size ( ) , newActives . size ( ) ) ; for ( int i = 0 ; i < newActives . size ( ) ; i ++ ) { assertNotEquals ( currentActives . get ( i ) . getAttribute ( \"title\" ) , newActives . get ( i ) . getAttribute ( \"title\" ) ) ; } } ",
  "Test Name": "ON DVD & STREAMING - New on DVD - Next",
  "Test Description": "Verify that the next function in the New on DVD section in the ON DVD & STREAMING page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, New on dvd section will be presented, including a movies carousel, 5. Click the next button in the carousel, Different movies are presented in the carousel"
}
{
  "id": 292,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='More ▁ News ▁ & ▁ Interview ▁ ']\" ) ) ) ; int halfOfHeight = element . getSize ( ) . getHeight ( ) / 2 ; int offset = halfOfHeight - 3 ; actions . moveToElement ( element ) . moveByOffset ( 0 , offset ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEWS ▁ & ▁ INTERVIEWS\" ) ) ; } ",
  "Test Name": "ON DVD & STREAMING - More News & Interview - Display",
  "Test Description": "Verify that the link More News & Interview is working in the ON DVD & STREAMING page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, New on dvd section will be presented, including a movies carousel, 5. Click the More News & Interview link, A page with the title NEWS & INTERVIEWS will be displayed"
}
{
  "id": 293,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='More ▁ News ▁ & ▁ Interview ▁ ']\" ) ) ) ; int halfOfHeight = element . getSize ( ) . getHeight ( ) / 2 ; int offset = halfOfHeight - 3 ; actions . moveToElement ( element ) . moveByOffset ( 0 , offset ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEWS ▁ & ▁ INTERVIEWS\" ) ) ; List < WebElement > currentTitles = driver . findElements ( By . cssSelector ( \".article_body ▁ .title\" ) ) ; List < String > currentTitlesText = new ArrayList < > ( ) ; for ( WebElement title : currentTitles ) { currentTitlesText . add ( title . getText ( ) ) ; } driver . findElement ( By . xpath ( \" // a[text()='Next']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Previous']\" ) ) ) ; List < WebElement > newTitles = driver . findElements ( By . cssSelector ( \".article_body ▁ .title\" ) ) ; assertEquals ( currentTitlesText . size ( ) , newTitles . size ( ) ) ; for ( int i = 0 ; i < currentTitlesText . size ( ) ; i ++ ) { assertNotEquals ( currentTitlesText . get ( i ) , newTitles . get ( i ) . getText ( ) ) ; } } ",
  "Test Name": "ON DVD & STREAMING - More News & Interview - Next",
  "Test Description": "Verify that the next link is working in the More News & Interview page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, New on dvd section will be presented, including a movies carousel, 5. Click the More News & Interview link, A page with the title NEWS & INTERVIEWS will be displayed, 6. Click the Next link, different articles are presented, and a previous link"
}
{
  "id": 294,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='Movies']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='Browse ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[contains(text(), ▁ 'Movies ▁ & ▁ DVDs')]\" ) ) ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; driver . findElement ( By . xpath ( \" // h2[text()='On ▁ Dvd ▁ & ▁ Streaming']/..\" ) ) . click ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='More ▁ News ▁ & ▁ Interview ▁ ']\" ) ) ) ; int halfOfHeight = element . getSize ( ) . getHeight ( ) / 2 ; int offset = halfOfHeight - 3 ; actions . moveToElement ( element ) . moveByOffset ( 0 , offset ) . click ( ) . perform ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEWS ▁ & ▁ INTERVIEWS\" ) ) ; List < WebElement > currentTitles = driver . findElements ( By . cssSelector ( \".article_body ▁ .title\" ) ) ; List < String > currentTitlesText = new ArrayList < > ( ) ; for ( WebElement title : currentTitles ) { currentTitlesText . add ( title . getText ( ) ) ; } element = driver . findElement ( By . tagName ( \"select\" ) ) ; element . click ( ) ; String numberOfPages = element . findElement ( By . xpath ( \"./..\" ) ) . getText ( ) ; numberOfPages = numberOfPages . substring ( numberOfPages . indexOf ( \"of\" ) + 3 ) ; int intNumberOfPages = Integer . parseInt ( numberOfPages ) ; List < WebElement > optionsElements = element . findElements ( By . tagName ( \"option\" ) ) ; assertEquals ( intNumberOfPages , optionsElements . size ( ) ) ; for ( int i = 0 ; i < intNumberOfPages ; i ++ ) { assertEquals ( String . valueOf ( i + 1 ) , optionsElements . get ( i ) . getText ( ) ) ; } optionsElements . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // a[text()='Previous']\" ) ) ) ; List < WebElement > newTitles = driver . findElements ( By . cssSelector ( \".article_body ▁ .title\" ) ) ; assertEquals ( currentTitlesText . size ( ) , newTitles . size ( ) ) ; for ( int i = 0 ; i < currentTitlesText . size ( ) ; i ++ ) { assertNotEquals ( currentTitlesText . get ( i ) , newTitles . get ( i ) . getText ( ) ) ; } assertEquals ( \"2\" , driver . findElement ( By . cssSelector ( \"option[selected]\" ) ) . getText ( ) ) ; } ",
  "Test Name": "ON DVD & STREAMING - More News & Interview - Dropdown",
  "Test Description": "Verify that the page selector dropdown link is working in the More News & Interview page",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the MOVIES tab, A menu will be displayed., 2. Click the link Browse All, 3. Hover over Movies & DVDs, A menu will be displayed., 4. Click the title ON DVD & STREAMING, New on dvd section will be presented, including a movies carousel, 5. Click the More News & Interview link, A page with the title NEWS & INTERVIEWS will be displayed, 6. Click the page dropdown, The dropdown option go from 1 to the indicated number of pages, 7. Choose page 2, different articles are presented, and a previous link. The 2 is selected in the dropdown"
}
{
  "id": 295,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . tagName ( \"h3\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"NEW ▁ TV ▁ TONIGHT\" , \"MOST ▁ POPULAR ▁ TV ▁ ON ▁ RT\" , \"MORE\" , \"EPISODIC ▁ REVIEWS\" , \"CERTIFIED ▁ FRESH ▁ PICK\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "TV Shows Tab",
  "Test Description": "Verify that after hovering over the TV shows top tab, a menu will get opened",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, with the titles NEW TV TONIGHT, MOST POPULAR TV ON RT, MORE, EPISODIC REVIEWS, CERTIFIED FRESH PICK"
}
{
  "id": 296,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='New ▁ TV ▁ Tonight']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; List < WebElement > articleElements = element . findElements ( By . xpath ( \"./../table // td[1]/a\" ) ) ; int chosenIndex = 0 ; String title = \"\" , score = \"\" ; for ( int i = 0 ; i < articleElements . size ( ) ; i ++ ) { element = articleElements . get ( i ) . findElement ( By . cssSelector ( \"score-icon-critic[percentage]\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; String percentageAttribute = element . getAttribute ( \"percentage\" ) ; if ( ! percentageAttribute . isEmpty ( ) && title . isEmpty ( ) ) { title = element . findElement ( By . xpath ( \"./ancestor::tr // a[@data-qa='list-item-link']\" ) ) . getText ( ) ; score = percentageAttribute ; chosenIndex = i ; } } articleElements . get ( chosenIndex ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"season-body\" ) ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) . startsWith ( title . toUpperCase ( Locale . ROOT ) ) ) ; assertEquals ( score , driver . findElement ( By . cssSelector ( \"[data-qa='tomatometer']\" ) ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; } ",
  "Test Name": "TV Shows - New TV Tonight - With Score",
  "Test Description": "Verify that clicking a show line from the new tv tonight category that has a score from the TV shows top tab works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, with the title NEW TV TONIGHT. Under it there is a list of shows, some have a score, and some have no rating., 2. Click one of the shows with a score, A show's page will be displayed with the correct movie title and Tomatometer"
}
{
  "id": 297,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='New ▁ TV ▁ Tonight']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; List < WebElement > articleElements = element . findElements ( By . xpath ( \"./../table // td[1]/a\" ) ) ; int chosenIndex = 0 ; String title = \"\" ; for ( int i = 0 ; i < articleElements . size ( ) ; i ++ ) { element = articleElements . get ( i ) . findElement ( By . cssSelector ( \"score-icon-critic[percentage]\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; String percentageAttribute = element . getAttribute ( \"percentage\" ) ; if ( percentageAttribute . isEmpty ( ) && title . isEmpty ( ) ) { title = element . findElement ( By . xpath ( \"./ancestor::tr // a[@data-qa='list-item-link']\" ) ) . getText ( ) ; chosenIndex = i ; } } articleElements . get ( chosenIndex ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"season-body\" ) ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) . startsWith ( title . toUpperCase ( Locale . ROOT ) ) ) ; assertEquals ( \"Not ▁ enough ▁ ratings ▁ to \\n calculate ▁ a ▁ score.\" , driver . findElement ( By . cssSelector ( \"[data-qa='tomatometer-container'] ▁ p\" ) ) . getText ( ) ) ; } ",
  "Test Name": "TV Shows - New TV Tonight - With No Score",
  "Test Description": "Verify that clicking a show line from the new tv tonight category that has no score from the TV shows top tab works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, with the title NEW TV TONIGHT. Under it there is a list of shows, some have a score, and some have no rating., 2. Click one of the shows with no score, A show's page will be displayed with the correct movie title and a no score message"
}
{
  "id": 298,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='New ▁ TV ▁ Tonight']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \"./following-sibling::a[text()='View ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEW ▁ TV ▁ TONIGHT\" ) ) ; assertEquals ( \"New ▁ TV ▁ Tonight\" , driver . findElement ( By . cssSelector ( \"#navigation-column ▁ .active\" ) ) . getText ( ) ) ; List < WebElement > scores = driver . findElements ( By . cssSelector ( \".movie_info ▁ .tMeterScore\" ) ) ; for ( int i = 0 ; i < scores . size ( ) - 1 ; i ++ ) { int currentScoreNumber = Integer . parseInt ( scores . get ( i ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; int nextScoreNumber = Integer . parseInt ( scores . get ( i + 1 ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; assertTrue ( currentScoreNumber >= nextScoreNumber ) ; } } ",
  "Test Name": "TV Shows - New TV Tonight - View All",
  "Test Description": "Verify that clicking the view all link of the new tv tonight category from the TV shows top tab works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, with the title NEW TV TONIGHT., 2. Click the View All link under the title, A page with the title NEW TV TONIGHT will be displayed. On the navigator column, the line New TV Tonight is active. The presented shows are sorted by tomatometer score."
}
{
  "id": 299,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='New ▁ TV ▁ Tonight']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \"./following-sibling::a[text()='View ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEW ▁ TV ▁ TONIGHT\" ) ) ; assertEquals ( \"New ▁ TV ▁ Tonight\" , driver . findElement ( By . cssSelector ( \"#navigation-column ▁ .active\" ) ) . getText ( ) ) ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( i != 0 ) { By locator = By . cssSelector ( \".view-icon:nth-of-type(\" + ( 3 - i ) + \")\" ) ; driver . findElement ( locator ) . click ( ) ; assertTrue ( driver . findElement ( locator ) . getAttribute ( \"class\" ) . contains ( \"active\" ) ) ; assertEquals ( i == 1 , driver . findElement ( By . cssSelector ( \".mb-movies\" ) ) . getAttribute ( \"class\" ) . contains ( \"list-view\" ) ) ; } List < WebElement > scores = driver . findElements ( By . cssSelector ( \".movie_info ▁ .tMeterScore\" ) ) ; for ( int j = 0 ; j < scores . size ( ) - 1 ; j ++ ) { int currentScoreNumber = Integer . parseInt ( scores . get ( j ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; int nextScoreNumber = Integer . parseInt ( scores . get ( j + 1 ) . getText ( ) . replace ( \"%\" , \"\" ) ) ; assertTrue ( currentScoreNumber >= nextScoreNumber ) ; } } } ",
  "Test Name": "TV Shows - New TV Tonight - View All - Change View",
  "Test Description": "Verify that the changing view option in the New TV Tonight page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, with the title NEW TV TONIGHT., 2. Click the View All link under the title, A page with the title NEW TV TONIGHT will be displayed. The presented shows are sorted by tomatometer score., 3. Click on the second view-icon, The shows will be displayed in a list-view and still sorted by score and the recently clicked butoon will become active., 4. Click on the first view-icon, The shows will not be displayed in a list-view and still sorted by score and the recently clicked butoon will become active."
}
{
  "id": 300,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element . findElement ( By . xpath ( \" // a[text()='Top ▁ TV ▁ Shows']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ TV ▁ SHOWS\" ) ) ; By locator = By . cssSelector ( \".carousel-inner ▁ .item.active\" ) ; String currentActiveText = driver . findElement ( locator ) . getText ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , currentActiveText ) ) ) ; } ",
  "Test Name": "TV Shows - Top TV Shows - Display",
  "Test Description": "Verify that after clicking the Top TV Shows link in the TV Shows tab, its page is presented well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, 2. Click the Top TV Shows link, A page with the title Top TV Shows will be displayed, including a carousel with items that change automatically"
}
{
  "id": 301,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element . findElement ( By . xpath ( \" // a[text()='Top ▁ TV ▁ Shows']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ TV ▁ SHOWS\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='Popular ▁ Shows ▁ Available ▁ on ▁ Streaming']/..\" ) ) ) ; List < WebElement > mediaElements = element . findElements ( By . className ( \"media\" ) ) ; int countDisplayed = 0 ; for ( WebElement media : mediaElements ) { if ( media . isDisplayed ( ) ) countDisplayed ++ ; } assertEquals ( 7 , countDisplayed ) ; element . findElement ( By . xpath ( \". // a[contains(text(), ▁ 'View ▁ All')]\" ) ) . click ( ) ; countDisplayed = 0 ; for ( WebElement media : mediaElements ) { if ( media . isDisplayed ( ) ) countDisplayed ++ ; } assertEquals ( 16 , countDisplayed ) ; } ",
  "Test Name": "TV Shows - Top TV Shows - POPULAR SHOWS AVAILABLE ON STREAMING",
  "Test Description": "Verify that the View All function in POPULAR SHOWS AVAILABLE ON STREAMING section in Top TV Shows page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, 2. Click the Top TV Shows link, A page with the title Top TV Shows will be displayed, including a POPULAR SHOWS AVAILABLE ON STREAMING section with 7 media links, 3. Click the View All link at the bottom of POPULAR SHOWS AVAILABLE ON STREAMING, 16 media links will be presented under the section"
}
{
  "id": 302,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element . findElement ( By . xpath ( \" // a[text()='Top ▁ TV ▁ Shows']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ TV ▁ SHOWS\" ) ) ; driver . findElement ( By . xpath ( \" // h3[@class='panel-heading' ▁ and ▁ text()='Premiere ▁ Dates']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TV ▁ PREMIERE ▁ DATES ▁ 2021\" ) ) ; List < WebElement > datesTitles = driver . findElements ( By . xpath ( \" // h2/strong[text()='December']/../following-sibling::p // *[contains(text(), ▁ 'Dec.')]\" ) ) ; for ( int i = 0 ; i < datesTitles . size ( ) ; i ++ ) { assertTrue ( datesTitles . get ( i ) . getText ( ) . endsWith ( \"Dec. ▁ \" + ( i + 1 ) ) ) ; } } ",
  "Test Name": "TV Shows - Top TV Shows - Premiere Dates - Display",
  "Test Description": "Verify that Premiere Dates for TV shows page is presented well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, 2. Click the Top TV Shows link, A page with the title Top TV Shows will be displayed, 3. Click the banner with the title PREMIERE DATES, A page with the title TV PREMIERE DATES 2021 will be presented. Under December title, there'll be dates of all the days in the month."
}
{
  "id": 303,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element . findElement ( By . xpath ( \" // a[text()='Top ▁ TV ▁ Shows']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ TV ▁ SHOWS\" ) ) ; driver . findElement ( By . xpath ( \" // h3[@class='panel-heading' ▁ and ▁ text()='Premiere ▁ Dates']\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TV ▁ PREMIERE ▁ DATES ▁ 2021\" ) ) ; driver . findElement ( By . xpath ( \" // a[text()='December']\" ) ) . click ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h2/strong[text()='December']\" ) ) ) ) ; } ",
  "Test Name": "TV Shows - Top TV Shows - Premiere Dates - December Link",
  "Test Description": "Verify that clicking a month link in Premiere Dates for TV shows page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, 2. Click the Top TV Shows link, A page with the title Top TV Shows will be displayed, 3. Click the banner with the title PREMIERE DATES, A page with the title TV PREMIERE DATES 2021 will be presented., 4. Click the December link, December title will be visible to the user"
}
{
  "id": 304,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element . findElement ( By . xpath ( \" // a[text()='Top ▁ TV ▁ Shows']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 30 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ TV ▁ SHOWS\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // h3[@class='panel-heading' ▁ and ▁ text()='Premiere ▁ Dates']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TV ▁ PREMIERE ▁ DATES ▁ 2021\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // *[contains(text(), ▁ 'Archive')]/following-sibling::a[text()='January']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TV ▁ PREMIERE ▁ DATES ▁ 2021 ▁ ARCHIVE\" ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // h2/strong[text()='January']\" ) ) ) ) ; } ",
  "Test Name": "TV Shows - Top TV Shows - Premiere Dates - Archive Link",
  "Test Description": "Verify that clicking an archive month link in Premiere Dates for TV shows page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, 2. Click the Top TV Shows link, A page with the title Top TV Shows will be displayed, 3. Click the banner with the title PREMIERE DATES, A page with the title TV PREMIERE DATES 2021 will be presented., 4. Click the Archive January link, TV PREMIERE DATES 2021 ARCHIVE page title will be displayed. January title will be visible to the user"
}
{
  "id": 305,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element . findElement ( By . xpath ( \" // a[text()='Top ▁ TV ▁ Shows']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TOP ▁ TV ▁ SHOWS\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // h3[@class='panel-heading' ▁ and ▁ text()='Premiere ▁ Dates']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TV ▁ PREMIERE ▁ DATES ▁ 2021\" ) ) ; wait . until ( ExpectedConditions . elementToBeClickable ( By . xpath ( \" // a[text()='Renewed ▁ & ▁ Cancelled']\" ) ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"RENEWED ▁ AND ▁ CANCELLED ▁ TV ▁ SHOWS ▁ 2021\" ) ) ; List < WebElement > links = driver . findElements ( By . cssSelector ( \".alpha-menu ▁ > ▁ a\" ) ) ; assertEquals ( \"#\" , links . get ( 0 ) . getText ( ) ) ; for ( int i = 1 ; i < links . size ( ) ; i ++ ) { assertEquals ( String . valueOf ( ( char ) ( i + 64 ) ) , links . get ( i ) . getText ( ) ) ; } links . get ( 7 ) . click ( ) ; element = driver . findElement ( By . xpath ( \" // *[@name='g']/following-sibling::*\" ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , element ) ) ; assertEquals ( \"youtube-container\" , element . findElement ( By . xpath ( \"./../following-sibling::*\" ) ) . getAttribute ( \"class\" ) ) ; List < WebElement > shows = element . findElements ( By . xpath ( \"./../following-sibling::p[1]/span\" ) ) ; for ( WebElement showIndication : shows ) { String indication = showIndication . getText ( ) ; assertTrue ( indication . equals ( \"Renewed\" ) || indication . equals ( \"Cancelled\" ) ) ; } element . findElement ( By . xpath ( \"./../following-sibling::a[text()='Back ▁ to ▁ Top']\" ) ) . click ( ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . className ( \"alpha-menu\" ) ) ) ) ; } ",
  "Test Name": "TV Shows - Top TV Shows - Premiere Dates - Renewed & Cancelled",
  "Test Description": "Verify that clicking the Renewed & Cancelled link in Premiere Dates for TV shows page is working and the page functions well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, 2. Click the Top TV Shows link, A page with the title Top TV Shows will be displayed, 3. Click the banner with the title PREMIERE DATES, A page with the title TV PREMIERE DATES 2021 will be presented., 4. Click the Renewed & Cancelled link, RENEWED AND CANCELLED TV SHOWS 2021 page title will be displayed, with a letters menu (# A-Z)., 5. Click the letter link 'G', The title 'G' will be visible. Under it there'll be a video and a list of shows. For each of them there will be a spesification - Renewed or Cancelled, 6. Click the Back to Top link in the G section, The letters menu will become visible"
}
{
  "id": 306,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='TV ▁ Shows']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[contains(text(), ▁ 'Episodic ▁ Reviews')]\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element = element . findElement ( By . xpath ( \"./following-sibling::* // a\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"season-body\" ) ) ) ; assertTrue ( driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) . startsWith ( title . toUpperCase ( Locale . ROOT ) ) ) ; assertTrue ( ( Boolean ) ( ( JavascriptExecutor ) driver ) . executeScript ( \"var ▁ elem ▁ = ▁ arguments[0], ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ box ▁ = ▁ elem.getBoundingClientRect(), ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cx ▁ = ▁ box.left ▁ + ▁ box.width ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ cy ▁ = ▁ box.top ▁ + ▁ box.height ▁ / ▁ 2, ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ e ▁ = ▁ document.elementFromPoint(cx, ▁ cy); ▁ \" + \"for ▁ (; ▁ e; ▁ e ▁ = ▁ e.parentElement) ▁ { ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ if ▁ (e ▁ === ▁ elem) ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \" ▁ ▁ ▁ ▁ return ▁ true; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"} ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" + \"return ▁ false; ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ \" , driver . findElement ( By . xpath ( \" // *[@id='desktopEpisodeList']/h2[text()='Episodes']\" ) ) ) ) ; } ",
  "Test Name": "TV Shows - EPISODIC REVIEWS",
  "Test Description": "Verify that clicking one of the episodic reviews links in the TV Shows tab, works well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the TV SHOWS tab, A menu will be displayed, with the title EPISODIC REVIEWS. , 2. Click one of the links under the episodic reviews title, A season's page will be displayed with the correct season title. The subtitle EPISODES is visible."
}
{
  "id": 307,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"podcast-link\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"\\\"ROTTEN ▁ TOMATOES ▁ IS ▁ WRONG\\\" ▁ (A ▁ PODCAST ▁ FROM ▁ ROTTEN ▁ TOMATOES)\" ) ) ; assertTrue ( driver . findElement ( By . className ( \"youtube-container\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[src*='spotify']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[src*='apple']\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "RT PODCAST - Display",
  "Test Description": "Verify that clicking the RT PODCAST button in the top navigation is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the RT PODCAST button in the top navigation, A page with the title \"ROTTEN TOMATOES IS WRONG\" (A PODCAST FROM ROTTEN TOMATOES) will be displayed. A youtube, spotify and apple podcasts will be presented."
}
{
  "id": 308,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"podcast-link\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"\\\"ROTTEN ▁ TOMATOES ▁ IS ▁ WRONG\\\" ▁ (A ▁ PODCAST ▁ FROM ▁ ROTTEN ▁ TOMATOES)\" ) ) ; element = driver . findElement ( By . cssSelector ( \".youtube-container ▁ iframe\" ) ) ; driver . switchTo ( ) . frame ( element ) ; driver . findElement ( By . cssSelector ( \".ytp-large-play-button\" ) ) . click ( ) ; By locator = By . className ( \"ytp-time-current\" ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , \"0:00\" ) ) ) ; } ",
  "Test Name": "RT PODCAST - Play Youtube Video",
  "Test Description": "Verify the youtube play function in the rotten tomatoes podcast page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the RT PODCAST button in the top navigation, A page with the title \"ROTTEN TOMATOES IS WRONG\" (A PODCAST FROM ROTTEN TOMATOES) will be displayed., 2. Click the play button in the youtube video, The video will start playing"
}
{
  "id": 309,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"podcast-link\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"\\\"ROTTEN ▁ TOMATOES ▁ IS ▁ WRONG\\\" ▁ (A ▁ PODCAST ▁ FROM ▁ ROTTEN ▁ TOMATOES)\" ) ) ; element = driver . findElement ( By . cssSelector ( \"iframe[src*='spotify']\" ) ) ; driver . switchTo ( ) . frame ( element ) ; driver . findElement ( By . id ( \"play-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeToBe ( By . id ( \"progress-bar-slider\" ) , \"style\" , \"left: ▁ 0%;\" ) ) ) ; } ",
  "Test Name": "RT PODCAST - Play Spotify",
  "Test Description": "Verify the Spotify play function in the rotten tomatoes podcast page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the RT PODCAST button in the top navigation, A page with the title \"ROTTEN TOMATOES IS WRONG\" (A PODCAST FROM ROTTEN TOMATOES) will be displayed., 2. Click the play button in the spotify frame, The podcast will start playing"
}
{
  "id": 310,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"podcast-link\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"\\\"ROTTEN ▁ TOMATOES ▁ IS ▁ WRONG\\\" ▁ (A ▁ PODCAST ▁ FROM ▁ ROTTEN ▁ TOMATOES)\" ) ) ; driver . findElement ( By . linkText ( \"On ▁ an ▁ Apple ▁ device? ▁ Follow ▁ Rotten ▁ Tomatoes ▁ on ▁ Apple ▁ News\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"This ▁ channel ▁ is ▁ only ▁ available ▁ in ▁ Apple ▁ News.\" ) ) ; } ",
  "Test Name": "RT PODCAST - Apple News",
  "Test Description": "Verify the Apple News link in the rotten tomatoes podcast page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the RT PODCAST button in the top navigation, A page with the title \"ROTTEN TOMATOES IS WRONG\" (A PODCAST FROM ROTTEN TOMATOES) will be displayed., 2. Click the link with the text \"On an Apple device? Follow Rotten Tomatoes on Apple News\", In a new tab, a page with the title This channel is only available in Apple News. will be displayed"
}
{
  "id": 311,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"podcast-link\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"\\\"ROTTEN ▁ TOMATOES ▁ IS ▁ WRONG\\\" ▁ (A ▁ PODCAST ▁ FROM ▁ ROTTEN ▁ TOMATOES)\" ) ) ; List < WebElement > episodes = driver . findElements ( By . cssSelector ( \".articleContentBody ▁ ul ▁ li\" ) ) ; for ( WebElement episodeLine : episodes ) { assertTrue ( episodeLine . getText ( ) . contains ( \"“Rotten ▁ Tomatoes ▁ Is ▁ Wrong”\" ) ) ; } element = episodes . get ( 3 ) . findElement ( By . tagName ( \"a\" ) ) ; String linkText = element . getText ( ) . replaceAll ( \"[“”]\" , \"\\\"\" ) . replaceAll ( \"…\" , \"...\" ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , linkText . toUpperCase ( Locale . ROOT ) ) ) ; } ",
  "Test Name": "RT PODCAST - Episodes",
  "Test Description": "Verify the list of episodes in the rotten tomatoes podcast page is displayed and working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the RT PODCAST button in the top navigation, A page with the title \"ROTTEN TOMATOES IS WRONG\" (A PODCAST FROM ROTTEN TOMATOES) will be displayed. There is a list of Episodes of “Rotten Tomatoes Is Wrong”, 2. Click the fourth link in the list, A page with the title of the clicked link will be presented."
}
{
  "id": 312,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"podcast-link\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"\\\"ROTTEN ▁ TOMATOES ▁ IS ▁ WRONG\\\" ▁ (A ▁ PODCAST ▁ FROM ▁ ROTTEN ▁ TOMATOES)\" ) ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Tag ▁ Cloud']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; List < WebElement > words = element . findElements ( By . xpath ( \"./.. // a\" ) ) ; String expectedStyleSize = element . findElement ( By . xpath ( \"./.. // a[contains(@aria-label, ▁ '(1 ▁ item)')]\" ) ) . getAttribute ( \"style\" ) ; for ( WebElement wordLink : words ) { if ( wordLink . getAttribute ( \"aria-label\" ) . endsWith ( \"(1 ▁ item)\" ) ) assertEquals ( expectedStyleSize , wordLink . getAttribute ( \"style\" ) ) ; } String chosenWord = words . get ( 1 ) . getText ( ) ; String chosenWordNumberOfItems = words . get ( 1 ) . getAttribute ( \"aria-label\" ) ; chosenWordNumberOfItems = chosenWordNumberOfItems . substring ( chosenWordNumberOfItems . indexOf ( \"(\" ) + 1 , chosenWordNumberOfItems . indexOf ( \"item\" ) - 1 ) ; words . get ( 1 ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"TAG ▁ > ▁ \" + chosenWord . toUpperCase ( Locale . ROOT ) ) ) ; assertEquals ( Integer . parseInt ( chosenWordNumberOfItems ) , driver . findElements ( By . cssSelector ( \".article_body ▁ .newsItem\" ) ) . size ( ) ) ; } ",
  "Test Name": "RT PODCAST - Tag Cloud",
  "Test Description": "Verify the list of episodes in the rotten tomatoes podcast page is displayed and working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the RT PODCAST button in the top navigation, A page with the title \"ROTTEN TOMATOES IS WRONG\" (A PODCAST FROM ROTTEN TOMATOES) will be displayed. There is a tag cloud section with links. All the words that contain only one item are at the same size., 2. Click one of the words, A page with the title TAG > the chosen word will be displayed with number of articles as specified in the tag cloud element."
}
{
  "id": 313,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; List < WebElement > titleElements = element . findElements ( By . tagName ( \"h3\" ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"COLUMNS\" , \"BEST ▁ AND ▁ WORST\" , \"GUIDES\" , \"RT ▁ NEWS\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : titleElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; } ",
  "Test Name": "News Tab - Display",
  "Test Description": "Verify that after hovering over the News top tab, a menu will get opened",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the titles COLUMNS, BEST AND WORST, GUIDES, RT NEWS"
}
{
  "id": 314,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='Columns']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; List < WebElement > links = element . findElements ( By . xpath ( \"./following-sibling::* // a\" ) ) ; assertEquals ( 18 , links . size ( ) ) ; String linkText = links . get ( 0 ) . getText ( ) ; links . get ( 0 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , linkText . toUpperCase ( Locale . ROOT ) ) ) ; assertTrue ( driver . findElement ( By . cssSelector ( \".article_body ▁ .newsItem\" ) ) . isDisplayed ( ) ) ; } ",
  "Test Name": "News Tab - Columns",
  "Test Description": "Verify that the columns section in the News top tab is functioning",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the title COLUMNS. Under it there'll be 18 column links, 2. Click one of the links, A page with the link's text title will be presented, including news items"
}
{
  "id": 315,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='Best ▁ and ▁ Worst']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; List < WebElement > links = element . findElements ( By . xpath ( \"./../following-sibling::*\" ) ) ; assertEquals ( 2 , links . size ( ) ) ; String linkText = \"\" ; for ( WebElement link : links ) { linkText = link . getText ( ) ; assertTrue ( linkText . toLowerCase ( Locale . ROOT ) . endsWith ( \"ranked ▁ worst ▁ to ▁ best ▁ by ▁ tomatometer\" ) ) ; } links . get ( 1 ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( linkText . substring ( 0 , linkText . indexOf ( \"Ranked\" ) - 1 ) ) ) ; List < WebElement > seriesRatingNumber = driver . findElements ( By . className ( \"countdown-index\" ) ) ; for ( int i = 0 ; i < seriesRatingNumber . size ( ) ; i ++ ) { assertEquals ( String . valueOf ( seriesRatingNumber . size ( ) - i ) , seriesRatingNumber . get ( i ) . getText ( ) . replace ( \"#\" , \"\" ) ) ; } } ",
  "Test Name": "News Tab - Best and Worst",
  "Test Description": "Verify that the best and worst items from the News top tab is functioning",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the title BEST AND WORST and two options that end with the text \"Ranked Worst to Best by Tomatometer\", 2. Click one of the links, A page with ranking to the clicked link will be presented. The ranking will be from n to 1"
}
{
  "id": 316,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='Guides']/../following-sibling::a\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; assertEquals ( \"Fall ▁ TV\" , element . getText ( ) ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Fall ▁ TV\" ) ) ; List < WebElement > navigationElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".hub-subnav-bar ▁ a\" ) ) ) ; List < String > expectedTitles = new ArrayList < > ( Arrays . asList ( \"Home\" , \"Premiere ▁ Dates\" , \"News ▁ & ▁ Guides\" , \"Renewed/Cancelled\" ) ) ; List < String > actualTitles = new ArrayList < > ( ) ; for ( WebElement element : navigationElements ) { actualTitles . add ( element . getText ( ) ) ; } assertEquals ( expectedTitles , actualTitles ) ; assertTrue ( driver . findElement ( By . cssSelector ( \"[data-ride='carousel']\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"homepage-spotlight1\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . id ( \"homepage-spotlight2\" ) ) . isDisplayed ( ) ) ; assertTrue ( driver . findElement ( By . xpath ( \" // h2[text()='More ▁ Fall ▁ TV']\" ) ) . isDisplayed ( ) ) ; driver . switchTo ( ) . frame ( driver . findElement ( By . id ( \"twitter-widget-0\" ) ) ) ; assertEquals ( \"Tweets ▁ by ▁ @RottenTomatoes\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "News Tab - Fall TV",
  "Test Description": "Verify that the Fall TV page is displayed well",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the title GUIDES, and under it the option Fall TV, 2. Click Fall TV, Fall TV page will be presented, including the navigation bar with the options Home, Premiere Dates, News & Guides, Renewed/Cancelled, a carousel, two spotlights, more fall tv and Tweets by @RottenTomatoes"
}
{
  "id": 317,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='RT ▁ News']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element = element . findElement ( By . xpath ( \"./../following-sibling::a\" ) ) ; String title = element . getText ( ) . replace ( '’' , '\\'' ) ; element . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"article_main_body\" ) ) ) ; assertEquals ( title . toUpperCase ( Locale . ROOT ) , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "News Tab - RT News",
  "Test Description": "Verify that the RT News section in the News top tab is displayed well and functions",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the title RT News, 2. Click One of the RT News links, An article with the link's text will be displayed"
}
{
  "id": 318,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='RT ▁ News']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \"./following-sibling::a[text()='View ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEWS ▁ & ▁ INTERVIEWS\" ) ) ; element = driver . findElement ( By . xpath ( \" // h2[text()='Featured ▁ on ▁ RT']/following-sibling:: */ a[contains(@class, ▁ 'articleLink')]\" ) ) ; String title = element . findElement ( By . xpath ( \". // *[contains(@class, ▁ 'title')]\" ) ) . getText ( ) . replace ( '’' , '\\'' ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"article_main_body\" ) ) ) ; assertEquals ( title . toUpperCase ( Locale . ROOT ) , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "News Tab - RT News - View All - FEATURED ON RT",
  "Test Description": "Verify that the FEATURED ON RT section in the right column of the RT News page functions",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the title RT News, 2. Click the View All link of the RT News section, A page with the title NEWS & INTERVIEWS will be displayed, 3. Click one of the articles links under FEATURED ON RT title in the right column, An article with the link's text will be displayed"
}
{
  "id": 319,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; element = driver . findElement ( By . xpath ( \" // a[text()='News']\" ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( element ) . perform ( ) ; element = element . findElement ( By . xpath ( \". // following-sibling::*[@role='menu']\" ) ) ; assertNotEquals ( \"none\" , element . getCssValue ( \"display\" ) ) ; element = element . findElement ( By . xpath ( \" // h3[text()='RT ▁ News']\" ) ) ; assertTrue ( element . isDisplayed ( ) ) ; element . findElement ( By . xpath ( \"./following-sibling::a[text()='View ▁ All']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"NEWS ▁ & ▁ INTERVIEWS\" ) ) ; element = driver . findElement ( By . xpath ( \"( // h2[text()='Top ▁ Headlines']/following-sibling::* // a)[2]\" ) ) ; String title = element . getText ( ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . id ( \"article_main_body\" ) ) ) ; assertEquals ( title . toUpperCase ( Locale . ROOT ) , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "News Tab - RT News - View All - TOP HEADLINES",
  "Test Description": "Verify that the TOP HEADLINES section in the right column of the RT News page functions",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Hover over the NEWS tab, A menu will be displayed, with the title RT News, 2. Click the View All link of the RT News section, A page with the title NEWS & INTERVIEWS will be displayed, 3. Click one of the articles links under TOP HEADLINES title in the right column, An article with the link's text will be displayed"
}
{
  "id": 320,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"location-picker__change-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"location-picker__form\" ) , \"class\" , \"hide\" ) ) ) ; driver . findElement ( By . id ( \"location-picker__search-field\" ) ) . sendKeys ( \"New ▁ York\" ) ; driver . findElement ( By . className ( \"location-picker__submit-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"location-picker__text\" ) , \"TICKETS ▁ & ▁ SHOWTIMES ▁ NEAR ▁ NEW ▁ YORK\" ) ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".movie\" ) ) ) ; } ",
  "Test Name": "Showtimes - Change Location",
  "Test Description": "Verify that changing the location in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the Change location button, location picker form will be displayed, 3. type 'New York' into the loocation picker text box, 4. Click the submit button, The location picker text will become TICKETS & SHOWTIMES NEAR NEW YORK with results presented"
}
{
  "id": 321,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"location-picker__change-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"location-picker__form\" ) , \"class\" , \"hide\" ) ) ) ; driver . findElement ( By . id ( \"location-picker__search-field\" ) ) . sendKeys ( \"10001\" ) ; driver . findElement ( By . className ( \"location-picker__submit-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"location-picker__text\" ) , \"TICKETS ▁ & ▁ SHOWTIMES ▁ NEAR ▁ 10001\" ) ) ; wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".movie\" ) ) ) ; } ",
  "Test Name": "Showtimes - Change Location - Zip",
  "Test Description": "Verify that changing the location via zip in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the Change location button, location picker form will be displayed, 3. type '10001' into the loocation picker text box, 4. Click the submit button, The location picked text will become TICKETS & SHOWTIMES NEAR 10001 with results presented"
}
{
  "id": 322,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; element = driver . findElement ( By . cssSelector ( \"#moviesFilters__container ▁ li:nth-of-type(2) ▁ .showtimes-filters__checkbox\" ) ) ; String expectedTitle = element . findElement ( By . xpath ( \"./..\" ) ) . getText ( ) ; element . click ( ) ; element = wait . until ( ExpectedConditions . numberOfElementsToBe ( By . className ( \"movie_title\" ) , 1 ) ) . get ( 0 ) ; String movieTitle = element . getText ( ) ; assertTrue ( expectedTitle . toUpperCase ( Locale . ROOT ) . startsWith ( movieTitle ) ) ; String tomatometerScore = driver . findElement ( By . className ( \"tmeterpanel\" ) ) . getText ( ) . replace ( \"%\" , \"\" ) ; String audienceScore = driver . findElement ( By . className ( \"audiencepanel\" ) ) . getText ( ) . replace ( \"%\" , \"\" ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-qa='movie-main-column']\" ) ) ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , movieTitle ) ) ; element = driver . findElement ( By . tagName ( \"score-board\" ) ) ; assertEquals ( tomatometerScore , element . getAttribute ( \"tomatometerscore\" ) ) ; assertEquals ( audienceScore , element . getAttribute ( \"audiencescore\" ) ) ; } ",
  "Test Name": "Showtimes - Select Movies",
  "Test Description": "Verify that selecting a movie from the movie filters in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click one of the checkboxes in the movie filters section, under the title Featured Picks, The page will display that movie only, 3. Click the movie's name in the results, The movie page will be displayed, with the right title and right tomatometer and audience scores"
}
{
  "id": 323,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"moviesFilters__dropdown-button\" ) ) . click ( ) ; assertNotEquals ( \"none\" , driver . findElement ( By . id ( \"moviesFilters__dropdown\" ) ) . getCssValue ( \"display\" ) ) ; element = driver . findElement ( By . className ( \"showtimes-filters__additional-item\" ) ) ; String expectedTitle = element . getText ( ) ; element . click ( ) ; element = wait . until ( ExpectedConditions . numberOfElementsToBe ( By . className ( \"movie_title\" ) , 1 ) ) . get ( 0 ) ; String movieTitle = element . getText ( ) ; assertTrue ( expectedTitle . toUpperCase ( Locale . ROOT ) . startsWith ( movieTitle ) ) ; String tomatometerScore = driver . findElement ( By . className ( \"tmeterpanel\" ) ) . getText ( ) . replace ( \"%\" , \"\" ) ; String audienceScore = driver . findElement ( By . className ( \"audiencepanel\" ) ) . getText ( ) . replace ( \"%\" , \"\" ) ; element . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[data-qa='movie-main-column']\" ) ) ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , movieTitle ) ) ; element = driver . findElement ( By . tagName ( \"score-board\" ) ) ; assertEquals ( tomatometerScore , element . getAttribute ( \"tomatometerscore\" ) ) ; assertEquals ( audienceScore , element . getAttribute ( \"audiencescore\" ) ) ; } ",
  "Test Name": "Showtimes - Select Another Movie Dropdown",
  "Test Description": "Verify that selecting a movie from thadditional movies dropdown in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the additional movies dropdown, The dropdown will get opened, 3. Choose one of the movies from the dropdown, The page will display that movie only, 4. Click the movie's name in the results, The movie page will be displayed, with the right title and right tomatometer and audience scores"
}
{
  "id": 324,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"location-picker__change-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"location-picker__form\" ) , \"class\" , \"hide\" ) ) ) ; element = driver . findElement ( By . id ( \"location-picker__search-field\" ) ) ; element . sendKeys ( \"New ▁ York\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"location-picker__text\" ) , \"TICKETS ▁ & ▁ SHOWTIMES ▁ NEAR ▁ NEW ▁ YORK\" ) ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"#theatersList__nearby ▁ .showtimes-filters__checkbox\" ) ) ) ; String expectedTitle = element . findElement ( By . xpath ( \"./..\" ) ) . getText ( ) ; element . click ( ) ; element = wait . until ( ExpectedConditions . numberOfElementsToBe ( By . className ( \"theater-header__title\" ) , 1 ) ) . get ( 0 ) ; assertEquals ( expectedTitle . toUpperCase ( Locale . ROOT ) , element . getText ( ) ) ; } ",
  "Test Name": "Showtimes - Select Theaters",
  "Test Description": "Verify that selecting a theater from the theaters list in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the Change location button, location picker form will be displayed, 3. Search 'New York' in the loocation picker, The location picker text will become TICKETS & SHOWTIMES NEAR NEW YORK, 4. Click one of the checkboxes in the theaters list, The page will display movies only from the selected theater"
}
{
  "id": 325,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"location-picker__change-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"location-picker__form\" ) , \"class\" , \"hide\" ) ) ) ; element = driver . findElement ( By . id ( \"location-picker__search-field\" ) ) ; element . sendKeys ( \"New ▁ York\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"location-picker__text\" ) , \"TICKETS ▁ & ▁ SHOWTIMES ▁ NEAR ▁ NEW ▁ YORK\" ) ) ; int originalNumberOfResults = driver . findElements ( By . cssSelector ( \".movie\" ) ) . size ( ) ; driver . findElement ( By . id ( \"theatersList__loadMoreButton\" ) ) . click ( ) ; wait . until ( ExpectedConditions . numberOfElementsToBeMoreThan ( By . cssSelector ( \".movie\" ) , originalNumberOfResults ) ) ; } ",
  "Test Name": "Showtimes - Load More",
  "Test Description": "Verify that the Load More button in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the Change location button, location picker form will be displayed, 3. Search 'New York' in the loocation picker, The location picker text will become TICKETS & SHOWTIMES NEAR NEW YORK, 4. Click the Load More button, The page will display more movies than it did before"
}
{
  "id": 326,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"location-picker__change-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"location-picker__form\" ) , \"class\" , \"hide\" ) ) ) ; element = driver . findElement ( By . id ( \"location-picker__search-field\" ) ) ; element . sendKeys ( \"New ▁ York\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"location-picker__text\" ) , \"TICKETS ▁ & ▁ SHOWTIMES ▁ NEAR ▁ NEW ▁ YORK\" ) ) ; By locator = By . cssSelector ( \".showtimes-calendar__item.active ▁ .day-of-month\" ) ; String currentActiveDate = driver . findElement ( locator ) . getText ( ) ; List < WebElement > originalMoviesElements = driver . findElements ( By . cssSelector ( \".movie__title\" ) ) ; List < String > originalTitles = new ArrayList < > ( ) ; for ( WebElement title : originalMoviesElements ) { originalTitles . add ( title . getText ( ) ) ; } driver . findElement ( By . cssSelector ( \".showtimes-calendar__item:not(.active)\" ) ) . click ( ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . className ( \"showtimesList--loading\" ) ) ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . textToBe ( locator , currentActiveDate ) ) ) ; List < WebElement > newMoviesElements = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( By . cssSelector ( \".movie__title\" ) ) ) ; List < String > newTitles = new ArrayList < > ( ) ; for ( WebElement title : newMoviesElements ) { newTitles . add ( title . getText ( ) ) ; } assertNotEquals ( originalTitles , newTitles ) ; } ",
  "Test Name": "Showtimes - Change Date",
  "Test Description": "Verify that changing the date using the showtimes calendar in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the Change location button, location picker form will be displayed, 3. Search 'New York' in the loocation picker, The location picker text will become TICKETS & SHOWTIMES NEAR NEW YORK, 4. Click one of the dates, that isn't today , The chosen date will be selected and the presented movies will reload and some will change"
}
{
  "id": 327,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; By locator = By . cssSelector ( \".showtimes-calendar ▁ .showtimes-calendar__item.slick-active ▁ .day-of-month\" ) ; List < WebElement > originalDates = driver . findElements ( locator ) ; List < String > originalDatesText = new ArrayList < > ( ) ; for ( WebElement date : originalDates ) { originalDatesText . add ( date . getText ( ) ) ; } driver . findElement ( By . cssSelector ( \"[data-qa='carousel-right-btn']\" ) ) . click ( ) ; List < WebElement > newDates = wait . until ( ExpectedConditions . presenceOfAllElementsLocatedBy ( locator ) ) ; List < String > newDatesText = new ArrayList < > ( ) ; for ( WebElement title : newDates ) { newDatesText . add ( title . getText ( ) ) ; } for ( int i = 0 ; i < newDatesText . size ( ) - 1 ; i ++ ) { assertEquals ( originalDatesText . get ( i + 1 ) , newDatesText . get ( i ) ) ; } String [ ] originalFinalDateArr = originalDatesText . get ( 6 ) . split ( \" ▁ \" ) ; String originalFinalDateMonth = originalFinalDateArr [ 0 ] ; int originalFinalDateDay = Integer . parseInt ( originalFinalDateArr [ 1 ] ) ; assertEquals ( originalFinalDateMonth + \" ▁ \" + ( originalFinalDateDay + 1 ) , newDatesText . get ( 6 ) ) ; } ",
  "Test Name": "Showtimes - Other Dates ",
  "Test Description": "Verify that clicking the right button in the showtimes calendar in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the right button in the showtimes calendar, The displayed dates will move by one and continue from right after the initially displayed ones"
}
{
  "id": 328,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . xpath ( \" // a[text()='Showtimes']\" ) ) . click ( ) ; WebDriverWait wait = new WebDriverWait ( driver , 10 ) ; wait . until ( ExpectedConditions . titleContains ( \"Movie ▁ Showtimes\" ) ) ; driver . findElement ( By . id ( \"location-picker__change-button\" ) ) . click ( ) ; wait . until ( ExpectedConditions . not ( ExpectedConditions . attributeContains ( By . id ( \"location-picker__form\" ) , \"class\" , \"hide\" ) ) ) ; element = driver . findElement ( By . id ( \"location-picker__search-field\" ) ) ; element . sendKeys ( \"New ▁ York\" ) ; element . submit ( ) ; wait . until ( ExpectedConditions . textToBe ( By . className ( \"location-picker__text\" ) , \"TICKETS ▁ & ▁ SHOWTIMES ▁ NEAR ▁ NEW ▁ YORK\" ) ) ; String currentActiveDate = driver . findElement ( By . cssSelector ( \".showtimes-calendar__item.active ▁ .day-of-month\" ) ) . getText ( ) ; element = wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \".movie\" ) ) ) ; String title = element . findElement ( By . className ( \"movie__title\" ) ) . getText ( ) ; element = element . findElement ( By . cssSelector ( \".btn-showtime--active\" ) ) ; String time = element . getText ( ) . toUpperCase ( Locale . ROOT ) ; element . click ( ) ; wait . until ( ExpectedConditions . textToBe ( By . tagName ( \"h1\" ) , \"Buy ▁ Tickets\" ) ) ; String actualTitle = driver . findElement ( By . cssSelector ( \"[data-test='movie-title']\" ) ) . getText ( ) ; assertEquals ( title , actualTitle . substring ( 0 , actualTitle . indexOf ( \"(\" ) - 1 ) ) ; String dayDateTimeLine = driver . findElement ( By . cssSelector ( \"[data-test='show-date-time']\" ) ) . getText ( ) ; String dateAndTime = dayDateTimeLine . substring ( dayDateTimeLine . indexOf ( \",\" ) + 2 ) . toUpperCase ( Locale . ROOT ) ; dateAndTime = dateAndTime . substring ( 0 , dateAndTime . length ( ) - 3 ) + dateAndTime . substring ( dateAndTime . length ( ) - 2 ) ; assertEquals ( currentActiveDate + \" ▁ AT ▁ \" + time , dateAndTime ) ; } ",
  "Test Name": "Showtimes - Choose showtime",
  "Test Description": "Verify that clicking one of the showtimes of a movie in the Showtimes page is working",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click Showtimes in the top navigation, Movie Showtimes page will be displayed, 2. Click the Change location button, location picker form will be displayed, 3. Search 'New York' in the loocation picker, The location picker text will become TICKETS & SHOWTIMES NEAR NEW YORK, 4. Click one of the show times of the first displayed movie, A page with the title Buy Tickets will be displayed, presenting the first movie from the previous page, at the chosen date and time"
}
{
  "id": 329,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"header-facebook-social-link\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . attributeToBe ( By . tagName ( \"html\" ) , \"id\" , \"facebook\" ) ) ; assertEquals ( \"Rotten ▁ Tomatoes\" , driver . findElement ( By . tagName ( \"h1\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Facebook",
  "Test Description": "Verify that clicking the facebook logo at the top of the home page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the facebook logo at the top of the page, A facebook page will get opened in a new tab, presenting the Rotten Tomatoes page"
}
{
  "id": 330,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"header-snapchat-social-link\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . titleIs ( \"Snapchat\" ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . xpath ( \" // *[text()='rottentomatoes']\" ) ) ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . cssSelector ( \"[alt='Snapcode']\" ) ) ) ; } ",
  "Test Name": "Snapchat",
  "Test Description": "Verify that clicking the snapchat logo at the top of the home page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the snapchat logo at the top of the page, A snapchat page will get opened in a new tab, presenting the rottentomatoes' snapcode"
}
{
  "id": 331,
  "website": "RottenTomatoes",
  "code": " void function ( ) { driver . get ( \"https: // www.rottentomatoes.com/\" ) ; driver . findElement ( By . id ( \"header-youtube-social-link\" ) ) . click ( ) ; ArrayList < String > tabs = new ArrayList < > ( driver . getWindowHandles ( ) ) ; driver . switchTo ( ) . window ( tabs . get ( 1 ) ) ; WebDriverWait wait = new WebDriverWait ( driver , 100 ) ; wait . until ( ExpectedConditions . presenceOfElementLocated ( By . tagName ( \"yt-icon\" ) ) ) ; assertEquals ( \"Rotten ▁ Tomatoes\" , driver . findElement ( By . cssSelector ( \".style-scope.ytd-channel-name\" ) ) . getText ( ) ) ; } ",
  "Test Name": "Youtube",
  "Test Description": "Verify that clicking the youtube logo at the top of the home page works",
  "Preconditions": "1. Navigate to https://www.rottentomatoes.com/",
  "Steps": "1. Click the youtube logo at the top of the page, A youtube page will get opened in a new tab, presenting the Rotten Tomatoes page."
}
